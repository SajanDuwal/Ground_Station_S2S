
Ground_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c038  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  0800c178  0800c178  0001c178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c964  0800c964  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800c964  0800c964  0001c964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c96c  0800c96c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c96c  0800c96c  0001c96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c970  0800c970  0001c970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800c974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a5c  20000060  0800c9d4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000abc  0800c9d4  00020abc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000223a1  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e1d  00000000  00000000  0004246e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f18  00000000  00000000  00047290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017ae  00000000  00000000  000491a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224ec  00000000  00000000  0004a956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002309d  00000000  00000000  0006ce42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c47b9  00000000  00000000  0008fedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000857c  00000000  00000000  00154698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0015cc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c160 	.word	0x0800c160

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	0800c160 	.word	0x0800c160

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <getHDLCPacket>:
extern uint8_t temp_tx_buffer[100];

uint8_t ax_buffer[100] = { 0 };
uint8_t ax_buff_stuffed[100] = { 0 };

void getHDLCPacket(uint8_t *data, uint8_t data_len) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	70fb      	strb	r3, [r7, #3]
//		myDebug("%02x ", data[j]);
//	}
//	myDebug("\r\n");
//	myDebug("length of stuffed_packet: %d\r\n", data_len);

	uint16_t crc = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	81fb      	strh	r3, [r7, #14]
	crc = calculateCRC_CCITT_AX25(data, data_len);
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	4619      	mov	r1, r3
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 fa43 	bl	80009bc <calculateCRC_CCITT_AX25>
 8000536:	4603      	mov	r3, r0
 8000538:	81fb      	strh	r3, [r7, #14]

	temp_tx_buffer[0] = 0x7e;
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <getHDLCPacket+0xa8>)
 800053c:	227e      	movs	r2, #126	; 0x7e
 800053e:	701a      	strb	r2, [r3, #0]

	int i = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	e00e      	b.n	8000568 <getHDLCPacket+0x4c>
		temp_tx_buffer[i] = data[k];
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4413      	add	r3, r2
 8000550:	7819      	ldrb	r1, [r3, #0]
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <getHDLCPacket+0xa8>)
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	4413      	add	r3, r2
 8000558:	460a      	mov	r2, r1
 800055a:	701a      	strb	r2, [r3, #0]
		i++;
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3301      	adds	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	3301      	adds	r3, #1
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	693a      	ldr	r2, [r7, #16]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbec      	blt.n	800054a <getHDLCPacket+0x2e>
	}

	// Store CRC result in the packet array (from packet[1] to end of for loop)
	temp_tx_buffer[i] = (crc >> 8) & 0xFF; // Most significant byte
 8000570:	89fb      	ldrh	r3, [r7, #14]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	b2d9      	uxtb	r1, r3
 8000578:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <getHDLCPacket+0xa8>)
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	4413      	add	r3, r2
 800057e:	460a      	mov	r2, r1
 8000580:	701a      	strb	r2, [r3, #0]
	i++;
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	3301      	adds	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
	temp_tx_buffer[i] = crc & 0xFF;        // Least significant byte
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	b2d9      	uxtb	r1, r3
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <getHDLCPacket+0xa8>)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	4413      	add	r3, r2
 8000592:	460a      	mov	r2, r1
 8000594:	701a      	strb	r2, [r3, #0]
	i++;
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3301      	adds	r3, #1
 800059a:	617b      	str	r3, [r7, #20]

	temp_tx_buffer[i] = 0x7e;
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <getHDLCPacket+0xa8>)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	4413      	add	r3, r2
 80005a2:	227e      	movs	r2, #126	; 0x7e
 80005a4:	701a      	strb	r2, [r3, #0]
//		myDebug("%02x ", temp_tx_buffer[j]);
//	}
//	myDebug("\r\n");
//	myDebug("size of tx_buffer = %d\r\n", i + 1);

	memset(ax_buffer, '\0', sizeof(ax_buffer));
 80005a6:	2264      	movs	r2, #100	; 0x64
 80005a8:	2100      	movs	r1, #0
 80005aa:	4807      	ldr	r0, [pc, #28]	; (80005c8 <getHDLCPacket+0xac>)
 80005ac:	f00b f956 	bl	800b85c <memset>
	memset(ax_buff_stuffed, '\0', sizeof(ax_buff_stuffed));
 80005b0:	2264      	movs	r2, #100	; 0x64
 80005b2:	2100      	movs	r1, #0
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <getHDLCPacket+0xb0>)
 80005b6:	f00b f951 	bl	800b85c <memset>

}
 80005ba:	bf00      	nop
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000388 	.word	0x20000388
 80005c8:	2000007c 	.word	0x2000007c
 80005cc:	200000e0 	.word	0x200000e0

080005d0 <getAX25Packet>:

void getAX25Packet(uint8_t *infoField, uint8_t size) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]

	//destination field   9N2SI -0
	ax_buffer[0] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 80005dc:	4b2f      	ldr	r3, [pc, #188]	; (800069c <getAX25Packet+0xcc>)
 80005de:	2272      	movs	r2, #114	; 0x72
 80005e0:	701a      	strb	r2, [r3, #0]
	ax_buffer[1] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 80005e2:	4b2e      	ldr	r3, [pc, #184]	; (800069c <getAX25Packet+0xcc>)
 80005e4:	229c      	movs	r2, #156	; 0x9c
 80005e6:	705a      	strb	r2, [r3, #1]
	ax_buffer[2] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 80005e8:	4b2c      	ldr	r3, [pc, #176]	; (800069c <getAX25Packet+0xcc>)
 80005ea:	2264      	movs	r2, #100	; 0x64
 80005ec:	709a      	strb	r2, [r3, #2]
	ax_buffer[3] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 80005ee:	4b2b      	ldr	r3, [pc, #172]	; (800069c <getAX25Packet+0xcc>)
 80005f0:	22a6      	movs	r2, #166	; 0xa6
 80005f2:	70da      	strb	r2, [r3, #3]
	ax_buffer[4] = 0x92; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 80005f4:	4b29      	ldr	r3, [pc, #164]	; (800069c <getAX25Packet+0xcc>)
 80005f6:	2292      	movs	r2, #146	; 0x92
 80005f8:	711a      	strb	r2, [r3, #4]
	ax_buffer[5] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 80005fa:	4b28      	ldr	r3, [pc, #160]	; (800069c <getAX25Packet+0xcc>)
 80005fc:	2240      	movs	r2, #64	; 0x40
 80005fe:	715a      	strb	r2, [r3, #5]
	ax_buffer[6] = 0xE0; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 8000600:	4b26      	ldr	r3, [pc, #152]	; (800069c <getAX25Packet+0xcc>)
 8000602:	22e0      	movs	r2, #224	; 0xe0
 8000604:	719a      	strb	r2, [r3, #6]

	//source field   9N2SI -0
	ax_buffer[7] = infoField[13]; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	7b5a      	ldrb	r2, [r3, #13]
 800060a:	4b24      	ldr	r3, [pc, #144]	; (800069c <getAX25Packet+0xcc>)
 800060c:	71da      	strb	r2, [r3, #7]
	ax_buffer[8] = infoField[14]; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	7b9a      	ldrb	r2, [r3, #14]
 8000612:	4b22      	ldr	r3, [pc, #136]	; (800069c <getAX25Packet+0xcc>)
 8000614:	721a      	strb	r2, [r3, #8]
	ax_buffer[9] = infoField[15]; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	7bda      	ldrb	r2, [r3, #15]
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <getAX25Packet+0xcc>)
 800061c:	725a      	strb	r2, [r3, #9]
	ax_buffer[10] = infoField[16]; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	7c1a      	ldrb	r2, [r3, #16]
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <getAX25Packet+0xcc>)
 8000624:	729a      	strb	r2, [r3, #10]
	ax_buffer[11] = infoField[17]; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	7c5a      	ldrb	r2, [r3, #17]
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <getAX25Packet+0xcc>)
 800062c:	72da      	strb	r2, [r3, #11]
	ax_buffer[12] = infoField[18]; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	7c9a      	ldrb	r2, [r3, #18]
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <getAX25Packet+0xcc>)
 8000634:	731a      	strb	r2, [r3, #12]
	ax_buffer[13] = infoField[19]; //	0b011SSID1, SSID->0000 and LSB is set to 1 if this is the last address, HEX->0x61
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7cda      	ldrb	r2, [r3, #19]
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <getAX25Packet+0xcc>)
 800063c:	735a      	strb	r2, [r3, #13]

	//control bit
	ax_buffer[14] = 0x03; //  Unnumbered Information Frame, AX.25 is always 0b00000011 i.e 0x03 in HEX
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <getAX25Packet+0xcc>)
 8000640:	2203      	movs	r2, #3
 8000642:	739a      	strb	r2, [r3, #14]

	//protocol identifier
	ax_buffer[15] = 0xF0; //	No Layer-3 Implemented so, 0b11110000 i.e 0xF0 in HEX
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <getAX25Packet+0xcc>)
 8000646:	22f0      	movs	r2, #240	; 0xf0
 8000648:	73da      	strb	r2, [r3, #15]

	int i = 16;
 800064a:	2310      	movs	r3, #16
 800064c:	617b      	str	r3, [r7, #20]

	for (int k = 0; k < size-7; k++) {
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	e00e      	b.n	8000672 <getAX25Packet+0xa2>
		ax_buffer[i] = infoField[k];
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	7819      	ldrb	r1, [r3, #0]
 800065c:	4a0f      	ldr	r2, [pc, #60]	; (800069c <getAX25Packet+0xcc>)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	4413      	add	r3, r2
 8000662:	460a      	mov	r2, r1
 8000664:	701a      	strb	r2, [r3, #0]
		i++;
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	3301      	adds	r3, #1
 800066a:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < size-7; k++) {
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	3301      	adds	r3, #1
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	78fb      	ldrb	r3, [r7, #3]
 8000674:	3b07      	subs	r3, #7
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	429a      	cmp	r2, r3
 800067a:	dbeb      	blt.n	8000654 <getAX25Packet+0x84>
//		myDebug("%02x ", ax_buffer[j]);
//	}
//	myDebug("\r\n");

	// Bit Stuffing
	int stuffed_size = bit_stuffing(ax_buffer, ax_buff_stuffed, i);
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	4908      	ldr	r1, [pc, #32]	; (80006a0 <getAX25Packet+0xd0>)
 8000680:	4806      	ldr	r0, [pc, #24]	; (800069c <getAX25Packet+0xcc>)
 8000682:	f000 fa61 	bl	8000b48 <bit_stuffing>
 8000686:	60f8      	str	r0, [r7, #12]
//		myDebug("%02x ", tem[j]);
//	}
//	myDebug("\r\n");
//	myDebug("length of de-stuffed_packet: %d\r\n", destuffed_size);

	getHDLCPacket(ax_buff_stuffed, stuffed_size);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	4804      	ldr	r0, [pc, #16]	; (80006a0 <getAX25Packet+0xd0>)
 8000690:	f7ff ff44 	bl	800051c <getHDLCPacket>
}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000007c 	.word	0x2000007c
 80006a0:	200000e0 	.word	0x200000e0

080006a4 <myDebug>:
 *      Author: sajanduwal
 */

#include "com_debug.h"

void myDebug(const char *fmt, ...) {
 80006a4:	b40f      	push	{r0, r1, r2, r3}
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	2164      	movs	r1, #100	; 0x64
 80006b8:	480a      	ldr	r0, [pc, #40]	; (80006e4 <myDebug+0x40>)
 80006ba:	f00b f88b 	bl	800b7d4 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <myDebug+0x40>)
 80006c0:	f000 f814 	bl	80006ec <bufferSize>
 80006c4:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	4905      	ldr	r1, [pc, #20]	; (80006e4 <myDebug+0x40>)
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <myDebug+0x44>)
 80006d2:	f005 ff03 	bl	80064dc <HAL_UART_Transmit>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006e0:	b004      	add	sp, #16
 80006e2:	4770      	bx	lr
 80006e4:	20000144 	.word	0x20000144
 80006e8:	200005c8 	.word	0x200005c8

080006ec <bufferSize>:

int bufferSize(char *buffer) {
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80006f8:	e002      	b.n	8000700 <bufferSize+0x14>
		i++;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f6      	bne.n	80006fa <bufferSize+0xe>
	return i;
 800070c:	68fb      	ldr	r3, [r7, #12]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <delay_us>:

void delay_us(uint32_t us) {
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <delay_us+0x30>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000728:	e002      	b.n	8000730 <delay_us+0x18>
		delay_counter_disp++;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3301      	adds	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <delay_us+0x30>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	d8f6      	bhi.n	800072a <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 800073c:	bf00      	nop
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000578 	.word	0x20000578

0800074c <getHDLCDigipeaterPacket>:
uint8_t dp_buffer[150] = { 0 };
uint8_t dp_buff_stuffed[150] = { 0 };

uint8_t info_dp_packet[INFO__DP_LENGTH];

void getHDLCDigipeaterPacket(uint8_t *data, uint8_t data_len) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
//	for (int j = 0; j < data_len; j++) {
//		myDebug("%02x ", data[j]);
//	}
//	myDebug("\r\n");

	uint16_t crc = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	81fb      	strh	r3, [r7, #14]
	crc = calculateCRC_CCITT_AX25(data, data_len);
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	4619      	mov	r1, r3
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f92b 	bl	80009bc <calculateCRC_CCITT_AX25>
 8000766:	4603      	mov	r3, r0
 8000768:	81fb      	strh	r3, [r7, #14]

	temp_tx_dp_buffer[0] = 0x7e;
 800076a:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <getHDLCDigipeaterPacket+0xa8>)
 800076c:	227e      	movs	r2, #126	; 0x7e
 800076e:	701a      	strb	r2, [r3, #0]

	int i = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	e00e      	b.n	8000798 <getHDLCDigipeaterPacket+0x4c>
		temp_tx_dp_buffer[i] = data[k];
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	4413      	add	r3, r2
 8000780:	7819      	ldrb	r1, [r3, #0]
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <getHDLCDigipeaterPacket+0xa8>)
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	4413      	add	r3, r2
 8000788:	460a      	mov	r2, r1
 800078a:	701a      	strb	r2, [r3, #0]
		i++;
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	3301      	adds	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	3301      	adds	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	429a      	cmp	r2, r3
 800079e:	dbec      	blt.n	800077a <getHDLCDigipeaterPacket+0x2e>
	}

	// Store CRC result in the packet array
	temp_tx_dp_buffer[i] = (crc >> 8) & 0xFF; // Most significant byte
 80007a0:	89fb      	ldrh	r3, [r7, #14]
 80007a2:	0a1b      	lsrs	r3, r3, #8
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	b2d9      	uxtb	r1, r3
 80007a8:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <getHDLCDigipeaterPacket+0xa8>)
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	4413      	add	r3, r2
 80007ae:	460a      	mov	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
	i++;
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
	temp_tx_dp_buffer[i] = crc & 0xFF;        // Least significant byte
 80007b8:	89fb      	ldrh	r3, [r7, #14]
 80007ba:	b2d9      	uxtb	r1, r3
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <getHDLCDigipeaterPacket+0xa8>)
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	4413      	add	r3, r2
 80007c2:	460a      	mov	r2, r1
 80007c4:	701a      	strb	r2, [r3, #0]
	i++;
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	3301      	adds	r3, #1
 80007ca:	617b      	str	r3, [r7, #20]

	temp_tx_dp_buffer[i] = 0x7e;
 80007cc:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <getHDLCDigipeaterPacket+0xa8>)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	4413      	add	r3, r2
 80007d2:	227e      	movs	r2, #126	; 0x7e
 80007d4:	701a      	strb	r2, [r3, #0]
//	}
//	myDebug("\r\n");

	//..

	memset(dp_buffer, '\0', sizeof(dp_buffer));
 80007d6:	2296      	movs	r2, #150	; 0x96
 80007d8:	2100      	movs	r1, #0
 80007da:	4807      	ldr	r0, [pc, #28]	; (80007f8 <getHDLCDigipeaterPacket+0xac>)
 80007dc:	f00b f83e 	bl	800b85c <memset>
	memset(dp_buff_stuffed, '\0', sizeof(dp_buff_stuffed));
 80007e0:	2296      	movs	r2, #150	; 0x96
 80007e2:	2100      	movs	r1, #0
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <getHDLCDigipeaterPacket+0xb0>)
 80007e6:	f00b f839 	bl	800b85c <memset>
}
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000454 	.word	0x20000454
 80007f8:	200001a8 	.word	0x200001a8
 80007fc:	20000240 	.word	0x20000240

08000800 <getDigipeaterPacket>:

void getDigipeaterPacket(uint8_t *OBC_digipeater_datad_Field, uint8_t size_of_msg_field) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]

	//destination field
	dp_buffer[0] = OBC_digipeater_datad_Field[3]; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	78da      	ldrb	r2, [r3, #3]
 8000810:	4b4f      	ldr	r3, [pc, #316]	; (8000950 <getDigipeaterPacket+0x150>)
 8000812:	701a      	strb	r2, [r3, #0]
	dp_buffer[1] = OBC_digipeater_datad_Field[4]; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	791a      	ldrb	r2, [r3, #4]
 8000818:	4b4d      	ldr	r3, [pc, #308]	; (8000950 <getDigipeaterPacket+0x150>)
 800081a:	705a      	strb	r2, [r3, #1]
	dp_buffer[2] = OBC_digipeater_datad_Field[5]; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	795a      	ldrb	r2, [r3, #5]
 8000820:	4b4b      	ldr	r3, [pc, #300]	; (8000950 <getDigipeaterPacket+0x150>)
 8000822:	709a      	strb	r2, [r3, #2]
	dp_buffer[3] = OBC_digipeater_datad_Field[6]; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	799a      	ldrb	r2, [r3, #6]
 8000828:	4b49      	ldr	r3, [pc, #292]	; (8000950 <getDigipeaterPacket+0x150>)
 800082a:	70da      	strb	r2, [r3, #3]
	dp_buffer[4] = OBC_digipeater_datad_Field[7]; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	79da      	ldrb	r2, [r3, #7]
 8000830:	4b47      	ldr	r3, [pc, #284]	; (8000950 <getDigipeaterPacket+0x150>)
 8000832:	711a      	strb	r2, [r3, #4]
	dp_buffer[5] = OBC_digipeater_datad_Field[8]; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7a1a      	ldrb	r2, [r3, #8]
 8000838:	4b45      	ldr	r3, [pc, #276]	; (8000950 <getDigipeaterPacket+0x150>)
 800083a:	715a      	strb	r2, [r3, #5]
	dp_buffer[6] = OBC_digipeater_datad_Field[9]; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7a5a      	ldrb	r2, [r3, #9]
 8000840:	4b43      	ldr	r3, [pc, #268]	; (8000950 <getDigipeaterPacket+0x150>)
 8000842:	719a      	strb	r2, [r3, #6]

	//source field   9N2SI -0
	dp_buffer[7] = OBC_digipeater_datad_Field[10]; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7a9a      	ldrb	r2, [r3, #10]
 8000848:	4b41      	ldr	r3, [pc, #260]	; (8000950 <getDigipeaterPacket+0x150>)
 800084a:	71da      	strb	r2, [r3, #7]
	dp_buffer[8] = OBC_digipeater_datad_Field[11]; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7ada      	ldrb	r2, [r3, #11]
 8000850:	4b3f      	ldr	r3, [pc, #252]	; (8000950 <getDigipeaterPacket+0x150>)
 8000852:	721a      	strb	r2, [r3, #8]
	dp_buffer[9] = OBC_digipeater_datad_Field[12]; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7b1a      	ldrb	r2, [r3, #12]
 8000858:	4b3d      	ldr	r3, [pc, #244]	; (8000950 <getDigipeaterPacket+0x150>)
 800085a:	725a      	strb	r2, [r3, #9]
	dp_buffer[10] = OBC_digipeater_datad_Field[13]; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7b5a      	ldrb	r2, [r3, #13]
 8000860:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <getDigipeaterPacket+0x150>)
 8000862:	729a      	strb	r2, [r3, #10]
	dp_buffer[11] = OBC_digipeater_datad_Field[14]; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7b9a      	ldrb	r2, [r3, #14]
 8000868:	4b39      	ldr	r3, [pc, #228]	; (8000950 <getDigipeaterPacket+0x150>)
 800086a:	72da      	strb	r2, [r3, #11]
	dp_buffer[12] = OBC_digipeater_datad_Field[15]; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	7bda      	ldrb	r2, [r3, #15]
 8000870:	4b37      	ldr	r3, [pc, #220]	; (8000950 <getDigipeaterPacket+0x150>)
 8000872:	731a      	strb	r2, [r3, #12]
	dp_buffer[13] = OBC_digipeater_datad_Field[16]; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	7c1a      	ldrb	r2, [r3, #16]
 8000878:	4b35      	ldr	r3, [pc, #212]	; (8000950 <getDigipeaterPacket+0x150>)
 800087a:	735a      	strb	r2, [r3, #13]

	// dp initiator call sign
	dp_buffer[14] = OBC_digipeater_datad_Field[17]; //
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7c5a      	ldrb	r2, [r3, #17]
 8000880:	4b33      	ldr	r3, [pc, #204]	; (8000950 <getDigipeaterPacket+0x150>)
 8000882:	739a      	strb	r2, [r3, #14]
	dp_buffer[15] = OBC_digipeater_datad_Field[18]; //
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7c9a      	ldrb	r2, [r3, #18]
 8000888:	4b31      	ldr	r3, [pc, #196]	; (8000950 <getDigipeaterPacket+0x150>)
 800088a:	73da      	strb	r2, [r3, #15]
	dp_buffer[16] = OBC_digipeater_datad_Field[19]; //
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	7cda      	ldrb	r2, [r3, #19]
 8000890:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <getDigipeaterPacket+0x150>)
 8000892:	741a      	strb	r2, [r3, #16]
	dp_buffer[17] = OBC_digipeater_datad_Field[20]; //
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7d1a      	ldrb	r2, [r3, #20]
 8000898:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <getDigipeaterPacket+0x150>)
 800089a:	745a      	strb	r2, [r3, #17]
	dp_buffer[18] = OBC_digipeater_datad_Field[21]; //
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7d5a      	ldrb	r2, [r3, #21]
 80008a0:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <getDigipeaterPacket+0x150>)
 80008a2:	749a      	strb	r2, [r3, #18]
	dp_buffer[19] = OBC_digipeater_datad_Field[22]; //
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	7d9a      	ldrb	r2, [r3, #22]
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <getDigipeaterPacket+0x150>)
 80008aa:	74da      	strb	r2, [r3, #19]
	dp_buffer[20] = OBC_digipeater_datad_Field[23]; //
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	7dda      	ldrb	r2, [r3, #23]
 80008b0:	4b27      	ldr	r3, [pc, #156]	; (8000950 <getDigipeaterPacket+0x150>)
 80008b2:	751a      	strb	r2, [r3, #20]

	//control bit
	dp_buffer[21] = 0x03; //  Unnumbered Information Frame, AX.25 is always 0b00000011 i.e 0x03 in HEX
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <getDigipeaterPacket+0x150>)
 80008b6:	2203      	movs	r2, #3
 80008b8:	755a      	strb	r2, [r3, #21]

	//protocol identifier
	dp_buffer[22] = 0xF0; //	No Layer-3 Implemented so, 0b11110000 i.e 0xF0 in HEX
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <getDigipeaterPacket+0x150>)
 80008bc:	22f0      	movs	r2, #240	; 0xf0
 80008be:	759a      	strb	r2, [r3, #22]

	// S2S Digipeater Identity
	dp_buffer[23] = OBC_digipeater_datad_Field[0]; //	ASCII-> S
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <getDigipeaterPacket+0x150>)
 80008c6:	75da      	strb	r2, [r3, #23]
	dp_buffer[24] = OBC_digipeater_datad_Field[1]; //	ASCII-> 2
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	785a      	ldrb	r2, [r3, #1]
 80008cc:	4b20      	ldr	r3, [pc, #128]	; (8000950 <getDigipeaterPacket+0x150>)
 80008ce:	761a      	strb	r2, [r3, #24]
	dp_buffer[25] = OBC_digipeater_datad_Field[2]; //	ASCII-> S
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	789a      	ldrb	r2, [r3, #2]
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <getDigipeaterPacket+0x150>)
 80008d6:	765a      	strb	r2, [r3, #25]
	dp_buffer[26] = 0x44; //	ASCII-> D
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <getDigipeaterPacket+0x150>)
 80008da:	2244      	movs	r2, #68	; 0x44
 80008dc:	769a      	strb	r2, [r3, #26]
	dp_buffer[27] = 0x50; //	ASCII-> P
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <getDigipeaterPacket+0x150>)
 80008e0:	2250      	movs	r2, #80	; 0x50
 80008e2:	76da      	strb	r2, [r3, #27]
	dp_buffer[28] = 0x41; //	ASCII-> A
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <getDigipeaterPacket+0x150>)
 80008e6:	2241      	movs	r2, #65	; 0x41
 80008e8:	771a      	strb	r2, [r3, #28]
	dp_buffer[29] = 0x50; //	ASCII-> P
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <getDigipeaterPacket+0x150>)
 80008ec:	2250      	movs	r2, #80	; 0x50
 80008ee:	775a      	strb	r2, [r3, #29]
	dp_buffer[30] = 0x4E; //	ASCII-> N
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <getDigipeaterPacket+0x150>)
 80008f2:	224e      	movs	r2, #78	; 0x4e
 80008f4:	779a      	strb	r2, [r3, #30]

	int i = 31;
 80008f6:	231f      	movs	r3, #31
 80008f8:	617b      	str	r3, [r7, #20]
	int j = 24;
 80008fa:	2318      	movs	r3, #24
 80008fc:	613b      	str	r3, [r7, #16]
	for (int m = 0; m < size_of_msg_field; m++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	e011      	b.n	8000928 <getDigipeaterPacket+0x128>
		dp_buffer[i] = OBC_digipeater_datad_Field[j];
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	7819      	ldrb	r1, [r3, #0]
 800090c:	4a10      	ldr	r2, [pc, #64]	; (8000950 <getDigipeaterPacket+0x150>)
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	4413      	add	r3, r2
 8000912:	460a      	mov	r2, r1
 8000914:	701a      	strb	r2, [r3, #0]
		i++;
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	3301      	adds	r3, #1
 800091a:	617b      	str	r3, [r7, #20]
		j++;
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	3301      	adds	r3, #1
 8000920:	613b      	str	r3, [r7, #16]
	for (int m = 0; m < size_of_msg_field; m++) {
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3301      	adds	r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	429a      	cmp	r2, r3
 800092e:	dbe9      	blt.n	8000904 <getDigipeaterPacket+0x104>
//		myDebug("%02x ", dp_buffer[j]);
//	}
//	myDebug("\r\n");

	// Bit Stuffing
	int stuffed_size = bit_stuffing(dp_buffer, dp_buff_stuffed, i);
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	4908      	ldr	r1, [pc, #32]	; (8000954 <getDigipeaterPacket+0x154>)
 8000934:	4806      	ldr	r0, [pc, #24]	; (8000950 <getDigipeaterPacket+0x150>)
 8000936:	f000 f907 	bl	8000b48 <bit_stuffing>
 800093a:	60b8      	str	r0, [r7, #8]

	getHDLCDigipeaterPacket(dp_buff_stuffed, stuffed_size);
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4619      	mov	r1, r3
 8000942:	4804      	ldr	r0, [pc, #16]	; (8000954 <getDigipeaterPacket+0x154>)
 8000944:	f7ff ff02 	bl	800074c <getHDLCDigipeaterPacket>
}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200001a8 	.word	0x200001a8
 8000954:	20000240 	.word	0x20000240

08000958 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000964:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000966:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4313      	orrs	r3, r2
 800096e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000974:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800097c:	68fb      	ldr	r3, [r7, #12]
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800098c:	2004      	movs	r0, #4
 800098e:	f7ff ffe3 	bl	8000958 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff ffe0 	bl	8000958 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	200b      	movs	r0, #11
 800099e:	f002 fbf0 	bl	8003182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009a2:	200b      	movs	r0, #11
 80009a4:	f002 fc07 	bl	80031b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	200c      	movs	r0, #12
 80009ae:	f002 fbe8 	bl	8003182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009b2:	200c      	movs	r0, #12
 80009b4:	f002 fbff 	bl	80031b6 <HAL_NVIC_EnableIRQ>

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <calculateCRC_CCITT_AX25>:
 */

#include "error_handler.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 80009bc:	b480      	push	{r7}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 80009c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009ca:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 80009cc:	f241 0321 	movw	r3, #4129	; 0x1021
 80009d0:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	e026      	b.n	8000a26 <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	4413      	add	r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	021b      	lsls	r3, r3, #8
 80009e2:	b21a      	sxth	r2, r3
 80009e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009e8:	4053      	eors	r3, r2
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e012      	b.n	8000a1a <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 80009f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	da08      	bge.n	8000a0e <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 80009fc:	8afb      	ldrh	r3, [r7, #22]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a06:	4053      	eors	r3, r2
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	82fb      	strh	r3, [r7, #22]
 8000a0c:	e002      	b.n	8000a14 <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 8000a0e:	8afb      	ldrh	r3, [r7, #22]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3301      	adds	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2b07      	cmp	r3, #7
 8000a1e:	dde9      	ble.n	80009f4 <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	3301      	adds	r3, #1
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d3d4      	bcc.n	80009d8 <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 8000a2e:	8afb      	ldrh	r3, [r7, #22]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr

08000a3a <countsDataBetweenFlags>:
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
	return crcReg;
}

int countsDataBetweenFlags(uint8_t *data, int data_length) {
 8000a3a:	b480      	push	{r7}
 8000a3c:	b087      	sub	sp, #28
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	6039      	str	r1, [r7, #0]
	int found_first_7e = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
	int start_index = 0, end_index = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < data_length; i++) {
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	e013      	b.n	8000a7e <countsDataBetweenFlags+0x44>
		if (data[i] == 0x7e) {
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b7e      	cmp	r3, #126	; 0x7e
 8000a60:	d10a      	bne.n	8000a78 <countsDataBetweenFlags+0x3e>
			if (!found_first_7e) {
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d104      	bne.n	8000a72 <countsDataBetweenFlags+0x38>
				found_first_7e = 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
				start_index = i;
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	e002      	b.n	8000a78 <countsDataBetweenFlags+0x3e>
			} else {
				end_index = i;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	60fb      	str	r3, [r7, #12]
				break;
 8000a76:	e006      	b.n	8000a86 <countsDataBetweenFlags+0x4c>
	for (int i = 0; i < data_length; i++) {
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	dbe7      	blt.n	8000a56 <countsDataBetweenFlags+0x1c>
			}
		}
	}

	if (end_index > start_index) {
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	dd04      	ble.n	8000a98 <countsDataBetweenFlags+0x5e>
		return end_index - start_index + 1;
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	3301      	adds	r3, #1
 8000a96:	e001      	b.n	8000a9c <countsDataBetweenFlags+0x62>
	} else {
		return -1; // Return -1 if two 0x7E flags are not found
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	371c      	adds	r7, #28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <countsDataFromLastFlag>:


int countsDataFromLastFlag(uint8_t *data, int data_length) {
 8000aa6:	b480      	push	{r7}
 8000aa8:	b085      	sub	sp, #20
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	6039      	str	r1, [r7, #0]
	int end_index = -1;
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ab4:	60fb      	str	r3, [r7, #12]

	// Traverse the array from the end to find the last occurrence of 0x7e
	for (int i = data_length - 1; i >= 0; i--) {
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	e00b      	b.n	8000ad6 <countsDataFromLastFlag+0x30>
		if (data[i] == 0x7e) {
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b7e      	cmp	r3, #126	; 0x7e
 8000ac8:	d102      	bne.n	8000ad0 <countsDataFromLastFlag+0x2a>
			end_index = i;
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	60fb      	str	r3, [r7, #12]
			break;
 8000ace:	e005      	b.n	8000adc <countsDataFromLastFlag+0x36>
	for (int i = data_length - 1; i >= 0; i--) {
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	daf0      	bge.n	8000abe <countsDataFromLastFlag+0x18>
		}
	}

	// If the last 0x7e is found, return the count from that index to the beginning
	if (end_index != -1) {
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ae2:	d002      	beq.n	8000aea <countsDataFromLastFlag+0x44>
		return end_index + 1;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	e001      	b.n	8000aee <countsDataFromLastFlag+0x48>
	} else {
		return -1; // Return -1 if no 0x7E flag is found
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <countsDataBeforeFirstSpace>:


int countsDataBeforeFirstSpace(uint8_t *data, int data_length) {
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    int start_index = -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b06:	60fb      	str	r3, [r7, #12]

    // Traverse the array from the beginning to find the first occurrence of 0x20
    for (int i = 0; i < data_length; i++) {
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	e00b      	b.n	8000b26 <countsDataBeforeFirstSpace+0x2e>
        if (data[i] == 0x20) {
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	4413      	add	r3, r2
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b20      	cmp	r3, #32
 8000b18:	d102      	bne.n	8000b20 <countsDataBeforeFirstSpace+0x28>
            start_index = i;
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	60fb      	str	r3, [r7, #12]
            break;
 8000b1e:	e006      	b.n	8000b2e <countsDataBeforeFirstSpace+0x36>
    for (int i = 0; i < data_length; i++) {
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	3301      	adds	r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	dbef      	blt.n	8000b0e <countsDataBeforeFirstSpace+0x16>
        }
    }

    // If the first 0x20 is found, return the count from that index to the end
    if (start_index != -1) {
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b34:	d001      	beq.n	8000b3a <countsDataBeforeFirstSpace+0x42>
        return start_index;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	e001      	b.n	8000b3e <countsDataBeforeFirstSpace+0x46>
    } else {
        return -1; // Return -1 if no 0x20 flag is found
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <bit_stuffing>:


int bit_stuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b08f      	sub	sp, #60	; 0x3c
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_count = 0; // Count of consecutive 1 bits
 8000b58:	2300      	movs	r3, #0
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t current_byte = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int bit_pos = 7;
 8000b62:	2307      	movs	r3, #7
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
	int stuffed_size = 0; // Track size of output data after bit stuffing
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
	int bits_stuffed = 0; // Number of bits stuffed since last size increase
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]

	//myDebug("Error handler: before Bit stuffing \n");

	for (int i = 0; i < length; i++) {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	e078      	b.n	8000c66 <bit_stuffing+0x11e>
		for (int bit = 7; bit >= 0; bit--) {
 8000b74:	2307      	movs	r3, #7
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	e06f      	b.n	8000c5a <bit_stuffing+0x112>
			int bit_val = (data[i] >> bit) & 1;
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa42 f303 	asr.w	r3, r2, r3
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]

//			myDebug("%d ", bit_val);

			current_byte |= (bit_val << bit_pos);
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	b25a      	sxtb	r2, r3
 8000b9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			bit_pos--;
 8000ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28

			if (bit_val) {
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d02f      	beq.n	8000c12 <bit_stuffing+0xca>
				bit_count++;
 8000bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
				if (bit_count == 5) {
 8000bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bba:	2b05      	cmp	r3, #5
 8000bbc:	d12b      	bne.n	8000c16 <bit_stuffing+0xce>
					// Insert a 0 bit after five consecutive 1s
					if (bit_pos < 0) {
 8000bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	da10      	bge.n	8000be6 <bit_stuffing+0x9e>
						output_data[out_index++] = current_byte;
 8000bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	637a      	str	r2, [r7, #52]	; 0x34
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4413      	add	r3, r2
 8000bd0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000bd4:	701a      	strb	r2, [r3, #0]
						stuffed_size++;
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	3301      	adds	r3, #1
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
						current_byte = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						bit_pos = 7;
 8000be2:	2307      	movs	r3, #7
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					current_byte &= ~(1 << bit_pos);
 8000be6:	2201      	movs	r2, #1
 8000be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	b25a      	sxtb	r2, r3
 8000bf4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					bit_pos--;
 8000c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c02:	3b01      	subs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
					bits_stuffed++;
 8000c06:	6a3b      	ldr	r3, [r7, #32]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	623b      	str	r3, [r7, #32]
					bit_count = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8000c10:	e001      	b.n	8000c16 <bit_stuffing+0xce>
				}
			} else {
				bit_count = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (bit_pos < 0) {
 8000c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	da10      	bge.n	8000c3e <bit_stuffing+0xf6>
				output_data[out_index++] = current_byte;
 8000c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	637a      	str	r2, [r7, #52]	; 0x34
 8000c22:	461a      	mov	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4413      	add	r3, r2
 8000c28:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000c2c:	701a      	strb	r2, [r3, #0]
				stuffed_size++;
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	3301      	adds	r3, #1
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
				current_byte = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				bit_pos = 7;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			// Check if we've stuffed enough bits to increase size
			if (bits_stuffed >= 9 && bit_pos >= 0) {
 8000c3e:	6a3b      	ldr	r3, [r7, #32]
 8000c40:	2b08      	cmp	r3, #8
 8000c42:	dd07      	ble.n	8000c54 <bit_stuffing+0x10c>
 8000c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db04      	blt.n	8000c54 <bit_stuffing+0x10c>
				stuffed_size++;
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
				bits_stuffed = 0; // Reset bits_stuffed after increasing size
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	da8c      	bge.n	8000b7a <bit_stuffing+0x32>
	for (int i = 0; i < length; i++) {
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	3301      	adds	r3, #1
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	db82      	blt.n	8000b74 <bit_stuffing+0x2c>
			}
		}
	}
	//myDebug("\n");

	if (bit_pos < 7) {
 8000c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c70:	2b06      	cmp	r3, #6
 8000c72:	dc0b      	bgt.n	8000c8c <bit_stuffing+0x144>
		output_data[out_index++] = current_byte;
 8000c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	637a      	str	r2, [r7, #52]	; 0x34
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4413      	add	r3, r2
 8000c80:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000c84:	701a      	strb	r2, [r3, #0]
		stuffed_size++;
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	3301      	adds	r3, #1
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	for (int i = 0; i < length; i++) {
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	e00a      	b.n	8000ca8 <bit_stuffing+0x160>
		output_data[i] = data[i];
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	441a      	add	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	68b9      	ldr	r1, [r7, #8]
 8000c9c:	440b      	add	r3, r1
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dbf0      	blt.n	8000c92 <bit_stuffing+0x14a>
	}

	out_index = length;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34

	return out_index; // Return the size of output data after bit stuffing
 8000cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	373c      	adds	r7, #60	; 0x3c
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <bit_destuffing>:

int bit_destuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b08d      	sub	sp, #52	; 0x34
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
	int bit_count = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t current_byte = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int bit_pos = 7;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < length; i++) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e052      	b.n	8000d8a <bit_destuffing+0xca>
		for (int bit = 7; bit >= 0; bit--) {
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	e049      	b.n	8000d7e <bit_destuffing+0xbe>
			int bit_val = (data[i] >> bit) & 1;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa42 f303 	asr.w	r3, r2, r3
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]

			if (bit_val) {
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d011      	beq.n	8000d2a <bit_destuffing+0x6a>
				bit_count++;
 8000d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d08:	3301      	adds	r3, #1
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
				current_byte |= (bit_val << bit_pos);
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	6a3b      	ldr	r3, [r7, #32]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	b25a      	sxtb	r2, r3
 8000d16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos--;
 8000d22:	6a3b      	ldr	r3, [r7, #32]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	623b      	str	r3, [r7, #32]
 8000d28:	e015      	b.n	8000d56 <bit_destuffing+0x96>
			} else {
				if (bit_count == 5) {
 8000d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2c:	2b05      	cmp	r3, #5
 8000d2e:	d102      	bne.n	8000d36 <bit_destuffing+0x76>
					// Skip this bit as it is a stuffed bit
					bit_count = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
					continue;
 8000d34:	e020      	b.n	8000d78 <bit_destuffing+0xb8>
				} else {
					bit_count = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
					current_byte |= (bit_val << bit_pos);
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	b25a      	sxtb	r2, r3
 8000d44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b25b      	sxtb	r3, r3
 8000d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					bit_pos--;
 8000d50:	6a3b      	ldr	r3, [r7, #32]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	623b      	str	r3, [r7, #32]
				}
			}

			if (bit_pos < 0) {
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	da0d      	bge.n	8000d78 <bit_destuffing+0xb8>
				output_data[out_index++] = current_byte;
 8000d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000d62:	461a      	mov	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4413      	add	r3, r2
 8000d68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d6c:	701a      	strb	r2, [r3, #0]
				current_byte = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos = 7;
 8000d74:	2307      	movs	r3, #7
 8000d76:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dab2      	bge.n	8000cea <bit_destuffing+0x2a>
	for (int i = 0; i < length; i++) {
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	3301      	adds	r3, #1
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	69fa      	ldr	r2, [r7, #28]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	dba8      	blt.n	8000ce4 <bit_destuffing+0x24>
			}
		}
	}

	// Ensure the last byte is written if it's partially filled
	if (bit_pos < 7) {
 8000d92:	6a3b      	ldr	r3, [r7, #32]
 8000d94:	2b06      	cmp	r3, #6
 8000d96:	dc08      	bgt.n	8000daa <bit_destuffing+0xea>
		output_data[out_index++] = current_byte;
 8000d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4413      	add	r3, r2
 8000da4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000da8:	701a      	strb	r2, [r3, #0]
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	for (int i = 0; i < length; i++) {
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	e00a      	b.n	8000dc6 <bit_destuffing+0x106>
		output_data[i] = data[i];
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	441a      	add	r2, r3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	440b      	add	r3, r1
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	dbf0      	blt.n	8000db0 <bit_destuffing+0xf0>
	}

	out_index = length;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c

	return out_index;
 8000dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3734      	adds	r7, #52	; 0x34
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <acciiToHex>:

uint8_t acciiToHex(uint8_t ascii) {
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
	if (ascii >= '0' && ascii <= '9') {
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	2b2f      	cmp	r3, #47	; 0x2f
 8000dec:	d906      	bls.n	8000dfc <acciiToHex+0x1e>
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b39      	cmp	r3, #57	; 0x39
 8000df2:	d803      	bhi.n	8000dfc <acciiToHex+0x1e>
		return ascii - '0';
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	3b30      	subs	r3, #48	; 0x30
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	e014      	b.n	8000e26 <acciiToHex+0x48>
	} else if (ascii >= 'A' && ascii <= 'F') {
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	2b40      	cmp	r3, #64	; 0x40
 8000e00:	d906      	bls.n	8000e10 <acciiToHex+0x32>
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b46      	cmp	r3, #70	; 0x46
 8000e06:	d803      	bhi.n	8000e10 <acciiToHex+0x32>
		return ascii - 'A' + 10;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	3b37      	subs	r3, #55	; 0x37
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	e00a      	b.n	8000e26 <acciiToHex+0x48>
	} else if (ascii >= 'a' && ascii <= 'f') {
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b60      	cmp	r3, #96	; 0x60
 8000e14:	d906      	bls.n	8000e24 <acciiToHex+0x46>
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b66      	cmp	r3, #102	; 0x66
 8000e1a:	d803      	bhi.n	8000e24 <acciiToHex+0x46>
		return ascii - 'a' + 10;
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	3b57      	subs	r3, #87	; 0x57
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	e000      	b.n	8000e26 <acciiToHex+0x48>
	} else {
		// Invalid character for hex conversion
		return 0xFF;
 8000e24:	23ff      	movs	r3, #255	; 0xff
	}
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4013      	ands	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e54:	68fb      	ldr	r3, [r7, #12]
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff ffdb 	bl	8000e30 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f7ff ffd8 	bl	8000e30 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e80:	2004      	movs	r0, #4
 8000e82:	f7ff ffd5 	bl	8000e30 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000e8c:	481f      	ldr	r0, [pc, #124]	; (8000f0c <MX_GPIO_Init+0xac>)
 8000e8e:	f002 fe8f 	bl	8003bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2138      	movs	r1, #56	; 0x38
 8000e96:	481e      	ldr	r0, [pc, #120]	; (8000f10 <MX_GPIO_Init+0xb0>)
 8000e98:	f002 fe8a 	bl	8003bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000e9c:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000ea0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4816      	ldr	r0, [pc, #88]	; (8000f0c <MX_GPIO_Init+0xac>)
 8000eb4:	f002 fd1c 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000eb8:	2338      	movs	r3, #56	; 0x38
 8000eba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4810      	ldr	r0, [pc, #64]	; (8000f10 <MX_GPIO_Init+0xb0>)
 8000ece:	f002 fd0f 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000eda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f002 fd02 	bl	80038f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000eec:	2340      	movs	r3, #64	; 0x40
 8000eee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ef0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ef4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_GPIO_Init+0xb0>)
 8000f00:	f002 fcf6 	bl	80038f0 <HAL_GPIO_Init>

}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	48000800 	.word	0x48000800

08000f14 <setPacketParams>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setPacketParams(uint8_t buffer_length) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <setPacketParams+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = buffer_length;
 8000f24:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <setPacketParams+0x50>)
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	7213      	strb	r3, [r2, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <setPacketParams+0x50>)
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <setPacketParams+0x50>)
 8000f32:	2204      	movs	r2, #4
 8000f34:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <setPacketParams+0x50>)
 8000f38:	2218      	movs	r2, #24
 8000f3a:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <setPacketParams+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <setPacketParams+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <setPacketParams+0x50>)
 8000f4a:	22f2      	movs	r2, #242	; 0xf2
 8000f4c:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <setPacketParams+0x50>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	729a      	strb	r2, [r3, #10]
	SUBGRF_SetPacketParams(&pkt_params);
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <setPacketParams+0x50>)
 8000f56:	f009 fc11 	bl	800a77c <SUBGRF_SetPacketParams>

}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200002d8 	.word	0x200002d8

08000f68 <setModulationParams>:
void setModulationParams(unsigned long bitRate, unsigned long fDev) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <setModulationParams+0x38>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <setModulationParams+0x38>)
 8000f7a:	220d      	movs	r2, #13
 8000f7c:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = bitRate;
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <setModulationParams+0x38>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6053      	str	r3, [r2, #4]
	mod_params.Params.Gfsk.Fdev = fDev;
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <setModulationParams+0x38>)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	6093      	str	r3, [r2, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <setModulationParams+0x38>)
 8000f8c:	220b      	movs	r2, #11
 8000f8e:	731a      	strb	r2, [r3, #12]
	SUBGRF_SetModulationParams(&mod_params);
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <setModulationParams+0x38>)
 8000f92:	f009 fb21 	bl	800a5d8 <SUBGRF_SetModulationParams>

}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200002ec 	.word	0x200002ec

08000fa4 <radioConfig>:

void radioConfig(uint8_t *buffer, uint8_t buffer_len) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f009 fc80 	bl	800a8b8 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(buffer, buffer_len);
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f008 fe61 	bl	8009c84 <SUBGRF_SetPayload>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000fc2:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <radioConfig+0x5c>)
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fcc:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f008 fe9a 	bl	8009d0e <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000fda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000fde:	f008 fee5 	bl	8009dac <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2007      	movs	r0, #7
 8000fea:	f009 f93d 	bl	800a268 <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8000fee:	2202      	movs	r2, #2
 8000ff0:	210e      	movs	r1, #14
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f009 fa22 	bl	800a43c <SUBGRF_SetTxParams>

}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	0800c178 	.word	0x0800c178

08001004 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001008:	b0d3      	sub	sp, #332	; 0x14c
 800100a:	af00      	add	r7, sp, #0
 800100c:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (huart == &huart2) {
 800100e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001010:	4b9d      	ldr	r3, [pc, #628]	; (8001288 <HAL_UART_RxCpltCallback+0x284>)
 8001012:	429a      	cmp	r2, r3
 8001014:	f040 86ad 	bne.w	8001d72 <HAL_UART_RxCpltCallback+0xd6e>

		uint8_t newLine = 0x0a;
 8001018:	230a      	movs	r3, #10
 800101a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb

		uint8_t header = 0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea

		if (cmd_temp[0] == header || cmd_temp[0] == newLine) {
 8001024:	4b99      	ldr	r3, [pc, #612]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 8001026:	781a      	ldrb	r2, [r3, #0]
 8001028:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 800102c:	4293      	cmp	r3, r2
 800102e:	d005      	beq.n	800103c <HAL_UART_RxCpltCallback+0x38>
 8001030:	4b96      	ldr	r3, [pc, #600]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8001038:	4293      	cmp	r3, r2
 800103a:	d117      	bne.n	800106c <HAL_UART_RxCpltCallback+0x68>

			for (int loop1 = 0; loop1 < sizeof(cmd_temp); loop1++) {
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001042:	e00f      	b.n	8001064 <HAL_UART_RxCpltCallback+0x60>
				cmd_temp[loop1] = cmd_temp[loop1 + 1];
 8001044:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	4b90      	ldr	r3, [pc, #576]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 800104c:	5c99      	ldrb	r1, [r3, r2]
 800104e:	4a8f      	ldr	r2, [pc, #572]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 8001050:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001054:	441a      	add	r2, r3
 8001056:	460b      	mov	r3, r1
 8001058:	7013      	strb	r3, [r2, #0]
			for (int loop1 = 0; loop1 < sizeof(cmd_temp); loop1++) {
 800105a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800105e:	3301      	adds	r3, #1
 8001060:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001064:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001068:	2b33      	cmp	r3, #51	; 0x33
 800106a:	d9eb      	bls.n	8001044 <HAL_UART_RxCpltCallback+0x40>
			}
		}

		if (cmd_temp[0] == 0x4d && cmd_temp[1] == 0x4f &&     	//MO
 800106c:	4b87      	ldr	r3, [pc, #540]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b4d      	cmp	r3, #77	; 0x4d
 8001072:	d17e      	bne.n	8001172 <HAL_UART_RxCpltCallback+0x16e>
 8001074:	4b85      	ldr	r3, [pc, #532]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 8001076:	785b      	ldrb	r3, [r3, #1]
 8001078:	2b4f      	cmp	r3, #79	; 0x4f
 800107a:	d17a      	bne.n	8001172 <HAL_UART_RxCpltCallback+0x16e>
				cmd_temp[2] == 0x44 && cmd_temp[3] == 0x45 &&  	// DE
 800107c:	4b83      	ldr	r3, [pc, #524]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 800107e:	789b      	ldrb	r3, [r3, #2]
		if (cmd_temp[0] == 0x4d && cmd_temp[1] == 0x4f &&     	//MO
 8001080:	2b44      	cmp	r3, #68	; 0x44
 8001082:	d176      	bne.n	8001172 <HAL_UART_RxCpltCallback+0x16e>
				cmd_temp[2] == 0x44 && cmd_temp[3] == 0x45 &&  	// DE
 8001084:	4b81      	ldr	r3, [pc, #516]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 8001086:	78db      	ldrb	r3, [r3, #3]
 8001088:	2b45      	cmp	r3, #69	; 0x45
 800108a:	d172      	bne.n	8001172 <HAL_UART_RxCpltCallback+0x16e>
				cmd_temp[4] == 0x54 && cmd_temp[5] == 0x45 &&  	 //TE
 800108c:	4b7f      	ldr	r3, [pc, #508]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 800108e:	791b      	ldrb	r3, [r3, #4]
				cmd_temp[2] == 0x44 && cmd_temp[3] == 0x45 &&  	// DE
 8001090:	2b54      	cmp	r3, #84	; 0x54
 8001092:	d16e      	bne.n	8001172 <HAL_UART_RxCpltCallback+0x16e>
				cmd_temp[4] == 0x54 && cmd_temp[5] == 0x45 &&  	 //TE
 8001094:	4b7d      	ldr	r3, [pc, #500]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 8001096:	795b      	ldrb	r3, [r3, #5]
 8001098:	2b45      	cmp	r3, #69	; 0x45
 800109a:	d16a      	bne.n	8001172 <HAL_UART_RxCpltCallback+0x16e>
				cmd_temp[6] == 0x4c && cmd_temp[7] == 0x45) {			//LE
 800109c:	4b7b      	ldr	r3, [pc, #492]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 800109e:	799b      	ldrb	r3, [r3, #6]
				cmd_temp[4] == 0x54 && cmd_temp[5] == 0x45 &&  	 //TE
 80010a0:	2b4c      	cmp	r3, #76	; 0x4c
 80010a2:	d166      	bne.n	8001172 <HAL_UART_RxCpltCallback+0x16e>
				cmd_temp[6] == 0x4c && cmd_temp[7] == 0x45) {			//LE
 80010a4:	4b79      	ldr	r3, [pc, #484]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 80010a6:	79db      	ldrb	r3, [r3, #7]
 80010a8:	2b45      	cmp	r3, #69	; 0x45
 80010aa:	d162      	bne.n	8001172 <HAL_UART_RxCpltCallback+0x16e>

			TX_FLAG = 0;
 80010ac:	4b78      	ldr	r3, [pc, #480]	; (8001290 <HAL_UART_RxCpltCallback+0x28c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]

			setPacketParams(rx_buffer_len);
 80010b2:	4b78      	ldr	r3, [pc, #480]	; (8001294 <HAL_UART_RxCpltCallback+0x290>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff2c 	bl	8000f14 <setPacketParams>
			setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 80010bc:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 80010c0:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 80010c4:	f7ff ff50 	bl	8000f68 <setModulationParams>
			radioConfig(rx_buffer, rx_buffer_len);
 80010c8:	4b72      	ldr	r3, [pc, #456]	; (8001294 <HAL_UART_RxCpltCallback+0x290>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4872      	ldr	r0, [pc, #456]	; (8001298 <HAL_UART_RxCpltCallback+0x294>)
 80010d0:	f7ff ff68 	bl	8000fa4 <radioConfig>

			myDebug("\n########## RX Configuration: ##########\n");
 80010d4:	4871      	ldr	r0, [pc, #452]	; (800129c <HAL_UART_RxCpltCallback+0x298>)
 80010d6:	f7ff fae5 	bl	80006a4 <myDebug>

			myDebug("FREQUENCY MODS: Downlink FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 80010da:	4971      	ldr	r1, [pc, #452]	; (80012a0 <HAL_UART_RxCpltCallback+0x29c>)
 80010dc:	4871      	ldr	r0, [pc, #452]	; (80012a4 <HAL_UART_RxCpltCallback+0x2a0>)
 80010de:	f7ff fae1 	bl	80006a4 <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 80010e2:	4b71      	ldr	r3, [pc, #452]	; (80012a8 <HAL_UART_RxCpltCallback+0x2a4>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4619      	mov	r1, r3
 80010e8:	4870      	ldr	r0, [pc, #448]	; (80012ac <HAL_UART_RxCpltCallback+0x2a8>)
 80010ea:	f7ff fadb 	bl	80006a4 <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 80010ee:	4b6e      	ldr	r3, [pc, #440]	; (80012a8 <HAL_UART_RxCpltCallback+0x2a4>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4619      	mov	r1, r3
 80010f4:	486e      	ldr	r0, [pc, #440]	; (80012b0 <HAL_UART_RxCpltCallback+0x2ac>)
 80010f6:	f7ff fad5 	bl	80006a4 <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 80010fa:	4b6b      	ldr	r3, [pc, #428]	; (80012a8 <HAL_UART_RxCpltCallback+0x2a4>)
 80010fc:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80010fe:	4619      	mov	r1, r3
 8001100:	486c      	ldr	r0, [pc, #432]	; (80012b4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001102:	f7ff facf 	bl	80006a4 <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001106:	4b6c      	ldr	r3, [pc, #432]	; (80012b8 <HAL_UART_RxCpltCallback+0x2b4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4619      	mov	r1, r3
 800110c:	486b      	ldr	r0, [pc, #428]	; (80012bc <HAL_UART_RxCpltCallback+0x2b8>)
 800110e:	f7ff fac9 	bl	80006a4 <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8001112:	4b69      	ldr	r3, [pc, #420]	; (80012b8 <HAL_UART_RxCpltCallback+0x2b4>)
 8001114:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 8001116:	4619      	mov	r1, r3
 8001118:	4869      	ldr	r0, [pc, #420]	; (80012c0 <HAL_UART_RxCpltCallback+0x2bc>)
 800111a:	f7ff fac3 	bl	80006a4 <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 800111e:	4b66      	ldr	r3, [pc, #408]	; (80012b8 <HAL_UART_RxCpltCallback+0x2b4>)
 8001120:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 8001122:	4619      	mov	r1, r3
 8001124:	4867      	ldr	r0, [pc, #412]	; (80012c4 <HAL_UART_RxCpltCallback+0x2c0>)
 8001126:	f7ff fabd 	bl	80006a4 <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 800112a:	4b63      	ldr	r3, [pc, #396]	; (80012b8 <HAL_UART_RxCpltCallback+0x2b4>)
 800112c:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 800112e:	4619      	mov	r1, r3
 8001130:	4865      	ldr	r0, [pc, #404]	; (80012c8 <HAL_UART_RxCpltCallback+0x2c4>)
 8001132:	f7ff fab7 	bl	80006a4 <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001136:	4b60      	ldr	r3, [pc, #384]	; (80012b8 <HAL_UART_RxCpltCallback+0x2b4>)
 8001138:	79db      	ldrb	r3, [r3, #7]
 800113a:	4619      	mov	r1, r3
 800113c:	4863      	ldr	r0, [pc, #396]	; (80012cc <HAL_UART_RxCpltCallback+0x2c8>)
 800113e:	f7ff fab1 	bl	80006a4 <myDebug>
			myDebug("______________*******************______________\r\n");
 8001142:	4863      	ldr	r0, [pc, #396]	; (80012d0 <HAL_UART_RxCpltCallback+0x2cc>)
 8001144:	f7ff faae 	bl	80006a4 <myDebug>

			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001148:	4855      	ldr	r0, [pc, #340]	; (80012a0 <HAL_UART_RxCpltCallback+0x29c>)
 800114a:	f009 f90b 	bl	800a364 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 800114e:	2100      	movs	r1, #0
 8001150:	2001      	movs	r0, #1
 8001152:	f009 fd4f 	bl	800abf4 <SUBGRF_SetSwitch>
			SUBGRF_SetRxBoosted(0xFFFFFF);
 8001156:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800115a:	f008 ff2f 	bl	8009fbc <SUBGRF_SetRxBoosted>

			HAL_UART_Receive_DMA(&huart2, cmd_temp, cmd_temp_len);
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <HAL_UART_RxCpltCallback+0x2d0>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	4949      	ldr	r1, [pc, #292]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 8001168:	4847      	ldr	r0, [pc, #284]	; (8001288 <HAL_UART_RxCpltCallback+0x284>)
 800116a:	f005 fa3d 	bl	80065e8 <HAL_UART_Receive_DMA>
 800116e:	f000 be00 	b.w	8001d72 <HAL_UART_RxCpltCallback+0xd6e>

		} else if (cmd_temp[0] == 0x4d && cmd_temp[1] == 0x4f &&     //MO
 8001172:	4b46      	ldr	r3, [pc, #280]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b4d      	cmp	r3, #77	; 0x4d
 8001178:	f040 80ae 	bne.w	80012d8 <HAL_UART_RxCpltCallback+0x2d4>
 800117c:	4b43      	ldr	r3, [pc, #268]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 800117e:	785b      	ldrb	r3, [r3, #1]
 8001180:	2b4f      	cmp	r3, #79	; 0x4f
 8001182:	f040 80a9 	bne.w	80012d8 <HAL_UART_RxCpltCallback+0x2d4>
				cmd_temp[2] == 0x44 && cmd_temp[3] == 0x45 &&  	// DE
 8001186:	4b41      	ldr	r3, [pc, #260]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 8001188:	789b      	ldrb	r3, [r3, #2]
		} else if (cmd_temp[0] == 0x4d && cmd_temp[1] == 0x4f &&     //MO
 800118a:	2b44      	cmp	r3, #68	; 0x44
 800118c:	f040 80a4 	bne.w	80012d8 <HAL_UART_RxCpltCallback+0x2d4>
				cmd_temp[2] == 0x44 && cmd_temp[3] == 0x45 &&  	// DE
 8001190:	4b3e      	ldr	r3, [pc, #248]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 8001192:	78db      	ldrb	r3, [r3, #3]
 8001194:	2b45      	cmp	r3, #69	; 0x45
 8001196:	f040 809f 	bne.w	80012d8 <HAL_UART_RxCpltCallback+0x2d4>
				cmd_temp[4] == 0x44 && cmd_temp[5] == 0x49 &&   //DI
 800119a:	4b3c      	ldr	r3, [pc, #240]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 800119c:	791b      	ldrb	r3, [r3, #4]
				cmd_temp[2] == 0x44 && cmd_temp[3] == 0x45 &&  	// DE
 800119e:	2b44      	cmp	r3, #68	; 0x44
 80011a0:	f040 809a 	bne.w	80012d8 <HAL_UART_RxCpltCallback+0x2d4>
				cmd_temp[4] == 0x44 && cmd_temp[5] == 0x49 &&   //DI
 80011a4:	4b39      	ldr	r3, [pc, #228]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 80011a6:	795b      	ldrb	r3, [r3, #5]
 80011a8:	2b49      	cmp	r3, #73	; 0x49
 80011aa:	f040 8095 	bne.w	80012d8 <HAL_UART_RxCpltCallback+0x2d4>
				cmd_temp[6] == 0x47 && cmd_temp[7] == 0x49) {		//GI
 80011ae:	4b37      	ldr	r3, [pc, #220]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 80011b0:	799b      	ldrb	r3, [r3, #6]
				cmd_temp[4] == 0x44 && cmd_temp[5] == 0x49 &&   //DI
 80011b2:	2b47      	cmp	r3, #71	; 0x47
 80011b4:	f040 8090 	bne.w	80012d8 <HAL_UART_RxCpltCallback+0x2d4>
				cmd_temp[6] == 0x47 && cmd_temp[7] == 0x49) {		//GI
 80011b8:	4b34      	ldr	r3, [pc, #208]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 80011ba:	79db      	ldrb	r3, [r3, #7]
 80011bc:	2b49      	cmp	r3, #73	; 0x49
 80011be:	f040 808b 	bne.w	80012d8 <HAL_UART_RxCpltCallback+0x2d4>

			TX_FLAG = 0;
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <HAL_UART_RxCpltCallback+0x28c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]

			setPacketParams(rx_buffer_len);
 80011c8:	4b32      	ldr	r3, [pc, #200]	; (8001294 <HAL_UART_RxCpltCallback+0x290>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fea1 	bl	8000f14 <setPacketParams>
			setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 80011d2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80011d6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80011da:	f7ff fec5 	bl	8000f68 <setModulationParams>
			radioConfig(rx_buffer, rx_buffer_len);
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_UART_RxCpltCallback+0x290>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	4619      	mov	r1, r3
 80011e4:	482c      	ldr	r0, [pc, #176]	; (8001298 <HAL_UART_RxCpltCallback+0x294>)
 80011e6:	f7ff fedd 	bl	8000fa4 <radioConfig>

			myDebug("\n########## RX Configuration: ##########\n");
 80011ea:	482c      	ldr	r0, [pc, #176]	; (800129c <HAL_UART_RxCpltCallback+0x298>)
 80011ec:	f7ff fa5a 	bl	80006a4 <myDebug>

			myDebug("FREQUENCY MODS: Downlink FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 80011f0:	492b      	ldr	r1, [pc, #172]	; (80012a0 <HAL_UART_RxCpltCallback+0x29c>)
 80011f2:	482c      	ldr	r0, [pc, #176]	; (80012a4 <HAL_UART_RxCpltCallback+0x2a0>)
 80011f4:	f7ff fa56 	bl	80006a4 <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <HAL_UART_RxCpltCallback+0x2a4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	4619      	mov	r1, r3
 80011fe:	482b      	ldr	r0, [pc, #172]	; (80012ac <HAL_UART_RxCpltCallback+0x2a8>)
 8001200:	f7ff fa50 	bl	80006a4 <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 8001204:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	4619      	mov	r1, r3
 800120a:	4829      	ldr	r0, [pc, #164]	; (80012b0 <HAL_UART_RxCpltCallback+0x2ac>)
 800120c:	f7ff fa4a 	bl	80006a4 <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 8001210:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001212:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8001214:	4619      	mov	r1, r3
 8001216:	4827      	ldr	r0, [pc, #156]	; (80012b4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001218:	f7ff fa44 	bl	80006a4 <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <HAL_UART_RxCpltCallback+0x2b4>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	4826      	ldr	r0, [pc, #152]	; (80012bc <HAL_UART_RxCpltCallback+0x2b8>)
 8001224:	f7ff fa3e 	bl	80006a4 <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <HAL_UART_RxCpltCallback+0x2b4>)
 800122a:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 800122c:	4619      	mov	r1, r3
 800122e:	4824      	ldr	r0, [pc, #144]	; (80012c0 <HAL_UART_RxCpltCallback+0x2bc>)
 8001230:	f7ff fa38 	bl	80006a4 <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_UART_RxCpltCallback+0x2b4>)
 8001236:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 8001238:	4619      	mov	r1, r3
 800123a:	4822      	ldr	r0, [pc, #136]	; (80012c4 <HAL_UART_RxCpltCallback+0x2c0>)
 800123c:	f7ff fa32 	bl	80006a4 <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_UART_RxCpltCallback+0x2b4>)
 8001242:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 8001244:	4619      	mov	r1, r3
 8001246:	4820      	ldr	r0, [pc, #128]	; (80012c8 <HAL_UART_RxCpltCallback+0x2c4>)
 8001248:	f7ff fa2c 	bl	80006a4 <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_UART_RxCpltCallback+0x2b4>)
 800124e:	79db      	ldrb	r3, [r3, #7]
 8001250:	4619      	mov	r1, r3
 8001252:	481e      	ldr	r0, [pc, #120]	; (80012cc <HAL_UART_RxCpltCallback+0x2c8>)
 8001254:	f7ff fa26 	bl	80006a4 <myDebug>
			myDebug("______________*******************______________\r\n");
 8001258:	481d      	ldr	r0, [pc, #116]	; (80012d0 <HAL_UART_RxCpltCallback+0x2cc>)
 800125a:	f7ff fa23 	bl	80006a4 <myDebug>

			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 800125e:	4810      	ldr	r0, [pc, #64]	; (80012a0 <HAL_UART_RxCpltCallback+0x29c>)
 8001260:	f009 f880 	bl	800a364 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8001264:	2100      	movs	r1, #0
 8001266:	2001      	movs	r0, #1
 8001268:	f009 fcc4 	bl	800abf4 <SUBGRF_SetSwitch>
			SUBGRF_SetRxBoosted(0xFFFFFF);
 800126c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001270:	f008 fea4 	bl	8009fbc <SUBGRF_SetRxBoosted>

			HAL_UART_Receive_DMA(&huart2, cmd_temp, cmd_temp_len);
 8001274:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_UART_RxCpltCallback+0x2d0>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b29b      	uxth	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	4903      	ldr	r1, [pc, #12]	; (800128c <HAL_UART_RxCpltCallback+0x288>)
 800127e:	4802      	ldr	r0, [pc, #8]	; (8001288 <HAL_UART_RxCpltCallback+0x284>)
 8001280:	f005 f9b2 	bl	80065e8 <HAL_UART_Receive_DMA>
 8001284:	f000 bd75 	b.w	8001d72 <HAL_UART_RxCpltCallback+0xd6e>
 8001288:	2000065c 	.word	0x2000065c
 800128c:	2000031c 	.word	0x2000031c
 8001290:	20000558 	.word	0x20000558
 8001294:	20000003 	.word	0x20000003
 8001298:	200004ec 	.word	0x200004ec
 800129c:	0800c180 	.word	0x0800c180
 80012a0:	1a11d018 	.word	0x1a11d018
 80012a4:	0800c1ac 	.word	0x0800c1ac
 80012a8:	200002ec 	.word	0x200002ec
 80012ac:	0800c1d4 	.word	0x0800c1d4
 80012b0:	0800c1e4 	.word	0x0800c1e4
 80012b4:	0800c200 	.word	0x0800c200
 80012b8:	200002d8 	.word	0x200002d8
 80012bc:	0800c21c 	.word	0x0800c21c
 80012c0:	0800c230 	.word	0x0800c230
 80012c4:	0800c248 	.word	0x0800c248
 80012c8:	0800c260 	.word	0x0800c260
 80012cc:	0800c278 	.word	0x0800c278
 80012d0:	0800c28c 	.word	0x0800c28c
 80012d4:	20000001 	.word	0x20000001

		} else if (cmd_temp[0] == 0x53 && cmd_temp[1] == 0x32
 80012d8:	4b59      	ldr	r3, [pc, #356]	; (8001440 <HAL_UART_RxCpltCallback+0x43c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b53      	cmp	r3, #83	; 0x53
 80012de:	f040 82c3 	bne.w	8001868 <HAL_UART_RxCpltCallback+0x864>
 80012e2:	4b57      	ldr	r3, [pc, #348]	; (8001440 <HAL_UART_RxCpltCallback+0x43c>)
 80012e4:	785b      	ldrb	r3, [r3, #1]
 80012e6:	2b32      	cmp	r3, #50	; 0x32
 80012e8:	f040 82be 	bne.w	8001868 <HAL_UART_RxCpltCallback+0x864>
				&& cmd_temp[2] == 0x53) {								 //S2S
 80012ec:	4b54      	ldr	r3, [pc, #336]	; (8001440 <HAL_UART_RxCpltCallback+0x43c>)
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	2b53      	cmp	r3, #83	; 0x53
 80012f2:	f040 82b9 	bne.w	8001868 <HAL_UART_RxCpltCallback+0x864>
 80012f6:	466b      	mov	r3, sp
 80012f8:	461c      	mov	r4, r3

			TX_FLAG = 0;
 80012fa:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_UART_RxCpltCallback+0x440>)
 80012fc:	2300      	movs	r3, #0
 80012fe:	6013      	str	r3, [r2, #0]

			// Section 1: dp_head (first 3 bytes)
			unsigned char dp_head[4];
			strncpy((char*) dp_head, (char*) cmd_temp, 3);
 8001300:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001304:	2203      	movs	r2, #3
 8001306:	494e      	ldr	r1, [pc, #312]	; (8001440 <HAL_UART_RxCpltCallback+0x43c>)
 8001308:	4618      	mov	r0, r3
 800130a:	f00a fa7e 	bl	800b80a <strncpy>
			dp_head[3] = '\0'; // Null-terminate the string
 800130e:	2300      	movs	r3, #0
 8001310:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

			// Section 2: destination_callsign (from byte 4 to the byte before '>' or 0x3e)
			unsigned char *dest_end = (unsigned char*) strchr(
 8001314:	4b4c      	ldr	r3, [pc, #304]	; (8001448 <HAL_UART_RxCpltCallback+0x444>)
 8001316:	213e      	movs	r1, #62	; 0x3e
 8001318:	4618      	mov	r0, r3
 800131a:	f00a fa69 	bl	800b7f0 <strchr>
 800131e:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
					(char*) cmd_temp + 3, 0x3e); // Find the '>' (0x3e)
			int dest_size = dest_end - (cmd_temp + 3); // Get the size excluding '>'
 8001322:	4a49      	ldr	r2, [pc, #292]	; (8001448 <HAL_UART_RxCpltCallback+0x444>)
 8001324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			// Ensure the destination_callsign is exactly 7 bytes
			unsigned char destination_callsign[8]; // Array size of 8 to include 7 bytes plus null terminator
			// Copy the actual destination_callsign data
			strncpy((char*) destination_callsign, (char*) cmd_temp + 3,
 800132e:	4946      	ldr	r1, [pc, #280]	; (8001448 <HAL_UART_RxCpltCallback+0x444>)
 8001330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001334:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001338:	461a      	mov	r2, r3
 800133a:	f00a fa66 	bl	800b80a <strncpy>
					dest_size);
			// Shift each element of destination_callsign by 1 bit to the left
			for (int i = 0; i < dest_size; i++) {
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001344:	e013      	b.n	800136e <HAL_UART_RxCpltCallback+0x36a>
				destination_callsign[i] <<= 1;  // Perform left shift by 1 bit
 8001346:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800134a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800134e:	4413      	add	r3, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	b2d9      	uxtb	r1, r3
 8001356:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800135a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800135e:	441a      	add	r2, r3
 8001360:	460b      	mov	r3, r1
 8001362:	7013      	strb	r3, [r2, #0]
			for (int i = 0; i < dest_size; i++) {
 8001364:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001368:	3301      	adds	r3, #1
 800136a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800136e:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001376:	429a      	cmp	r2, r3
 8001378:	dbe5      	blt.n	8001346 <HAL_UART_RxCpltCallback+0x342>
			}
			// If dest_size is less than 7, pad with 0x40 until it reaches 6 bytes, then set the last byte to 0xe0
			if (dest_size < 7) {
 800137a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800137e:	2b06      	cmp	r3, #6
 8001380:	dc17      	bgt.n	80013b2 <HAL_UART_RxCpltCallback+0x3ae>
				for (int i = dest_size; i < 7; i++) {
 8001382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001386:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800138a:	e00b      	b.n	80013a4 <HAL_UART_RxCpltCallback+0x3a0>
					destination_callsign[i] = 0x40;  // Padding with 0x40
 800138c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001390:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001394:	441a      	add	r2, r3
 8001396:	2340      	movs	r3, #64	; 0x40
 8001398:	7013      	strb	r3, [r2, #0]
				for (int i = dest_size; i < 7; i++) {
 800139a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800139e:	3301      	adds	r3, #1
 80013a0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80013a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80013a8:	2b06      	cmp	r3, #6
 80013aa:	ddef      	ble.n	800138c <HAL_UART_RxCpltCallback+0x388>
				}
				destination_callsign[6] = 0xE0;  // Set the last byte to 0xe0
 80013ac:	23e0      	movs	r3, #224	; 0xe0
 80013ae:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
			}
			destination_callsign[7] = '\0'; // Null-terminate (not strictly necessary for binary data, but good practice)
 80013b2:	2300      	movs	r3, #0
 80013b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

			// Section 3: source_callsign (from '>' to the byte before ',' or 0x2C)
			unsigned char *src_start = dest_end + 1; // Start after '>'
 80013b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80013bc:	3301      	adds	r3, #1
 80013be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			unsigned char *src_end = (unsigned char*) strchr((char*) src_start,
 80013c2:	212c      	movs	r1, #44	; 0x2c
 80013c4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80013c8:	f00a fa12 	bl	800b7f0 <strchr>
 80013cc:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
					0x2C); // Find the ',' (0x2c)
			int src_size = src_end - src_start; // Get the size
 80013d0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80013d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			// Ensure the source_callsign is exactly 7 bytes
			unsigned char source_callsign[8]; // Array size of 8 to include 7 bytes plus null terminator
			// Copy the actual source_callsign data
			strncpy((char*) source_callsign, (const char*) src_start, src_size);
 80013de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80013e2:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80013e6:	461a      	mov	r2, r3
 80013e8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80013ec:	f00a fa0d 	bl	800b80a <strncpy>
			// Shift each element of source_callsign by 1 bit to the left
			for (int i = 0; i < src_size; i++) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80013f6:	e013      	b.n	8001420 <HAL_UART_RxCpltCallback+0x41c>
				source_callsign[i] <<= 1;  // Perform left shift by 1 bit
 80013f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	b2d9      	uxtb	r1, r3
 8001408:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800140c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001410:	441a      	add	r2, r3
 8001412:	460b      	mov	r3, r1
 8001414:	7013      	strb	r3, [r2, #0]
			for (int i = 0; i < src_size; i++) {
 8001416:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800141a:	3301      	adds	r3, #1
 800141c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001420:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001424:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001428:	429a      	cmp	r2, r3
 800142a:	dbe5      	blt.n	80013f8 <HAL_UART_RxCpltCallback+0x3f4>
			}
			// If src_size is less than 7, pad with 0x40 until it reaches 6 bytes, then set the last byte to 0xe0
			if (src_size < 7) {
 800142c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001430:	2b06      	cmp	r3, #6
 8001432:	dc1e      	bgt.n	8001472 <HAL_UART_RxCpltCallback+0x46e>
				for (int i = src_size; i < 7; i++) {
 8001434:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001438:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800143c:	e012      	b.n	8001464 <HAL_UART_RxCpltCallback+0x460>
 800143e:	bf00      	nop
 8001440:	2000031c 	.word	0x2000031c
 8001444:	20000558 	.word	0x20000558
 8001448:	2000031f 	.word	0x2000031f
					source_callsign[i] = 0x40;  // Padding with 0x40
 800144c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001450:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001454:	441a      	add	r2, r3
 8001456:	2340      	movs	r3, #64	; 0x40
 8001458:	7013      	strb	r3, [r2, #0]
				for (int i = src_size; i < 7; i++) {
 800145a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800145e:	3301      	adds	r3, #1
 8001460:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001464:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001468:	2b06      	cmp	r3, #6
 800146a:	ddef      	ble.n	800144c <HAL_UART_RxCpltCallback+0x448>
				}
				source_callsign[6] = 0xE0;  // Set the last byte to 0xe0
 800146c:	23e0      	movs	r3, #224	; 0xe0
 800146e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			}
			source_callsign[7] = '\0'; // Null-terminate (optional for binary data)
 8001472:	2300      	movs	r3, #0
 8001474:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			// Section 4: packet_path (from ',' to the byte before ':' or 0x3A)
			unsigned char *path_start = src_end + 1; // Start after ','
 8001478:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800147c:	3301      	adds	r3, #1
 800147e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			unsigned char *path_end = (unsigned char*) strchr(
 8001482:	213a      	movs	r1, #58	; 0x3a
 8001484:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001488:	f00a f9b2 	bl	800b7f0 <strchr>
 800148c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					(char*) path_start, 0x3A); // Find the ':' (0x3a)
			int path_size = path_end - path_start; // Get the size
 8001490:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001494:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			unsigned char packet_path[path_size + 1];
 800149e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80014a2:	1c59      	adds	r1, r3, #1
 80014a4:	1e4b      	subs	r3, r1, #1
 80014a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80014aa:	460a      	mov	r2, r1
 80014ac:	2300      	movs	r3, #0
 80014ae:	643a      	str	r2, [r7, #64]	; 0x40
 80014b0:	647b      	str	r3, [r7, #68]	; 0x44
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	e9d7 5610 	ldrd	r5, r6, [r7, #64]	; 0x40
 80014be:	4630      	mov	r0, r6
 80014c0:	00c3      	lsls	r3, r0, #3
 80014c2:	4628      	mov	r0, r5
 80014c4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014c8:	4628      	mov	r0, r5
 80014ca:	00c2      	lsls	r2, r0, #3
 80014cc:	460a      	mov	r2, r1
 80014ce:	2300      	movs	r3, #0
 80014d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 80014e0:	4630      	mov	r0, r6
 80014e2:	00c3      	lsls	r3, r0, #3
 80014e4:	4628      	mov	r0, r5
 80014e6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014ea:	4628      	mov	r0, r5
 80014ec:	00c2      	lsls	r2, r0, #3
 80014ee:	460b      	mov	r3, r1
 80014f0:	3307      	adds	r3, #7
 80014f2:	08db      	lsrs	r3, r3, #3
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	ebad 0d03 	sub.w	sp, sp, r3
 80014fa:	466b      	mov	r3, sp
 80014fc:	3300      	adds	r3, #0
 80014fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			strncpy((char*) packet_path, (const char*) path_start, path_size);
 8001502:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001506:	461a      	mov	r2, r3
 8001508:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800150c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001510:	f00a f97b 	bl	800b80a <strncpy>
			packet_path[path_size] = '\0'; // Null-terminate
 8001514:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001518:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800151c:	4413      	add	r3, r2
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]

			// Section 5: message_field (from ':' to before '20 37 65')
			unsigned char *msg_start = path_end + 1; // Start after ':'
 8001522:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001526:	3301      	adds	r3, #1
 8001528:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			unsigned char *msg_end = (unsigned char*) strstr((char*) msg_start,
 800152c:	49d3      	ldr	r1, [pc, #844]	; (800187c <HAL_UART_RxCpltCallback+0x878>)
 800152e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001532:	f00a f97d 	bl	800b830 <strstr>
 8001536:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
					"\x20\x37\x65"); // Find '20 37 65'
			int msg_size = msg_end - msg_start; // Get the size before '20 37 65'
 800153a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800153e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			unsigned char message_field[msg_size + 1];
 8001548:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800154c:	1c59      	adds	r1, r3, #1
 800154e:	1e4b      	subs	r3, r1, #1
 8001550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001554:	460a      	mov	r2, r1
 8001556:	2300      	movs	r3, #0
 8001558:	633a      	str	r2, [r7, #48]	; 0x30
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 8001568:	4630      	mov	r0, r6
 800156a:	00c3      	lsls	r3, r0, #3
 800156c:	4628      	mov	r0, r5
 800156e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001572:	4628      	mov	r0, r5
 8001574:	00c2      	lsls	r2, r0, #3
 8001576:	460a      	mov	r2, r1
 8001578:	2300      	movs	r3, #0
 800157a:	62ba      	str	r2, [r7, #40]	; 0x28
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800158a:	4630      	mov	r0, r6
 800158c:	00c3      	lsls	r3, r0, #3
 800158e:	4628      	mov	r0, r5
 8001590:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001594:	4628      	mov	r0, r5
 8001596:	00c2      	lsls	r2, r0, #3
 8001598:	460b      	mov	r3, r1
 800159a:	3307      	adds	r3, #7
 800159c:	08db      	lsrs	r3, r3, #3
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	ebad 0d03 	sub.w	sp, sp, r3
 80015a4:	466b      	mov	r3, sp
 80015a6:	3300      	adds	r3, #0
 80015a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			strncpy((char*) message_field, (const char*) msg_start, msg_size);
 80015ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015b0:	461a      	mov	r2, r3
 80015b2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80015b6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80015ba:	f00a f926 	bl	800b80a <strncpy>
			message_field[msg_size] = '\0'; // Null-terminate
 80015be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80015c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015c6:	4413      	add	r3, r2
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]

			// Combine all sections into one array
			int total_size = 3 + 7 + 7 + 7 + msg_size; // Calculate total size
 80015cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015d0:	3318      	adds	r3, #24
 80015d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			uint8_t final_packet[total_size + 1]; // Add 1 for null termination (if needed for debug)
 80015d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015da:	1c59      	adds	r1, r3, #1
 80015dc:	1e4b      	subs	r3, r1, #1
 80015de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80015e2:	460a      	mov	r2, r1
 80015e4:	2300      	movs	r3, #0
 80015e6:	623a      	str	r2, [r7, #32]
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 80015f6:	4630      	mov	r0, r6
 80015f8:	00c3      	lsls	r3, r0, #3
 80015fa:	4628      	mov	r0, r5
 80015fc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001600:	4628      	mov	r0, r5
 8001602:	00c2      	lsls	r2, r0, #3
 8001604:	460a      	mov	r2, r1
 8001606:	2300      	movs	r3, #0
 8001608:	61ba      	str	r2, [r7, #24]
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8001618:	4630      	mov	r0, r6
 800161a:	00c3      	lsls	r3, r0, #3
 800161c:	4628      	mov	r0, r5
 800161e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001622:	4628      	mov	r0, r5
 8001624:	00c2      	lsls	r2, r0, #3
 8001626:	460b      	mov	r3, r1
 8001628:	3307      	adds	r3, #7
 800162a:	08db      	lsrs	r3, r3, #3
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	ebad 0d03 	sub.w	sp, sp, r3
 8001632:	466b      	mov	r3, sp
 8001634:	3300      	adds	r3, #0
 8001636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			int offset = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			// Copy Section 1: dp_head
			memcpy(final_packet + offset, dp_head, 3);
 8001640:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001644:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001648:	4413      	add	r3, r2
 800164a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800164e:	2203      	movs	r2, #3
 8001650:	4618      	mov	r0, r3
 8001652:	f00a f937 	bl	800b8c4 <memcpy>
			offset += 3;
 8001656:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800165a:	3303      	adds	r3, #3
 800165c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			// Copy Section 2: destination_callsign
			memcpy(final_packet + offset, destination_callsign, 7);
 8001660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001664:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001668:	4413      	add	r3, r2
 800166a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800166e:	2207      	movs	r2, #7
 8001670:	4618      	mov	r0, r3
 8001672:	f00a f927 	bl	800b8c4 <memcpy>
			offset += 7;
 8001676:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800167a:	3307      	adds	r3, #7
 800167c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			// Copy Section 3: source_callsign
			memcpy(final_packet + offset, source_callsign, 7);
 8001680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001684:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001688:	4413      	add	r3, r2
 800168a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800168e:	2207      	movs	r2, #7
 8001690:	4618      	mov	r0, r3
 8001692:	f00a f917 	bl	800b8c4 <memcpy>
			offset += 7;
 8001696:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800169a:	3307      	adds	r3, #7
 800169c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			// Copy Section 4: packet_path
			memcpy(final_packet + offset, packet_path, 7);
 80016a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016a4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80016a8:	4413      	add	r3, r2
 80016aa:	2207      	movs	r2, #7
 80016ac:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00a f907 	bl	800b8c4 <memcpy>
			offset += 7;
 80016b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016ba:	3307      	adds	r3, #7
 80016bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			// Copy Section 5: message_field
			memcpy(final_packet + offset, message_field, msg_size);
 80016c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016c4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80016c8:	4413      	add	r3, r2
 80016ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016ce:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80016d2:	4618      	mov	r0, r3
 80016d4:	f00a f8f6 	bl	800b8c4 <memcpy>
			offset += msg_size;
 80016d8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80016dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016e0:	4413      	add	r3, r2
 80016e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			final_packet[total_size] = '\0'; // Null-terminate for safety (optional for binary data)
 80016e6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80016ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016ee:	4413      	add	r3, r2
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]

			// Print the entire final packet in hex format
			myDebug("Digipeater Packet receive from DP-Station:\n");
 80016f4:	4862      	ldr	r0, [pc, #392]	; (8001880 <HAL_UART_RxCpltCallback+0x87c>)
 80016f6:	f7fe ffd5 	bl	80006a4 <myDebug>
			for (int i = 0; i < total_size; i++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001700:	e00e      	b.n	8001720 <HAL_UART_RxCpltCallback+0x71c>
				myDebug("%02x ", final_packet[i]);
 8001702:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001706:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800170a:	4413      	add	r3, r2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	4619      	mov	r1, r3
 8001710:	485c      	ldr	r0, [pc, #368]	; (8001884 <HAL_UART_RxCpltCallback+0x880>)
 8001712:	f7fe ffc7 	bl	80006a4 <myDebug>
			for (int i = 0; i < total_size; i++) {
 8001716:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800171a:	3301      	adds	r3, #1
 800171c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001720:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001724:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001728:	429a      	cmp	r2, r3
 800172a:	dbea      	blt.n	8001702 <HAL_UART_RxCpltCallback+0x6fe>
			}
			myDebug("\n");
 800172c:	4856      	ldr	r0, [pc, #344]	; (8001888 <HAL_UART_RxCpltCallback+0x884>)
 800172e:	f7fe ffb9 	bl	80006a4 <myDebug>

			getDigipeaterPacket(final_packet, msg_size);
 8001732:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4619      	mov	r1, r3
 800173a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800173e:	f7ff f85f 	bl	8000800 <getDigipeaterPacket>

			tx_buffer_len = countsDataBetweenFlags(temp_tx_dp_buffer,
 8001742:	2196      	movs	r1, #150	; 0x96
 8001744:	4851      	ldr	r0, [pc, #324]	; (800188c <HAL_UART_RxCpltCallback+0x888>)
 8001746:	f7ff f978 	bl	8000a3a <countsDataBetweenFlags>
 800174a:	4603      	mov	r3, r0
 800174c:	4a50      	ldr	r2, [pc, #320]	; (8001890 <HAL_UART_RxCpltCallback+0x88c>)
 800174e:	6013      	str	r3, [r2, #0]
					sizeof(temp_tx_dp_buffer));

			memset(tx_buffer, '\0', tx_buffer_len);
 8001750:	4b4f      	ldr	r3, [pc, #316]	; (8001890 <HAL_UART_RxCpltCallback+0x88c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	2100      	movs	r1, #0
 8001758:	484e      	ldr	r0, [pc, #312]	; (8001894 <HAL_UART_RxCpltCallback+0x890>)
 800175a:	f00a f87f 	bl	800b85c <memset>

//			myDebug("Digipeater Packet complete, ready to TX: 0x%x\r\n",
//					temp_tx_dp_buffer);
			for (int j = 0; j < tx_buffer_len; j++) {
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001764:	e00f      	b.n	8001786 <HAL_UART_RxCpltCallback+0x782>
				tx_buffer[j] = temp_tx_dp_buffer[j];
 8001766:	4a49      	ldr	r2, [pc, #292]	; (800188c <HAL_UART_RxCpltCallback+0x888>)
 8001768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800176c:	4413      	add	r3, r2
 800176e:	7819      	ldrb	r1, [r3, #0]
 8001770:	4a48      	ldr	r2, [pc, #288]	; (8001894 <HAL_UART_RxCpltCallback+0x890>)
 8001772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001776:	4413      	add	r3, r2
 8001778:	460a      	mov	r2, r1
 800177a:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < tx_buffer_len; j++) {
 800177c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001780:	3301      	adds	r3, #1
 8001782:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001786:	4b42      	ldr	r3, [pc, #264]	; (8001890 <HAL_UART_RxCpltCallback+0x88c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800178e:	429a      	cmp	r2, r3
 8001790:	dbe9      	blt.n	8001766 <HAL_UART_RxCpltCallback+0x762>
//				myDebug("%02x ", tx_buffer[j]);
			}
//			myDebug("\r\n");
//			myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

			memset(cmd_temp, '\0', sizeof(cmd_temp));
 8001792:	2234      	movs	r2, #52	; 0x34
 8001794:	2100      	movs	r1, #0
 8001796:	4840      	ldr	r0, [pc, #256]	; (8001898 <HAL_UART_RxCpltCallback+0x894>)
 8001798:	f00a f860 	bl	800b85c <memset>
			memset(temp_tx_dp_buffer, '\0', sizeof(temp_tx_dp_buffer));
 800179c:	2296      	movs	r2, #150	; 0x96
 800179e:	2100      	movs	r1, #0
 80017a0:	483a      	ldr	r0, [pc, #232]	; (800188c <HAL_UART_RxCpltCallback+0x888>)
 80017a2:	f00a f85b 	bl	800b85c <memset>

			delay_us(500000);
 80017a6:	483d      	ldr	r0, [pc, #244]	; (800189c <HAL_UART_RxCpltCallback+0x898>)
 80017a8:	f7fe ffb6 	bl	8000718 <delay_us>

			setPacketParams(tx_buffer_len);
 80017ac:	4b38      	ldr	r3, [pc, #224]	; (8001890 <HAL_UART_RxCpltCallback+0x88c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fbae 	bl	8000f14 <setPacketParams>
			setModulationParams(GFSK_BR_1200,
 80017b8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80017bc:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80017c0:	f7ff fbd2 	bl	8000f68 <setModulationParams>
			GFSK_FDEV_1200);
			radioConfig(tx_buffer, tx_buffer_len);
 80017c4:	4b32      	ldr	r3, [pc, #200]	; (8001890 <HAL_UART_RxCpltCallback+0x88c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4619      	mov	r1, r3
 80017cc:	4831      	ldr	r0, [pc, #196]	; (8001894 <HAL_UART_RxCpltCallback+0x890>)
 80017ce:	f7ff fbe9 	bl	8000fa4 <radioConfig>

			myDebug("\n########## Digipeater TX Configuration: ##########\n");
 80017d2:	4833      	ldr	r0, [pc, #204]	; (80018a0 <HAL_UART_RxCpltCallback+0x89c>)
 80017d4:	f7fe ff66 	bl	80006a4 <myDebug>

			myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n",
 80017d8:	4932      	ldr	r1, [pc, #200]	; (80018a4 <HAL_UART_RxCpltCallback+0x8a0>)
 80017da:	4833      	ldr	r0, [pc, #204]	; (80018a8 <HAL_UART_RxCpltCallback+0x8a4>)
 80017dc:	f7fe ff62 	bl	80006a4 <myDebug>
			FREQ_437_MHZ);
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 80017e0:	4b32      	ldr	r3, [pc, #200]	; (80018ac <HAL_UART_RxCpltCallback+0x8a8>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4832      	ldr	r0, [pc, #200]	; (80018b0 <HAL_UART_RxCpltCallback+0x8ac>)
 80017e8:	f7fe ff5c 	bl	80006a4 <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 80017ec:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <HAL_UART_RxCpltCallback+0x8a8>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4619      	mov	r1, r3
 80017f2:	4830      	ldr	r0, [pc, #192]	; (80018b4 <HAL_UART_RxCpltCallback+0x8b0>)
 80017f4:	f7fe ff56 	bl	80006a4 <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 80017f8:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <HAL_UART_RxCpltCallback+0x8a8>)
 80017fa:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80017fc:	4619      	mov	r1, r3
 80017fe:	482e      	ldr	r0, [pc, #184]	; (80018b8 <HAL_UART_RxCpltCallback+0x8b4>)
 8001800:	f7fe ff50 	bl	80006a4 <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_UART_RxCpltCallback+0x8b8>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	482d      	ldr	r0, [pc, #180]	; (80018c0 <HAL_UART_RxCpltCallback+0x8bc>)
 800180c:	f7fe ff4a 	bl	80006a4 <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_UART_RxCpltCallback+0x8b8>)
 8001812:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 8001814:	4619      	mov	r1, r3
 8001816:	482b      	ldr	r0, [pc, #172]	; (80018c4 <HAL_UART_RxCpltCallback+0x8c0>)
 8001818:	f7fe ff44 	bl	80006a4 <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <HAL_UART_RxCpltCallback+0x8b8>)
 800181e:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 8001820:	4619      	mov	r1, r3
 8001822:	4829      	ldr	r0, [pc, #164]	; (80018c8 <HAL_UART_RxCpltCallback+0x8c4>)
 8001824:	f7fe ff3e 	bl	80006a4 <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <HAL_UART_RxCpltCallback+0x8b8>)
 800182a:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 800182c:	4619      	mov	r1, r3
 800182e:	4827      	ldr	r0, [pc, #156]	; (80018cc <HAL_UART_RxCpltCallback+0x8c8>)
 8001830:	f7fe ff38 	bl	80006a4 <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_UART_RxCpltCallback+0x8b8>)
 8001836:	79db      	ldrb	r3, [r3, #7]
 8001838:	4619      	mov	r1, r3
 800183a:	4825      	ldr	r0, [pc, #148]	; (80018d0 <HAL_UART_RxCpltCallback+0x8cc>)
 800183c:	f7fe ff32 	bl	80006a4 <myDebug>
			myDebug("__________*******************__________\r\n");
 8001840:	4824      	ldr	r0, [pc, #144]	; (80018d4 <HAL_UART_RxCpltCallback+0x8d0>)
 8001842:	f7fe ff2f 	bl	80006a4 <myDebug>

			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001846:	4817      	ldr	r0, [pc, #92]	; (80018a4 <HAL_UART_RxCpltCallback+0x8a0>)
 8001848:	f008 fd8c 	bl	800a364 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 800184c:	2101      	movs	r1, #1
 800184e:	2001      	movs	r0, #1
 8001850:	f009 f9d0 	bl	800abf4 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_UART_RxCpltCallback+0x88c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2200      	movs	r2, #0
 800185c:	4619      	mov	r1, r3
 800185e:	480d      	ldr	r0, [pc, #52]	; (8001894 <HAL_UART_RxCpltCallback+0x890>)
 8001860:	f008 fa42 	bl	8009ce8 <SUBGRF_SendPayload>
 8001864:	46a5      	mov	sp, r4
				&& cmd_temp[2] == 0x53) {								 //S2S
 8001866:	e284      	b.n	8001d72 <HAL_UART_RxCpltCallback+0xd6e>

		} else {
 8001868:	466b      	mov	r3, sp
 800186a:	461e      	mov	r6, r3

			uint8_t source_call_sign_temp[13];
			int a = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			for (int loop2 = 39; loop2 < 52; loop2++) {
 8001872:	2327      	movs	r3, #39	; 0x27
 8001874:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001878:	e044      	b.n	8001904 <HAL_UART_RxCpltCallback+0x900>
 800187a:	bf00      	nop
 800187c:	0800c2c0 	.word	0x0800c2c0
 8001880:	0800c2c4 	.word	0x0800c2c4
 8001884:	0800c2f0 	.word	0x0800c2f0
 8001888:	0800c2f8 	.word	0x0800c2f8
 800188c:	20000454 	.word	0x20000454
 8001890:	200003ec 	.word	0x200003ec
 8001894:	200003f0 	.word	0x200003f0
 8001898:	2000031c 	.word	0x2000031c
 800189c:	0007a120 	.word	0x0007a120
 80018a0:	0800c2fc 	.word	0x0800c2fc
 80018a4:	1a11d018 	.word	0x1a11d018
 80018a8:	0800c334 	.word	0x0800c334
 80018ac:	200002ec 	.word	0x200002ec
 80018b0:	0800c1d4 	.word	0x0800c1d4
 80018b4:	0800c1e4 	.word	0x0800c1e4
 80018b8:	0800c200 	.word	0x0800c200
 80018bc:	200002d8 	.word	0x200002d8
 80018c0:	0800c21c 	.word	0x0800c21c
 80018c4:	0800c230 	.word	0x0800c230
 80018c8:	0800c248 	.word	0x0800c248
 80018cc:	0800c260 	.word	0x0800c260
 80018d0:	0800c278 	.word	0x0800c278
 80018d4:	0800c35c 	.word	0x0800c35c
				source_call_sign_temp[a] = cmd_temp[loop2];
 80018d8:	4ad1      	ldr	r2, [pc, #836]	; (8001c20 <HAL_UART_RxCpltCallback+0xc1c>)
 80018da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018de:	4413      	add	r3, r2
 80018e0:	7819      	ldrb	r1, [r3, #0]
 80018e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80018e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018ea:	441a      	add	r2, r3
 80018ec:	460b      	mov	r3, r1
 80018ee:	7013      	strb	r3, [r2, #0]
//				myDebug("%02x ", source_call_sign_temp[a]);
				a++;
 80018f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018f4:	3301      	adds	r3, #1
 80018f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			for (int loop2 = 39; loop2 < 52; loop2++) {
 80018fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018fe:	3301      	adds	r3, #1
 8001900:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001904:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001908:	2b33      	cmp	r3, #51	; 0x33
 800190a:	dde5      	ble.n	80018d8 <HAL_UART_RxCpltCallback+0x8d4>
			}
//			myDebug("\r\n");

			int source_call_sign_len_temp = countsDataBeforeFirstSpace(
 800190c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001910:	210d      	movs	r1, #13
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f8f0 	bl	8000af8 <countsDataBeforeFirstSpace>
 8001918:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					source_call_sign_temp, sizeof(source_call_sign_temp));

			int source_call_sign_len = source_call_sign_len_temp;
 800191c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001920:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

//			myDebug("length of call sign %d\n", source_call_sign_len_temp);

			for (int j = 0; j < source_call_sign_len_temp; j++) {
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800192a:	e012      	b.n	8001952 <HAL_UART_RxCpltCallback+0x94e>
				// Check if the current element is 0x2D
				if (source_call_sign_temp[j] == 0x2D) {
 800192c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001930:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001934:	4413      	add	r3, r2
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b2d      	cmp	r3, #45	; 0x2d
 800193a:	d105      	bne.n	8001948 <HAL_UART_RxCpltCallback+0x944>
					--source_call_sign_len;
 800193c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001940:	3b01      	subs	r3, #1
 8001942:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
					continue; // Skip this element
 8001946:	bf00      	nop
			for (int j = 0; j < source_call_sign_len_temp; j++) {
 8001948:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800194c:	3301      	adds	r3, #1
 800194e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001952:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001956:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800195a:	429a      	cmp	r2, r3
 800195c:	dbe6      	blt.n	800192c <HAL_UART_RxCpltCallback+0x928>
				}
			}

			uint8_t source_call_sign[source_call_sign_len];
 800195e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8001962:	1e4b      	subs	r3, r1, #1
 8001964:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001968:	460a      	mov	r2, r1
 800196a:	2300      	movs	r3, #0
 800196c:	4614      	mov	r4, r2
 800196e:	461d      	mov	r5, r3
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	00eb      	lsls	r3, r5, #3
 800197a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800197e:	00e2      	lsls	r2, r4, #3
 8001980:	460a      	mov	r2, r1
 8001982:	2300      	movs	r3, #0
 8001984:	613a      	str	r2, [r7, #16]
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001994:	4628      	mov	r0, r5
 8001996:	00c3      	lsls	r3, r0, #3
 8001998:	4620      	mov	r0, r4
 800199a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800199e:	4620      	mov	r0, r4
 80019a0:	00c2      	lsls	r2, r0, #3
 80019a2:	460b      	mov	r3, r1
 80019a4:	3307      	adds	r3, #7
 80019a6:	08db      	lsrs	r3, r3, #3
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	ebad 0d03 	sub.w	sp, sp, r3
 80019ae:	466b      	mov	r3, sp
 80019b0:	3300      	adds	r3, #0
 80019b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

			int l = 0; // Index for source_call_sign array
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

			for (int j = 0; j < source_call_sign_len_temp; j++) {
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80019c2:	e022      	b.n	8001a0a <HAL_UART_RxCpltCallback+0xa06>
				// Check if the current element is 0x2D
				if (source_call_sign_temp[j] == 0x2D) {
 80019c4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80019c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019cc:	4413      	add	r3, r2
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b2d      	cmp	r3, #45	; 0x2d
 80019d2:	d014      	beq.n	80019fe <HAL_UART_RxCpltCallback+0x9fa>
					continue; // Skip this element
				}

				// Copy the next valid element to source_call_sign[k]
				source_call_sign[l] = source_call_sign_temp[j] << 1;
 80019d4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80019d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019dc:	4413      	add	r3, r2
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	b2d9      	uxtb	r1, r3
 80019e4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80019e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80019ec:	4413      	add	r3, r2
 80019ee:	460a      	mov	r2, r1
 80019f0:	701a      	strb	r2, [r3, #0]

//				myDebug("%02x ", source_call_sign[l]);

				l++;
 80019f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80019f6:	3301      	adds	r3, #1
 80019f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80019fc:	e000      	b.n	8001a00 <HAL_UART_RxCpltCallback+0x9fc>
					continue; // Skip this element
 80019fe:	bf00      	nop
			for (int j = 0; j < source_call_sign_len_temp; j++) {
 8001a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a04:	3301      	adds	r3, #1
 8001a06:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a12:	429a      	cmp	r2, r3
 8001a14:	dbd6      	blt.n	80019c4 <HAL_UART_RxCpltCallback+0x9c0>
			}
//			myDebug("\n");

			for (int loop2 = 0; loop2 < sizeof(main_cmd_temp); loop2++) {
 8001a16:	2300      	movs	r3, #0
 8001a18:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001a1c:	e00f      	b.n	8001a3e <HAL_UART_RxCpltCallback+0xa3a>
				main_cmd_temp[loop2] = cmd_temp[loop2];
 8001a1e:	4a80      	ldr	r2, [pc, #512]	; (8001c20 <HAL_UART_RxCpltCallback+0xc1c>)
 8001a20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a24:	4413      	add	r3, r2
 8001a26:	7819      	ldrb	r1, [r3, #0]
 8001a28:	4a7e      	ldr	r2, [pc, #504]	; (8001c24 <HAL_UART_RxCpltCallback+0xc20>)
 8001a2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a2e:	4413      	add	r3, r2
 8001a30:	460a      	mov	r2, r1
 8001a32:	701a      	strb	r2, [r3, #0]
			for (int loop2 = 0; loop2 < sizeof(main_cmd_temp); loop2++) {
 8001a34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001a3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a42:	2b25      	cmp	r3, #37	; 0x25
 8001a44:	d9eb      	bls.n	8001a1e <HAL_UART_RxCpltCallback+0xa1a>
//				myDebug("%02x ", main_cmd_temp[loop2]);
			}

			int input_length = sizeof(main_cmd_temp) / sizeof(main_cmd_temp[0]);
 8001a46:	2326      	movs	r3, #38	; 0x26
 8001a48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			// Temporary array to store non-space characters
			uint8_t temp_chars[input_length];
 8001a4c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001a50:	1e4b      	subs	r3, r1, #1
 8001a52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a56:	460a      	mov	r2, r1
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60ba      	str	r2, [r7, #8]
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	00c3      	lsls	r3, r0, #3
 8001a6e:	4620      	mov	r0, r4
 8001a70:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a74:	4620      	mov	r0, r4
 8001a76:	00c2      	lsls	r2, r0, #3
 8001a78:	460a      	mov	r2, r1
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603a      	str	r2, [r7, #0]
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	00c3      	lsls	r3, r0, #3
 8001a90:	4620      	mov	r0, r4
 8001a92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a96:	4620      	mov	r0, r4
 8001a98:	00c2      	lsls	r2, r0, #3
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	3307      	adds	r3, #7
 8001a9e:	08db      	lsrs	r3, r3, #3
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	ebad 0d03 	sub.w	sp, sp, r3
 8001aa6:	466b      	mov	r3, sp
 8001aa8:	3300      	adds	r3, #0
 8001aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			int temp_count = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			// Filter out space characters (ASCII 0x20)
			for (int i = 0; i < input_length; i++) {
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001aba:	e018      	b.n	8001aee <HAL_UART_RxCpltCallback+0xaea>
				if (main_cmd_temp[i] != 0x20) {
 8001abc:	4a59      	ldr	r2, [pc, #356]	; (8001c24 <HAL_UART_RxCpltCallback+0xc20>)
 8001abe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d00c      	beq.n	8001ae4 <HAL_UART_RxCpltCallback+0xae0>
					temp_chars[temp_count++] = main_cmd_temp[i];
 8001aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001ad4:	4953      	ldr	r1, [pc, #332]	; (8001c24 <HAL_UART_RxCpltCallback+0xc20>)
 8001ad6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001ada:	440a      	add	r2, r1
 8001adc:	7811      	ldrb	r1, [r2, #0]
 8001ade:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ae2:	54d1      	strb	r1, [r2, r3]
			for (int i = 0; i < input_length; i++) {
 8001ae4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001aee:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dbe0      	blt.n	8001abc <HAL_UART_RxCpltCallback+0xab8>
				}
			}

			// Calculate the number of bytes
			int byte_count = temp_count / 2;
 8001afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001afe:	0fda      	lsrs	r2, r3, #31
 8001b00:	4413      	add	r3, r2
 8001b02:	105b      	asrs	r3, r3, #1
 8001b04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			// Output byte array
			uint8_t byte_array[byte_count];
 8001b08:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8001b0c:	1e63      	subs	r3, r4, #1
 8001b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b10:	4622      	mov	r2, r4
 8001b12:	2300      	movs	r3, #0
 8001b14:	4692      	mov	sl, r2
 8001b16:	469b      	mov	fp, r3
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	2300      	movs	r3, #0
 8001b30:	4690      	mov	r8, r2
 8001b32:	4699      	mov	r9, r3
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b48:	4623      	mov	r3, r4
 8001b4a:	3307      	adds	r3, #7
 8001b4c:	08db      	lsrs	r3, r3, #3
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	ebad 0d03 	sub.w	sp, sp, r3
 8001b54:	466b      	mov	r3, sp
 8001b56:	3300      	adds	r3, #0
 8001b58:	67bb      	str	r3, [r7, #120]	; 0x78

			// Convert pairs of characters to bytes
			for (int i = 0; i < byte_count; i++) {
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b60:	e02c      	b.n	8001bbc <HAL_UART_RxCpltCallback+0xbb8>
				uint8_t high_nibble = acciiToHex(temp_chars[2 * i]);
 8001b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001b6c:	5cd3      	ldrb	r3, [r2, r3]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f935 	bl	8000dde <acciiToHex>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				uint8_t low_nibble = acciiToHex(temp_chars[2 * i + 1]);
 8001b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	3301      	adds	r3, #1
 8001b82:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff f928 	bl	8000dde <acciiToHex>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

				byte_array[i] = (high_nibble << 4) | low_nibble;
 8001b94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	b25a      	sxtb	r2, r3
 8001b9c:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	b2d9      	uxtb	r1, r3
 8001ba6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001bac:	4413      	add	r3, r2
 8001bae:	460a      	mov	r2, r1
 8001bb0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < byte_count; i++) {
 8001bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001bbc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001bc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbcc      	blt.n	8001b62 <HAL_UART_RxCpltCallback+0xb5e>
			}

			myDebug("\n-->Main command Received: 0x%x\r\n", main_cmd);
 8001bc8:	4917      	ldr	r1, [pc, #92]	; (8001c28 <HAL_UART_RxCpltCallback+0xc24>)
 8001bca:	4818      	ldr	r0, [pc, #96]	; (8001c2c <HAL_UART_RxCpltCallback+0xc28>)
 8001bcc:	f7fe fd6a 	bl	80006a4 <myDebug>

			if (sizeof(byte_array) == main_cmd_len) {
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_UART_RxCpltCallback+0xc2c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	429c      	cmp	r4, r3
 8001bd6:	f040 80a0 	bne.w	8001d1a <HAL_UART_RxCpltCallback+0xd16>
				//			myDebug("-->Command ACK: 0x%x\r\n", main_cmd);
				for (int i = 0; i < main_cmd_len; i++) {
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001be0:	e00f      	b.n	8001c02 <HAL_UART_RxCpltCallback+0xbfe>
					main_cmd[i] = byte_array[i];
 8001be2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001be4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001be8:	4413      	add	r3, r2
 8001bea:	7819      	ldrb	r1, [r3, #0]
 8001bec:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <HAL_UART_RxCpltCallback+0xc24>)
 8001bee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001bf2:	4413      	add	r3, r2
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < main_cmd_len; i++) {
 8001bf8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_UART_RxCpltCallback+0xc2c>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	dbe8      	blt.n	8001be2 <HAL_UART_RxCpltCallback+0xbde>
//					myDebug("%02x ", main_cmd[i]);
				}
//				myDebug("\r\n");

				int k = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
				for (int i = 0; i < main_cmd_len; i++) {
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001c1c:	e028      	b.n	8001c70 <HAL_UART_RxCpltCallback+0xc6c>
 8001c1e:	bf00      	nop
 8001c20:	2000031c 	.word	0x2000031c
 8001c24:	20000350 	.word	0x20000350
 8001c28:	20000378 	.word	0x20000378
 8001c2c:	0800c388 	.word	0x0800c388
 8001c30:	20000002 	.word	0x20000002
					gs_cmd[k] = main_cmd[i];
 8001c34:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <HAL_UART_RxCpltCallback+0xd7c>)
 8001c36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001c3a:	4413      	add	r3, r2
 8001c3c:	7819      	ldrb	r1, [r3, #0]
 8001c3e:	4a51      	ldr	r2, [pc, #324]	; (8001d84 <HAL_UART_RxCpltCallback+0xd80>)
 8001c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c44:	4413      	add	r3, r2
 8001c46:	460a      	mov	r2, r1
 8001c48:	701a      	strb	r2, [r3, #0]
					myDebug("%02x ", gs_cmd[k]);
 8001c4a:	4a4e      	ldr	r2, [pc, #312]	; (8001d84 <HAL_UART_RxCpltCallback+0xd80>)
 8001c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c50:	4413      	add	r3, r2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	484c      	ldr	r0, [pc, #304]	; (8001d88 <HAL_UART_RxCpltCallback+0xd84>)
 8001c58:	f7fe fd24 	bl	80006a4 <myDebug>
					k++;
 8001c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c60:	3301      	adds	r3, #1
 8001c62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
				for (int i = 0; i < main_cmd_len; i++) {
 8001c66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001c70:	4b46      	ldr	r3, [pc, #280]	; (8001d8c <HAL_UART_RxCpltCallback+0xd88>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	dbda      	blt.n	8001c34 <HAL_UART_RxCpltCallback+0xc30>
				}
				myDebug("\n");
 8001c7e:	4844      	ldr	r0, [pc, #272]	; (8001d90 <HAL_UART_RxCpltCallback+0xd8c>)
 8001c80:	f7fe fd10 	bl	80006a4 <myDebug>

				for (int i = 0; i < source_call_sign_len; i++) {
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001c8a:	e01e      	b.n	8001cca <HAL_UART_RxCpltCallback+0xcc6>
					gs_cmd[k] = source_call_sign[i];
 8001c8c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c94:	4413      	add	r3, r2
 8001c96:	7819      	ldrb	r1, [r3, #0]
 8001c98:	4a3a      	ldr	r2, [pc, #232]	; (8001d84 <HAL_UART_RxCpltCallback+0xd80>)
 8001c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c9e:	4413      	add	r3, r2
 8001ca0:	460a      	mov	r2, r1
 8001ca2:	701a      	strb	r2, [r3, #0]
					myDebug("%02x ", gs_cmd[k]);
 8001ca4:	4a37      	ldr	r2, [pc, #220]	; (8001d84 <HAL_UART_RxCpltCallback+0xd80>)
 8001ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001caa:	4413      	add	r3, r2
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4835      	ldr	r0, [pc, #212]	; (8001d88 <HAL_UART_RxCpltCallback+0xd84>)
 8001cb2:	f7fe fcf7 	bl	80006a4 <myDebug>
					k++;
 8001cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
				for (int i = 0; i < source_call_sign_len; i++) {
 8001cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001cca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001cce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	dbda      	blt.n	8001c8c <HAL_UART_RxCpltCallback+0xc88>
				}
				myDebug("\n");
 8001cd6:	482e      	ldr	r0, [pc, #184]	; (8001d90 <HAL_UART_RxCpltCallback+0xd8c>)
 8001cd8:	f7fe fce4 	bl	80006a4 <myDebug>

				// Check if k is less than 20, and fill remaining bytes
				if (k < 20) {
 8001cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ce0:	2b13      	cmp	r3, #19
 8001ce2:	dc16      	bgt.n	8001d12 <HAL_UART_RxCpltCallback+0xd0e>
					// Fill the remaining bytes with 0x40
					for (int i = k; i < 19; i++) {
 8001ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ce8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001cec:	e00a      	b.n	8001d04 <HAL_UART_RxCpltCallback+0xd00>
						gs_cmd[i] = 0x40;
 8001cee:	4a25      	ldr	r2, [pc, #148]	; (8001d84 <HAL_UART_RxCpltCallback+0xd80>)
 8001cf0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001cf4:	4413      	add	r3, r2
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	701a      	strb	r2, [r3, #0]
					for (int i = k; i < 19; i++) {
 8001cfa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001d04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d08:	2b12      	cmp	r3, #18
 8001d0a:	ddf0      	ble.n	8001cee <HAL_UART_RxCpltCallback+0xcea>
					}

					// Set the last byte to 0x61
					gs_cmd[19] = 0x61;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_UART_RxCpltCallback+0xd80>)
 8001d0e:	2261      	movs	r2, #97	; 0x61
 8001d10:	74da      	strb	r2, [r3, #19]
//				for (int i = 0; i < gs_cmd_len; i++) {
//					myDebug("%02x ", gs_cmd[i]);
//				}
//				myDebug("\r\n");

				TX_FLAG = 1;
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_UART_RxCpltCallback+0xd90>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e029      	b.n	8001d6e <HAL_UART_RxCpltCallback+0xd6a>

			} else {
				myDebug("-->Command Not ACK: 0x%x\r\n", main_cmd);
 8001d1a:	4919      	ldr	r1, [pc, #100]	; (8001d80 <HAL_UART_RxCpltCallback+0xd7c>)
 8001d1c:	481e      	ldr	r0, [pc, #120]	; (8001d98 <HAL_UART_RxCpltCallback+0xd94>)
 8001d1e:	f7fe fcc1 	bl	80006a4 <myDebug>

				for (int i = 0; i < main_cmd_len; i++) {
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001d28:	e00d      	b.n	8001d46 <HAL_UART_RxCpltCallback+0xd42>
					myDebug("%02x ", main_cmd[i]);
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_UART_RxCpltCallback+0xd7c>)
 8001d2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d30:	4413      	add	r3, r2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	4814      	ldr	r0, [pc, #80]	; (8001d88 <HAL_UART_RxCpltCallback+0xd84>)
 8001d38:	f7fe fcb4 	bl	80006a4 <myDebug>
				for (int i = 0; i < main_cmd_len; i++) {
 8001d3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d40:	3301      	adds	r3, #1
 8001d42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_UART_RxCpltCallback+0xd88>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d50:	4293      	cmp	r3, r2
 8001d52:	dbea      	blt.n	8001d2a <HAL_UART_RxCpltCallback+0xd26>
				}
				myDebug("\r\n");
 8001d54:	4811      	ldr	r0, [pc, #68]	; (8001d9c <HAL_UART_RxCpltCallback+0xd98>)
 8001d56:	f7fe fca5 	bl	80006a4 <myDebug>

				memset(main_cmd, '\0', main_cmd_len);
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_UART_RxCpltCallback+0xd88>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2100      	movs	r1, #0
 8001d62:	4807      	ldr	r0, [pc, #28]	; (8001d80 <HAL_UART_RxCpltCallback+0xd7c>)
 8001d64:	f009 fd7a 	bl	800b85c <memset>
				TX_FLAG = 0;
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_UART_RxCpltCallback+0xd90>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	46b5      	mov	sp, r6
			}
		}

	}
}
 8001d70:	e7ff      	b.n	8001d72 <HAL_UART_RxCpltCallback+0xd6e>
 8001d72:	bf00      	nop
 8001d74:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000378 	.word	0x20000378
 8001d84:	20000308 	.word	0x20000308
 8001d88:	0800c2f0 	.word	0x0800c2f0
 8001d8c:	20000002 	.word	0x20000002
 8001d90:	0800c2f8 	.word	0x0800c2f8
 8001d94:	20000558 	.word	0x20000558
 8001d98:	0800c3ac 	.word	0x0800c3ac
 8001d9c:	0800c3c8 	.word	0x0800c3c8

08001da0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001da6:	f001 f8a9 	bl	8002efc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001daa:	f000 f991 	bl	80020d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001dae:	f7ff f857 	bl	8000e60 <MX_GPIO_Init>
	MX_DMA_Init();
 8001db2:	f7fe fde9 	bl	8000988 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001db6:	f000 ff37 	bl	8002c28 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8001dba:	f000 fdc3 	bl	8002944 <MX_TIM2_Init>
	MX_SubGHz_Phy_Init();
 8001dbe:	f009 f958 	bl	800b072 <MX_SubGHz_Phy_Init>
	MX_USART1_UART_Init();
 8001dc2:	f000 fee5 	bl	8002b90 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 8001dc6:	4898      	ldr	r0, [pc, #608]	; (8002028 <main+0x288>)
 8001dc8:	f003 ff4a 	bl	8005c60 <HAL_TIM_Base_Start>

	SUBGRF_Init(DioIrqHndlr);
 8001dcc:	4897      	ldr	r0, [pc, #604]	; (800202c <main+0x28c>)
 8001dce:	f007 ff07 	bl	8009be0 <SUBGRF_Init>
	SUBGRF_SetDioIrqParams(
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f240 210f 	movw	r1, #527	; 0x20f
 8001dda:	f240 200f 	movw	r0, #527	; 0x20f
 8001dde:	f008 fa65 	bl	800a2ac <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	myDebug("########## Slippers2Sat Ground Station: BEGIN ##########\r\n");
 8001de2:	4893      	ldr	r0, [pc, #588]	; (8002030 <main+0x290>)
 8001de4:	f7fe fc5e 	bl	80006a4 <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 8001de8:	4892      	ldr	r0, [pc, #584]	; (8002034 <main+0x294>)
 8001dea:	f7fe fc5b 	bl	80006a4 <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 8001dee:	4892      	ldr	r0, [pc, #584]	; (8002038 <main+0x298>)
 8001df0:	f7fe fc58 	bl	80006a4 <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz, UPLINK FREQ: %lu Hz\r\n",
 8001df4:	4a91      	ldr	r2, [pc, #580]	; (800203c <main+0x29c>)
 8001df6:	4992      	ldr	r1, [pc, #584]	; (8002040 <main+0x2a0>)
 8001df8:	4892      	ldr	r0, [pc, #584]	; (8002044 <main+0x2a4>)
 8001dfa:	f7fe fc53 	bl	80006a4 <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 8001dfe:	4892      	ldr	r0, [pc, #584]	; (8002048 <main+0x2a8>)
 8001e00:	f7fe fc50 	bl	80006a4 <myDebug>
	myDebug(
 8001e04:	230e      	movs	r3, #14
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2107      	movs	r1, #7
 8001e0e:	488f      	ldr	r0, [pc, #572]	; (800204c <main+0x2ac>)
 8001e10:	f7fe fc48 	bl	80006a4 <myDebug>
			"POWER CONFIG:::: \n"
					"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug(
 8001e14:	488e      	ldr	r0, [pc, #568]	; (8002050 <main+0x2b0>)
 8001e16:	f7fe fc45 	bl	80006a4 <myDebug>
			"\n########## Operation Starts, Perform any one operation: ##########\r\n");
	myDebug("1. Transmit Command of 13 bytes\r\n");
 8001e1a:	488e      	ldr	r0, [pc, #568]	; (8002054 <main+0x2b4>)
 8001e1c:	f7fe fc42 	bl	80006a4 <myDebug>
	myDebug("2. Wait to receive beacon from Satellite\r\n");
 8001e20:	488d      	ldr	r0, [pc, #564]	; (8002058 <main+0x2b8>)
 8001e22:	f7fe fc3f 	bl	80006a4 <myDebug>

	setPacketParams(rx_buffer_len);
 8001e26:	4b8d      	ldr	r3, [pc, #564]	; (800205c <main+0x2bc>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f872 	bl	8000f14 <setPacketParams>
	setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 8001e30:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8001e34:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 8001e38:	f7ff f896 	bl	8000f68 <setModulationParams>
	radioConfig(rx_buffer, rx_buffer_len);
 8001e3c:	4b87      	ldr	r3, [pc, #540]	; (800205c <main+0x2bc>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	4887      	ldr	r0, [pc, #540]	; (8002060 <main+0x2c0>)
 8001e44:	f7ff f8ae 	bl	8000fa4 <radioConfig>

	myDebug("\n########## RX Configuration: ##########\n");
 8001e48:	4886      	ldr	r0, [pc, #536]	; (8002064 <main+0x2c4>)
 8001e4a:	f7fe fc2b 	bl	80006a4 <myDebug>

	myDebug("FREQUENCY MODS: Downlink FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 8001e4e:	497c      	ldr	r1, [pc, #496]	; (8002040 <main+0x2a0>)
 8001e50:	4885      	ldr	r0, [pc, #532]	; (8002068 <main+0x2c8>)
 8001e52:	f7fe fc27 	bl	80006a4 <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001e56:	4b85      	ldr	r3, [pc, #532]	; (800206c <main+0x2cc>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4884      	ldr	r0, [pc, #528]	; (8002070 <main+0x2d0>)
 8001e5e:	f7fe fc21 	bl	80006a4 <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8001e62:	4b82      	ldr	r3, [pc, #520]	; (800206c <main+0x2cc>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	4619      	mov	r1, r3
 8001e68:	4882      	ldr	r0, [pc, #520]	; (8002074 <main+0x2d4>)
 8001e6a:	f7fe fc1b 	bl	80006a4 <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 8001e6e:	4b7f      	ldr	r3, [pc, #508]	; (800206c <main+0x2cc>)
 8001e70:	7b5b      	ldrb	r3, [r3, #13]
 8001e72:	4619      	mov	r1, r3
 8001e74:	4880      	ldr	r0, [pc, #512]	; (8002078 <main+0x2d8>)
 8001e76:	f7fe fc15 	bl	80006a4 <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001e7a:	4b80      	ldr	r3, [pc, #512]	; (800207c <main+0x2dc>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	487f      	ldr	r0, [pc, #508]	; (8002080 <main+0x2e0>)
 8001e82:	f7fe fc0f 	bl	80006a4 <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 8001e86:	4b7d      	ldr	r3, [pc, #500]	; (800207c <main+0x2dc>)
 8001e88:	7a1b      	ldrb	r3, [r3, #8]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	487d      	ldr	r0, [pc, #500]	; (8002084 <main+0x2e4>)
 8001e8e:	f7fe fc09 	bl	80006a4 <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 8001e92:	4b7a      	ldr	r3, [pc, #488]	; (800207c <main+0x2dc>)
 8001e94:	885b      	ldrh	r3, [r3, #2]
 8001e96:	4619      	mov	r1, r3
 8001e98:	487b      	ldr	r0, [pc, #492]	; (8002088 <main+0x2e8>)
 8001e9a:	f7fe fc03 	bl	80006a4 <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 8001e9e:	4b77      	ldr	r3, [pc, #476]	; (800207c <main+0x2dc>)
 8001ea0:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4879      	ldr	r0, [pc, #484]	; (800208c <main+0x2ec>)
 8001ea6:	f7fe fbfd 	bl	80006a4 <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001eaa:	4b74      	ldr	r3, [pc, #464]	; (800207c <main+0x2dc>)
 8001eac:	79db      	ldrb	r3, [r3, #7]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4877      	ldr	r0, [pc, #476]	; (8002090 <main+0x2f0>)
 8001eb2:	f7fe fbf7 	bl	80006a4 <myDebug>
	myDebug("______________*******************______________\r\n");
 8001eb6:	4877      	ldr	r0, [pc, #476]	; (8002094 <main+0x2f4>)
 8001eb8:	f7fe fbf4 	bl	80006a4 <myDebug>

	SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001ebc:	4860      	ldr	r0, [pc, #384]	; (8002040 <main+0x2a0>)
 8001ebe:	f008 fa51 	bl	800a364 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f008 fe95 	bl	800abf4 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 8001eca:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001ece:	f008 f875 	bl	8009fbc <SUBGRF_SetRxBoosted>

	HAL_UART_Receive_DMA(&huart2, cmd_temp, cmd_temp_len);
 8001ed2:	4b71      	ldr	r3, [pc, #452]	; (8002098 <main+0x2f8>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4970      	ldr	r1, [pc, #448]	; (800209c <main+0x2fc>)
 8001edc:	4870      	ldr	r0, [pc, #448]	; (80020a0 <main+0x300>)
 8001ede:	f004 fb83 	bl	80065e8 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 8001ee2:	f009 f8ce 	bl	800b082 <MX_SubGHz_Phy_Process>

		/* USER CODE BEGIN 3 */

		delay_us(500000);
 8001ee6:	486f      	ldr	r0, [pc, #444]	; (80020a4 <main+0x304>)
 8001ee8:	f7fe fc16 	bl	8000718 <delay_us>

		if (TX_FLAG) {
 8001eec:	4b6e      	ldr	r3, [pc, #440]	; (80020a8 <main+0x308>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 8090 	beq.w	8002016 <main+0x276>

			getAX25Packet(gs_cmd, gs_cmd_len);
 8001ef6:	4b6d      	ldr	r3, [pc, #436]	; (80020ac <main+0x30c>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	4619      	mov	r1, r3
 8001efc:	486c      	ldr	r0, [pc, #432]	; (80020b0 <main+0x310>)
 8001efe:	f7fe fb67 	bl	80005d0 <getAX25Packet>

			tx_buffer_len = countsDataFromLastFlag(temp_tx_buffer,
 8001f02:	2164      	movs	r1, #100	; 0x64
 8001f04:	486b      	ldr	r0, [pc, #428]	; (80020b4 <main+0x314>)
 8001f06:	f7fe fdce 	bl	8000aa6 <countsDataFromLastFlag>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4a6a      	ldr	r2, [pc, #424]	; (80020b8 <main+0x318>)
 8001f0e:	6013      	str	r3, [r2, #0]
					sizeof(temp_tx_buffer));

//			myDebug("AX.25 complete GS packet ready to TX: 0x%x\r\n", temp_tx_buffer);
			for (int j = 0; j < tx_buffer_len; j++) {
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	e00b      	b.n	8001f2e <main+0x18e>
				tx_buffer[j] = temp_tx_buffer[j];
 8001f16:	4a67      	ldr	r2, [pc, #412]	; (80020b4 <main+0x314>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	7819      	ldrb	r1, [r3, #0]
 8001f1e:	4a67      	ldr	r2, [pc, #412]	; (80020bc <main+0x31c>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	460a      	mov	r2, r1
 8001f26:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < tx_buffer_len; j++) {
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	4b62      	ldr	r3, [pc, #392]	; (80020b8 <main+0x318>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	dbee      	blt.n	8001f16 <main+0x176>
			}
//			myDebug("\r\n");

//			myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

			memset(main_cmd, '\0', main_cmd_len);
 8001f38:	4b61      	ldr	r3, [pc, #388]	; (80020c0 <main+0x320>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4860      	ldr	r0, [pc, #384]	; (80020c4 <main+0x324>)
 8001f42:	f009 fc8b 	bl	800b85c <memset>
			memset(gs_cmd, '\0', gs_cmd_len);
 8001f46:	4b59      	ldr	r3, [pc, #356]	; (80020ac <main+0x30c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4858      	ldr	r0, [pc, #352]	; (80020b0 <main+0x310>)
 8001f50:	f009 fc84 	bl	800b85c <memset>
			memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 8001f54:	2264      	movs	r2, #100	; 0x64
 8001f56:	2100      	movs	r1, #0
 8001f58:	4856      	ldr	r0, [pc, #344]	; (80020b4 <main+0x314>)
 8001f5a:	f009 fc7f 	bl	800b85c <memset>

			setPacketParams(tx_buffer_len);
 8001f5e:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <main+0x318>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe ffd5 	bl	8000f14 <setPacketParams>
			setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8001f6a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001f6e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001f72:	f7fe fff9 	bl	8000f68 <setModulationParams>
			radioConfig(tx_buffer, tx_buffer_len);
 8001f76:	4b50      	ldr	r3, [pc, #320]	; (80020b8 <main+0x318>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	484f      	ldr	r0, [pc, #316]	; (80020bc <main+0x31c>)
 8001f80:	f7ff f810 	bl	8000fa4 <radioConfig>

			myDebug("########## TX Configuration: ##########\n");
 8001f84:	4850      	ldr	r0, [pc, #320]	; (80020c8 <main+0x328>)
 8001f86:	f7fe fb8d 	bl	80006a4 <myDebug>

			myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8001f8a:	492c      	ldr	r1, [pc, #176]	; (800203c <main+0x29c>)
 8001f8c:	484f      	ldr	r0, [pc, #316]	; (80020cc <main+0x32c>)
 8001f8e:	f7fe fb89 	bl	80006a4 <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001f92:	4b36      	ldr	r3, [pc, #216]	; (800206c <main+0x2cc>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4619      	mov	r1, r3
 8001f98:	4835      	ldr	r0, [pc, #212]	; (8002070 <main+0x2d0>)
 8001f9a:	f7fe fb83 	bl	80006a4 <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 8001f9e:	4b33      	ldr	r3, [pc, #204]	; (800206c <main+0x2cc>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4833      	ldr	r0, [pc, #204]	; (8002074 <main+0x2d4>)
 8001fa6:	f7fe fb7d 	bl	80006a4 <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 8001faa:	4b30      	ldr	r3, [pc, #192]	; (800206c <main+0x2cc>)
 8001fac:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4831      	ldr	r0, [pc, #196]	; (8002078 <main+0x2d8>)
 8001fb2:	f7fe fb77 	bl	80006a4 <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001fb6:	4b31      	ldr	r3, [pc, #196]	; (800207c <main+0x2dc>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4830      	ldr	r0, [pc, #192]	; (8002080 <main+0x2e0>)
 8001fbe:	f7fe fb71 	bl	80006a4 <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8001fc2:	4b2e      	ldr	r3, [pc, #184]	; (800207c <main+0x2dc>)
 8001fc4:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	482e      	ldr	r0, [pc, #184]	; (8002084 <main+0x2e4>)
 8001fca:	f7fe fb6b 	bl	80006a4 <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 8001fce:	4b2b      	ldr	r3, [pc, #172]	; (800207c <main+0x2dc>)
 8001fd0:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	482c      	ldr	r0, [pc, #176]	; (8002088 <main+0x2e8>)
 8001fd6:	f7fe fb65 	bl	80006a4 <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 8001fda:	4b28      	ldr	r3, [pc, #160]	; (800207c <main+0x2dc>)
 8001fdc:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 8001fde:	4619      	mov	r1, r3
 8001fe0:	482a      	ldr	r0, [pc, #168]	; (800208c <main+0x2ec>)
 8001fe2:	f7fe fb5f 	bl	80006a4 <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001fe6:	4b25      	ldr	r3, [pc, #148]	; (800207c <main+0x2dc>)
 8001fe8:	79db      	ldrb	r3, [r3, #7]
 8001fea:	4619      	mov	r1, r3
 8001fec:	4828      	ldr	r0, [pc, #160]	; (8002090 <main+0x2f0>)
 8001fee:	f7fe fb59 	bl	80006a4 <myDebug>
			myDebug("______________*******************______________\r\n");
 8001ff2:	4828      	ldr	r0, [pc, #160]	; (8002094 <main+0x2f4>)
 8001ff4:	f7fe fb56 	bl	80006a4 <myDebug>

			SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8001ff8:	4810      	ldr	r0, [pc, #64]	; (800203c <main+0x29c>)
 8001ffa:	f008 f9b3 	bl	800a364 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8001ffe:	2101      	movs	r1, #1
 8002000:	2001      	movs	r0, #1
 8002002:	f008 fdf7 	bl	800abf4 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8002006:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <main+0x318>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2200      	movs	r2, #0
 800200e:	4619      	mov	r1, r3
 8002010:	482a      	ldr	r0, [pc, #168]	; (80020bc <main+0x31c>)
 8002012:	f007 fe69 	bl	8009ce8 <SUBGRF_SendPayload>
		}

		HAL_UART_Receive_DMA(&huart2, cmd_temp, cmd_temp_len);
 8002016:	4b20      	ldr	r3, [pc, #128]	; (8002098 <main+0x2f8>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	491f      	ldr	r1, [pc, #124]	; (800209c <main+0x2fc>)
 8002020:	481f      	ldr	r0, [pc, #124]	; (80020a0 <main+0x300>)
 8002022:	f004 fae1 	bl	80065e8 <HAL_UART_Receive_DMA>
		MX_SubGHz_Phy_Process();
 8002026:	e75c      	b.n	8001ee2 <main+0x142>
 8002028:	20000578 	.word	0x20000578
 800202c:	08002191 	.word	0x08002191
 8002030:	0800c3cc 	.word	0x0800c3cc
 8002034:	0800c408 	.word	0x0800c408
 8002038:	0800c43c 	.word	0x0800c43c
 800203c:	19f25968 	.word	0x19f25968
 8002040:	1a11d018 	.word	0x1a11d018
 8002044:	0800c458 	.word	0x0800c458
 8002048:	0800c498 	.word	0x0800c498
 800204c:	0800c4c0 	.word	0x0800c4c0
 8002050:	0800c514 	.word	0x0800c514
 8002054:	0800c55c 	.word	0x0800c55c
 8002058:	0800c580 	.word	0x0800c580
 800205c:	20000003 	.word	0x20000003
 8002060:	200004ec 	.word	0x200004ec
 8002064:	0800c180 	.word	0x0800c180
 8002068:	0800c1ac 	.word	0x0800c1ac
 800206c:	200002ec 	.word	0x200002ec
 8002070:	0800c1d4 	.word	0x0800c1d4
 8002074:	0800c1e4 	.word	0x0800c1e4
 8002078:	0800c200 	.word	0x0800c200
 800207c:	200002d8 	.word	0x200002d8
 8002080:	0800c21c 	.word	0x0800c21c
 8002084:	0800c230 	.word	0x0800c230
 8002088:	0800c248 	.word	0x0800c248
 800208c:	0800c260 	.word	0x0800c260
 8002090:	0800c278 	.word	0x0800c278
 8002094:	0800c28c 	.word	0x0800c28c
 8002098:	20000001 	.word	0x20000001
 800209c:	2000031c 	.word	0x2000031c
 80020a0:	2000065c 	.word	0x2000065c
 80020a4:	0007a120 	.word	0x0007a120
 80020a8:	20000558 	.word	0x20000558
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20000308 	.word	0x20000308
 80020b4:	20000388 	.word	0x20000388
 80020b8:	200003ec 	.word	0x200003ec
 80020bc:	200003f0 	.word	0x200003f0
 80020c0:	20000002 	.word	0x20000002
 80020c4:	20000378 	.word	0x20000378
 80020c8:	0800c5ac 	.word	0x0800c5ac
 80020cc:	0800c5d8 	.word	0x0800c5d8

080020d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b09a      	sub	sp, #104	; 0x68
 80020d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80020d6:	f107 0320 	add.w	r3, r7, #32
 80020da:	2248      	movs	r2, #72	; 0x48
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f009 fbbc 	bl	800b85c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	611a      	str	r2, [r3, #16]
 80020f2:	615a      	str	r2, [r3, #20]
 80020f4:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <SystemClock_Config+0xbc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020fe:	4a23      	ldr	r2, [pc, #140]	; (800218c <SystemClock_Config+0xbc>)
 8002100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <SystemClock_Config+0xbc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002112:	2301      	movs	r3, #1
 8002114:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8002116:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 800211c:	2300      	movs	r3, #0
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002120:	2302      	movs	r3, #2
 8002122:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002124:	2303      	movs	r3, #3
 8002126:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002128:	2310      	movs	r3, #16
 800212a:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 800212c:	2306      	movs	r3, #6
 800212e:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002134:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002136:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800213a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800213c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002140:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002142:	f107 0320 	add.w	r3, r7, #32
 8002146:	4618      	mov	r0, r3
 8002148:	f002 f81c 	bl	8004184 <HAL_RCC_OscConfig>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <SystemClock_Config+0x86>
		Error_Handler();
 8002152:	f000 fad1 	bl	80026f8 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8002156:	234f      	movs	r3, #79	; 0x4f
 8002158:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215a:	2303      	movs	r3, #3
 800215c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2102      	movs	r1, #2
 8002172:	4618      	mov	r0, r3
 8002174:	f002 fb88 	bl	8004888 <HAL_RCC_ClockConfig>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <SystemClock_Config+0xb2>
		Error_Handler();
 800217e:	f000 fabb 	bl	80026f8 <Error_Handler>
	}
}
 8002182:	bf00      	nop
 8002184:	3768      	adds	r7, #104	; 0x68
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	58000400 	.word	0x58000400

08002190 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8002190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002194:	b0c3      	sub	sp, #268	; 0x10c
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	84fb      	strh	r3, [r7, #38]	; 0x26
	if (radioIrq == IRQ_TX_DONE) {
 800219c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800219e:	2b01      	cmp	r3, #1
 80021a0:	f040 8087 	bne.w	80022b2 <DioIrqHndlr+0x122>
		TX_FLAG = 0;
 80021a4:	4b99      	ldr	r3, [pc, #612]	; (800240c <DioIrqHndlr+0x27c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
		myDebug("\nGS Command Transmitted Successful, Length: %d\r\n",
 80021aa:	4b99      	ldr	r3, [pc, #612]	; (8002410 <DioIrqHndlr+0x280>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4619      	mov	r1, r3
 80021b0:	4898      	ldr	r0, [pc, #608]	; (8002414 <DioIrqHndlr+0x284>)
 80021b2:	f7fe fa77 	bl	80006a4 <myDebug>
				tx_buffer_len);
		for (int i = 0; i < tx_buffer_len; i++) {
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80021bc:	e00d      	b.n	80021da <DioIrqHndlr+0x4a>
			myDebug("%02x ", tx_buffer[i]);
 80021be:	4a96      	ldr	r2, [pc, #600]	; (8002418 <DioIrqHndlr+0x288>)
 80021c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021c4:	4413      	add	r3, r2
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	4894      	ldr	r0, [pc, #592]	; (800241c <DioIrqHndlr+0x28c>)
 80021cc:	f7fe fa6a 	bl	80006a4 <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 80021d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021d4:	3301      	adds	r3, #1
 80021d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80021da:	4b8d      	ldr	r3, [pc, #564]	; (8002410 <DioIrqHndlr+0x280>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80021e2:	429a      	cmp	r2, r3
 80021e4:	dbeb      	blt.n	80021be <DioIrqHndlr+0x2e>
		}

		myDebug("\r\n");
 80021e6:	488e      	ldr	r0, [pc, #568]	; (8002420 <DioIrqHndlr+0x290>)
 80021e8:	f7fe fa5c 	bl	80006a4 <myDebug>
		memset(tx_buffer, '\0', sizeof(tx_buffer));
 80021ec:	2264      	movs	r2, #100	; 0x64
 80021ee:	2100      	movs	r1, #0
 80021f0:	4889      	ldr	r0, [pc, #548]	; (8002418 <DioIrqHndlr+0x288>)
 80021f2:	f009 fb33 	bl	800b85c <memset>

		setPacketParams(rx_buffer_len);
 80021f6:	4b8b      	ldr	r3, [pc, #556]	; (8002424 <DioIrqHndlr+0x294>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fe8a 	bl	8000f14 <setPacketParams>
		setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 8002200:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8002204:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 8002208:	f7fe feae 	bl	8000f68 <setModulationParams>
		radioConfig(rx_buffer, rx_buffer_len);
 800220c:	4b85      	ldr	r3, [pc, #532]	; (8002424 <DioIrqHndlr+0x294>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	4885      	ldr	r0, [pc, #532]	; (8002428 <DioIrqHndlr+0x298>)
 8002214:	f7fe fec6 	bl	8000fa4 <radioConfig>

		myDebug("\n########## RX Configuration: ##########\n");
 8002218:	4884      	ldr	r0, [pc, #528]	; (800242c <DioIrqHndlr+0x29c>)
 800221a:	f7fe fa43 	bl	80006a4 <myDebug>

		myDebug("FREQUENCY MODS: Downlink FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 800221e:	4984      	ldr	r1, [pc, #528]	; (8002430 <DioIrqHndlr+0x2a0>)
 8002220:	4884      	ldr	r0, [pc, #528]	; (8002434 <DioIrqHndlr+0x2a4>)
 8002222:	f7fe fa3f 	bl	80006a4 <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8002226:	4b84      	ldr	r3, [pc, #528]	; (8002438 <DioIrqHndlr+0x2a8>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4619      	mov	r1, r3
 800222c:	4883      	ldr	r0, [pc, #524]	; (800243c <DioIrqHndlr+0x2ac>)
 800222e:	f7fe fa39 	bl	80006a4 <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8002232:	4b81      	ldr	r3, [pc, #516]	; (8002438 <DioIrqHndlr+0x2a8>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4619      	mov	r1, r3
 8002238:	4881      	ldr	r0, [pc, #516]	; (8002440 <DioIrqHndlr+0x2b0>)
 800223a:	f7fe fa33 	bl	80006a4 <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 800223e:	4b7e      	ldr	r3, [pc, #504]	; (8002438 <DioIrqHndlr+0x2a8>)
 8002240:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8002242:	4619      	mov	r1, r3
 8002244:	487f      	ldr	r0, [pc, #508]	; (8002444 <DioIrqHndlr+0x2b4>)
 8002246:	f7fe fa2d 	bl	80006a4 <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 800224a:	4b7f      	ldr	r3, [pc, #508]	; (8002448 <DioIrqHndlr+0x2b8>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	487e      	ldr	r0, [pc, #504]	; (800244c <DioIrqHndlr+0x2bc>)
 8002252:	f7fe fa27 	bl	80006a4 <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 8002256:	4b7c      	ldr	r3, [pc, #496]	; (8002448 <DioIrqHndlr+0x2b8>)
 8002258:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 800225a:	4619      	mov	r1, r3
 800225c:	487c      	ldr	r0, [pc, #496]	; (8002450 <DioIrqHndlr+0x2c0>)
 800225e:	f7fe fa21 	bl	80006a4 <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 8002262:	4b79      	ldr	r3, [pc, #484]	; (8002448 <DioIrqHndlr+0x2b8>)
 8002264:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 8002266:	4619      	mov	r1, r3
 8002268:	487a      	ldr	r0, [pc, #488]	; (8002454 <DioIrqHndlr+0x2c4>)
 800226a:	f7fe fa1b 	bl	80006a4 <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 800226e:	4b76      	ldr	r3, [pc, #472]	; (8002448 <DioIrqHndlr+0x2b8>)
 8002270:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 8002272:	4619      	mov	r1, r3
 8002274:	4878      	ldr	r0, [pc, #480]	; (8002458 <DioIrqHndlr+0x2c8>)
 8002276:	f7fe fa15 	bl	80006a4 <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 800227a:	4b73      	ldr	r3, [pc, #460]	; (8002448 <DioIrqHndlr+0x2b8>)
 800227c:	79db      	ldrb	r3, [r3, #7]
 800227e:	4619      	mov	r1, r3
 8002280:	4876      	ldr	r0, [pc, #472]	; (800245c <DioIrqHndlr+0x2cc>)
 8002282:	f7fe fa0f 	bl	80006a4 <myDebug>
		myDebug("______________*******************______________\r\n");
 8002286:	4876      	ldr	r0, [pc, #472]	; (8002460 <DioIrqHndlr+0x2d0>)
 8002288:	f7fe fa0c 	bl	80006a4 <myDebug>

		SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 800228c:	4868      	ldr	r0, [pc, #416]	; (8002430 <DioIrqHndlr+0x2a0>)
 800228e:	f008 f869 	bl	800a364 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8002292:	2100      	movs	r1, #0
 8002294:	2001      	movs	r0, #1
 8002296:	f008 fcad 	bl	800abf4 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 800229a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800229e:	f007 fe8d 	bl	8009fbc <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, cmd_temp, cmd_temp_len);
 80022a2:	4b70      	ldr	r3, [pc, #448]	; (8002464 <DioIrqHndlr+0x2d4>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	496f      	ldr	r1, [pc, #444]	; (8002468 <DioIrqHndlr+0x2d8>)
 80022ac:	486f      	ldr	r0, [pc, #444]	; (800246c <DioIrqHndlr+0x2dc>)
 80022ae:	f004 f99b 	bl	80065e8 <HAL_UART_Receive_DMA>

	}

	if (radioIrq == IRQ_RX_DONE) {
 80022b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	f040 8201 	bne.w	80026bc <DioIrqHndlr+0x52c>
		TX_FLAG = 0;
 80022ba:	4b54      	ldr	r3, [pc, #336]	; (800240c <DioIrqHndlr+0x27c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
		memset(rx_buffer, '\0', sizeof(rx_buffer));
 80022c0:	2269      	movs	r2, #105	; 0x69
 80022c2:	2100      	movs	r1, #0
 80022c4:	4858      	ldr	r0, [pc, #352]	; (8002428 <DioIrqHndlr+0x298>)
 80022c6:	f009 fac9 	bl	800b85c <memset>
		SUBGRF_GetPayload(rx_buffer, &rx_buffer_len, RX_PAYLOAD_LENGTH);
 80022ca:	2269      	movs	r2, #105	; 0x69
 80022cc:	4955      	ldr	r1, [pc, #340]	; (8002424 <DioIrqHndlr+0x294>)
 80022ce:	4856      	ldr	r0, [pc, #344]	; (8002428 <DioIrqHndlr+0x298>)
 80022d0:	f007 fce8 	bl	8009ca4 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 80022d4:	f008 fb07 	bl	800a8e6 <SUBGRF_GetRssiInst>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	4b64      	ldr	r3, [pc, #400]	; (8002470 <DioIrqHndlr+0x2e0>)
 80022de:	601a      	str	r2, [r3, #0]

		uint8_t temp_rx_buffer_len = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		temp_rx_buffer_len = countsDataFromLastFlag(rx_buffer, rx_buffer_len);
 80022e6:	4b4f      	ldr	r3, [pc, #316]	; (8002424 <DioIrqHndlr+0x294>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	484e      	ldr	r0, [pc, #312]	; (8002428 <DioIrqHndlr+0x298>)
 80022ee:	f7fe fbda 	bl	8000aa6 <countsDataFromLastFlag>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

		if (temp_rx_buffer_len != -1) {
 80022f8:	466b      	mov	r3, sp
 80022fa:	461e      	mov	r6, r3

//			myDebug("\nSatellite Data Received, Length: %d and RSSI: %d dBm\r\n", temp_rx_buffer_len, rssi_value);

			uint8_t temp_check_buff[temp_rx_buffer_len];
 80022fc:	f897 50ef 	ldrb.w	r5, [r7, #239]	; 0xef
 8002300:	462b      	mov	r3, r5
 8002302:	3b01      	subs	r3, #1
 8002304:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002308:	b2eb      	uxtb	r3, r5
 800230a:	2200      	movs	r2, #0
 800230c:	4698      	mov	r8, r3
 800230e:	4691      	mov	r9, r2
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800231c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002320:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002324:	b2eb      	uxtb	r3, r5
 8002326:	2200      	movs	r2, #0
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	61fa      	str	r2, [r7, #28]
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002338:	4649      	mov	r1, r9
 800233a:	00cb      	lsls	r3, r1, #3
 800233c:	4644      	mov	r4, r8
 800233e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002342:	4641      	mov	r1, r8
 8002344:	00ca      	lsls	r2, r1, #3
 8002346:	462b      	mov	r3, r5
 8002348:	3307      	adds	r3, #7
 800234a:	08db      	lsrs	r3, r3, #3
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	ebad 0d03 	sub.w	sp, sp, r3
 8002352:	466b      	mov	r3, sp
 8002354:	3300      	adds	r3, #0
 8002356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002360:	e010      	b.n	8002384 <DioIrqHndlr+0x1f4>
				temp_check_buff[i] = rx_buffer[i];
 8002362:	4a31      	ldr	r2, [pc, #196]	; (8002428 <DioIrqHndlr+0x298>)
 8002364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002368:	4413      	add	r3, r2
 800236a:	7819      	ldrb	r1, [r3, #0]
 800236c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002374:	4413      	add	r3, r2
 8002376:	460a      	mov	r2, r1
 8002378:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 800237a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800237e:	3301      	adds	r3, #1
 8002380:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002384:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8002388:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800238c:	429a      	cmp	r2, r3
 800238e:	dbe8      	blt.n	8002362 <DioIrqHndlr+0x1d2>
			}
//			myDebug("\r\n");

//			memset(rx_buffer, '\0', sizeof(rx_buffer_len));

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 8002390:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8002394:	3b04      	subs	r3, #4
 8002396:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
			uint8_t crc_buff[crc_buff_len];
 800239a:	f897 40e3 	ldrb.w	r4, [r7, #227]	; 0xe3
 800239e:	4623      	mov	r3, r4
 80023a0:	3b01      	subs	r3, #1
 80023a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80023a6:	b2e3      	uxtb	r3, r4
 80023a8:	2200      	movs	r2, #0
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	617a      	str	r2, [r7, #20]
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80023ba:	4649      	mov	r1, r9
 80023bc:	00cb      	lsls	r3, r1, #3
 80023be:	46c4      	mov	ip, r8
 80023c0:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 80023c4:	4641      	mov	r1, r8
 80023c6:	00ca      	lsls	r2, r1, #3
 80023c8:	b2e3      	uxtb	r3, r4
 80023ca:	2200      	movs	r2, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	60fa      	str	r2, [r7, #12]
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80023dc:	4649      	mov	r1, r9
 80023de:	00cb      	lsls	r3, r1, #3
 80023e0:	46c4      	mov	ip, r8
 80023e2:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 80023e6:	4641      	mov	r1, r8
 80023e8:	00ca      	lsls	r2, r1, #3
 80023ea:	4623      	mov	r3, r4
 80023ec:	3307      	adds	r3, #7
 80023ee:	08db      	lsrs	r3, r3, #3
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	ebad 0d03 	sub.w	sp, sp, r3
 80023f6:	466b      	mov	r3, sp
 80023f8:	3300      	adds	r3, #0
 80023fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

//			myDebug("\nSatellite Data Testing: 0x%x\r\n");

			int j = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			for (int i = 1; i <= crc_buff_len; i++) {
 8002404:	2301      	movs	r3, #1
 8002406:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800240a:	e04a      	b.n	80024a2 <DioIrqHndlr+0x312>
 800240c:	20000558 	.word	0x20000558
 8002410:	200003ec 	.word	0x200003ec
 8002414:	0800c600 	.word	0x0800c600
 8002418:	200003f0 	.word	0x200003f0
 800241c:	0800c2f0 	.word	0x0800c2f0
 8002420:	0800c3c8 	.word	0x0800c3c8
 8002424:	20000003 	.word	0x20000003
 8002428:	200004ec 	.word	0x200004ec
 800242c:	0800c180 	.word	0x0800c180
 8002430:	1a11d018 	.word	0x1a11d018
 8002434:	0800c1ac 	.word	0x0800c1ac
 8002438:	200002ec 	.word	0x200002ec
 800243c:	0800c1d4 	.word	0x0800c1d4
 8002440:	0800c1e4 	.word	0x0800c1e4
 8002444:	0800c200 	.word	0x0800c200
 8002448:	200002d8 	.word	0x200002d8
 800244c:	0800c21c 	.word	0x0800c21c
 8002450:	0800c230 	.word	0x0800c230
 8002454:	0800c248 	.word	0x0800c248
 8002458:	0800c260 	.word	0x0800c260
 800245c:	0800c278 	.word	0x0800c278
 8002460:	0800c28c 	.word	0x0800c28c
 8002464:	20000001 	.word	0x20000001
 8002468:	2000031c 	.word	0x2000031c
 800246c:	2000065c 	.word	0x2000065c
 8002470:	2000055c 	.word	0x2000055c
				crc_buff[j] = temp_check_buff[i];
 8002474:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002478:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800247c:	4413      	add	r3, r2
 800247e:	7819      	ldrb	r1, [r3, #0]
 8002480:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002484:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002488:	4413      	add	r3, r2
 800248a:	460a      	mov	r2, r1
 800248c:	701a      	strb	r2, [r3, #0]
//				myDebug("%02x ", crc_buff[j]);
				j++;
 800248e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002492:	3301      	adds	r3, #1
 8002494:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			for (int i = 1; i <= crc_buff_len; i++) {
 8002498:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800249c:	3301      	adds	r3, #1
 800249e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80024a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80024a6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80024aa:	429a      	cmp	r2, r3
 80024ac:	dde2      	ble.n	8002474 <DioIrqHndlr+0x2e4>
			}
//			myDebug("\r\n");

			uint16_t crc = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			crc = calculateCRC_CCITT_AX25(crc_buff, crc_buff_len);
 80024b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80024b8:	4619      	mov	r1, r3
 80024ba:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80024be:	f7fe fa7d 	bl	80009bc <calculateCRC_CCITT_AX25>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6

			uint8_t calc_crc[2];
			calc_crc[0] = (crc >> 8) & 0xFF;
 80024c8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
			calc_crc[1] = crc & 0xFF;
 80024d6:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5

			uint8_t msb_crc = temp_check_buff[temp_rx_buffer_len - 3];
 80024e0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80024e4:	3b03      	subs	r3, #3
 80024e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			uint8_t lsb_crc = temp_check_buff[temp_rx_buffer_len - 2];
 80024f0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80024f4:	3b02      	subs	r3, #2
 80024f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4

			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 8002500:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8002504:	f897 20d5 	ldrb.w	r2, [r7, #213]	; 0xd5
 8002508:	429a      	cmp	r2, r3
 800250a:	f040 8088 	bne.w	800261e <DioIrqHndlr+0x48e>
 800250e:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8002512:	f897 20d4 	ldrb.w	r2, [r7, #212]	; 0xd4
 8002516:	429a      	cmp	r2, r3
 8002518:	f040 8081 	bne.w	800261e <DioIrqHndlr+0x48e>
 800251c:	466b      	mov	r3, sp
 800251e:	461d      	mov	r5, r3
//				myDebug("Satellite Data checksum correct: 0x%x\r\n");

				uint8_t gs_cmd_buff[150];
				int gs_cmd_len = bit_destuffing(crc_buff, gs_cmd_buff,
 8002520:	f897 20e3 	ldrb.w	r2, [r7, #227]	; 0xe3
 8002524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002528:	4619      	mov	r1, r3
 800252a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800252e:	f7fe fbc7 	bl	8000cc0 <bit_destuffing>
 8002532:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						crc_buff_len);
//				gs_cmd_len--;

				myDebug(
 8002536:	4b64      	ldr	r3, [pc, #400]	; (80026c8 <DioIrqHndlr+0x538>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002540:	4862      	ldr	r0, [pc, #392]	; (80026cc <DioIrqHndlr+0x53c>)
 8002542:	f7fe f8af 	bl	80006a4 <myDebug>
						"\nSatellite Real Data, Length: %d bytes  and RSSI: %d dBm\r\n",
						gs_cmd_len, rssi_value);

				uint8_t main_gs_cmd[gs_cmd_len];
 8002546:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 800254a:	1e63      	subs	r3, r4, #1
 800254c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002550:	4622      	mov	r2, r4
 8002552:	2300      	movs	r3, #0
 8002554:	603a      	str	r2, [r7, #0]
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9d7 8900 	ldrd	r8, r9, [r7]
 8002564:	4649      	mov	r1, r9
 8002566:	00cb      	lsls	r3, r1, #3
 8002568:	46c4      	mov	ip, r8
 800256a:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 800256e:	4641      	mov	r1, r8
 8002570:	00ca      	lsls	r2, r1, #3
 8002572:	4622      	mov	r2, r4
 8002574:	2300      	movs	r3, #0
 8002576:	4692      	mov	sl, r2
 8002578:	469b      	mov	fp, r3
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002586:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800258a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800258e:	4623      	mov	r3, r4
 8002590:	3307      	adds	r3, #7
 8002592:	08db      	lsrs	r3, r3, #3
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	ebad 0d03 	sub.w	sp, sp, r3
 800259a:	466b      	mov	r3, sp
 800259c:	3300      	adds	r3, #0
 800259e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
				for (int i = 0; i < gs_cmd_len; i++) {
 80025a2:	2300      	movs	r3, #0
 80025a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80025a8:	e01b      	b.n	80025e2 <DioIrqHndlr+0x452>
					main_gs_cmd[i] = gs_cmd_buff[i];
 80025aa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80025ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b2:	4413      	add	r3, r2
 80025b4:	7819      	ldrb	r1, [r3, #0]
 80025b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025be:	4413      	add	r3, r2
 80025c0:	460a      	mov	r2, r1
 80025c2:	701a      	strb	r2, [r3, #0]
					myDebug("%02x ", main_gs_cmd[i]);
 80025c4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025cc:	4413      	add	r3, r2
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	483f      	ldr	r0, [pc, #252]	; (80026d0 <DioIrqHndlr+0x540>)
 80025d4:	f7fe f866 	bl	80006a4 <myDebug>
				for (int i = 0; i < gs_cmd_len; i++) {
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025dc:	3301      	adds	r3, #1
 80025de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80025e2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80025e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025ea:	429a      	cmp	r2, r3
 80025ec:	dbdd      	blt.n	80025aa <DioIrqHndlr+0x41a>
				}

				HAL_UART_Transmit(&huart2, main_gs_cmd, sizeof(main_gs_cmd),
 80025ee:	b2a2      	uxth	r2, r4
 80025f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80025f4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80025f8:	4836      	ldr	r0, [pc, #216]	; (80026d4 <DioIrqHndlr+0x544>)
 80025fa:	f003 ff6f 	bl	80064dc <HAL_UART_Transmit>
						2000);

				myDebug("\r\n");
 80025fe:	4836      	ldr	r0, [pc, #216]	; (80026d8 <DioIrqHndlr+0x548>)
 8002600:	f7fe f850 	bl	80006a4 <myDebug>
				myDebug("__________\r\n");
 8002604:	4835      	ldr	r0, [pc, #212]	; (80026dc <DioIrqHndlr+0x54c>)
 8002606:	f7fe f84d 	bl	80006a4 <myDebug>
				memset(main_gs_cmd, '\0', gs_cmd_len);
 800260a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800260e:	461a      	mov	r2, r3
 8002610:	2100      	movs	r1, #0
 8002612:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8002616:	f009 f921 	bl	800b85c <memset>
 800261a:	46ad      	mov	sp, r5
			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 800261c:	e03a      	b.n	8002694 <DioIrqHndlr+0x504>

			} else {
				checksum_error_count++;
 800261e:	4b30      	ldr	r3, [pc, #192]	; (80026e0 <DioIrqHndlr+0x550>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	3301      	adds	r3, #1
 8002624:	4a2e      	ldr	r2, [pc, #184]	; (80026e0 <DioIrqHndlr+0x550>)
 8002626:	6013      	str	r3, [r2, #0]
				myDebug(
 8002628:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <DioIrqHndlr+0x550>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	482d      	ldr	r0, [pc, #180]	; (80026e4 <DioIrqHndlr+0x554>)
 8002630:	f7fe f838 	bl	80006a4 <myDebug>
						"Satellite Data checksum error and no of error packets: %d\r\n",
						checksum_error_count);
				for (int i = 0; i < sizeof(temp_check_buff); i++) {
 8002634:	2300      	movs	r3, #0
 8002636:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800263a:	e00e      	b.n	800265a <DioIrqHndlr+0x4ca>
					myDebug("%02x ", temp_check_buff[i]);
 800263c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002640:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002644:	4413      	add	r3, r2
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4619      	mov	r1, r3
 800264a:	4821      	ldr	r0, [pc, #132]	; (80026d0 <DioIrqHndlr+0x540>)
 800264c:	f7fe f82a 	bl	80006a4 <myDebug>
				for (int i = 0; i < sizeof(temp_check_buff); i++) {
 8002650:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002654:	3301      	adds	r3, #1
 8002656:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800265a:	462a      	mov	r2, r5
 800265c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002660:	429a      	cmp	r2, r3
 8002662:	d8eb      	bhi.n	800263c <DioIrqHndlr+0x4ac>
				}

				HAL_UART_Transmit(&huart2, temp_check_buff,
 8002664:	b2aa      	uxth	r2, r5
 8002666:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800266a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800266e:	4819      	ldr	r0, [pc, #100]	; (80026d4 <DioIrqHndlr+0x544>)
 8002670:	f003 ff34 	bl	80064dc <HAL_UART_Transmit>
						sizeof(temp_check_buff), 2000);

				myDebug("\r\n");
 8002674:	4818      	ldr	r0, [pc, #96]	; (80026d8 <DioIrqHndlr+0x548>)
 8002676:	f7fe f815 	bl	80006a4 <myDebug>
				myDebug("__________\r\n");
 800267a:	4818      	ldr	r0, [pc, #96]	; (80026dc <DioIrqHndlr+0x54c>)
 800267c:	f7fe f812 	bl	80006a4 <myDebug>
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <DioIrqHndlr+0x558>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
				memset(rx_buffer, '\0', sizeof(rx_buffer_len));
				memset(crc_buff, '\0', sizeof(crc_buff));
 8002686:	4623      	mov	r3, r4
 8002688:	461a      	mov	r2, r3
 800268a:	2100      	movs	r1, #0
 800268c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002690:	f009 f8e4 	bl	800b85c <memset>
 8002694:	46b5      	mov	sp, r6
			myDebug("\r\n");
			myDebug("__________\r\n");
			memset(rx_buffer, '\0', sizeof(rx_buffer_len));
		}

		SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8002696:	4815      	ldr	r0, [pc, #84]	; (80026ec <DioIrqHndlr+0x55c>)
 8002698:	f007 fe64 	bl	800a364 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 800269c:	2100      	movs	r1, #0
 800269e:	2001      	movs	r0, #1
 80026a0:	f008 faa8 	bl	800abf4 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 80026a4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80026a8:	f007 fc88 	bl	8009fbc <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, cmd_temp, cmd_temp_len);
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <DioIrqHndlr+0x560>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	490f      	ldr	r1, [pc, #60]	; (80026f4 <DioIrqHndlr+0x564>)
 80026b6:	4807      	ldr	r0, [pc, #28]	; (80026d4 <DioIrqHndlr+0x544>)
 80026b8:	f003 ff96 	bl	80065e8 <HAL_UART_Receive_DMA>
	}
}
 80026bc:	bf00      	nop
 80026be:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 80026c2:	46bd      	mov	sp, r7
 80026c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026c8:	2000055c 	.word	0x2000055c
 80026cc:	0800c634 	.word	0x0800c634
 80026d0:	0800c2f0 	.word	0x0800c2f0
 80026d4:	2000065c 	.word	0x2000065c
 80026d8:	0800c3c8 	.word	0x0800c3c8
 80026dc:	0800c670 	.word	0x0800c670
 80026e0:	20000560 	.word	0x20000560
 80026e4:	0800c680 	.word	0x0800c680
 80026e8:	200004ec 	.word	0x200004ec
 80026ec:	1a11d018 	.word	0x1a11d018
 80026f0:	20000001 	.word	0x20000001
 80026f4:	2000031c 	.word	0x2000031c

080026f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026fc:	b672      	cpsid	i
}
 80026fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002700:	e7fe      	b.n	8002700 <Error_Handler+0x8>

08002702 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002712:	e7fe      	b.n	8002712 <NMI_Handler+0x4>

08002714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <HardFault_Handler+0x4>

0800271a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800271e:	e7fe      	b.n	800271e <MemManage_Handler+0x4>

08002720 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002724:	e7fe      	b.n	8002724 <BusFault_Handler+0x4>

08002726 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800272a:	e7fe      	b.n	800272a <UsageFault_Handler+0x4>

0800272c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002754:	f000 fc2c 	bl	8002fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}

0800275c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002760:	4802      	ldr	r0, [pc, #8]	; (800276c <DMA1_Channel1_IRQHandler+0x10>)
 8002762:	f000 ff27 	bl	80035b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200006f0 	.word	0x200006f0

08002770 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002774:	4802      	ldr	r0, [pc, #8]	; (8002780 <DMA1_Channel2_IRQHandler+0x10>)
 8002776:	f000 ff1d 	bl	80035b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000750 	.word	0x20000750

08002784 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 Global Interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <TIM2_IRQHandler+0x10>)
 800278a:	f003 faad 	bl	8005ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000578 	.word	0x20000578

08002798 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <USART1_IRQHandler+0x10>)
 800279e:	f003 ff6f 	bl	8006680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200005c8 	.word	0x200005c8

080027ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <USART2_IRQHandler+0x10>)
 80027b2:	f003 ff65 	bl	8006680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2000065c 	.word	0x2000065c

080027c0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <SUBGHZ_Radio_IRQHandler+0x10>)
 80027c6:	f003 f855 	bl	8005874 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000564 	.word	0x20000564

080027d4 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80027dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80027ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4013      	ands	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027f8:	68fb      	ldr	r3, [r7, #12]
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <MX_SUBGHZ_Init+0x20>)
 800280a:	2210      	movs	r2, #16
 800280c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800280e:	4805      	ldr	r0, [pc, #20]	; (8002824 <MX_SUBGHZ_Init+0x20>)
 8002810:	f002 fdae 	bl	8005370 <HAL_SUBGHZ_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800281a:	f7ff ff6d 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000564 	.word	0x20000564

08002828 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002830:	2001      	movs	r0, #1
 8002832:	f7ff ffcf 	bl	80027d4 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2100      	movs	r1, #0
 800283a:	2032      	movs	r0, #50	; 0x32
 800283c:	f000 fca1 	bl	8003182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002840:	2032      	movs	r0, #50	; 0x32
 8002842:	f000 fcb8 	bl	80031b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
	...

0800285c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_GetTick+0x24>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800286e:	f000 f910 	bl	8002a92 <TIMER_IF_GetTimerValue>
 8002872:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002874:	687b      	ldr	r3, [r7, #4]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000570 	.word	0x20000570

08002884 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f92d 	bl	8002aee <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <_sbrk+0x5c>)
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <_sbrk+0x60>)
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <_sbrk+0x64>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <_sbrk+0x68>)
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <_sbrk+0x64>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d207      	bcs.n	80028dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028cc:	f008 ffce 	bl	800b86c <__errno>
 80028d0:	4603      	mov	r3, r0
 80028d2:	220c      	movs	r2, #12
 80028d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028da:	e009      	b.n	80028f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <_sbrk+0x64>)
 80028ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20010000 	.word	0x20010000
 80028fc:	00000400 	.word	0x00000400
 8002900:	20000574 	.word	0x20000574
 8002904:	20000ac0 	.word	0x20000ac0

08002908 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <LL_APB1_GRP1_EnableClock>:
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002920:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002922:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4313      	orrs	r3, r2
 800292a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800292c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002930:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4013      	ands	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002938:	68fb      	ldr	r3, [r7, #12]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800294a:	f107 0310 	add.w	r3, r7, #16
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <MX_TIM2_Init+0x94>)
 8002964:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002968:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <MX_TIM2_Init+0x94>)
 800296c:	222f      	movs	r2, #47	; 0x2f
 800296e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <MX_TIM2_Init+0x94>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000001-1;
 8002976:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <MX_TIM2_Init+0x94>)
 8002978:	4a18      	ldr	r2, [pc, #96]	; (80029dc <MX_TIM2_Init+0x98>)
 800297a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297c:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <MX_TIM2_Init+0x94>)
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <MX_TIM2_Init+0x94>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002988:	4813      	ldr	r0, [pc, #76]	; (80029d8 <MX_TIM2_Init+0x94>)
 800298a:	f003 f911 	bl	8005bb0 <HAL_TIM_Base_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002994:	f7ff feb0 	bl	80026f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800299e:	f107 0310 	add.w	r3, r7, #16
 80029a2:	4619      	mov	r1, r3
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <MX_TIM2_Init+0x94>)
 80029a6:	f003 fabe 	bl	8005f26 <HAL_TIM_ConfigClockSource>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80029b0:	f7ff fea2 	bl	80026f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b4:	2300      	movs	r3, #0
 80029b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	4619      	mov	r1, r3
 80029c0:	4805      	ldr	r0, [pc, #20]	; (80029d8 <MX_TIM2_Init+0x94>)
 80029c2:	f003 fca1 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80029cc:	f7ff fe94 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029d0:	bf00      	nop
 80029d2:	3720      	adds	r7, #32
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000578 	.word	0x20000578
 80029dc:	000f4240 	.word	0x000f4240

080029e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f0:	d10a      	bne.n	8002a08 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029f2:	2001      	movs	r0, #1
 80029f4:	f7ff ff8e 	bl	8002914 <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029f8:	2200      	movs	r2, #0
 80029fa:	2100      	movs	r1, #0
 80029fc:	201b      	movs	r0, #27
 80029fe:	f000 fbc0 	bl	8003182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a02:	201b      	movs	r0, #27
 8002a04:	f000 fbd7 	bl	80031b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8002a48:	79fb      	ldrb	r3, [r7, #7]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002a58:	4b02      	ldr	r3, [pc, #8]	; (8002a64 <TIMER_IF_SetTimerContext+0x10>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	200005c4 	.word	0x200005c4

08002a68 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002a6c:	4b02      	ldr	r3, [pc, #8]	; (8002a78 <TIMER_IF_GetTimerContext+0x10>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	200005c4 	.word	0x200005c4

08002a7c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8002a86:	687b      	ldr	r3, [r7, #4]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8002a9c:	687b      	ldr	r3, [r7, #4]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8002ab2:	687b      	ldr	r3, [r7, #4]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <LL_AHB2_GRP1_EnableClock>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4013      	ands	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b24:	68fb      	ldr	r3, [r7, #12]
}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <LL_APB1_GRP1_EnableClock>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4013      	ands	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b54:	68fb      	ldr	r3, [r7, #12]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <LL_APB2_GRP1_EnableClock>:
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4013      	ands	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b84:	68fb      	ldr	r3, [r7, #12]
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b94:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002b96:	4a23      	ldr	r2, [pc, #140]	; (8002c24 <MX_USART1_UART_Init+0x94>)
 8002b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b9a:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba2:	4b1f      	ldr	r3, [pc, #124]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bae:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bba:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc0:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bc6:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bcc:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bd2:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bd8:	4811      	ldr	r0, [pc, #68]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002bda:	f003 fc2f 	bl	800643c <HAL_UART_Init>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002be4:	f7ff fd88 	bl	80026f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002be8:	2100      	movs	r1, #0
 8002bea:	480d      	ldr	r0, [pc, #52]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002bec:	f004 ff92 	bl	8007b14 <HAL_UARTEx_SetTxFifoThreshold>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002bf6:	f7ff fd7f 	bl	80026f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4808      	ldr	r0, [pc, #32]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002bfe:	f004 ffc7 	bl	8007b90 <HAL_UARTEx_SetRxFifoThreshold>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002c08:	f7ff fd76 	bl	80026f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c0c:	4804      	ldr	r0, [pc, #16]	; (8002c20 <MX_USART1_UART_Init+0x90>)
 8002c0e:	f004 ff49 	bl	8007aa4 <HAL_UARTEx_DisableFifoMode>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002c18:	f7ff fd6e 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	200005c8 	.word	0x200005c8
 8002c24:	40013800 	.word	0x40013800

08002c28 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c2c:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002c2e:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <MX_USART2_UART_Init+0x94>)
 8002c30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c32:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c46:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002c4e:	220c      	movs	r2, #12
 8002c50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c52:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c58:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c64:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c6a:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c70:	4811      	ldr	r0, [pc, #68]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002c72:	f003 fbe3 	bl	800643c <HAL_UART_Init>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c7c:	f7ff fd3c 	bl	80026f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c80:	2100      	movs	r1, #0
 8002c82:	480d      	ldr	r0, [pc, #52]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002c84:	f004 ff46 	bl	8007b14 <HAL_UARTEx_SetTxFifoThreshold>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002c8e:	f7ff fd33 	bl	80026f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c92:	2100      	movs	r1, #0
 8002c94:	4808      	ldr	r0, [pc, #32]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002c96:	f004 ff7b 	bl	8007b90 <HAL_UARTEx_SetRxFifoThreshold>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002ca0:	f7ff fd2a 	bl	80026f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002ca4:	4804      	ldr	r0, [pc, #16]	; (8002cb8 <MX_USART2_UART_Init+0x90>)
 8002ca6:	f004 fefd 	bl	8007aa4 <HAL_UARTEx_DisableFifoMode>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002cb0:	f7ff fd22 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	2000065c 	.word	0x2000065c
 8002cbc:	40004400 	.word	0x40004400

08002cc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b096      	sub	sp, #88	; 0x58
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	2238      	movs	r2, #56	; 0x38
 8002cde:	2100      	movs	r1, #0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f008 fdbb 	bl	800b85c <memset>
  if(uartHandle->Instance==USART1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a69      	ldr	r2, [pc, #420]	; (8002e90 <HAL_UART_MspInit+0x1d0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d130      	bne.n	8002d52 <HAL_UART_MspInit+0x92>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002cf4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002cf8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cfa:	f107 030c 	add.w	r3, r7, #12
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 f982 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d0a:	f7ff fcf5 	bl	80026f8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d0e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d12:	f7ff ff25 	bl	8002b60 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d16:	2001      	movs	r0, #1
 8002d18:	f7ff fef2 	bl	8002b00 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002d1c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d20:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d2e:	2307      	movs	r3, #7
 8002d30:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d36:	4619      	mov	r1, r3
 8002d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d3c:	f000 fdd8 	bl	80038f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d40:	2200      	movs	r2, #0
 8002d42:	2100      	movs	r1, #0
 8002d44:	2024      	movs	r0, #36	; 0x24
 8002d46:	f000 fa1c 	bl	8003182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d4a:	2024      	movs	r0, #36	; 0x24
 8002d4c:	f000 fa33 	bl	80031b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d50:	e099      	b.n	8002e86 <HAL_UART_MspInit+0x1c6>
  else if(uartHandle->Instance==USART2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a4f      	ldr	r2, [pc, #316]	; (8002e94 <HAL_UART_MspInit+0x1d4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	f040 8094 	bne.w	8002e86 <HAL_UART_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d62:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002d66:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f002 f94b 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_UART_MspInit+0xbc>
      Error_Handler();
 8002d78:	f7ff fcbe 	bl	80026f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d7c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002d80:	f7ff fed6 	bl	8002b30 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d84:	2001      	movs	r0, #1
 8002d86:	f7ff febb 	bl	8002b00 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8002d8a:	230c      	movs	r3, #12
 8002d8c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d96:	2300      	movs	r3, #0
 8002d98:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d9a:	2307      	movs	r3, #7
 8002d9c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002da2:	4619      	mov	r1, r3
 8002da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002da8:	f000 fda2 	bl	80038f0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8002dac:	4b3a      	ldr	r3, [pc, #232]	; (8002e98 <HAL_UART_MspInit+0x1d8>)
 8002dae:	4a3b      	ldr	r2, [pc, #236]	; (8002e9c <HAL_UART_MspInit+0x1dc>)
 8002db0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002db2:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <HAL_UART_MspInit+0x1d8>)
 8002db4:	2213      	movs	r2, #19
 8002db6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002db8:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <HAL_UART_MspInit+0x1d8>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dbe:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <HAL_UART_MspInit+0x1d8>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dc4:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <HAL_UART_MspInit+0x1d8>)
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dca:	4b33      	ldr	r3, [pc, #204]	; (8002e98 <HAL_UART_MspInit+0x1d8>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dd0:	4b31      	ldr	r3, [pc, #196]	; (8002e98 <HAL_UART_MspInit+0x1d8>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002dd6:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <HAL_UART_MspInit+0x1d8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ddc:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <HAL_UART_MspInit+0x1d8>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002de2:	482d      	ldr	r0, [pc, #180]	; (8002e98 <HAL_UART_MspInit+0x1d8>)
 8002de4:	f000 fa02 	bl	80031ec <HAL_DMA_Init>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8002dee:	f7ff fc83 	bl	80026f8 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002df2:	2110      	movs	r1, #16
 8002df4:	4828      	ldr	r0, [pc, #160]	; (8002e98 <HAL_UART_MspInit+0x1d8>)
 8002df6:	f000 fca3 	bl	8003740 <HAL_DMA_ConfigChannelAttributes>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_UART_MspInit+0x144>
      Error_Handler();
 8002e00:	f7ff fc7a 	bl	80026f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a24      	ldr	r2, [pc, #144]	; (8002e98 <HAL_UART_MspInit+0x1d8>)
 8002e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002e0c:	4a22      	ldr	r2, [pc, #136]	; (8002e98 <HAL_UART_MspInit+0x1d8>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002e12:	4b23      	ldr	r3, [pc, #140]	; (8002ea0 <HAL_UART_MspInit+0x1e0>)
 8002e14:	4a23      	ldr	r2, [pc, #140]	; (8002ea4 <HAL_UART_MspInit+0x1e4>)
 8002e16:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_UART_MspInit+0x1e0>)
 8002e1a:	2214      	movs	r2, #20
 8002e1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_UART_MspInit+0x1e0>)
 8002e20:	2210      	movs	r2, #16
 8002e22:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e24:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_UART_MspInit+0x1e0>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_UART_MspInit+0x1e0>)
 8002e2c:	2280      	movs	r2, #128	; 0x80
 8002e2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e30:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_UART_MspInit+0x1e0>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e36:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <HAL_UART_MspInit+0x1e0>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <HAL_UART_MspInit+0x1e0>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e42:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <HAL_UART_MspInit+0x1e0>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e48:	4815      	ldr	r0, [pc, #84]	; (8002ea0 <HAL_UART_MspInit+0x1e0>)
 8002e4a:	f000 f9cf 	bl	80031ec <HAL_DMA_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8002e54:	f7ff fc50 	bl	80026f8 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002e58:	2110      	movs	r1, #16
 8002e5a:	4811      	ldr	r0, [pc, #68]	; (8002ea0 <HAL_UART_MspInit+0x1e0>)
 8002e5c:	f000 fc70 	bl	8003740 <HAL_DMA_ConfigChannelAttributes>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8002e66:	f7ff fc47 	bl	80026f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <HAL_UART_MspInit+0x1e0>)
 8002e6e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002e70:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <HAL_UART_MspInit+0x1e0>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2025      	movs	r0, #37	; 0x25
 8002e7c:	f000 f981 	bl	8003182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e80:	2025      	movs	r0, #37	; 0x25
 8002e82:	f000 f998 	bl	80031b6 <HAL_NVIC_EnableIRQ>
}
 8002e86:	bf00      	nop
 8002e88:	3758      	adds	r7, #88	; 0x58
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40013800 	.word	0x40013800
 8002e94:	40004400 	.word	0x40004400
 8002e98:	200006f0 	.word	0x200006f0
 8002e9c:	40020008 	.word	0x40020008
 8002ea0:	20000750 	.word	0x20000750
 8002ea4:	4002001c 	.word	0x4002001c

08002ea8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ea8:	480d      	ldr	r0, [pc, #52]	; (8002ee0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eaa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002eac:	f7ff fd2c 	bl	8002908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eb2:	490d      	ldr	r1, [pc, #52]	; (8002ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <LoopForever+0xe>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb8:	e002      	b.n	8002ec0 <LoopCopyDataInit>

08002eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ebe:	3304      	adds	r3, #4

08002ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec4:	d3f9      	bcc.n	8002eba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ec8:	4c0a      	ldr	r4, [pc, #40]	; (8002ef4 <LoopForever+0x16>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ecc:	e001      	b.n	8002ed2 <LoopFillZerobss>

08002ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed0:	3204      	adds	r2, #4

08002ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed4:	d3fb      	bcc.n	8002ece <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ed6:	f008 fccf 	bl	800b878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eda:	f7fe ff61 	bl	8001da0 <main>

08002ede <LoopForever>:

LoopForever:
    b LoopForever
 8002ede:	e7fe      	b.n	8002ede <LoopForever>
  ldr   r0, =_estack
 8002ee0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002eec:	0800c974 	.word	0x0800c974
  ldr r2, =_sbss
 8002ef0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002ef4:	20000abc 	.word	0x20000abc

08002ef8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ef8:	e7fe      	b.n	8002ef8 <ADC_IRQHandler>
	...

08002efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f06:	2003      	movs	r0, #3
 8002f08:	f000 f930 	bl	800316c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f0c:	f001 fe9e 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8002f10:	4603      	mov	r3, r0
 8002f12:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <HAL_Init+0x3c>)
 8002f14:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f16:	2000      	movs	r0, #0
 8002f18:	f000 f810 	bl	8002f3c <HAL_InitTick>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	71fb      	strb	r3, [r7, #7]
 8002f26:	e001      	b.n	8002f2c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f28:	f7ff fbeb 	bl	8002702 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000004 	.word	0x20000004

08002f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_InitTick+0x6c>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d024      	beq.n	8002f9a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f50:	f001 fe7c 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <HAL_InitTick+0x6c>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f60:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f932 	bl	80031d2 <HAL_SYSTICK_Config>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10f      	bne.n	8002f94 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b0f      	cmp	r3, #15
 8002f78:	d809      	bhi.n	8002f8e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f82:	f000 f8fe 	bl	8003182 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_InitTick+0x70>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	e007      	b.n	8002f9e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
 8002f92:	e004      	b.n	8002f9e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	e001      	b.n	8002f9e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	2000000c 	.word	0x2000000c
 8002fac:	20000008 	.word	0x20000008

08002fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_IncTick+0x1c>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_IncTick+0x20>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	4a03      	ldr	r2, [pc, #12]	; (8002fd0 <HAL_IncTick+0x20>)
 8002fc2:	6013      	str	r3, [r2, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	2000000c 	.word	0x2000000c
 8002fd0:	200007b0 	.word	0x200007b0

08002fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003006:	4a04      	ldr	r2, [pc, #16]	; (8003018 <__NVIC_SetPriorityGrouping+0x44>)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	60d3      	str	r3, [r2, #12]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <__NVIC_GetPriorityGrouping+0x18>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	f003 0307 	and.w	r3, r3, #7
}
 800302a:	4618      	mov	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	2b00      	cmp	r3, #0
 8003048:	db0b      	blt.n	8003062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	f003 021f 	and.w	r2, r3, #31
 8003050:	4906      	ldr	r1, [pc, #24]	; (800306c <__NVIC_EnableIRQ+0x34>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2001      	movs	r0, #1
 800305a:	fa00 f202 	lsl.w	r2, r0, r2
 800305e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	e000e100 	.word	0xe000e100

08003070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003080:	2b00      	cmp	r3, #0
 8003082:	db0a      	blt.n	800309a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	b2da      	uxtb	r2, r3
 8003088:	490c      	ldr	r1, [pc, #48]	; (80030bc <__NVIC_SetPriority+0x4c>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	440b      	add	r3, r1
 8003094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003098:	e00a      	b.n	80030b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4908      	ldr	r1, [pc, #32]	; (80030c0 <__NVIC_SetPriority+0x50>)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	3b04      	subs	r3, #4
 80030a8:	0112      	lsls	r2, r2, #4
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	440b      	add	r3, r1
 80030ae:	761a      	strb	r2, [r3, #24]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000e100 	.word	0xe000e100
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f1c3 0307 	rsb	r3, r3, #7
 80030de:	2b04      	cmp	r3, #4
 80030e0:	bf28      	it	cs
 80030e2:	2304      	movcs	r3, #4
 80030e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3304      	adds	r3, #4
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d902      	bls.n	80030f4 <NVIC_EncodePriority+0x30>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3b03      	subs	r3, #3
 80030f2:	e000      	b.n	80030f6 <NVIC_EncodePriority+0x32>
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	401a      	ands	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800310c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	43d9      	mvns	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	4313      	orrs	r3, r2
         );
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3b01      	subs	r3, #1
 8003134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003138:	d301      	bcc.n	800313e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800313a:	2301      	movs	r3, #1
 800313c:	e00f      	b.n	800315e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800313e:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <SysTick_Config+0x40>)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3b01      	subs	r3, #1
 8003144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003146:	210f      	movs	r1, #15
 8003148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800314c:	f7ff ff90 	bl	8003070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <SysTick_Config+0x40>)
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003156:	4b04      	ldr	r3, [pc, #16]	; (8003168 <SysTick_Config+0x40>)
 8003158:	2207      	movs	r2, #7
 800315a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	e000e010 	.word	0xe000e010

0800316c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ff2d 	bl	8002fd4 <__NVIC_SetPriorityGrouping>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b086      	sub	sp, #24
 8003186:	af00      	add	r7, sp, #0
 8003188:	4603      	mov	r3, r0
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003190:	f7ff ff44 	bl	800301c <__NVIC_GetPriorityGrouping>
 8003194:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	6978      	ldr	r0, [r7, #20]
 800319c:	f7ff ff92 	bl	80030c4 <NVIC_EncodePriority>
 80031a0:	4602      	mov	r2, r0
 80031a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a6:	4611      	mov	r1, r2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff61 	bl	8003070 <__NVIC_SetPriority>
}
 80031ae:	bf00      	nop
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff37 	bl	8003038 <__NVIC_EnableIRQ>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff ffa4 	bl	8003128 <SysTick_Config>
 80031e0:	4603      	mov	r3, r0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e08e      	b.n	800331c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	4b47      	ldr	r3, [pc, #284]	; (8003324 <HAL_DMA_Init+0x138>)
 8003206:	429a      	cmp	r2, r3
 8003208:	d80f      	bhi.n	800322a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	4b45      	ldr	r3, [pc, #276]	; (8003328 <HAL_DMA_Init+0x13c>)
 8003212:	4413      	add	r3, r2
 8003214:	4a45      	ldr	r2, [pc, #276]	; (800332c <HAL_DMA_Init+0x140>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	009a      	lsls	r2, r3, #2
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a42      	ldr	r2, [pc, #264]	; (8003330 <HAL_DMA_Init+0x144>)
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
 8003228:	e00e      	b.n	8003248 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	4b40      	ldr	r3, [pc, #256]	; (8003334 <HAL_DMA_Init+0x148>)
 8003232:	4413      	add	r3, r2
 8003234:	4a3d      	ldr	r2, [pc, #244]	; (800332c <HAL_DMA_Init+0x140>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	009a      	lsls	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a3c      	ldr	r2, [pc, #240]	; (8003338 <HAL_DMA_Init+0x14c>)
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6819      	ldr	r1, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fabc 	bl	8003818 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032a8:	d102      	bne.n	80032b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032bc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032c6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d010      	beq.n	80032f2 <HAL_DMA_Init+0x106>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d80c      	bhi.n	80032f2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fae5 	bl	80038a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	e008      	b.n	8003304 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40020407 	.word	0x40020407
 8003328:	bffdfff8 	.word	0xbffdfff8
 800332c:	cccccccd 	.word	0xcccccccd
 8003330:	40020000 	.word	0x40020000
 8003334:	bffdfbf8 	.word	0xbffdfbf8
 8003338:	40020400 	.word	0x40020400

0800333c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_DMA_Start_IT+0x20>
 8003358:	2302      	movs	r3, #2
 800335a:	e069      	b.n	8003430 <HAL_DMA_Start_IT+0xf4>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d155      	bne.n	800341c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fa02 	bl	800379e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 020e 	orr.w	r2, r2, #14
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e00f      	b.n	80033d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0204 	bic.w	r2, r2, #4
 80033c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 020a 	orr.w	r2, r2, #10
 80033d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003408:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	e008      	b.n	800342e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2280      	movs	r2, #128	; 0x80
 8003420:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800342e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e04f      	b.n	80034ea <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d008      	beq.n	8003468 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2204      	movs	r2, #4
 800345a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e040      	b.n	80034ea <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 020e 	bic.w	r2, r2, #14
 8003476:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003482:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003486:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	f003 021c 	and.w	r2, r3, #28
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	2101      	movs	r1, #1
 80034a6:	fa01 f202 	lsl.w	r2, r1, r2
 80034aa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00c      	beq.n	80034d8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80034d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d005      	beq.n	8003518 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2204      	movs	r2, #4
 8003510:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
 8003516:	e047      	b.n	80035a8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 020e 	bic.w	r2, r2, #14
 8003526:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003542:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003546:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	f003 021c 	and.w	r2, r3, #28
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	2101      	movs	r1, #1
 8003556:	fa01 f202 	lsl.w	r2, r1, r2
 800355a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003564:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800357c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003586:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
    }
  }
  return status;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	f003 031c 	and.w	r3, r3, #28
 80035d4:	2204      	movs	r2, #4
 80035d6:	409a      	lsls	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d027      	beq.n	8003630 <HAL_DMA_IRQHandler+0x7c>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d022      	beq.n	8003630 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d107      	bne.n	8003608 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0204 	bic.w	r2, r2, #4
 8003606:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	f003 021c 	and.w	r2, r3, #28
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	2104      	movs	r1, #4
 8003616:	fa01 f202 	lsl.w	r2, r1, r2
 800361a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8081 	beq.w	8003728 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800362e:	e07b      	b.n	8003728 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	f003 031c 	and.w	r3, r3, #28
 8003638:	2202      	movs	r2, #2
 800363a:	409a      	lsls	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03d      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x10c>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d038      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 020a 	bic.w	r2, r2, #10
 800366a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <HAL_DMA_IRQHandler+0x180>)
 800367c:	429a      	cmp	r2, r3
 800367e:	d909      	bls.n	8003694 <HAL_DMA_IRQHandler+0xe0>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003684:	f003 031c 	and.w	r3, r3, #28
 8003688:	4a2b      	ldr	r2, [pc, #172]	; (8003738 <HAL_DMA_IRQHandler+0x184>)
 800368a:	2102      	movs	r1, #2
 800368c:	fa01 f303 	lsl.w	r3, r1, r3
 8003690:	6053      	str	r3, [r2, #4]
 8003692:	e008      	b.n	80036a6 <HAL_DMA_IRQHandler+0xf2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	f003 031c 	and.w	r3, r3, #28
 800369c:	4a27      	ldr	r2, [pc, #156]	; (800373c <HAL_DMA_IRQHandler+0x188>)
 800369e:	2102      	movs	r1, #2
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d038      	beq.n	8003728 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80036be:	e033      	b.n	8003728 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	f003 031c 	and.w	r3, r3, #28
 80036c8:	2208      	movs	r2, #8
 80036ca:	409a      	lsls	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d02a      	beq.n	800372a <HAL_DMA_IRQHandler+0x176>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d025      	beq.n	800372a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 020e 	bic.w	r2, r2, #14
 80036ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f003 021c 	and.w	r2, r3, #28
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	2101      	movs	r1, #1
 80036fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003700:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003728:	bf00      	nop
 800372a:	bf00      	nop
}
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40020080 	.word	0x40020080
 8003738:	40020400 	.word	0x40020400
 800373c:	40020000 	.word	0x40020000

08003740 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d103      	bne.n	800375c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	72fb      	strb	r3, [r7, #11]
    return status;
 8003758:	7afb      	ldrb	r3, [r7, #11]
 800375a:	e01b      	b.n	8003794 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00d      	beq.n	800378a <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d004      	beq.n	8003782 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e003      	b.n	800378a <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003788:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	601a      	str	r2, [r3, #0]

  return status;
 8003792:	7afb      	ldrb	r3, [r7, #11]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr

0800379e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037b4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037c6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	f003 021c 	and.w	r2, r3, #28
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f202 	lsl.w	r2, r1, r2
 80037da:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d108      	bne.n	80037fe <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037fc:	e007      	b.n	800380e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	60da      	str	r2, [r3, #12]
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	461a      	mov	r2, r3
 8003826:	4b1c      	ldr	r3, [pc, #112]	; (8003898 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003828:	429a      	cmp	r2, r3
 800382a:	d813      	bhi.n	8003854 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003838:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	3b08      	subs	r3, #8
 8003848:	4a14      	ldr	r2, [pc, #80]	; (800389c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	091b      	lsrs	r3, r3, #4
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	e011      	b.n	8003878 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	089b      	lsrs	r3, r3, #2
 800385a:	009a      	lsls	r2, r3, #2
 800385c:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800385e:	4413      	add	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	3b08      	subs	r3, #8
 800386c:	4a0b      	ldr	r2, [pc, #44]	; (800389c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	3307      	adds	r3, #7
 8003876:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800387c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	2201      	movs	r2, #1
 8003886:	409a      	lsls	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40020407 	.word	0x40020407
 800389c:	cccccccd 	.word	0xcccccccd
 80038a0:	4002081c 	.word	0x4002081c
 80038a4:	40020880 	.word	0x40020880

080038a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038b8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	461a      	mov	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a08      	ldr	r2, [pc, #32]	; (80038ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80038cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2201      	movs	r2, #1
 80038d8:	409a      	lsls	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80038de:	bf00      	nop
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr
 80038e8:	1000823f 	.word	0x1000823f
 80038ec:	40020940 	.word	0x40020940

080038f0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038fe:	e140      	b.n	8003b82 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	2101      	movs	r1, #1
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	fa01 f303 	lsl.w	r3, r1, r3
 800390c:	4013      	ands	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8132 	beq.w	8003b7c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d005      	beq.n	8003930 <HAL_GPIO_Init+0x40>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d130      	bne.n	8003992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	2203      	movs	r2, #3
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003966:	2201      	movs	r2, #1
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	091b      	lsrs	r3, r3, #4
 800397c:	f003 0201 	and.w	r2, r3, #1
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	2b03      	cmp	r3, #3
 800399c:	d017      	beq.n	80039ce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	2203      	movs	r2, #3
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4013      	ands	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d123      	bne.n	8003a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	08da      	lsrs	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3208      	adds	r2, #8
 80039e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	220f      	movs	r2, #15
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4013      	ands	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	08da      	lsrs	r2, r3, #3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3208      	adds	r2, #8
 8003a1c:	6939      	ldr	r1, [r7, #16]
 8003a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 0203 	and.w	r2, r3, #3
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 808c 	beq.w	8003b7c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003a64:	4a4e      	ldr	r2, [pc, #312]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	2207      	movs	r2, #7
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a8e:	d00d      	beq.n	8003aac <HAL_GPIO_Init+0x1bc>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a44      	ldr	r2, [pc, #272]	; (8003ba4 <HAL_GPIO_Init+0x2b4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <HAL_GPIO_Init+0x1b8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a43      	ldr	r2, [pc, #268]	; (8003ba8 <HAL_GPIO_Init+0x2b8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d101      	bne.n	8003aa4 <HAL_GPIO_Init+0x1b4>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e004      	b.n	8003aae <HAL_GPIO_Init+0x1be>
 8003aa4:	2307      	movs	r3, #7
 8003aa6:	e002      	b.n	8003aae <HAL_GPIO_Init+0x1be>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_GPIO_Init+0x1be>
 8003aac:	2300      	movs	r3, #0
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	f002 0203 	and.w	r2, r2, #3
 8003ab4:	0092      	lsls	r2, r2, #2
 8003ab6:	4093      	lsls	r3, r2
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003abe:	4938      	ldr	r1, [pc, #224]	; (8003ba0 <HAL_GPIO_Init+0x2b0>)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003acc:	4b37      	ldr	r3, [pc, #220]	; (8003bac <HAL_GPIO_Init+0x2bc>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003af0:	4a2e      	ldr	r2, [pc, #184]	; (8003bac <HAL_GPIO_Init+0x2bc>)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003af6:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <HAL_GPIO_Init+0x2bc>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4013      	ands	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b1a:	4a24      	ldr	r2, [pc, #144]	; (8003bac <HAL_GPIO_Init+0x2bc>)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003b20:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_GPIO_Init+0x2bc>)
 8003b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b26:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003b46:	4a19      	ldr	r2, [pc, #100]	; (8003bac <HAL_GPIO_Init+0x2bc>)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003b4e:	4b17      	ldr	r3, [pc, #92]	; (8003bac <HAL_GPIO_Init+0x2bc>)
 8003b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b54:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003b74:	4a0d      	ldr	r2, [pc, #52]	; (8003bac <HAL_GPIO_Init+0x2bc>)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f47f aeb7 	bne.w	8003900 <HAL_GPIO_Init+0x10>
  }
}
 8003b92:	bf00      	nop
 8003b94:	bf00      	nop
 8003b96:	371c      	adds	r7, #28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	48000400 	.word	0x48000400
 8003ba8:	48000800 	.word	0x48000800
 8003bac:	58000800 	.word	0x58000800

08003bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	807b      	strh	r3, [r7, #2]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bc0:	787b      	ldrb	r3, [r7, #1]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bc6:	887a      	ldrh	r2, [r7, #2]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bcc:	e002      	b.n	8003bd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bce:	887a      	ldrh	r2, [r7, #2]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
	...

08003be0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be4:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a03      	ldr	r2, [pc, #12]	; (8003bf8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bee:	6013      	str	r3, [r2, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	58000400 	.word	0x58000400

08003bfc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_PWREx_GetVoltageRange+0x14>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr
 8003c10:	58000400 	.word	0x58000400

08003c14 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c24:	d101      	bne.n	8003c2a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	58000400 	.word	0x58000400

08003c38 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c4a:	6013      	str	r3, [r2, #0]
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c66:	6013      	str	r3, [r2, #0]
}
 8003c68:	bf00      	nop
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c82:	d101      	bne.n	8003c88 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003c92:	b480      	push	{r7}
 8003c94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
}
 8003ca6:	bf00      	nop
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc0:	6013      	str	r3, [r2, #0]
}
 8003cc2:	bf00      	nop
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cdc:	d101      	bne.n	8003ce2 <LL_RCC_HSE_IsReady+0x18>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <LL_RCC_HSE_IsReady+0x1a>
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfe:	6013      	str	r3, [r2, #0]
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d1a:	6013      	str	r3, [r2, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d36:	d101      	bne.n	8003d3c <LL_RCC_HSI_IsReady+0x18>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <LL_RCC_HSI_IsReady+0x1a>
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr

08003d46 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	061b      	lsls	r3, r3, #24
 8003d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr

08003d6e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d101      	bne.n	8003d86 <LL_RCC_LSE_IsReady+0x18>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <LL_RCC_LSE_IsReady+0x1a>
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d101      	bne.n	8003de8 <LL_RCC_LSI_IsReady+0x18>
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <LL_RCC_LSI_IsReady+0x1a>
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003df2:	b480      	push	{r7}
 8003df4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	6013      	str	r3, [r2, #0]
}
 8003e06:	bf00      	nop
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	6013      	str	r3, [r2, #0]
}
 8003e22:	bf00      	nop
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d101      	bne.n	8003e40 <LL_RCC_MSI_IsReady+0x16>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <LL_RCC_MSI_IsReady+0x18>
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr

08003e4a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d101      	bne.n	8003e60 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr

08003e6a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	604b      	str	r3, [r1, #4]
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr

08003ec0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f023 0203 	bic.w	r2, r3, #3
 8003ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	608b      	str	r3, [r1, #8]
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr

08003ee6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	608b      	str	r3, [r1, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr

08003f22 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f58:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f5c:	f023 020f 	bic.w	r2, r3, #15
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	608b      	str	r3, [r1, #8]
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004002:	4618      	mov	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800402e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004032:	6013      	str	r3, [r2, #0]
}
 8004034:	bf00      	nop
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800404a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800404e:	6013      	str	r3, [r2, #0]
}
 8004050:	bf00      	nop
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800405c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800406a:	d101      	bne.n	8004070 <LL_RCC_PLL_IsReady+0x18>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <LL_RCC_PLL_IsReady+0x1a>
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr

0800407a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800407a:	b480      	push	{r7}
 800407c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800407e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	0a1b      	lsrs	r3, r3, #8
 8004086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800408a:	4618      	mov	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr

08004092 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80040ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr

080040be <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80040be:	b480      	push	{r7}
 80040c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80040c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0303 	and.w	r3, r3, #3
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80040d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e6:	d101      	bne.n	80040ec <LL_RCC_IsActiveFlag_HPRE+0x18>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80040f6:	b480      	push	{r7}
 80040f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80040fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800410a:	d101      	bne.n	8004110 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr

0800411a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800411a:	b480      	push	{r7}
 800411c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800411e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004122:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412e:	d101      	bne.n	8004134 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800413e:	b480      	push	{r7}
 8004140:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004150:	d101      	bne.n	8004156 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800416e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004172:	d101      	bne.n	8004178 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr
	...

08004184 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e36f      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004196:	f7ff fea6 	bl	8003ee6 <LL_RCC_GetSysClkSource>
 800419a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800419c:	f7ff ff8f 	bl	80040be <LL_RCC_PLL_GetMainSource>
 80041a0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80c4 	beq.w	8004338 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_RCC_OscConfig+0x3e>
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	2b0c      	cmp	r3, #12
 80041ba:	d176      	bne.n	80042aa <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d173      	bne.n	80042aa <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e353      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_OscConfig+0x68>
 80041e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ea:	e006      	b.n	80041fa <HAL_RCC_OscConfig+0x76>
 80041ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d222      	bcs.n	8004244 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fd5a 	bl	8004cbc <RCC_SetFlashLatencyFromMSIRange>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e331      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800421c:	f043 0308 	orr.w	r3, r3, #8
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fe2b 	bl	8003e98 <LL_RCC_MSI_SetCalibTrimming>
 8004242:	e021      	b.n	8004288 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800424e:	f043 0308 	orr.w	r3, r3, #8
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fe12 	bl	8003e98 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fd1f 	bl	8004cbc <RCC_SetFlashLatencyFromMSIRange>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e2f6      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004288:	f000 fce0 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 800428c:	4603      	mov	r3, r0
 800428e:	4aa7      	ldr	r2, [pc, #668]	; (800452c <HAL_RCC_OscConfig+0x3a8>)
 8004290:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004292:	4ba7      	ldr	r3, [pc, #668]	; (8004530 <HAL_RCC_OscConfig+0x3ac>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe fe50 	bl	8002f3c <HAL_InitTick>
 800429c:	4603      	mov	r3, r0
 800429e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80042a0:	7cfb      	ldrb	r3, [r7, #19]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d047      	beq.n	8004336 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80042a6:	7cfb      	ldrb	r3, [r7, #19]
 80042a8:	e2e5      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d02c      	beq.n	800430c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042b2:	f7ff fd9e 	bl	8003df2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042b6:	f7fe fad1 	bl	800285c <HAL_GetTick>
 80042ba:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042be:	f7fe facd 	bl	800285c <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e2d2      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80042d0:	f7ff fdab 	bl	8003e2a <LL_RCC_MSI_IsReady>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f1      	beq.n	80042be <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e4:	f043 0308 	orr.w	r3, r3, #8
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042fc:	4313      	orrs	r3, r2
 80042fe:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fdc7 	bl	8003e98 <LL_RCC_MSI_SetCalibTrimming>
 800430a:	e015      	b.n	8004338 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800430c:	f7ff fd7f 	bl	8003e0e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004310:	f7fe faa4 	bl	800285c <HAL_GetTick>
 8004314:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004318:	f7fe faa0 	bl	800285c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e2a5      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800432a:	f7ff fd7e 	bl	8003e2a <LL_RCC_MSI_IsReady>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f1      	bne.n	8004318 <HAL_RCC_OscConfig+0x194>
 8004334:	e000      	b.n	8004338 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004336:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d058      	beq.n	80043f6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	2b08      	cmp	r3, #8
 8004348:	d005      	beq.n	8004356 <HAL_RCC_OscConfig+0x1d2>
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	2b0c      	cmp	r3, #12
 800434e:	d108      	bne.n	8004362 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b03      	cmp	r3, #3
 8004354:	d105      	bne.n	8004362 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d14b      	bne.n	80043f6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e289      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004374:	4313      	orrs	r3, r2
 8004376:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d102      	bne.n	8004388 <HAL_RCC_OscConfig+0x204>
 8004382:	f7ff fc86 	bl	8003c92 <LL_RCC_HSE_Enable>
 8004386:	e00d      	b.n	80043a4 <HAL_RCC_OscConfig+0x220>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004390:	d104      	bne.n	800439c <HAL_RCC_OscConfig+0x218>
 8004392:	f7ff fc51 	bl	8003c38 <LL_RCC_HSE_EnableTcxo>
 8004396:	f7ff fc7c 	bl	8003c92 <LL_RCC_HSE_Enable>
 800439a:	e003      	b.n	80043a4 <HAL_RCC_OscConfig+0x220>
 800439c:	f7ff fc87 	bl	8003cae <LL_RCC_HSE_Disable>
 80043a0:	f7ff fc58 	bl	8003c54 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d012      	beq.n	80043d2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ac:	f7fe fa56 	bl	800285c <HAL_GetTick>
 80043b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b4:	f7fe fa52 	bl	800285c <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b64      	cmp	r3, #100	; 0x64
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e257      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80043c6:	f7ff fc80 	bl	8003cca <LL_RCC_HSE_IsReady>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f1      	beq.n	80043b4 <HAL_RCC_OscConfig+0x230>
 80043d0:	e011      	b.n	80043f6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d2:	f7fe fa43 	bl	800285c <HAL_GetTick>
 80043d6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043da:	f7fe fa3f 	bl	800285c <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b64      	cmp	r3, #100	; 0x64
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e244      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80043ec:	f7ff fc6d 	bl	8003cca <LL_RCC_HSE_IsReady>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f1      	bne.n	80043da <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d046      	beq.n	8004490 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2b04      	cmp	r3, #4
 8004406:	d005      	beq.n	8004414 <HAL_RCC_OscConfig+0x290>
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	2b0c      	cmp	r3, #12
 800440c:	d10e      	bne.n	800442c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d10b      	bne.n	800442c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e22a      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fc8e 	bl	8003d46 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800442a:	e031      	b.n	8004490 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d019      	beq.n	8004468 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004434:	f7ff fc5a 	bl	8003cec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fe fa10 	bl	800285c <HAL_GetTick>
 800443c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004440:	f7fe fa0c 	bl	800285c <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e211      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004452:	f7ff fc67 	bl	8003d24 <LL_RCC_HSI_IsReady>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f1      	beq.n	8004440 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff fc70 	bl	8003d46 <LL_RCC_HSI_SetCalibTrimming>
 8004466:	e013      	b.n	8004490 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004468:	f7ff fc4e 	bl	8003d08 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fe f9f6 	bl	800285c <HAL_GetTick>
 8004470:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004474:	f7fe f9f2 	bl	800285c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e1f7      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004486:	f7ff fc4d 	bl	8003d24 <LL_RCC_HSI_IsReady>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f1      	bne.n	8004474 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d06e      	beq.n	800457a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d056      	beq.n	8004552 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80044a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ac:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d031      	beq.n	8004520 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d006      	beq.n	80044d4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e1d0      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d013      	beq.n	8004506 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80044de:	f7ff fc67 	bl	8003db0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044e2:	f7fe f9bb 	bl	800285c <HAL_GetTick>
 80044e6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ea:	f7fe f9b7 	bl	800285c <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b11      	cmp	r3, #17
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e1bc      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80044fc:	f7ff fc68 	bl	8003dd0 <LL_RCC_LSI_IsReady>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f1      	bne.n	80044ea <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800450e:	f023 0210 	bic.w	r2, r3, #16
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004520:	f7ff fc36 	bl	8003d90 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004524:	f7fe f99a 	bl	800285c <HAL_GetTick>
 8004528:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800452a:	e00c      	b.n	8004546 <HAL_RCC_OscConfig+0x3c2>
 800452c:	20000004 	.word	0x20000004
 8004530:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004534:	f7fe f992 	bl	800285c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b11      	cmp	r3, #17
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e197      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004546:	f7ff fc43 	bl	8003dd0 <LL_RCC_LSI_IsReady>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f1      	beq.n	8004534 <HAL_RCC_OscConfig+0x3b0>
 8004550:	e013      	b.n	800457a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004552:	f7ff fc2d 	bl	8003db0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004556:	f7fe f981 	bl	800285c <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455e:	f7fe f97d 	bl	800285c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b11      	cmp	r3, #17
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e182      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004570:	f7ff fc2e 	bl	8003dd0 <LL_RCC_LSI_IsReady>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f1      	bne.n	800455e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80d8 	beq.w	8004738 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004588:	f7ff fb44 	bl	8003c14 <LL_PWR_IsEnabledBkUpAccess>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d113      	bne.n	80045ba <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004592:	f7ff fb25 	bl	8003be0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004596:	f7fe f961 	bl	800285c <HAL_GetTick>
 800459a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459e:	f7fe f95d 	bl	800285c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e162      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80045b0:	f7ff fb30 	bl	8003c14 <LL_PWR_IsEnabledBkUpAccess>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f1      	beq.n	800459e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d07b      	beq.n	80046ba <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b85      	cmp	r3, #133	; 0x85
 80045c8:	d003      	beq.n	80045d2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b05      	cmp	r3, #5
 80045d0:	d109      	bne.n	80045e6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80045d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045de:	f043 0304 	orr.w	r3, r3, #4
 80045e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e6:	f7fe f939 	bl	800285c <HAL_GetTick>
 80045ea:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004600:	e00a      	b.n	8004618 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004602:	f7fe f92b 	bl	800285c <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004610:	4293      	cmp	r3, r2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e12e      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004618:	f7ff fba9 	bl	8003d6e <LL_RCC_LSE_IsReady>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0ef      	beq.n	8004602 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b81      	cmp	r3, #129	; 0x81
 8004628:	d003      	beq.n	8004632 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b85      	cmp	r3, #133	; 0x85
 8004630:	d121      	bne.n	8004676 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004632:	f7fe f913 	bl	800285c <HAL_GetTick>
 8004636:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800464c:	e00a      	b.n	8004664 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464e:	f7fe f905 	bl	800285c <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e108      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0ec      	beq.n	800464e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004674:	e060      	b.n	8004738 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7fe f8f1 	bl	800285c <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800467c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800468c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004690:	e00a      	b.n	80046a8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f7fe f8e3 	bl	800285c <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e0e6      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1ec      	bne.n	8004692 <HAL_RCC_OscConfig+0x50e>
 80046b8:	e03e      	b.n	8004738 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ba:	f7fe f8cf 	bl	800285c <HAL_GetTick>
 80046be:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046d4:	e00a      	b.n	80046ec <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d6:	f7fe f8c1 	bl	800285c <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e0c4      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1ec      	bne.n	80046d6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fc:	f7fe f8ae 	bl	800285c <HAL_GetTick>
 8004700:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004716:	e00a      	b.n	800472e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fe f8a0 	bl	800285c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e0a3      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800472e:	f7ff fb1e 	bl	8003d6e <LL_RCC_LSE_IsReady>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1ef      	bne.n	8004718 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8099 	beq.w	8004874 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	2b0c      	cmp	r3, #12
 8004746:	d06c      	beq.n	8004822 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	2b02      	cmp	r3, #2
 800474e:	d14b      	bne.n	80047e8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004750:	f7ff fc74 	bl	800403c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7fe f882 	bl	800285c <HAL_GetTick>
 8004758:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475c:	f7fe f87e 	bl	800285c <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b0a      	cmp	r3, #10
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e083      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800476e:	f7ff fc73 	bl	8004058 <LL_RCC_PLL_IsReady>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f1      	bne.n	800475c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	4b40      	ldr	r3, [pc, #256]	; (8004880 <HAL_RCC_OscConfig+0x6fc>)
 8004780:	4013      	ands	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800478a:	4311      	orrs	r1, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004790:	0212      	lsls	r2, r2, #8
 8004792:	4311      	orrs	r1, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004798:	4311      	orrs	r1, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800479e:	4311      	orrs	r1, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047a4:	430a      	orrs	r2, r1
 80047a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047ae:	f7ff fc37 	bl	8004020 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c2:	f7fe f84b 	bl	800285c <HAL_GetTick>
 80047c6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ca:	f7fe f847 	bl	800285c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b0a      	cmp	r3, #10
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e04c      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80047dc:	f7ff fc3c 	bl	8004058 <LL_RCC_PLL_IsReady>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f1      	beq.n	80047ca <HAL_RCC_OscConfig+0x646>
 80047e6:	e045      	b.n	8004874 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e8:	f7ff fc28 	bl	800403c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ec:	f7fe f836 	bl	800285c <HAL_GetTick>
 80047f0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f4:	f7fe f832 	bl	800285c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b0a      	cmp	r3, #10
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e037      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004806:	f7ff fc27 	bl	8004058 <LL_RCC_PLL_IsReady>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f1      	bne.n	80047f4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800481a:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <HAL_RCC_OscConfig+0x700>)
 800481c:	4013      	ands	r3, r2
 800481e:	60cb      	str	r3, [r1, #12]
 8004820:	e028      	b.n	8004874 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e023      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800482e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	f003 0203 	and.w	r2, r3, #3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	429a      	cmp	r2, r3
 8004842:	d115      	bne.n	8004870 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484e:	429a      	cmp	r2, r3
 8004850:	d10e      	bne.n	8004870 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	429a      	cmp	r2, r3
 8004860:	d106      	bne.n	8004870 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486c:	429a      	cmp	r2, r3
 800486e:	d001      	beq.n	8004874 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	11c1808c 	.word	0x11c1808c
 8004884:	eefefffc 	.word	0xeefefffc

08004888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e12c      	b.n	8004af6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800489c:	4b98      	ldr	r3, [pc, #608]	; (8004b00 <HAL_RCC_ClockConfig+0x278>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d91b      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b95      	ldr	r3, [pc, #596]	; (8004b00 <HAL_RCC_ClockConfig+0x278>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 0207 	bic.w	r2, r3, #7
 80048b2:	4993      	ldr	r1, [pc, #588]	; (8004b00 <HAL_RCC_ClockConfig+0x278>)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048ba:	f7fd ffcf 	bl	800285c <HAL_GetTick>
 80048be:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80048c2:	f7fd ffcb 	bl	800285c <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e110      	b.n	8004af6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d4:	4b8a      	ldr	r3, [pc, #552]	; (8004b00 <HAL_RCC_ClockConfig+0x278>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d1ef      	bne.n	80048c2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d016      	beq.n	800491c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fb02 	bl	8003efc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048f8:	f7fd ffb0 	bl	800285c <HAL_GetTick>
 80048fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004900:	f7fd ffac 	bl	800285c <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e0f1      	b.n	8004af6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004912:	f7ff fbdf 	bl	80040d4 <LL_RCC_IsActiveFlag_HPRE>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f1      	beq.n	8004900 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d016      	beq.n	8004956 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff faf8 	bl	8003f22 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004932:	f7fd ff93 	bl	800285c <HAL_GetTick>
 8004936:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800493a:	f7fd ff8f 	bl	800285c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e0d4      	b.n	8004af6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800494c:	f7ff fbd3 	bl	80040f6 <LL_RCC_IsActiveFlag_C2HPRE>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f1      	beq.n	800493a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d016      	beq.n	8004990 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff faf0 	bl	8003f4c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800496c:	f7fd ff76 	bl	800285c <HAL_GetTick>
 8004970:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004974:	f7fd ff72 	bl	800285c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e0b7      	b.n	8004af6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004986:	f7ff fbc8 	bl	800411a <LL_RCC_IsActiveFlag_SHDHPRE>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f1      	beq.n	8004974 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d016      	beq.n	80049ca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff fae9 	bl	8003f78 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049a6:	f7fd ff59 	bl	800285c <HAL_GetTick>
 80049aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049ae:	f7fd ff55 	bl	800285c <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e09a      	b.n	8004af6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80049c0:	f7ff fbbd 	bl	800413e <LL_RCC_IsActiveFlag_PPRE1>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f1      	beq.n	80049ae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d017      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff fade 	bl	8003f9e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049e2:	f7fd ff3b 	bl	800285c <HAL_GetTick>
 80049e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049ea:	f7fd ff37 	bl	800285c <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e07c      	b.n	8004af6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049fc:	f7ff fbb0 	bl	8004160 <LL_RCC_IsActiveFlag_PPRE2>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f1      	beq.n	80049ea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d043      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d106      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004a1a:	f7ff f956 	bl	8003cca <LL_RCC_HSE_IsReady>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d11e      	bne.n	8004a62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e066      	b.n	8004af6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004a30:	f7ff fb12 	bl	8004058 <LL_RCC_PLL_IsReady>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d113      	bne.n	8004a62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e05b      	b.n	8004af6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004a46:	f7ff f9f0 	bl	8003e2a <LL_RCC_MSI_IsReady>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d108      	bne.n	8004a62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e050      	b.n	8004af6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004a54:	f7ff f966 	bl	8003d24 <LL_RCC_HSI_IsReady>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e049      	b.n	8004af6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff fa2a 	bl	8003ec0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a6c:	f7fd fef6 	bl	800285c <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a72:	e00a      	b.n	8004a8a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a74:	f7fd fef2 	bl	800285c <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e035      	b.n	8004af6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8a:	f7ff fa2c 	bl	8003ee6 <LL_RCC_GetSysClkSource>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d1ec      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9a:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <HAL_RCC_ClockConfig+0x278>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d21b      	bcs.n	8004ae0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa8:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <HAL_RCC_ClockConfig+0x278>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f023 0207 	bic.w	r2, r3, #7
 8004ab0:	4913      	ldr	r1, [pc, #76]	; (8004b00 <HAL_RCC_ClockConfig+0x278>)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab8:	f7fd fed0 	bl	800285c <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ac0:	f7fd fecc 	bl	800285c <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e011      	b.n	8004af6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <HAL_RCC_ClockConfig+0x278>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d1ef      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ae0:	f000 f8b4 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4a07      	ldr	r2, [pc, #28]	; (8004b04 <HAL_RCC_ClockConfig+0x27c>)
 8004ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8004aea:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <HAL_RCC_ClockConfig+0x280>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fe fa24 	bl	8002f3c <HAL_InitTick>
 8004af4:	4603      	mov	r3, r0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	58004000 	.word	0x58004000
 8004b04:	20000004 	.word	0x20000004
 8004b08:	20000008 	.word	0x20000008

08004b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b0c:	b590      	push	{r4, r7, lr}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1a:	f7ff f9e4 	bl	8003ee6 <LL_RCC_GetSysClkSource>
 8004b1e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b20:	f7ff facd 	bl	80040be <LL_RCC_PLL_GetMainSource>
 8004b24:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_RCC_GetSysClockFreq+0x2c>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b0c      	cmp	r3, #12
 8004b30:	d139      	bne.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d136      	bne.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004b38:	f7ff f987 	bl	8003e4a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d115      	bne.n	8004b6e <HAL_RCC_GetSysClockFreq+0x62>
 8004b42:	f7ff f982 	bl	8003e4a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d106      	bne.n	8004b5a <HAL_RCC_GetSysClockFreq+0x4e>
 8004b4c:	f7ff f98d 	bl	8003e6a <LL_RCC_MSI_GetRange>
 8004b50:	4603      	mov	r3, r0
 8004b52:	0a1b      	lsrs	r3, r3, #8
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	e005      	b.n	8004b66 <HAL_RCC_GetSysClockFreq+0x5a>
 8004b5a:	f7ff f991 	bl	8003e80 <LL_RCC_MSI_GetRangeAfterStandby>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	0a1b      	lsrs	r3, r3, #8
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	4a36      	ldr	r2, [pc, #216]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x134>)
 8004b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6c:	e014      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x8c>
 8004b6e:	f7ff f96c 	bl	8003e4a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d106      	bne.n	8004b86 <HAL_RCC_GetSysClockFreq+0x7a>
 8004b78:	f7ff f977 	bl	8003e6a <LL_RCC_MSI_GetRange>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	e005      	b.n	8004b92 <HAL_RCC_GetSysClockFreq+0x86>
 8004b86:	f7ff f97b 	bl	8003e80 <LL_RCC_MSI_GetRangeAfterStandby>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	4a2b      	ldr	r2, [pc, #172]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x134>)
 8004b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b98:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d115      	bne.n	8004bcc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ba4:	e012      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d102      	bne.n	8004bb2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bac:	4b25      	ldr	r3, [pc, #148]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x138>)
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e00c      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d109      	bne.n	8004bcc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004bb8:	f7ff f85a 	bl	8003c70 <LL_RCC_HSE_IsEnabledDiv2>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d102      	bne.n	8004bc8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004bc2:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x138>)
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	e001      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004bc8:	4b1f      	ldr	r3, [pc, #124]	; (8004c48 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004bca:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bcc:	f7ff f98b 	bl	8003ee6 <LL_RCC_GetSysClkSource>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b0c      	cmp	r3, #12
 8004bd4:	d12f      	bne.n	8004c36 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004bd6:	f7ff fa72 	bl	80040be <LL_RCC_PLL_GetMainSource>
 8004bda:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d003      	beq.n	8004bea <HAL_RCC_GetSysClockFreq+0xde>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d003      	beq.n	8004bf0 <HAL_RCC_GetSysClockFreq+0xe4>
 8004be8:	e00d      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004bea:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x138>)
 8004bec:	60fb      	str	r3, [r7, #12]
        break;
 8004bee:	e00d      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004bf0:	f7ff f83e 	bl	8003c70 <LL_RCC_HSE_IsEnabledDiv2>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d102      	bne.n	8004c00 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004bfa:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x138>)
 8004bfc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004bfe:	e005      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004c00:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004c02:	60fb      	str	r3, [r7, #12]
        break;
 8004c04:	e002      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	60fb      	str	r3, [r7, #12]
        break;
 8004c0a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004c0c:	f7ff fa35 	bl	800407a <LL_RCC_PLL_GetN>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	fb03 f402 	mul.w	r4, r3, r2
 8004c18:	f7ff fa46 	bl	80040a8 <LL_RCC_PLL_GetDivider>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	091b      	lsrs	r3, r3, #4
 8004c20:	3301      	adds	r3, #1
 8004c22:	fbb4 f4f3 	udiv	r4, r4, r3
 8004c26:	f7ff fa34 	bl	8004092 <LL_RCC_PLL_GetR>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	0f5b      	lsrs	r3, r3, #29
 8004c2e:	3301      	adds	r3, #1
 8004c30:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c34:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004c36:	697b      	ldr	r3, [r7, #20]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd90      	pop	{r4, r7, pc}
 8004c40:	0800c75c 	.word	0x0800c75c
 8004c44:	00f42400 	.word	0x00f42400
 8004c48:	01e84800 	.word	0x01e84800

08004c4c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c4c:	b598      	push	{r3, r4, r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004c50:	f7ff ff5c 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8004c54:	4604      	mov	r4, r0
 8004c56:	f7ff f9b5 	bl	8003fc4 <LL_RCC_GetAHBPrescaler>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	091b      	lsrs	r3, r3, #4
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	4a03      	ldr	r2, [pc, #12]	; (8004c70 <HAL_RCC_GetHCLKFreq+0x24>)
 8004c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c68:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	bd98      	pop	{r3, r4, r7, pc}
 8004c70:	0800c6fc 	.word	0x0800c6fc

08004c74 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c74:	b598      	push	{r3, r4, r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c78:	f7ff ffe8 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	f7ff f9b9 	bl	8003ff4 <LL_RCC_GetAPB1Prescaler>
 8004c82:	4603      	mov	r3, r0
 8004c84:	0a1b      	lsrs	r3, r3, #8
 8004c86:	4a03      	ldr	r2, [pc, #12]	; (8004c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c8c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	bd98      	pop	{r3, r4, r7, pc}
 8004c94:	0800c73c 	.word	0x0800c73c

08004c98 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c98:	b598      	push	{r3, r4, r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004c9c:	f7ff ffd6 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	f7ff f9b2 	bl	800400a <LL_RCC_GetAPB2Prescaler>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	0adb      	lsrs	r3, r3, #11
 8004caa:	4a03      	ldr	r2, [pc, #12]	; (8004cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	bd98      	pop	{r3, r4, r7, pc}
 8004cb8:	0800c73c 	.word	0x0800c73c

08004cbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	4a10      	ldr	r2, [pc, #64]	; (8004d10 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004cd4:	f7ff f981 	bl	8003fda <LL_RCC_GetAHB3Prescaler>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	091b      	lsrs	r3, r3, #4
 8004cdc:	f003 030f 	and.w	r3, r3, #15
 8004ce0:	4a0c      	ldr	r2, [pc, #48]	; (8004d14 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cec:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf6:	0c9c      	lsrs	r4, r3, #18
 8004cf8:	f7fe ff80 	bl	8003bfc <HAL_PWREx_GetVoltageRange>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4620      	mov	r0, r4
 8004d02:	f000 f80b 	bl	8004d1c <RCC_SetFlashLatency>
 8004d06:	4603      	mov	r3, r0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd90      	pop	{r4, r7, pc}
 8004d10:	0800c75c 	.word	0x0800c75c
 8004d14:	0800c6fc 	.word	0x0800c6fc
 8004d18:	431bde83 	.word	0x431bde83

08004d1c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08e      	sub	sp, #56	; 0x38
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004d26:	4a3a      	ldr	r2, [pc, #232]	; (8004e10 <RCC_SetFlashLatency+0xf4>)
 8004d28:	f107 0320 	add.w	r3, r7, #32
 8004d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d30:	6018      	str	r0, [r3, #0]
 8004d32:	3304      	adds	r3, #4
 8004d34:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004d36:	4a37      	ldr	r2, [pc, #220]	; (8004e14 <RCC_SetFlashLatency+0xf8>)
 8004d38:	f107 0318 	add.w	r3, r7, #24
 8004d3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d40:	6018      	str	r0, [r3, #0]
 8004d42:	3304      	adds	r3, #4
 8004d44:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004d46:	4a34      	ldr	r2, [pc, #208]	; (8004e18 <RCC_SetFlashLatency+0xfc>)
 8004d48:	f107 030c 	add.w	r3, r7, #12
 8004d4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004d52:	2300      	movs	r3, #0
 8004d54:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d5c:	d11b      	bne.n	8004d96 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	633b      	str	r3, [r7, #48]	; 0x30
 8004d62:	e014      	b.n	8004d8e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	3338      	adds	r3, #56	; 0x38
 8004d6a:	443b      	add	r3, r7
 8004d6c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004d70:	461a      	mov	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d807      	bhi.n	8004d88 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	3338      	adds	r3, #56	; 0x38
 8004d7e:	443b      	add	r3, r7
 8004d80:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d86:	e021      	b.n	8004dcc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d9e7      	bls.n	8004d64 <RCC_SetFlashLatency+0x48>
 8004d94:	e01a      	b.n	8004dcc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004d96:	2300      	movs	r3, #0
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d9a:	e014      	b.n	8004dc6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	3338      	adds	r3, #56	; 0x38
 8004da2:	443b      	add	r3, r7
 8004da4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004da8:	461a      	mov	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d807      	bhi.n	8004dc0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	3338      	adds	r3, #56	; 0x38
 8004db6:	443b      	add	r3, r7
 8004db8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dbe:	e005      	b.n	8004dcc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d9e7      	bls.n	8004d9c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dcc:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <RCC_SetFlashLatency+0x100>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f023 0207 	bic.w	r2, r3, #7
 8004dd4:	4911      	ldr	r1, [pc, #68]	; (8004e1c <RCC_SetFlashLatency+0x100>)
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ddc:	f7fd fd3e 	bl	800285c <HAL_GetTick>
 8004de0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004de2:	e008      	b.n	8004df6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004de4:	f7fd fd3a 	bl	800285c <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e007      	b.n	8004e06 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004df6:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <RCC_SetFlashLatency+0x100>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d1ef      	bne.n	8004de4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3738      	adds	r7, #56	; 0x38
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	0800c6bc 	.word	0x0800c6bc
 8004e14:	0800c6c4 	.word	0x0800c6c4
 8004e18:	0800c6cc 	.word	0x0800c6cc
 8004e1c:	58004000 	.word	0x58004000

08004e20 <LL_RCC_LSE_IsReady>:
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d101      	bne.n	8004e38 <LL_RCC_LSE_IsReady+0x18>
 8004e34:	2301      	movs	r3, #1
 8004e36:	e000      	b.n	8004e3a <LL_RCC_LSE_IsReady+0x1a>
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bc80      	pop	{r7}
 8004e40:	4770      	bx	lr

08004e42 <LL_RCC_SetUSARTClockSource>:
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	0c1b      	lsrs	r3, r3, #16
 8004e56:	43db      	mvns	r3, r3
 8004e58:	401a      	ands	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr

08004e72 <LL_RCC_SetI2SClockSource>:
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr

08004e9c <LL_RCC_SetLPUARTClockSource>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <LL_RCC_SetI2CClockSource>:
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	091b      	lsrs	r3, r3, #4
 8004eda:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	401a      	ands	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr

08004efe <LL_RCC_SetLPTIMClockSource>:
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	0c1b      	lsrs	r3, r3, #16
 8004f12:	041b      	lsls	r3, r3, #16
 8004f14:	43db      	mvns	r3, r3
 8004f16:	401a      	ands	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	041b      	lsls	r3, r3, #16
 8004f1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr

08004f30 <LL_RCC_SetRNGClockSource>:
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f40:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <LL_RCC_SetADCClockSource>:
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <LL_RCC_SetRTCClockSource>:
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr

08004fae <LL_RCC_GetRTCClockSource>:
{
 8004fae:	b480      	push	{r7}
 8004fb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr

08004fc6 <LL_RCC_ForceBackupDomainReset>:
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fde:	bf00      	nop
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ffe:	bf00      	nop
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr
	...

08005008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005014:	2300      	movs	r3, #0
 8005016:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005018:	2300      	movs	r3, #0
 800501a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d058      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005028:	f7fe fdda 	bl	8003be0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800502c:	f7fd fc16 	bl	800285c <HAL_GetTick>
 8005030:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005032:	e009      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005034:	f7fd fc12 	bl	800285c <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d902      	bls.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	74fb      	strb	r3, [r7, #19]
        break;
 8005046:	e006      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005048:	4b7b      	ldr	r3, [pc, #492]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005054:	d1ee      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005056:	7cfb      	ldrb	r3, [r7, #19]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d13c      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800505c:	f7ff ffa7 	bl	8004fae <LL_RCC_GetRTCClockSource>
 8005060:	4602      	mov	r2, r0
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005066:	429a      	cmp	r2, r3
 8005068:	d00f      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800506a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005076:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005078:	f7ff ffa5 	bl	8004fc6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800507c:	f7ff ffb3 	bl	8004fe6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005080:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d014      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005094:	f7fd fbe2 	bl	800285c <HAL_GetTick>
 8005098:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800509a:	e00b      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7fd fbde 	bl	800285c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d902      	bls.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	74fb      	strb	r3, [r7, #19]
            break;
 80050b2:	e004      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80050b4:	f7ff feb4 	bl	8004e20 <LL_RCC_LSE_IsReady>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d1ee      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80050be:	7cfb      	ldrb	r3, [r7, #19]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d105      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff ff5b 	bl	8004f84 <LL_RCC_SetRTCClockSource>
 80050ce:	e004      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050d0:	7cfb      	ldrb	r3, [r7, #19]
 80050d2:	74bb      	strb	r3, [r7, #18]
 80050d4:	e001      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d6:	7cfb      	ldrb	r3, [r7, #19]
 80050d8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d004      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fea9 	bl	8004e42 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fe9e 	bl	8004e42 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d004      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fec0 	bl	8004e9c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005124:	2b00      	cmp	r3, #0
 8005126:	d004      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fee6 	bl	8004efe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff fedb 	bl	8004efe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005150:	2b00      	cmp	r3, #0
 8005152:	d004      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fed0 	bl	8004efe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d004      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff fea9 	bl	8004ec6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff fe9e 	bl	8004ec6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005192:	2b00      	cmp	r3, #0
 8005194:	d004      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fe93 	bl	8004ec6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d011      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff fe5e 	bl	8004e72 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051be:	d107      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d010      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff fea5 	bl	8004f30 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d107      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80051ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051fc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d011      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fea3 	bl	8004f5a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800521c:	d107      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800521e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800522e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	58000400 	.word	0x58000400

0800523c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005244:	4b06      	ldr	r3, [pc, #24]	; (8005260 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800524c:	4904      	ldr	r1, [pc, #16]	; (8005260 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4313      	orrs	r3, r2
 8005252:	608b      	str	r3, [r1, #8]
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	58000400 	.word	0x58000400

08005264 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526e:	4a04      	ldr	r2, [pc, #16]	; (8005280 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005278:	bf00      	nop
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr
 8005280:	58000400 	.word	0x58000400

08005284 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800528a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528e:	4a04      	ldr	r2, [pc, #16]	; (80052a0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005290:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005298:	bf00      	nop
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr
 80052a0:	58000400 	.word	0x58000400

080052a4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80052a8:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80052aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052ae:	619a      	str	r2, [r3, #24]
}
 80052b0:	bf00      	nop
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr
 80052b8:	58000400 	.word	0x58000400

080052bc <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d101      	bne.n	80052d0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	58000400 	.word	0x58000400

080052e0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d101      	bne.n	80052f4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	58000400 	.word	0x58000400

08005304 <LL_RCC_RF_DisableReset>:
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005314:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005318:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr

08005324 <LL_RCC_IsRFUnderReset>:
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005338:	d101      	bne.n	800533e <LL_RCC_IsRFUnderReset+0x1a>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <LL_RCC_IsRFUnderReset+0x1c>
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr

08005348 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005350:	4b06      	ldr	r3, [pc, #24]	; (800536c <LL_EXTI_EnableIT_32_63+0x24>)
 8005352:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005356:	4905      	ldr	r1, [pc, #20]	; (800536c <LL_EXTI_EnableIT_32_63+0x24>)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	58000800 	.word	0x58000800

08005370 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d103      	bne.n	8005386 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	73fb      	strb	r3, [r7, #15]
    return status;
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	e052      	b.n	800542c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	799b      	ldrb	r3, [r3, #6]
 800538e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005390:	7bbb      	ldrb	r3, [r7, #14]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_SUBGHZ_Init+0x2c>
 8005396:	7bbb      	ldrb	r3, [r7, #14]
 8005398:	2b03      	cmp	r3, #3
 800539a:	d109      	bne.n	80053b0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fd fa40 	bl	8002828 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80053a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80053ac:	f7ff ffcc 	bl	8005348 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80053b0:	7bbb      	ldrb	r3, [r7, #14]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d126      	bne.n	8005404 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80053bc:	f7ff ffa2 	bl	8005304 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80053c0:	4b1c      	ldr	r3, [pc, #112]	; (8005434 <HAL_SUBGHZ_Init+0xc4>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	4613      	mov	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	0cdb      	lsrs	r3, r3, #19
 80053ce:	2264      	movs	r2, #100	; 0x64
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
 80053d4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d105      	bne.n	80053e8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	609a      	str	r2, [r3, #8]
        break;
 80053e6:	e007      	b.n	80053f8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80053ee:	f7ff ff99 	bl	8005324 <LL_RCC_IsRFUnderReset>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1ee      	bne.n	80053d6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80053f8:	f7ff ff34 	bl	8005264 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80053fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005400:	f7ff ff1c 	bl	800523c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005404:	f7ff ff4e 	bl	80052a4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005408:	7bfb      	ldrb	r3, [r7, #15]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f000 faac 	bl	8005970 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	719a      	strb	r2, [r3, #6]

  return status;
 800542a:	7bfb      	ldrb	r3, [r7, #15]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20000004 	.word	0x20000004

08005438 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	607a      	str	r2, [r7, #4]
 8005442:	461a      	mov	r2, r3
 8005444:	460b      	mov	r3, r1
 8005446:	817b      	strh	r3, [r7, #10]
 8005448:	4613      	mov	r3, r2
 800544a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	799b      	ldrb	r3, [r3, #6]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b01      	cmp	r3, #1
 8005454:	d14a      	bne.n	80054ec <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	795b      	ldrb	r3, [r3, #5]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800545e:	2302      	movs	r3, #2
 8005460:	e045      	b.n	80054ee <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2202      	movs	r2, #2
 800546c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 fb4c 	bl	8005b0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005474:	f7ff ff06 	bl	8005284 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005478:	210d      	movs	r1, #13
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fa98 	bl	80059b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005480:	897b      	ldrh	r3, [r7, #10]
 8005482:	0a1b      	lsrs	r3, r3, #8
 8005484:	b29b      	uxth	r3, r3
 8005486:	b2db      	uxtb	r3, r3
 8005488:	4619      	mov	r1, r3
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 fa90 	bl	80059b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005490:	897b      	ldrh	r3, [r7, #10]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	4619      	mov	r1, r3
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 fa8a 	bl	80059b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800549c:	2300      	movs	r3, #0
 800549e:	82bb      	strh	r3, [r7, #20]
 80054a0:	e00a      	b.n	80054b8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80054a2:	8abb      	ldrh	r3, [r7, #20]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	4413      	add	r3, r2
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	4619      	mov	r1, r3
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 fa7f 	bl	80059b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80054b2:	8abb      	ldrh	r3, [r7, #20]
 80054b4:	3301      	adds	r3, #1
 80054b6:	82bb      	strh	r3, [r7, #20]
 80054b8:	8aba      	ldrh	r2, [r7, #20]
 80054ba:	893b      	ldrh	r3, [r7, #8]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d3f0      	bcc.n	80054a2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80054c0:	f7ff fed0 	bl	8005264 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 fb45 	bl	8005b54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	75fb      	strb	r3, [r7, #23]
 80054d6:	e001      	b.n	80054dc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	715a      	strb	r2, [r3, #5]

    return status;
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	e000      	b.n	80054ee <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80054ec:	2302      	movs	r3, #2
  }
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b088      	sub	sp, #32
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	461a      	mov	r2, r3
 8005502:	460b      	mov	r3, r1
 8005504:	817b      	strh	r3, [r7, #10]
 8005506:	4613      	mov	r3, r2
 8005508:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	799b      	ldrb	r3, [r3, #6]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b01      	cmp	r3, #1
 8005516:	d14a      	bne.n	80055ae <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	795b      	ldrb	r3, [r3, #5]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005520:	2302      	movs	r3, #2
 8005522:	e045      	b.n	80055b0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 faee 	bl	8005b0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005530:	f7ff fea8 	bl	8005284 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005534:	211d      	movs	r1, #29
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fa3a 	bl	80059b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800553c:	897b      	ldrh	r3, [r7, #10]
 800553e:	0a1b      	lsrs	r3, r3, #8
 8005540:	b29b      	uxth	r3, r3
 8005542:	b2db      	uxtb	r3, r3
 8005544:	4619      	mov	r1, r3
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 fa32 	bl	80059b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800554c:	897b      	ldrh	r3, [r7, #10]
 800554e:	b2db      	uxtb	r3, r3
 8005550:	4619      	mov	r1, r3
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fa2c 	bl	80059b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005558:	2100      	movs	r1, #0
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 fa28 	bl	80059b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005560:	2300      	movs	r3, #0
 8005562:	82fb      	strh	r3, [r7, #22]
 8005564:	e009      	b.n	800557a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005566:	69b9      	ldr	r1, [r7, #24]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fa77 	bl	8005a5c <SUBGHZSPI_Receive>
      pData++;
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	3301      	adds	r3, #1
 8005572:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005574:	8afb      	ldrh	r3, [r7, #22]
 8005576:	3301      	adds	r3, #1
 8005578:	82fb      	strh	r3, [r7, #22]
 800557a:	8afa      	ldrh	r2, [r7, #22]
 800557c:	893b      	ldrh	r3, [r7, #8]
 800557e:	429a      	cmp	r2, r3
 8005580:	d3f1      	bcc.n	8005566 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005582:	f7ff fe6f 	bl	8005264 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fae4 	bl	8005b54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e001      	b.n	800559e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	715a      	strb	r2, [r3, #5]

    return status;
 80055aa:	7ffb      	ldrb	r3, [r7, #31]
 80055ac:	e000      	b.n	80055b0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80055ae:	2302      	movs	r3, #2
  }
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3720      	adds	r7, #32
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	607a      	str	r2, [r7, #4]
 80055c2:	461a      	mov	r2, r3
 80055c4:	460b      	mov	r3, r1
 80055c6:	72fb      	strb	r3, [r7, #11]
 80055c8:	4613      	mov	r3, r2
 80055ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	799b      	ldrb	r3, [r3, #6]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d14a      	bne.n	800566c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	795b      	ldrb	r3, [r3, #5]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80055de:	2302      	movs	r3, #2
 80055e0:	e045      	b.n	800566e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 fa8f 	bl	8005b0c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80055ee:	7afb      	ldrb	r3, [r7, #11]
 80055f0:	2b84      	cmp	r3, #132	; 0x84
 80055f2:	d002      	beq.n	80055fa <HAL_SUBGHZ_ExecSetCmd+0x42>
 80055f4:	7afb      	ldrb	r3, [r7, #11]
 80055f6:	2b94      	cmp	r3, #148	; 0x94
 80055f8:	d103      	bne.n	8005602 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	711a      	strb	r2, [r3, #4]
 8005600:	e002      	b.n	8005608 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005608:	f7ff fe3c 	bl	8005284 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800560c:	7afb      	ldrb	r3, [r7, #11]
 800560e:	4619      	mov	r1, r3
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f9cd 	bl	80059b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005616:	2300      	movs	r3, #0
 8005618:	82bb      	strh	r3, [r7, #20]
 800561a:	e00a      	b.n	8005632 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800561c:	8abb      	ldrh	r3, [r7, #20]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	4619      	mov	r1, r3
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f9c2 	bl	80059b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800562c:	8abb      	ldrh	r3, [r7, #20]
 800562e:	3301      	adds	r3, #1
 8005630:	82bb      	strh	r3, [r7, #20]
 8005632:	8aba      	ldrh	r2, [r7, #20]
 8005634:	893b      	ldrh	r3, [r7, #8]
 8005636:	429a      	cmp	r2, r3
 8005638:	d3f0      	bcc.n	800561c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800563a:	f7ff fe13 	bl	8005264 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800563e:	7afb      	ldrb	r3, [r7, #11]
 8005640:	2b84      	cmp	r3, #132	; 0x84
 8005642:	d002      	beq.n	800564a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fa85 	bl	8005b54 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	75fb      	strb	r3, [r7, #23]
 8005656:	e001      	b.n	800565c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	715a      	strb	r2, [r3, #5]

    return status;
 8005668:	7dfb      	ldrb	r3, [r7, #23]
 800566a:	e000      	b.n	800566e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800566c:	2302      	movs	r3, #2
  }
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b088      	sub	sp, #32
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	461a      	mov	r2, r3
 8005682:	460b      	mov	r3, r1
 8005684:	72fb      	strb	r3, [r7, #11]
 8005686:	4613      	mov	r3, r2
 8005688:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	799b      	ldrb	r3, [r3, #6]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b01      	cmp	r3, #1
 8005696:	d13d      	bne.n	8005714 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	795b      	ldrb	r3, [r3, #5]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e038      	b.n	8005716 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 fa2e 	bl	8005b0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80056b0:	f7ff fde8 	bl	8005284 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80056b4:	7afb      	ldrb	r3, [r7, #11]
 80056b6:	4619      	mov	r1, r3
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f979 	bl	80059b0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80056be:	2100      	movs	r1, #0
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f975 	bl	80059b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80056c6:	2300      	movs	r3, #0
 80056c8:	82fb      	strh	r3, [r7, #22]
 80056ca:	e009      	b.n	80056e0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80056cc:	69b9      	ldr	r1, [r7, #24]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f9c4 	bl	8005a5c <SUBGHZSPI_Receive>
      pData++;
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	3301      	adds	r3, #1
 80056d8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80056da:	8afb      	ldrh	r3, [r7, #22]
 80056dc:	3301      	adds	r3, #1
 80056de:	82fb      	strh	r3, [r7, #22]
 80056e0:	8afa      	ldrh	r2, [r7, #22]
 80056e2:	893b      	ldrh	r3, [r7, #8]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d3f1      	bcc.n	80056cc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80056e8:	f7ff fdbc 	bl	8005264 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 fa31 	bl	8005b54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	77fb      	strb	r3, [r7, #31]
 80056fe:	e001      	b.n	8005704 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	715a      	strb	r2, [r3, #5]

    return status;
 8005710:	7ffb      	ldrb	r3, [r7, #31]
 8005712:	e000      	b.n	8005716 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	3720      	adds	r7, #32
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b086      	sub	sp, #24
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	461a      	mov	r2, r3
 800572a:	460b      	mov	r3, r1
 800572c:	72fb      	strb	r3, [r7, #11]
 800572e:	4613      	mov	r3, r2
 8005730:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	799b      	ldrb	r3, [r3, #6]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d13e      	bne.n	80057ba <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	795b      	ldrb	r3, [r3, #5]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005744:	2302      	movs	r3, #2
 8005746:	e039      	b.n	80057bc <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f9dc 	bl	8005b0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005754:	f7ff fd96 	bl	8005284 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005758:	210e      	movs	r1, #14
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 f928 	bl	80059b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005760:	7afb      	ldrb	r3, [r7, #11]
 8005762:	4619      	mov	r1, r3
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f923 	bl	80059b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800576a:	2300      	movs	r3, #0
 800576c:	82bb      	strh	r3, [r7, #20]
 800576e:	e00a      	b.n	8005786 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005770:	8abb      	ldrh	r3, [r7, #20]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	4413      	add	r3, r2
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	4619      	mov	r1, r3
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f918 	bl	80059b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005780:	8abb      	ldrh	r3, [r7, #20]
 8005782:	3301      	adds	r3, #1
 8005784:	82bb      	strh	r3, [r7, #20]
 8005786:	8aba      	ldrh	r2, [r7, #20]
 8005788:	893b      	ldrh	r3, [r7, #8]
 800578a:	429a      	cmp	r2, r3
 800578c:	d3f0      	bcc.n	8005770 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800578e:	f7ff fd69 	bl	8005264 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f9de 	bl	8005b54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	75fb      	strb	r3, [r7, #23]
 80057a4:	e001      	b.n	80057aa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	715a      	strb	r2, [r3, #5]

    return status;
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
 80057b8:	e000      	b.n	80057bc <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80057ba:	2302      	movs	r3, #2
  }
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	607a      	str	r2, [r7, #4]
 80057ce:	461a      	mov	r2, r3
 80057d0:	460b      	mov	r3, r1
 80057d2:	72fb      	strb	r3, [r7, #11]
 80057d4:	4613      	mov	r3, r2
 80057d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	799b      	ldrb	r3, [r3, #6]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d141      	bne.n	800586a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	795b      	ldrb	r3, [r3, #5]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e03c      	b.n	800586c <HAL_SUBGHZ_ReadBuffer+0xa8>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2201      	movs	r2, #1
 80057f6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 f987 	bl	8005b0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80057fe:	f7ff fd41 	bl	8005284 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005802:	211e      	movs	r1, #30
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f8d3 	bl	80059b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800580a:	7afb      	ldrb	r3, [r7, #11]
 800580c:	4619      	mov	r1, r3
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 f8ce 	bl	80059b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005814:	2100      	movs	r1, #0
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 f8ca 	bl	80059b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800581c:	2300      	movs	r3, #0
 800581e:	82fb      	strh	r3, [r7, #22]
 8005820:	e009      	b.n	8005836 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005822:	69b9      	ldr	r1, [r7, #24]
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 f919 	bl	8005a5c <SUBGHZSPI_Receive>
      pData++;
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	3301      	adds	r3, #1
 800582e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005830:	8afb      	ldrh	r3, [r7, #22]
 8005832:	3301      	adds	r3, #1
 8005834:	82fb      	strh	r3, [r7, #22]
 8005836:	8afa      	ldrh	r2, [r7, #22]
 8005838:	893b      	ldrh	r3, [r7, #8]
 800583a:	429a      	cmp	r2, r3
 800583c:	d3f1      	bcc.n	8005822 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800583e:	f7ff fd11 	bl	8005264 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 f986 	bl	8005b54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e001      	b.n	800585a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	715a      	strb	r2, [r3, #5]

    return status;
 8005866:	7ffb      	ldrb	r3, [r7, #31]
 8005868:	e000      	b.n	800586c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800586a:	2302      	movs	r3, #2
  }
}
 800586c:	4618      	mov	r0, r3
 800586e:	3720      	adds	r7, #32
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800587c:	2300      	movs	r3, #0
 800587e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005880:	f107 020c 	add.w	r2, r7, #12
 8005884:	2302      	movs	r3, #2
 8005886:	2112      	movs	r1, #18
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fef4 	bl	8005676 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800588e:	7b3b      	ldrb	r3, [r7, #12]
 8005890:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005892:	89fb      	ldrh	r3, [r7, #14]
 8005894:	021b      	lsls	r3, r3, #8
 8005896:	b21a      	sxth	r2, r3
 8005898:	7b7b      	ldrb	r3, [r7, #13]
 800589a:	b21b      	sxth	r3, r3
 800589c:	4313      	orrs	r3, r2
 800589e:	b21b      	sxth	r3, r3
 80058a0:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80058a2:	f107 020c 	add.w	r2, r7, #12
 80058a6:	2302      	movs	r3, #2
 80058a8:	2102      	movs	r1, #2
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fe84 	bl	80055b8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80058b0:	89fb      	ldrh	r3, [r7, #14]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f005 f9fe 	bl	800acbc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80058c0:	89fb      	ldrh	r3, [r7, #14]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f005 fa04 	bl	800acd8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80058d0:	89fb      	ldrh	r3, [r7, #14]
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f005 fa54 	bl	800ad88 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80058e0:	89fb      	ldrh	r3, [r7, #14]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f005 fa5a 	bl	800ada4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80058f0:	89fb      	ldrh	r3, [r7, #14]
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f005 fa60 	bl	800adc0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005900:	89fb      	ldrh	r3, [r7, #14]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f005 fa2e 	bl	800ad6c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005910:	89fb      	ldrh	r3, [r7, #14]
 8005912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f005 f9ea 	bl	800acf4 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005920:	89fb      	ldrh	r3, [r7, #14]
 8005922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00d      	beq.n	8005946 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800592a:	89fb      	ldrh	r3, [r7, #14]
 800592c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d004      	beq.n	800593e <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005934:	2101      	movs	r1, #1
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f005 f9ea 	bl	800ad10 <HAL_SUBGHZ_CADStatusCallback>
 800593c:	e003      	b.n	8005946 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800593e:	2100      	movs	r1, #0
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f005 f9e5 	bl	800ad10 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005946:	89fb      	ldrh	r3, [r7, #14]
 8005948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f005 f9fb 	bl	800ad4c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8005956:	89fb      	ldrh	r3, [r7, #14]
 8005958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f005 fa3b 	bl	800addc <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8005966:	bf00      	nop
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005978:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <SUBGHZSPI_Init+0x3c>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a0b      	ldr	r2, [pc, #44]	; (80059ac <SUBGHZSPI_Init+0x3c>)
 800597e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005982:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005984:	4a09      	ldr	r2, [pc, #36]	; (80059ac <SUBGHZSPI_Init+0x3c>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800598c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800598e:	4b07      	ldr	r3, [pc, #28]	; (80059ac <SUBGHZSPI_Init+0x3c>)
 8005990:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005994:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <SUBGHZSPI_Init+0x3c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a04      	ldr	r2, [pc, #16]	; (80059ac <SUBGHZSPI_Init+0x3c>)
 800599c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059a0:	6013      	str	r3, [r2, #0]
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr
 80059ac:	58010000 	.word	0x58010000

080059b0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80059c0:	4b23      	ldr	r3, [pc, #140]	; (8005a50 <SUBGHZSPI_Transmit+0xa0>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	0cdb      	lsrs	r3, r3, #19
 80059ce:	2264      	movs	r2, #100	; 0x64
 80059d0:	fb02 f303 	mul.w	r3, r2, r3
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d105      	bne.n	80059e8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	609a      	str	r2, [r3, #8]
      break;
 80059e6:	e008      	b.n	80059fa <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80059ee:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <SUBGHZSPI_Transmit+0xa4>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d1ed      	bne.n	80059d6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80059fa:	4b17      	ldr	r3, [pc, #92]	; (8005a58 <SUBGHZSPI_Transmit+0xa8>)
 80059fc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	78fa      	ldrb	r2, [r7, #3]
 8005a02:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005a04:	4b12      	ldr	r3, [pc, #72]	; (8005a50 <SUBGHZSPI_Transmit+0xa0>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	0cdb      	lsrs	r3, r3, #19
 8005a12:	2264      	movs	r2, #100	; 0x64
 8005a14:	fb02 f303 	mul.w	r3, r2, r3
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d105      	bne.n	8005a2c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	609a      	str	r2, [r3, #8]
      break;
 8005a2a:	e008      	b.n	8005a3e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005a32:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <SUBGHZSPI_Transmit+0xa4>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d1ed      	bne.n	8005a1a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005a3e:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <SUBGHZSPI_Transmit+0xa4>)
 8005a40:	68db      	ldr	r3, [r3, #12]

  return status;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	371c      	adds	r7, #28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000004 	.word	0x20000004
 8005a54:	58010000 	.word	0x58010000
 8005a58:	5801000c 	.word	0x5801000c

08005a5c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005a6a:	4b25      	ldr	r3, [pc, #148]	; (8005b00 <SUBGHZSPI_Receive+0xa4>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	0cdb      	lsrs	r3, r3, #19
 8005a78:	2264      	movs	r2, #100	; 0x64
 8005a7a:	fb02 f303 	mul.w	r3, r2, r3
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d105      	bne.n	8005a92 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	609a      	str	r2, [r3, #8]
      break;
 8005a90:	e008      	b.n	8005aa4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005a98:	4b1a      	ldr	r3, [pc, #104]	; (8005b04 <SUBGHZSPI_Receive+0xa8>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d1ed      	bne.n	8005a80 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005aa4:	4b18      	ldr	r3, [pc, #96]	; (8005b08 <SUBGHZSPI_Receive+0xac>)
 8005aa6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	22ff      	movs	r2, #255	; 0xff
 8005aac:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005aae:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <SUBGHZSPI_Receive+0xa4>)
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	0cdb      	lsrs	r3, r3, #19
 8005abc:	2264      	movs	r2, #100	; 0x64
 8005abe:	fb02 f303 	mul.w	r3, r2, r3
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d105      	bne.n	8005ad6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	609a      	str	r2, [r3, #8]
      break;
 8005ad4:	e008      	b.n	8005ae8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005adc:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <SUBGHZSPI_Receive+0xa8>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d1ed      	bne.n	8005ac4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005ae8:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <SUBGHZSPI_Receive+0xa8>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	701a      	strb	r2, [r3, #0]

  return status;
 8005af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	20000004 	.word	0x20000004
 8005b04:	58010000 	.word	0x58010000
 8005b08:	5801000c 	.word	0x5801000c

08005b0c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	791b      	ldrb	r3, [r3, #4]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d111      	bne.n	8005b40 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005b1c:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <SUBGHZ_CheckDeviceReady+0x44>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	4613      	mov	r3, r2
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4413      	add	r3, r2
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	0c1b      	lsrs	r3, r3, #16
 8005b2a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005b2c:	f7ff fbaa 	bl	8005284 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f9      	bne.n	8005b30 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005b3c:	f7ff fb92 	bl	8005264 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f807 	bl	8005b54 <SUBGHZ_WaitOnBusy>
 8005b46:	4603      	mov	r3, r0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20000004 	.word	0x20000004

08005b54 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005b60:	4b12      	ldr	r3, [pc, #72]	; (8005bac <SUBGHZ_WaitOnBusy+0x58>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	4613      	mov	r3, r2
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	4413      	add	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	0d1b      	lsrs	r3, r3, #20
 8005b6e:	2264      	movs	r2, #100	; 0x64
 8005b70:	fb02 f303 	mul.w	r3, r2, r3
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8005b76:	f7ff fbb3 	bl	80052e0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8005b7a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d105      	bne.n	8005b8e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	609a      	str	r2, [r3, #8]
      break;
 8005b8c:	e009      	b.n	8005ba2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005b94:	f7ff fb92 	bl	80052bc <LL_PWR_IsActiveFlag_RFBUSYS>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d0e9      	beq.n	8005b76 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	20000004 	.word	0x20000004

08005bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e049      	b.n	8005c56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fc ff02 	bl	80029e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3304      	adds	r3, #4
 8005bec:	4619      	mov	r1, r3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	f000 fa90 	bl	8006114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d001      	beq.n	8005c78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e02e      	b.n	8005cd6 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a16      	ldr	r2, [pc, #88]	; (8005ce0 <HAL_TIM_Base_Start+0x80>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d004      	beq.n	8005c94 <HAL_TIM_Base_Start+0x34>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c92:	d115      	bne.n	8005cc0 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	4b12      	ldr	r3, [pc, #72]	; (8005ce4 <HAL_TIM_Base_Start+0x84>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b06      	cmp	r3, #6
 8005ca4:	d015      	beq.n	8005cd2 <HAL_TIM_Base_Start+0x72>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cac:	d011      	beq.n	8005cd2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0201 	orr.w	r2, r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cbe:	e008      	b.n	8005cd2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0201 	orr.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	e000      	b.n	8005cd4 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr
 8005ce0:	40012c00 	.word	0x40012c00
 8005ce4:	00010007 	.word	0x00010007

08005ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d122      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d11b      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0202 	mvn.w	r2, #2
 8005d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f9d6 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f9c9 	bl	80060ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f9d8 	bl	80060ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d122      	bne.n	8005d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d11b      	bne.n	8005d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0204 	mvn.w	r2, #4
 8005d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f9ac 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005d84:	e005      	b.n	8005d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f99f 	bl	80060ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f9ae 	bl	80060ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d122      	bne.n	8005dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d11b      	bne.n	8005dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0208 	mvn.w	r2, #8
 8005dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f982 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005dd8:	e005      	b.n	8005de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f975 	bl	80060ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f984 	bl	80060ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	2b10      	cmp	r3, #16
 8005df8:	d122      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b10      	cmp	r3, #16
 8005e06:	d11b      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0210 	mvn.w	r2, #16
 8005e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2208      	movs	r2, #8
 8005e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f958 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005e2c:	e005      	b.n	8005e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f94b 	bl	80060ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f95a 	bl	80060ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d10e      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d107      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f06f 0201 	mvn.w	r2, #1
 8005e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f926 	bl	80060b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	2b80      	cmp	r3, #128	; 0x80
 8005e78:	d10e      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e84:	2b80      	cmp	r3, #128	; 0x80
 8005e86:	d107      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa9f 	bl	80063d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea6:	d10e      	bne.n	8005ec6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb2:	2b80      	cmp	r3, #128	; 0x80
 8005eb4:	d107      	bne.n	8005ec6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fa91 	bl	80063e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed0:	2b40      	cmp	r3, #64	; 0x40
 8005ed2:	d10e      	bne.n	8005ef2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	d107      	bne.n	8005ef2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f907 	bl	8006100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d10e      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d107      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f06f 0220 	mvn.w	r2, #32
 8005f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fa53 	bl	80063c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f1e:	bf00      	nop
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_TIM_ConfigClockSource+0x1c>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e0b6      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x18a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005f60:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f6c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f7e:	d03e      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0xd8>
 8005f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f84:	f200 8087 	bhi.w	8006096 <HAL_TIM_ConfigClockSource+0x170>
 8005f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8c:	f000 8086 	beq.w	800609c <HAL_TIM_ConfigClockSource+0x176>
 8005f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f94:	d87f      	bhi.n	8006096 <HAL_TIM_ConfigClockSource+0x170>
 8005f96:	2b70      	cmp	r3, #112	; 0x70
 8005f98:	d01a      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0xaa>
 8005f9a:	2b70      	cmp	r3, #112	; 0x70
 8005f9c:	d87b      	bhi.n	8006096 <HAL_TIM_ConfigClockSource+0x170>
 8005f9e:	2b60      	cmp	r3, #96	; 0x60
 8005fa0:	d050      	beq.n	8006044 <HAL_TIM_ConfigClockSource+0x11e>
 8005fa2:	2b60      	cmp	r3, #96	; 0x60
 8005fa4:	d877      	bhi.n	8006096 <HAL_TIM_ConfigClockSource+0x170>
 8005fa6:	2b50      	cmp	r3, #80	; 0x50
 8005fa8:	d03c      	beq.n	8006024 <HAL_TIM_ConfigClockSource+0xfe>
 8005faa:	2b50      	cmp	r3, #80	; 0x50
 8005fac:	d873      	bhi.n	8006096 <HAL_TIM_ConfigClockSource+0x170>
 8005fae:	2b40      	cmp	r3, #64	; 0x40
 8005fb0:	d058      	beq.n	8006064 <HAL_TIM_ConfigClockSource+0x13e>
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d86f      	bhi.n	8006096 <HAL_TIM_ConfigClockSource+0x170>
 8005fb6:	2b30      	cmp	r3, #48	; 0x30
 8005fb8:	d064      	beq.n	8006084 <HAL_TIM_ConfigClockSource+0x15e>
 8005fba:	2b30      	cmp	r3, #48	; 0x30
 8005fbc:	d86b      	bhi.n	8006096 <HAL_TIM_ConfigClockSource+0x170>
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d060      	beq.n	8006084 <HAL_TIM_ConfigClockSource+0x15e>
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d867      	bhi.n	8006096 <HAL_TIM_ConfigClockSource+0x170>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d05c      	beq.n	8006084 <HAL_TIM_ConfigClockSource+0x15e>
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d05a      	beq.n	8006084 <HAL_TIM_ConfigClockSource+0x15e>
 8005fce:	e062      	b.n	8006096 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fe0:	f000 f973 	bl	80062ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ff2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	609a      	str	r2, [r3, #8]
      break;
 8005ffc:	e04f      	b.n	800609e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800600e:	f000 f95c 	bl	80062ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006020:	609a      	str	r2, [r3, #8]
      break;
 8006022:	e03c      	b.n	800609e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006030:	461a      	mov	r2, r3
 8006032:	f000 f8d1 	bl	80061d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2150      	movs	r1, #80	; 0x50
 800603c:	4618      	mov	r0, r3
 800603e:	f000 f928 	bl	8006292 <TIM_ITRx_SetConfig>
      break;
 8006042:	e02c      	b.n	800609e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006050:	461a      	mov	r2, r3
 8006052:	f000 f8ef 	bl	8006234 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2160      	movs	r1, #96	; 0x60
 800605c:	4618      	mov	r0, r3
 800605e:	f000 f918 	bl	8006292 <TIM_ITRx_SetConfig>
      break;
 8006062:	e01c      	b.n	800609e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006070:	461a      	mov	r2, r3
 8006072:	f000 f8b1 	bl	80061d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2140      	movs	r1, #64	; 0x40
 800607c:	4618      	mov	r0, r3
 800607e:	f000 f908 	bl	8006292 <TIM_ITRx_SetConfig>
      break;
 8006082:	e00c      	b.n	800609e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4619      	mov	r1, r3
 800608e:	4610      	mov	r0, r2
 8006090:	f000 f8ff 	bl	8006292 <TIM_ITRx_SetConfig>
      break;
 8006094:	e003      	b.n	800609e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	73fb      	strb	r3, [r7, #15]
      break;
 800609a:	e000      	b.n	800609e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800609c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr

080060ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr

080060dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bc80      	pop	{r7}
 80060ec:	4770      	bx	lr

080060ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	bc80      	pop	{r7}
 8006110:	4770      	bx	lr
	...

08006114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a29      	ldr	r2, [pc, #164]	; (80061cc <TIM_Base_SetConfig+0xb8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d003      	beq.n	8006134 <TIM_Base_SetConfig+0x20>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006132:	d108      	bne.n	8006146 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a20      	ldr	r2, [pc, #128]	; (80061cc <TIM_Base_SetConfig+0xb8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00b      	beq.n	8006166 <TIM_Base_SetConfig+0x52>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006154:	d007      	beq.n	8006166 <TIM_Base_SetConfig+0x52>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a1d      	ldr	r2, [pc, #116]	; (80061d0 <TIM_Base_SetConfig+0xbc>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d003      	beq.n	8006166 <TIM_Base_SetConfig+0x52>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a1c      	ldr	r2, [pc, #112]	; (80061d4 <TIM_Base_SetConfig+0xc0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d108      	bne.n	8006178 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800616c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a0b      	ldr	r2, [pc, #44]	; (80061cc <TIM_Base_SetConfig+0xb8>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d007      	beq.n	80061b4 <TIM_Base_SetConfig+0xa0>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a0a      	ldr	r2, [pc, #40]	; (80061d0 <TIM_Base_SetConfig+0xbc>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d003      	beq.n	80061b4 <TIM_Base_SetConfig+0xa0>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a09      	ldr	r2, [pc, #36]	; (80061d4 <TIM_Base_SetConfig+0xc0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d103      	bne.n	80061bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	615a      	str	r2, [r3, #20]
}
 80061c2:	bf00      	nop
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bc80      	pop	{r7}
 80061ca:	4770      	bx	lr
 80061cc:	40012c00 	.word	0x40012c00
 80061d0:	40014400 	.word	0x40014400
 80061d4:	40014800 	.word	0x40014800

080061d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f023 0201 	bic.w	r2, r3, #1
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f023 030a 	bic.w	r3, r3, #10
 8006214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	621a      	str	r2, [r3, #32]
}
 800622a:	bf00      	nop
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr

08006234 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	f023 0210 	bic.w	r2, r3, #16
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800625e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	031b      	lsls	r3, r3, #12
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006270:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	621a      	str	r2, [r3, #32]
}
 8006288:	bf00      	nop
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	bc80      	pop	{r7}
 8006290:	4770      	bx	lr

08006292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006292:	b480      	push	{r7}
 8006294:	b085      	sub	sp, #20
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80062a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f043 0307 	orr.w	r3, r3, #7
 80062b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	609a      	str	r2, [r3, #8]
}
 80062c0:	bf00      	nop
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bc80      	pop	{r7}
 80062c8:	4770      	bx	lr

080062ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b087      	sub	sp, #28
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	021a      	lsls	r2, r3, #8
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	431a      	orrs	r2, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	609a      	str	r2, [r3, #8]
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr

08006308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800631c:	2302      	movs	r3, #2
 800631e:	e04a      	b.n	80063b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a1e      	ldr	r2, [pc, #120]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d108      	bne.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006350:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a11      	ldr	r2, [pc, #68]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d004      	beq.n	800638a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006388:	d10c      	bne.n	80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	4313      	orrs	r3, r2
 800639a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr
 80063c0:	40012c00 	.word	0x40012c00

080063c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr

080063d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr

080063e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr

080063fa <LL_RCC_GetUSARTClockSource>:
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006406:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	401a      	ands	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	041b      	lsls	r3, r3, #16
 8006412:	4313      	orrs	r3, r2
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr

0800641e <LL_RCC_GetLPUARTClockSource>:
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4013      	ands	r3, r2
}
 8006432:	4618      	mov	r0, r3
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	bc80      	pop	{r7}
 800643a:	4770      	bx	lr

0800643c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e042      	b.n	80064d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006454:	2b00      	cmp	r3, #0
 8006456:	d106      	bne.n	8006466 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7fc fc2d 	bl	8002cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2224      	movs	r2, #36	; 0x24
 800646a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0201 	bic.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fc48 	bl	8006d14 <UART_SetConfig>
 8006484:	4603      	mov	r3, r0
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e022      	b.n	80064d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 feb0 	bl	80071fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 ff36 	bl	800733e <UART_CheckIdleState>
 80064d2:	4603      	mov	r3, r0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08a      	sub	sp, #40	; 0x28
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	4613      	mov	r3, r2
 80064ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d173      	bne.n	80065de <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_UART_Transmit+0x26>
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e06c      	b.n	80065e0 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2221      	movs	r2, #33	; 0x21
 8006512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006516:	f7fc f9a1 	bl	800285c <HAL_GetTick>
 800651a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	88fa      	ldrh	r2, [r7, #6]
 8006528:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006534:	d108      	bne.n	8006548 <HAL_UART_Transmit+0x6c>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d104      	bne.n	8006548 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	e003      	b.n	8006550 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800654c:	2300      	movs	r3, #0
 800654e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006550:	e02c      	b.n	80065ac <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2200      	movs	r2, #0
 800655a:	2180      	movs	r1, #128	; 0x80
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 ff3c 	bl	80073da <UART_WaitOnFlagUntilTimeout>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e039      	b.n	80065e0 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10b      	bne.n	800658a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006580:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	3302      	adds	r3, #2
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	e007      	b.n	800659a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	781a      	ldrb	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	3301      	adds	r3, #1
 8006598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1cc      	bne.n	8006552 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2200      	movs	r2, #0
 80065c0:	2140      	movs	r1, #64	; 0x40
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 ff09 	bl	80073da <UART_WaitOnFlagUntilTimeout>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e006      	b.n	80065e0 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	e000      	b.n	80065e0 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80065de:	2302      	movs	r3, #2
  }
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3720      	adds	r7, #32
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08a      	sub	sp, #40	; 0x28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	4613      	mov	r3, r2
 80065f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d137      	bne.n	8006670 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <HAL_UART_Receive_DMA+0x24>
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e030      	b.n	8006672 <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a18      	ldr	r2, [pc, #96]	; (800667c <HAL_UART_Receive_DMA+0x94>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d01f      	beq.n	8006660 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d018      	beq.n	8006660 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	613b      	str	r3, [r7, #16]
   return(result);
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	623b      	str	r3, [r7, #32]
 800664e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	69f9      	ldr	r1, [r7, #28]
 8006652:	6a3a      	ldr	r2, [r7, #32]
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	61bb      	str	r3, [r7, #24]
   return(result);
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e6      	bne.n	800662e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006660:	88fb      	ldrh	r3, [r7, #6]
 8006662:	461a      	mov	r2, r3
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 ff80 	bl	800756c <UART_Start_Receive_DMA>
 800666c:	4603      	mov	r3, r0
 800666e:	e000      	b.n	8006672 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006670:	2302      	movs	r3, #2
  }
}
 8006672:	4618      	mov	r0, r3
 8006674:	3728      	adds	r7, #40	; 0x28
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	40008000 	.word	0x40008000

08006680 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b0ba      	sub	sp, #232	; 0xe8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80066aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80066ae:	4013      	ands	r3, r2
 80066b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80066b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d11b      	bne.n	80066f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d015      	beq.n	80066f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d105      	bne.n	80066e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d009      	beq.n	80066f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 82e3 	beq.w	8006cb0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
      }
      return;
 80066f2:	e2dd      	b.n	8006cb0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 8123 	beq.w	8006944 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006702:	4b8d      	ldr	r3, [pc, #564]	; (8006938 <HAL_UART_IRQHandler+0x2b8>)
 8006704:	4013      	ands	r3, r2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800670a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800670e:	4b8b      	ldr	r3, [pc, #556]	; (800693c <HAL_UART_IRQHandler+0x2bc>)
 8006710:	4013      	ands	r3, r2
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 8116 	beq.w	8006944 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d011      	beq.n	8006748 <HAL_UART_IRQHandler+0xc8>
 8006724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00b      	beq.n	8006748 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2201      	movs	r2, #1
 8006736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800673e:	f043 0201 	orr.w	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d011      	beq.n	8006778 <HAL_UART_IRQHandler+0xf8>
 8006754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2202      	movs	r2, #2
 8006766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676e:	f043 0204 	orr.w	r2, r3, #4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	d011      	beq.n	80067a8 <HAL_UART_IRQHandler+0x128>
 8006784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00b      	beq.n	80067a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2204      	movs	r2, #4
 8006796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679e:	f043 0202 	orr.w	r2, r3, #2
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d017      	beq.n	80067e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d105      	bne.n	80067cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80067c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80067c4:	4b5c      	ldr	r3, [pc, #368]	; (8006938 <HAL_UART_IRQHandler+0x2b8>)
 80067c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00b      	beq.n	80067e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2208      	movs	r2, #8
 80067d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067da:	f043 0208 	orr.w	r2, r3, #8
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d012      	beq.n	8006816 <HAL_UART_IRQHandler+0x196>
 80067f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00c      	beq.n	8006816 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680c:	f043 0220 	orr.w	r2, r3, #32
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 8249 	beq.w	8006cb4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	d013      	beq.n	8006856 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800682e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d105      	bne.n	8006846 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800683a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800683e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d005      	beq.n	800687a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800686e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006872:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006876:	2b00      	cmp	r3, #0
 8006878:	d054      	beq.n	8006924 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 ff5c 	bl	8007738 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688a:	2b40      	cmp	r3, #64	; 0x40
 800688c:	d146      	bne.n	800691c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3308      	adds	r3, #8
 8006894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3308      	adds	r3, #8
 80068b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1d9      	bne.n	800688e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d017      	beq.n	8006914 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ea:	4a15      	ldr	r2, [pc, #84]	; (8006940 <HAL_UART_IRQHandler+0x2c0>)
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fc fdfd 	bl	80034f4 <HAL_DMA_Abort_IT>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d019      	beq.n	8006934 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800690e:	4610      	mov	r0, r2
 8006910:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006912:	e00f      	b.n	8006934 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f9e9 	bl	8006cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691a:	e00b      	b.n	8006934 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f9e5 	bl	8006cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006922:	e007      	b.n	8006934 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f9e1 	bl	8006cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006932:	e1bf      	b.n	8006cb4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006934:	bf00      	nop
    return;
 8006936:	e1bd      	b.n	8006cb4 <HAL_UART_IRQHandler+0x634>
 8006938:	10000001 	.word	0x10000001
 800693c:	04000120 	.word	0x04000120
 8006940:	080079ed 	.word	0x080079ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006948:	2b01      	cmp	r3, #1
 800694a:	f040 8153 	bne.w	8006bf4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800694e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 814c 	beq.w	8006bf4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 8145 	beq.w	8006bf4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2210      	movs	r2, #16
 8006970:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b40      	cmp	r3, #64	; 0x40
 800697e:	f040 80bb 	bne.w	8006af8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006990:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 818f 	beq.w	8006cb8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069a4:	429a      	cmp	r2, r3
 80069a6:	f080 8187 	bcs.w	8006cb8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0320 	and.w	r3, r3, #32
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f040 8087 	bne.w	8006ad6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1da      	bne.n	80069c8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3308      	adds	r3, #8
 8006a18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3308      	adds	r3, #8
 8006a32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1e1      	bne.n	8006a12 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e3      	bne.n	8006a4e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa4:	f023 0310 	bic.w	r3, r3, #16
 8006aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ab6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ab8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006abc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e4      	bne.n	8006a94 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fc fcb1 	bl	8003438 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2202      	movs	r2, #2
 8006ada:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f904 	bl	8006cfe <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006af6:	e0df      	b.n	8006cb8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 80d1 	beq.w	8006cbc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006b1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 80cc 	beq.w	8006cbc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b46:	647b      	str	r3, [r7, #68]	; 0x44
 8006b48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e4      	bne.n	8006b24 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	623b      	str	r3, [r7, #32]
   return(result);
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b70:	f023 0301 	bic.w	r3, r3, #1
 8006b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b82:	633a      	str	r2, [r7, #48]	; 0x30
 8006b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e1      	bne.n	8006b5a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0310 	bic.w	r3, r3, #16
 8006bbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bcc:	61fb      	str	r3, [r7, #28]
 8006bce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	69b9      	ldr	r1, [r7, #24]
 8006bd2:	69fa      	ldr	r2, [r7, #28]
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e4      	bne.n	8006baa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006be6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f886 	bl	8006cfe <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bf2:	e063      	b.n	8006cbc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00e      	beq.n	8006c1e <HAL_UART_IRQHandler+0x59e>
 8006c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d008      	beq.n	8006c1e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 ff29 	bl	8007a6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c1c:	e051      	b.n	8006cc2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d014      	beq.n	8006c54 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d105      	bne.n	8006c42 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d008      	beq.n	8006c54 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d03a      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	4798      	blx	r3
    }
    return;
 8006c52:	e035      	b.n	8006cc0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d009      	beq.n	8006c74 <HAL_UART_IRQHandler+0x5f4>
 8006c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fed3 	bl	8007a18 <UART_EndTransmit_IT>
    return;
 8006c72:	e026      	b.n	8006cc2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d009      	beq.n	8006c94 <HAL_UART_IRQHandler+0x614>
 8006c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 ff00 	bl	8007a92 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c92:	e016      	b.n	8006cc2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d010      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x642>
 8006ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	da0c      	bge.n	8006cc2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fee9 	bl	8007a80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cae:	e008      	b.n	8006cc2 <HAL_UART_IRQHandler+0x642>
      return;
 8006cb0:	bf00      	nop
 8006cb2:	e006      	b.n	8006cc2 <HAL_UART_IRQHandler+0x642>
    return;
 8006cb4:	bf00      	nop
 8006cb6:	e004      	b.n	8006cc2 <HAL_UART_IRQHandler+0x642>
      return;
 8006cb8:	bf00      	nop
 8006cba:	e002      	b.n	8006cc2 <HAL_UART_IRQHandler+0x642>
      return;
 8006cbc:	bf00      	nop
 8006cbe:	e000      	b.n	8006cc2 <HAL_UART_IRQHandler+0x642>
    return;
 8006cc0:	bf00      	nop
  }
}
 8006cc2:	37e8      	adds	r7, #232	; 0xe8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bc80      	pop	{r7}
 8006cd8:	4770      	bx	lr

08006cda <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr

08006cec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr

08006cfe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	460b      	mov	r3, r1
 8006d08:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr

08006d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d18:	b08c      	sub	sp, #48	; 0x30
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4b94      	ldr	r3, [pc, #592]	; (8006f94 <UART_SetConfig+0x280>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	6812      	ldr	r2, [r2, #0]
 8006d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a89      	ldr	r2, [pc, #548]	; (8006f98 <UART_SetConfig+0x284>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d004      	beq.n	8006d80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006d8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	6812      	ldr	r2, [r2, #0]
 8006d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d94:	430b      	orrs	r3, r1
 8006d96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	f023 010f 	bic.w	r1, r3, #15
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a7a      	ldr	r2, [pc, #488]	; (8006f9c <UART_SetConfig+0x288>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d127      	bne.n	8006e08 <UART_SetConfig+0xf4>
 8006db8:	2003      	movs	r0, #3
 8006dba:	f7ff fb1e 	bl	80063fa <LL_RCC_GetUSARTClockSource>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d81b      	bhi.n	8006e00 <UART_SetConfig+0xec>
 8006dc8:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <UART_SetConfig+0xbc>)
 8006dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dce:	bf00      	nop
 8006dd0:	08006de1 	.word	0x08006de1
 8006dd4:	08006df1 	.word	0x08006df1
 8006dd8:	08006de9 	.word	0x08006de9
 8006ddc:	08006df9 	.word	0x08006df9
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006de6:	e080      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006de8:	2302      	movs	r3, #2
 8006dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dee:	e07c      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006df0:	2304      	movs	r3, #4
 8006df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df6:	e078      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006df8:	2308      	movs	r3, #8
 8006dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfe:	e074      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006e00:	2310      	movs	r3, #16
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e06:	e070      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a64      	ldr	r2, [pc, #400]	; (8006fa0 <UART_SetConfig+0x28c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d138      	bne.n	8006e84 <UART_SetConfig+0x170>
 8006e12:	200c      	movs	r0, #12
 8006e14:	f7ff faf1 	bl	80063fa <LL_RCC_GetUSARTClockSource>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006e1e:	2b0c      	cmp	r3, #12
 8006e20:	d82c      	bhi.n	8006e7c <UART_SetConfig+0x168>
 8006e22:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <UART_SetConfig+0x114>)
 8006e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e28:	08006e5d 	.word	0x08006e5d
 8006e2c:	08006e7d 	.word	0x08006e7d
 8006e30:	08006e7d 	.word	0x08006e7d
 8006e34:	08006e7d 	.word	0x08006e7d
 8006e38:	08006e6d 	.word	0x08006e6d
 8006e3c:	08006e7d 	.word	0x08006e7d
 8006e40:	08006e7d 	.word	0x08006e7d
 8006e44:	08006e7d 	.word	0x08006e7d
 8006e48:	08006e65 	.word	0x08006e65
 8006e4c:	08006e7d 	.word	0x08006e7d
 8006e50:	08006e7d 	.word	0x08006e7d
 8006e54:	08006e7d 	.word	0x08006e7d
 8006e58:	08006e75 	.word	0x08006e75
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e62:	e042      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006e64:	2302      	movs	r3, #2
 8006e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e6a:	e03e      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e72:	e03a      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006e74:	2308      	movs	r3, #8
 8006e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e7a:	e036      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e82:	e032      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a43      	ldr	r2, [pc, #268]	; (8006f98 <UART_SetConfig+0x284>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d12a      	bne.n	8006ee4 <UART_SetConfig+0x1d0>
 8006e8e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006e92:	f7ff fac4 	bl	800641e <LL_RCC_GetLPUARTClockSource>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e9c:	d01a      	beq.n	8006ed4 <UART_SetConfig+0x1c0>
 8006e9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ea2:	d81b      	bhi.n	8006edc <UART_SetConfig+0x1c8>
 8006ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea8:	d00c      	beq.n	8006ec4 <UART_SetConfig+0x1b0>
 8006eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eae:	d815      	bhi.n	8006edc <UART_SetConfig+0x1c8>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <UART_SetConfig+0x1a8>
 8006eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb8:	d008      	beq.n	8006ecc <UART_SetConfig+0x1b8>
 8006eba:	e00f      	b.n	8006edc <UART_SetConfig+0x1c8>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec2:	e012      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eca:	e00e      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006ecc:	2304      	movs	r3, #4
 8006ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed2:	e00a      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006ed4:	2308      	movs	r3, #8
 8006ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eda:	e006      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006edc:	2310      	movs	r3, #16
 8006ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ee2:	e002      	b.n	8006eea <UART_SetConfig+0x1d6>
 8006ee4:	2310      	movs	r3, #16
 8006ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a2a      	ldr	r2, [pc, #168]	; (8006f98 <UART_SetConfig+0x284>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	f040 80a4 	bne.w	800703e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006efa:	2b08      	cmp	r3, #8
 8006efc:	d823      	bhi.n	8006f46 <UART_SetConfig+0x232>
 8006efe:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <UART_SetConfig+0x1f0>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f29 	.word	0x08006f29
 8006f08:	08006f47 	.word	0x08006f47
 8006f0c:	08006f31 	.word	0x08006f31
 8006f10:	08006f47 	.word	0x08006f47
 8006f14:	08006f37 	.word	0x08006f37
 8006f18:	08006f47 	.word	0x08006f47
 8006f1c:	08006f47 	.word	0x08006f47
 8006f20:	08006f47 	.word	0x08006f47
 8006f24:	08006f3f 	.word	0x08006f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f28:	f7fd fea4 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8006f2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f2e:	e010      	b.n	8006f52 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f30:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <UART_SetConfig+0x290>)
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f34:	e00d      	b.n	8006f52 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f36:	f7fd fde9 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8006f3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f3c:	e009      	b.n	8006f52 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f44:	e005      	b.n	8006f52 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8137 	beq.w	80071c8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	4a12      	ldr	r2, [pc, #72]	; (8006fa8 <UART_SetConfig+0x294>)
 8006f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f64:	461a      	mov	r2, r3
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	4613      	mov	r3, r2
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	4413      	add	r3, r2
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d305      	bcc.n	8006f8a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d910      	bls.n	8006fac <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f90:	e11a      	b.n	80071c8 <UART_SetConfig+0x4b4>
 8006f92:	bf00      	nop
 8006f94:	cfff69f3 	.word	0xcfff69f3
 8006f98:	40008000 	.word	0x40008000
 8006f9c:	40013800 	.word	0x40013800
 8006fa0:	40004400 	.word	0x40004400
 8006fa4:	00f42400 	.word	0x00f42400
 8006fa8:	0800c7c8 	.word	0x0800c7c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	2200      	movs	r2, #0
 8006fb0:	60bb      	str	r3, [r7, #8]
 8006fb2:	60fa      	str	r2, [r7, #12]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	4a8e      	ldr	r2, [pc, #568]	; (80071f4 <UART_SetConfig+0x4e0>)
 8006fba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	607a      	str	r2, [r7, #4]
 8006fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fce:	f7f9 f927 	bl	8000220 <__aeabi_uldivmod>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f04f 0200 	mov.w	r2, #0
 8006fde:	f04f 0300 	mov.w	r3, #0
 8006fe2:	020b      	lsls	r3, r1, #8
 8006fe4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fe8:	0202      	lsls	r2, r0, #8
 8006fea:	6979      	ldr	r1, [r7, #20]
 8006fec:	6849      	ldr	r1, [r1, #4]
 8006fee:	0849      	lsrs	r1, r1, #1
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	eb12 0804 	adds.w	r8, r2, r4
 8006ffa:	eb43 0905 	adc.w	r9, r3, r5
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	469a      	mov	sl, r3
 8007006:	4693      	mov	fp, r2
 8007008:	4652      	mov	r2, sl
 800700a:	465b      	mov	r3, fp
 800700c:	4640      	mov	r0, r8
 800700e:	4649      	mov	r1, r9
 8007010:	f7f9 f906 	bl	8000220 <__aeabi_uldivmod>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4613      	mov	r3, r2
 800701a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007022:	d308      	bcc.n	8007036 <UART_SetConfig+0x322>
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800702a:	d204      	bcs.n	8007036 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6a3a      	ldr	r2, [r7, #32]
 8007032:	60da      	str	r2, [r3, #12]
 8007034:	e0c8      	b.n	80071c8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800703c:	e0c4      	b.n	80071c8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007046:	d167      	bne.n	8007118 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8007048:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800704c:	2b08      	cmp	r3, #8
 800704e:	d828      	bhi.n	80070a2 <UART_SetConfig+0x38e>
 8007050:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0x344>)
 8007052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007056:	bf00      	nop
 8007058:	0800707d 	.word	0x0800707d
 800705c:	08007085 	.word	0x08007085
 8007060:	0800708d 	.word	0x0800708d
 8007064:	080070a3 	.word	0x080070a3
 8007068:	08007093 	.word	0x08007093
 800706c:	080070a3 	.word	0x080070a3
 8007070:	080070a3 	.word	0x080070a3
 8007074:	080070a3 	.word	0x080070a3
 8007078:	0800709b 	.word	0x0800709b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800707c:	f7fd fdfa 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8007080:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007082:	e014      	b.n	80070ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007084:	f7fd fe08 	bl	8004c98 <HAL_RCC_GetPCLK2Freq>
 8007088:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800708a:	e010      	b.n	80070ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800708c:	4b5a      	ldr	r3, [pc, #360]	; (80071f8 <UART_SetConfig+0x4e4>)
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007090:	e00d      	b.n	80070ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007092:	f7fd fd3b 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8007096:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007098:	e009      	b.n	80070ae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800709a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070a0:	e005      	b.n	80070ae <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8089 	beq.w	80071c8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	4a4e      	ldr	r2, [pc, #312]	; (80071f4 <UART_SetConfig+0x4e0>)
 80070bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070c0:	461a      	mov	r2, r3
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c8:	005a      	lsls	r2, r3, #1
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	085b      	lsrs	r3, r3, #1
 80070d0:	441a      	add	r2, r3
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	2b0f      	cmp	r3, #15
 80070e0:	d916      	bls.n	8007110 <UART_SetConfig+0x3fc>
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e8:	d212      	bcs.n	8007110 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	f023 030f 	bic.w	r3, r3, #15
 80070f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	b29a      	uxth	r2, r3
 8007100:	8bfb      	ldrh	r3, [r7, #30]
 8007102:	4313      	orrs	r3, r2
 8007104:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	8bfa      	ldrh	r2, [r7, #30]
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	e05b      	b.n	80071c8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007116:	e057      	b.n	80071c8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007118:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800711c:	2b08      	cmp	r3, #8
 800711e:	d828      	bhi.n	8007172 <UART_SetConfig+0x45e>
 8007120:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <UART_SetConfig+0x414>)
 8007122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007126:	bf00      	nop
 8007128:	0800714d 	.word	0x0800714d
 800712c:	08007155 	.word	0x08007155
 8007130:	0800715d 	.word	0x0800715d
 8007134:	08007173 	.word	0x08007173
 8007138:	08007163 	.word	0x08007163
 800713c:	08007173 	.word	0x08007173
 8007140:	08007173 	.word	0x08007173
 8007144:	08007173 	.word	0x08007173
 8007148:	0800716b 	.word	0x0800716b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800714c:	f7fd fd92 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8007150:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007152:	e014      	b.n	800717e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007154:	f7fd fda0 	bl	8004c98 <HAL_RCC_GetPCLK2Freq>
 8007158:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800715a:	e010      	b.n	800717e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800715c:	4b26      	ldr	r3, [pc, #152]	; (80071f8 <UART_SetConfig+0x4e4>)
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007160:	e00d      	b.n	800717e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007162:	f7fd fcd3 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8007166:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007168:	e009      	b.n	800717e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800716a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800716e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007170:	e005      	b.n	800717e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800717c:	bf00      	nop
    }

    if (pclk != 0U)
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	2b00      	cmp	r3, #0
 8007182:	d021      	beq.n	80071c8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	4a1a      	ldr	r2, [pc, #104]	; (80071f4 <UART_SetConfig+0x4e0>)
 800718a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800718e:	461a      	mov	r2, r3
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	fbb3 f2f2 	udiv	r2, r3, r2
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	441a      	add	r2, r3
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	2b0f      	cmp	r3, #15
 80071ac:	d909      	bls.n	80071c2 <UART_SetConfig+0x4ae>
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b4:	d205      	bcs.n	80071c2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60da      	str	r2, [r3, #12]
 80071c0:	e002      	b.n	80071c8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2200      	movs	r2, #0
 80071dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2200      	movs	r2, #0
 80071e2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80071e4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3730      	adds	r7, #48	; 0x30
 80071ec:	46bd      	mov	sp, r7
 80071ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071f2:	bf00      	nop
 80071f4:	0800c7c8 	.word	0x0800c7c8
 80071f8:	00f42400 	.word	0x00f42400

080071fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00a      	beq.n	8007226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00a      	beq.n	800726a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00a      	beq.n	800728c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00a      	beq.n	80072ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01a      	beq.n	8007312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fa:	d10a      	bne.n	8007312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	605a      	str	r2, [r3, #4]
  }
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	bc80      	pop	{r7}
 800733c:	4770      	bx	lr

0800733e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b086      	sub	sp, #24
 8007342:	af02      	add	r7, sp, #8
 8007344:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800734e:	f7fb fa85 	bl	800285c <HAL_GetTick>
 8007352:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0308 	and.w	r3, r3, #8
 800735e:	2b08      	cmp	r3, #8
 8007360:	d10e      	bne.n	8007380 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007362:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f832 	bl	80073da <UART_WaitOnFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e028      	b.n	80073d2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0304 	and.w	r3, r3, #4
 800738a:	2b04      	cmp	r3, #4
 800738c:	d10e      	bne.n	80073ac <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800738e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f81c 	bl	80073da <UART_WaitOnFlagUntilTimeout>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e012      	b.n	80073d2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b09c      	sub	sp, #112	; 0x70
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	4613      	mov	r3, r2
 80073e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ea:	e0a9      	b.n	8007540 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073f2:	f000 80a5 	beq.w	8007540 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f6:	f7fb fa31 	bl	800285c <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007402:	429a      	cmp	r2, r3
 8007404:	d302      	bcc.n	800740c <UART_WaitOnFlagUntilTimeout+0x32>
 8007406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007408:	2b00      	cmp	r3, #0
 800740a:	d140      	bne.n	800748e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800741a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800741c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007420:	667b      	str	r3, [r7, #100]	; 0x64
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800742a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800742c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007430:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e6      	bne.n	800740c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3308      	adds	r3, #8
 8007444:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800744e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007450:	f023 0301 	bic.w	r3, r3, #1
 8007454:	663b      	str	r3, [r7, #96]	; 0x60
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3308      	adds	r3, #8
 800745c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800745e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007460:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800746c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e5      	bne.n	800743e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2220      	movs	r2, #32
 8007476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2220      	movs	r2, #32
 800747e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e069      	b.n	8007562 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d051      	beq.n	8007540 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074aa:	d149      	bne.n	8007540 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	e853 3f00 	ldrex	r3, [r3]
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	461a      	mov	r2, r3
 80074d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
 80074d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074dc:	e841 2300 	strex	r3, r2, [r1]
 80074e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1e6      	bne.n	80074b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3308      	adds	r3, #8
 80074ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	613b      	str	r3, [r7, #16]
   return(result);
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	f023 0301 	bic.w	r3, r3, #1
 80074fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3308      	adds	r3, #8
 8007506:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007508:	623a      	str	r2, [r7, #32]
 800750a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	69f9      	ldr	r1, [r7, #28]
 800750e:	6a3a      	ldr	r2, [r7, #32]
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	61bb      	str	r3, [r7, #24]
   return(result);
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e5      	bne.n	80074e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2220      	movs	r2, #32
 8007520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2220      	movs	r2, #32
 8007528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2220      	movs	r2, #32
 8007530:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e010      	b.n	8007562 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69da      	ldr	r2, [r3, #28]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	4013      	ands	r3, r2
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	429a      	cmp	r2, r3
 800754e:	bf0c      	ite	eq
 8007550:	2301      	moveq	r3, #1
 8007552:	2300      	movne	r3, #0
 8007554:	b2db      	uxtb	r3, r3
 8007556:	461a      	mov	r2, r3
 8007558:	79fb      	ldrb	r3, [r7, #7]
 800755a:	429a      	cmp	r2, r3
 800755c:	f43f af46 	beq.w	80073ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3770      	adds	r7, #112	; 0x70
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b096      	sub	sp, #88	; 0x58
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	4613      	mov	r3, r2
 8007578:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	88fa      	ldrh	r2, [r7, #6]
 8007584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2222      	movs	r2, #34	; 0x22
 8007594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d02d      	beq.n	80075fe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075a8:	4a40      	ldr	r2, [pc, #256]	; (80076ac <UART_Start_Receive_DMA+0x140>)
 80075aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075b2:	4a3f      	ldr	r2, [pc, #252]	; (80076b0 <UART_Start_Receive_DMA+0x144>)
 80075b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075bc:	4a3d      	ldr	r2, [pc, #244]	; (80076b4 <UART_Start_Receive_DMA+0x148>)
 80075be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c6:	2200      	movs	r2, #0
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3324      	adds	r3, #36	; 0x24
 80075d6:	4619      	mov	r1, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075dc:	461a      	mov	r2, r3
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	f7fb feac 	bl	800333c <HAL_DMA_Start_IT>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d009      	beq.n	80075fe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2210      	movs	r2, #16
 80075ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e051      	b.n	80076a2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d018      	beq.n	8007638 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760e:	e853 3f00 	ldrex	r3, [r3]
 8007612:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800761a:	657b      	str	r3, [r7, #84]	; 0x54
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007624:	64bb      	str	r3, [r7, #72]	; 0x48
 8007626:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007628:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800762a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800762c:	e841 2300 	strex	r3, r2, [r1]
 8007630:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1e6      	bne.n	8007606 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3308      	adds	r3, #8
 800763e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	f043 0301 	orr.w	r3, r3, #1
 800764e:	653b      	str	r3, [r7, #80]	; 0x50
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3308      	adds	r3, #8
 8007656:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007658:	637a      	str	r2, [r7, #52]	; 0x34
 800765a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800765e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e5      	bne.n	8007638 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3308      	adds	r3, #8
 8007672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	613b      	str	r3, [r7, #16]
   return(result);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3308      	adds	r3, #8
 800768a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800768c:	623a      	str	r2, [r7, #32]
 800768e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	69f9      	ldr	r1, [r7, #28]
 8007692:	6a3a      	ldr	r2, [r7, #32]
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	61bb      	str	r3, [r7, #24]
   return(result);
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e5      	bne.n	800766c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3758      	adds	r7, #88	; 0x58
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	08007803 	.word	0x08007803
 80076b0:	0800792f 	.word	0x0800792f
 80076b4:	0800796d 	.word	0x0800796d

080076b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b08f      	sub	sp, #60	; 0x3c
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80076d4:	637b      	str	r3, [r7, #52]	; 0x34
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076e0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e6      	bne.n	80076c0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3308      	adds	r3, #8
 80076f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	60bb      	str	r3, [r7, #8]
   return(result);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007708:	633b      	str	r3, [r7, #48]	; 0x30
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3308      	adds	r3, #8
 8007710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007712:	61ba      	str	r2, [r7, #24]
 8007714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	6979      	ldr	r1, [r7, #20]
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	613b      	str	r3, [r7, #16]
   return(result);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e5      	bne.n	80076f2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2220      	movs	r2, #32
 800772a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800772e:	bf00      	nop
 8007730:	373c      	adds	r7, #60	; 0x3c
 8007732:	46bd      	mov	sp, r7
 8007734:	bc80      	pop	{r7}
 8007736:	4770      	bx	lr

08007738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007738:	b480      	push	{r7}
 800773a:	b095      	sub	sp, #84	; 0x54
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007748:	e853 3f00 	ldrex	r3, [r3]
 800774c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007754:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800775e:	643b      	str	r3, [r7, #64]	; 0x40
 8007760:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e6      	bne.n	8007740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3308      	adds	r3, #8
 8007778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	61fb      	str	r3, [r7, #28]
   return(result);
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007788:	f023 0301 	bic.w	r3, r3, #1
 800778c:	64bb      	str	r3, [r7, #72]	; 0x48
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3308      	adds	r3, #8
 8007794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007796:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007798:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800779c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e3      	bne.n	8007772 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d118      	bne.n	80077e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	60bb      	str	r3, [r7, #8]
   return(result);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f023 0310 	bic.w	r3, r3, #16
 80077c6:	647b      	str	r3, [r7, #68]	; 0x44
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	461a      	mov	r2, r3
 80077ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077d0:	61bb      	str	r3, [r7, #24]
 80077d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6979      	ldr	r1, [r7, #20]
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	613b      	str	r3, [r7, #16]
   return(result);
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e6      	bne.n	80077b2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80077f8:	bf00      	nop
 80077fa:	3754      	adds	r7, #84	; 0x54
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bc80      	pop	{r7}
 8007800:	4770      	bx	lr

08007802 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b09c      	sub	sp, #112	; 0x70
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b00      	cmp	r3, #0
 800781c:	d171      	bne.n	8007902 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800781e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007820:	2200      	movs	r2, #0
 8007822:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800782e:	e853 3f00 	ldrex	r3, [r3]
 8007832:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007836:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800783a:	66bb      	str	r3, [r7, #104]	; 0x68
 800783c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	461a      	mov	r2, r3
 8007842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007844:	65bb      	str	r3, [r7, #88]	; 0x58
 8007846:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800784a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800784c:	e841 2300 	strex	r3, r2, [r1]
 8007850:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e6      	bne.n	8007826 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3308      	adds	r3, #8
 800785e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786a:	f023 0301 	bic.w	r3, r3, #1
 800786e:	667b      	str	r3, [r7, #100]	; 0x64
 8007870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3308      	adds	r3, #8
 8007876:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007878:	647a      	str	r2, [r7, #68]	; 0x44
 800787a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800787e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e5      	bne.n	8007858 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800788c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3308      	adds	r3, #8
 8007892:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	623b      	str	r3, [r7, #32]
   return(result);
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a2:	663b      	str	r3, [r7, #96]	; 0x60
 80078a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3308      	adds	r3, #8
 80078aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078ac:	633a      	str	r2, [r7, #48]	; 0x30
 80078ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e5      	bne.n	800788c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c2:	2220      	movs	r2, #32
 80078c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d118      	bne.n	8007902 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f023 0310 	bic.w	r3, r3, #16
 80078e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078ee:	61fb      	str	r3, [r7, #28]
 80078f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f2:	69b9      	ldr	r1, [r7, #24]
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	617b      	str	r3, [r7, #20]
   return(result);
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1e6      	bne.n	80078d0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007904:	2200      	movs	r2, #0
 8007906:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800790a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800790c:	2b01      	cmp	r3, #1
 800790e:	d107      	bne.n	8007920 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007912:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007916:	4619      	mov	r1, r3
 8007918:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800791a:	f7ff f9f0 	bl	8006cfe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800791e:	e002      	b.n	8007926 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007920:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007922:	f7f9 fb6f 	bl	8001004 <HAL_UART_RxCpltCallback>
}
 8007926:	bf00      	nop
 8007928:	3770      	adds	r7, #112	; 0x70
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2201      	movs	r2, #1
 8007940:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007946:	2b01      	cmp	r3, #1
 8007948:	d109      	bne.n	800795e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007950:	085b      	lsrs	r3, r3, #1
 8007952:	b29b      	uxth	r3, r3
 8007954:	4619      	mov	r1, r3
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff f9d1 	bl	8006cfe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800795c:	e002      	b.n	8007964 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7ff f9bb 	bl	8006cda <HAL_UART_RxHalfCpltCallback>
}
 8007964:	bf00      	nop
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007978:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007980:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007988:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007994:	2b80      	cmp	r3, #128	; 0x80
 8007996:	d109      	bne.n	80079ac <UART_DMAError+0x40>
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	2b21      	cmp	r3, #33	; 0x21
 800799c:	d106      	bne.n	80079ac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80079a6:	6978      	ldr	r0, [r7, #20]
 80079a8:	f7ff fe86 	bl	80076b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b6:	2b40      	cmp	r3, #64	; 0x40
 80079b8:	d109      	bne.n	80079ce <UART_DMAError+0x62>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b22      	cmp	r3, #34	; 0x22
 80079be:	d106      	bne.n	80079ce <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80079c8:	6978      	ldr	r0, [r7, #20]
 80079ca:	f7ff feb5 	bl	8007738 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d4:	f043 0210 	orr.w	r2, r3, #16
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079de:	6978      	ldr	r0, [r7, #20]
 80079e0:	f7ff f984 	bl	8006cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079e4:	bf00      	nop
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f7ff f96e 	bl	8006cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a10:	bf00      	nop
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a34:	61fb      	str	r3, [r7, #28]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	61bb      	str	r3, [r7, #24]
 8007a40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	6979      	ldr	r1, [r7, #20]
 8007a44:	69ba      	ldr	r2, [r7, #24]
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e6      	bne.n	8007a20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff f931 	bl	8006cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a66:	bf00      	nop
 8007a68:	3720      	adds	r7, #32
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bc80      	pop	{r7}
 8007a7e:	4770      	bx	lr

08007a80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bc80      	pop	{r7}
 8007a90:	4770      	bx	lr

08007a92 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bc80      	pop	{r7}
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_UARTEx_DisableFifoMode+0x16>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e027      	b.n	8007b0a <HAL_UARTEx_DisableFifoMode+0x66>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2224      	movs	r2, #36	; 0x24
 8007ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 0201 	bic.w	r2, r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ae8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bc80      	pop	{r7}
 8007b12:	4770      	bx	lr

08007b14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e02d      	b.n	8007b88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2224      	movs	r2, #36	; 0x24
 8007b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0201 	bic.w	r2, r2, #1
 8007b52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f84f 	bl	8007c0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e02d      	b.n	8007c04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2224      	movs	r2, #36	; 0x24
 8007bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0201 	bic.w	r2, r2, #1
 8007bce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f811 	bl	8007c0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d108      	bne.n	8007c2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c2c:	e031      	b.n	8007c92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c2e:	2308      	movs	r3, #8
 8007c30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c32:	2308      	movs	r3, #8
 8007c34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	0e5b      	lsrs	r3, r3, #25
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	f003 0307 	and.w	r3, r3, #7
 8007c44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	0f5b      	lsrs	r3, r3, #29
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	f003 0307 	and.w	r3, r3, #7
 8007c54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
 8007c58:	7b3a      	ldrb	r2, [r7, #12]
 8007c5a:	4910      	ldr	r1, [pc, #64]	; (8007c9c <UARTEx_SetNbDataToProcess+0x90>)
 8007c5c:	5c8a      	ldrb	r2, [r1, r2]
 8007c5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c62:	7b3a      	ldrb	r2, [r7, #12]
 8007c64:	490e      	ldr	r1, [pc, #56]	; (8007ca0 <UARTEx_SetNbDataToProcess+0x94>)
 8007c66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c68:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	7b7a      	ldrb	r2, [r7, #13]
 8007c78:	4908      	ldr	r1, [pc, #32]	; (8007c9c <UARTEx_SetNbDataToProcess+0x90>)
 8007c7a:	5c8a      	ldrb	r2, [r1, r2]
 8007c7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c80:	7b7a      	ldrb	r2, [r7, #13]
 8007c82:	4907      	ldr	r1, [pc, #28]	; (8007ca0 <UARTEx_SetNbDataToProcess+0x94>)
 8007c84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c86:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c92:	bf00      	nop
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bc80      	pop	{r7}
 8007c9a:	4770      	bx	lr
 8007c9c:	0800c7e0 	.word	0x0800c7e0
 8007ca0:	0800c7e8 	.word	0x0800c7e8

08007ca4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007cac:	4a24      	ldr	r2, [pc, #144]	; (8007d40 <RadioInit+0x9c>)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8007cb2:	4b24      	ldr	r3, [pc, #144]	; (8007d44 <RadioInit+0xa0>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007cb8:	4b22      	ldr	r3, [pc, #136]	; (8007d44 <RadioInit+0xa0>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007cbe:	4b21      	ldr	r3, [pc, #132]	; (8007d44 <RadioInit+0xa0>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007cc4:	4b1f      	ldr	r3, [pc, #124]	; (8007d44 <RadioInit+0xa0>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8007cca:	481f      	ldr	r0, [pc, #124]	; (8007d48 <RadioInit+0xa4>)
 8007ccc:	f001 ff88 	bl	8009be0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007cd0:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <RadioInit+0xa0>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8007cd6:	4b1b      	ldr	r3, [pc, #108]	; (8007d44 <RadioInit+0xa0>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007cdc:	f002 fa1c 	bl	800a118 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	f002 fde8 	bl	800a8b8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8007ce8:	2204      	movs	r2, #4
 8007cea:	2100      	movs	r1, #0
 8007cec:	2001      	movs	r0, #1
 8007cee:	f002 fba5 	bl	800a43c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007cfa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007cfe:	f002 fad5 	bl	800a2ac <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8007d02:	f000 fe91 	bl	8008a28 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8007d06:	2300      	movs	r3, #0
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	4b10      	ldr	r3, [pc, #64]	; (8007d4c <RadioInit+0xa8>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007d12:	480f      	ldr	r0, [pc, #60]	; (8007d50 <RadioInit+0xac>)
 8007d14:	f003 fb32 	bl	800b37c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	4b0d      	ldr	r3, [pc, #52]	; (8007d54 <RadioInit+0xb0>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007d24:	480c      	ldr	r0, [pc, #48]	; (8007d58 <RadioInit+0xb4>)
 8007d26:	f003 fb29 	bl	800b37c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8007d2a:	4809      	ldr	r0, [pc, #36]	; (8007d50 <RadioInit+0xac>)
 8007d2c:	f003 fbca 	bl	800b4c4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007d30:	4809      	ldr	r0, [pc, #36]	; (8007d58 <RadioInit+0xb4>)
 8007d32:	f003 fbc7 	bl	800b4c4 <UTIL_TIMER_Stop>
}
 8007d36:	bf00      	nop
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	200008b4 	.word	0x200008b4
 8007d44:	200008b8 	.word	0x200008b8
 8007d48:	08008e21 	.word	0x08008e21
 8007d4c:	08008da9 	.word	0x08008da9
 8007d50:	20000914 	.word	0x20000914
 8007d54:	08008dbd 	.word	0x08008dbd
 8007d58:	2000092c 	.word	0x2000092c

08007d5c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007d60:	f001 ff86 	bl	8009c70 <SUBGRF_GetOperatingMode>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b07      	cmp	r3, #7
 8007d68:	d00a      	beq.n	8007d80 <RadioGetStatus+0x24>
 8007d6a:	2b07      	cmp	r3, #7
 8007d6c:	dc0a      	bgt.n	8007d84 <RadioGetStatus+0x28>
 8007d6e:	2b04      	cmp	r3, #4
 8007d70:	d002      	beq.n	8007d78 <RadioGetStatus+0x1c>
 8007d72:	2b05      	cmp	r3, #5
 8007d74:	d002      	beq.n	8007d7c <RadioGetStatus+0x20>
 8007d76:	e005      	b.n	8007d84 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007d78:	2302      	movs	r3, #2
 8007d7a:	e004      	b.n	8007d86 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e002      	b.n	8007d86 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e000      	b.n	8007d86 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007d84:	2300      	movs	r3, #0
    }
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8007d96:	4a2a      	ldr	r2, [pc, #168]	; (8007e40 <RadioSetModem+0xb4>)
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007d9c:	79fb      	ldrb	r3, [r7, #7]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f003 f95d 	bl	800b05e <RFW_SetRadioModem>
    switch( modem )
 8007da4:	79fb      	ldrb	r3, [r7, #7]
 8007da6:	2b05      	cmp	r3, #5
 8007da8:	d80e      	bhi.n	8007dc8 <RadioSetModem+0x3c>
 8007daa:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <RadioSetModem+0x24>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007dd7 	.word	0x08007dd7
 8007db4:	08007de5 	.word	0x08007de5
 8007db8:	08007dc9 	.word	0x08007dc9
 8007dbc:	08007e0b 	.word	0x08007e0b
 8007dc0:	08007e19 	.word	0x08007e19
 8007dc4:	08007e27 	.word	0x08007e27
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8007dc8:	2003      	movs	r0, #3
 8007dca:	f002 fb11 	bl	800a3f0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007dce:	4b1c      	ldr	r3, [pc, #112]	; (8007e40 <RadioSetModem+0xb4>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	735a      	strb	r2, [r3, #13]
        break;
 8007dd4:	e02f      	b.n	8007e36 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	f002 fb0a 	bl	800a3f0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007ddc:	4b18      	ldr	r3, [pc, #96]	; (8007e40 <RadioSetModem+0xb4>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	735a      	strb	r2, [r3, #13]
        break;
 8007de2:	e028      	b.n	8007e36 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8007de4:	2001      	movs	r0, #1
 8007de6:	f002 fb03 	bl	800a3f0 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8007dea:	4b15      	ldr	r3, [pc, #84]	; (8007e40 <RadioSetModem+0xb4>)
 8007dec:	7b5a      	ldrb	r2, [r3, #13]
 8007dee:	4b14      	ldr	r3, [pc, #80]	; (8007e40 <RadioSetModem+0xb4>)
 8007df0:	7b1b      	ldrb	r3, [r3, #12]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d01e      	beq.n	8007e34 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8007df6:	4b12      	ldr	r3, [pc, #72]	; (8007e40 <RadioSetModem+0xb4>)
 8007df8:	7b1a      	ldrb	r2, [r3, #12]
 8007dfa:	4b11      	ldr	r3, [pc, #68]	; (8007e40 <RadioSetModem+0xb4>)
 8007dfc:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8007dfe:	4b10      	ldr	r3, [pc, #64]	; (8007e40 <RadioSetModem+0xb4>)
 8007e00:	7b5b      	ldrb	r3, [r3, #13]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 ff9a 	bl	8008d3c <RadioSetPublicNetwork>
        }
        break;
 8007e08:	e014      	b.n	8007e34 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007e0a:	2002      	movs	r0, #2
 8007e0c:	f002 faf0 	bl	800a3f0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007e10:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <RadioSetModem+0xb4>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	735a      	strb	r2, [r3, #13]
        break;
 8007e16:	e00e      	b.n	8007e36 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007e18:	2002      	movs	r0, #2
 8007e1a:	f002 fae9 	bl	800a3f0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007e1e:	4b08      	ldr	r3, [pc, #32]	; (8007e40 <RadioSetModem+0xb4>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	735a      	strb	r2, [r3, #13]
        break;
 8007e24:	e007      	b.n	8007e36 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007e26:	2000      	movs	r0, #0
 8007e28:	f002 fae2 	bl	800a3f0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007e2c:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <RadioSetModem+0xb4>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	735a      	strb	r2, [r3, #13]
        break;
 8007e32:	e000      	b.n	8007e36 <RadioSetModem+0xaa>
        break;
 8007e34:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8007e36:	bf00      	nop
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	200008b8 	.word	0x200008b8

08007e44 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f002 fa89 	bl	800a364 <SUBGRF_SetRfFrequency>
}
 8007e52:	bf00      	nop
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b090      	sub	sp, #64	; 0x40
 8007e5e:	af0a      	add	r7, sp, #40	; 0x28
 8007e60:	60f8      	str	r0, [r7, #12]
 8007e62:	60b9      	str	r1, [r7, #8]
 8007e64:	603b      	str	r3, [r7, #0]
 8007e66:	4613      	mov	r3, r2
 8007e68:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8007e76:	f000 fdea 	bl	8008a4e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	f7ff ff86 	bl	8007d8c <RadioSetModem>

    RadioSetChannel( freq );
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f7ff ffdf 	bl	8007e44 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8007e86:	2301      	movs	r3, #1
 8007e88:	9309      	str	r3, [sp, #36]	; 0x24
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	9308      	str	r3, [sp, #32]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	9307      	str	r3, [sp, #28]
 8007e92:	2300      	movs	r3, #0
 8007e94:	9306      	str	r3, [sp, #24]
 8007e96:	2300      	movs	r3, #0
 8007e98:	9305      	str	r3, [sp, #20]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9304      	str	r3, [sp, #16]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9303      	str	r3, [sp, #12]
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	9302      	str	r3, [sp, #8]
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	f000 f83c 	bl	8007f34 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	f000 fdcd 	bl	8008a5c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8007ec2:	f000 ff69 	bl	8008d98 <RadioGetWakeupTime>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fa fcdb 	bl	8002884 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8007ece:	f003 fb93 	bl	800b5f8 <UTIL_TIMER_GetCurrentTime>
 8007ed2:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007ed4:	e00d      	b.n	8007ef2 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	f000 feae 	bl	8008c38 <RadioRssi>
 8007edc:	4603      	mov	r3, r0
 8007ede:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8007ee0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007ee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	dd02      	ble.n	8007ef2 <RadioIsChannelFree+0x98>
        {
            status = false;
 8007eec:	2300      	movs	r3, #0
 8007eee:	75fb      	strb	r3, [r7, #23]
            break;
 8007ef0:	e006      	b.n	8007f00 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007ef2:	6938      	ldr	r0, [r7, #16]
 8007ef4:	f003 fb92 	bl	800b61c <UTIL_TIMER_GetElapsedTime>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d8ea      	bhi.n	8007ed6 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8007f00:	f000 fda5 	bl	8008a4e <RadioStandby>

    return status;
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b082      	sub	sp, #8
 8007f12:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8007f14:	2300      	movs	r3, #0
 8007f16:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	2000      	movs	r0, #0
 8007f20:	f002 f9c4 	bl	800a2ac <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8007f24:	f001 ff75 	bl	8009e12 <SUBGRF_GetRandom>
 8007f28:	6078      	str	r0, [r7, #4]

    return rnd;
 8007f2a:	687b      	ldr	r3, [r7, #4]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b08a      	sub	sp, #40	; 0x28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
 8007f44:	4613      	mov	r3, r2
 8007f46:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8007f48:	4ab9      	ldr	r2, [pc, #740]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007f4a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007f4e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8007f50:	f003 f843 	bl	800afda <RFW_DeInit>
    if( rxContinuous == true )
 8007f54:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8007f60:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d004      	beq.n	8007f72 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8007f68:	4ab2      	ldr	r2, [pc, #712]	; (8008234 <RadioSetRxConfig+0x300>)
 8007f6a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007f6e:	7013      	strb	r3, [r2, #0]
 8007f70:	e002      	b.n	8007f78 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8007f72:	4bb0      	ldr	r3, [pc, #704]	; (8008234 <RadioSetRxConfig+0x300>)
 8007f74:	22ff      	movs	r2, #255	; 0xff
 8007f76:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	2b05      	cmp	r3, #5
 8007f7c:	d009      	beq.n	8007f92 <RadioSetRxConfig+0x5e>
 8007f7e:	2b05      	cmp	r3, #5
 8007f80:	f300 81d7 	bgt.w	8008332 <RadioSetRxConfig+0x3fe>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 80bf 	beq.w	8008108 <RadioSetRxConfig+0x1d4>
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	f000 8124 	beq.w	80081d8 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007f90:	e1cf      	b.n	8008332 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8007f92:	2001      	movs	r0, #1
 8007f94:	f002 f882 	bl	800a09c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007f98:	4ba5      	ldr	r3, [pc, #660]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007fa0:	4aa3      	ldr	r2, [pc, #652]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8007fa6:	4ba2      	ldr	r3, [pc, #648]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007fa8:	2209      	movs	r2, #9
 8007faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8007fae:	4ba0      	ldr	r3, [pc, #640]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007fb0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007fb4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007fb6:	68b8      	ldr	r0, [r7, #8]
 8007fb8:	f002 ff42 	bl	800ae40 <SUBGRF_GetFskBandwidthRegValue>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	4b9b      	ldr	r3, [pc, #620]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007fc6:	4b9a      	ldr	r3, [pc, #616]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007fcc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	4b97      	ldr	r3, [pc, #604]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007fd4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8007fd6:	4b96      	ldr	r3, [pc, #600]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007fdc:	4b94      	ldr	r3, [pc, #592]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007fde:	2210      	movs	r2, #16
 8007fe0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007fe2:	4b93      	ldr	r3, [pc, #588]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8007fe8:	4b91      	ldr	r3, [pc, #580]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007fee:	4b91      	ldr	r3, [pc, #580]	; (8008234 <RadioSetRxConfig+0x300>)
 8007ff0:	781a      	ldrb	r2, [r3, #0]
 8007ff2:	4b8f      	ldr	r3, [pc, #572]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007ff4:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007ff6:	4b8e      	ldr	r3, [pc, #568]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007ffc:	4b8c      	ldr	r3, [pc, #560]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8008002:	2005      	movs	r0, #5
 8008004:	f7ff fec2 	bl	8007d8c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008008:	488b      	ldr	r0, [pc, #556]	; (8008238 <RadioSetRxConfig+0x304>)
 800800a:	f002 fae5 	bl	800a5d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800800e:	488b      	ldr	r0, [pc, #556]	; (800823c <RadioSetRxConfig+0x308>)
 8008010:	f002 fbb4 	bl	800a77c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008014:	4a8a      	ldr	r2, [pc, #552]	; (8008240 <RadioSetRxConfig+0x30c>)
 8008016:	f107 031c 	add.w	r3, r7, #28
 800801a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800801e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008022:	f107 031c 	add.w	r3, r7, #28
 8008026:	4618      	mov	r0, r3
 8008028:	f001 fe71 	bl	8009d0e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800802c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008030:	f001 febc 	bl	8009dac <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8008034:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8008038:	f000 fe1d 	bl	8008c76 <RadioRead>
 800803c:	4603      	mov	r3, r0
 800803e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8008042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008046:	f023 0310 	bic.w	r3, r3, #16
 800804a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800804e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008052:	4619      	mov	r1, r3
 8008054:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8008058:	f000 fdfb 	bl	8008c52 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800805c:	2104      	movs	r1, #4
 800805e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8008062:	f000 fdf6 	bl	8008c52 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8008066:	f640 009b 	movw	r0, #2203	; 0x89b
 800806a:	f000 fe04 	bl	8008c76 <RadioRead>
 800806e:	4603      	mov	r3, r0
 8008070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008078:	f023 031c 	bic.w	r3, r3, #28
 800807c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8008080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008084:	f043 0308 	orr.w	r3, r3, #8
 8008088:	b2db      	uxtb	r3, r3
 800808a:	4619      	mov	r1, r3
 800808c:	f640 009b 	movw	r0, #2203	; 0x89b
 8008090:	f000 fddf 	bl	8008c52 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8008094:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8008098:	f000 fded 	bl	8008c76 <RadioRead>
 800809c:	4603      	mov	r3, r0
 800809e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80080a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080a6:	f023 0318 	bic.w	r3, r3, #24
 80080aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80080ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080b2:	f043 0318 	orr.w	r3, r3, #24
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	4619      	mov	r1, r3
 80080ba:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80080be:	f000 fdc8 	bl	8008c52 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80080c2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80080c6:	f000 fdd6 	bl	8008c76 <RadioRead>
 80080ca:	4603      	mov	r3, r0
 80080cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80080d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80080dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080e0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	4619      	mov	r1, r3
 80080e8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80080ec:	f000 fdb1 	bl	8008c52 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80080f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80080f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80080f6:	fb02 f303 	mul.w	r3, r2, r3
 80080fa:	461a      	mov	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008102:	4a4b      	ldr	r2, [pc, #300]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8008104:	6093      	str	r3, [r2, #8]
            break;
 8008106:	e115      	b.n	8008334 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008108:	2000      	movs	r0, #0
 800810a:	f001 ffc7 	bl	800a09c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800810e:	4b48      	ldr	r3, [pc, #288]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8008110:	2200      	movs	r2, #0
 8008112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008116:	4a46      	ldr	r2, [pc, #280]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800811c:	4b44      	ldr	r3, [pc, #272]	; (8008230 <RadioSetRxConfig+0x2fc>)
 800811e:	220b      	movs	r2, #11
 8008120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008124:	68b8      	ldr	r0, [r7, #8]
 8008126:	f002 fe8b 	bl	800ae40 <SUBGRF_GetFskBandwidthRegValue>
 800812a:	4603      	mov	r3, r0
 800812c:	461a      	mov	r2, r3
 800812e:	4b40      	ldr	r3, [pc, #256]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8008130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008134:	4b3e      	ldr	r3, [pc, #248]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8008136:	2200      	movs	r2, #0
 8008138:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800813a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	b29a      	uxth	r2, r3
 8008140:	4b3b      	ldr	r3, [pc, #236]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8008142:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008144:	4b3a      	ldr	r3, [pc, #232]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8008146:	2204      	movs	r2, #4
 8008148:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800814a:	4b39      	ldr	r3, [pc, #228]	; (8008230 <RadioSetRxConfig+0x2fc>)
 800814c:	2218      	movs	r2, #24
 800814e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008150:	4b37      	ldr	r3, [pc, #220]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8008152:	2200      	movs	r2, #0
 8008154:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008156:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800815a:	f083 0301 	eor.w	r3, r3, #1
 800815e:	b2db      	uxtb	r3, r3
 8008160:	461a      	mov	r2, r3
 8008162:	4b33      	ldr	r3, [pc, #204]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8008164:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008166:	4b33      	ldr	r3, [pc, #204]	; (8008234 <RadioSetRxConfig+0x300>)
 8008168:	781a      	ldrb	r2, [r3, #0]
 800816a:	4b31      	ldr	r3, [pc, #196]	; (8008230 <RadioSetRxConfig+0x2fc>)
 800816c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800816e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008176:	4b2e      	ldr	r3, [pc, #184]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8008178:	22f2      	movs	r2, #242	; 0xf2
 800817a:	75da      	strb	r2, [r3, #23]
 800817c:	e002      	b.n	8008184 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800817e:	4b2c      	ldr	r3, [pc, #176]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8008180:	2201      	movs	r2, #1
 8008182:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008184:	4b2a      	ldr	r3, [pc, #168]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8008186:	2201      	movs	r2, #1
 8008188:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800818a:	f000 fc60 	bl	8008a4e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800818e:	2000      	movs	r0, #0
 8008190:	f7ff fdfc 	bl	8007d8c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008194:	4828      	ldr	r0, [pc, #160]	; (8008238 <RadioSetRxConfig+0x304>)
 8008196:	f002 fa1f 	bl	800a5d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800819a:	4828      	ldr	r0, [pc, #160]	; (800823c <RadioSetRxConfig+0x308>)
 800819c:	f002 faee 	bl	800a77c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80081a0:	4a28      	ldr	r2, [pc, #160]	; (8008244 <RadioSetRxConfig+0x310>)
 80081a2:	f107 0314 	add.w	r3, r7, #20
 80081a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80081aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80081ae:	f107 0314 	add.w	r3, r7, #20
 80081b2:	4618      	mov	r0, r3
 80081b4:	f001 fdab 	bl	8009d0e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80081b8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80081bc:	f001 fdf6 	bl	8009dac <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80081c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80081c2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80081c6:	fb02 f303 	mul.w	r3, r2, r3
 80081ca:	461a      	mov	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d2:	4a17      	ldr	r2, [pc, #92]	; (8008230 <RadioSetRxConfig+0x2fc>)
 80081d4:	6093      	str	r3, [r2, #8]
            break;
 80081d6:	e0ad      	b.n	8008334 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80081d8:	2000      	movs	r0, #0
 80081da:	f001 ff5f 	bl	800a09c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80081de:	4b14      	ldr	r3, [pc, #80]	; (8008230 <RadioSetRxConfig+0x2fc>)
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	4b11      	ldr	r3, [pc, #68]	; (8008230 <RadioSetRxConfig+0x2fc>)
 80081ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80081f0:	4a15      	ldr	r2, [pc, #84]	; (8008248 <RadioSetRxConfig+0x314>)
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	4413      	add	r3, r2
 80081f6:	781a      	ldrb	r2, [r3, #0]
 80081f8:	4b0d      	ldr	r3, [pc, #52]	; (8008230 <RadioSetRxConfig+0x2fc>)
 80081fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80081fe:	4a0c      	ldr	r2, [pc, #48]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d105      	bne.n	8008218 <RadioSetRxConfig+0x2e4>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b0b      	cmp	r3, #11
 8008210:	d008      	beq.n	8008224 <RadioSetRxConfig+0x2f0>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b0c      	cmp	r3, #12
 8008216:	d005      	beq.n	8008224 <RadioSetRxConfig+0x2f0>
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d116      	bne.n	800824c <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b0c      	cmp	r3, #12
 8008222:	d113      	bne.n	800824c <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008224:	4b02      	ldr	r3, [pc, #8]	; (8008230 <RadioSetRxConfig+0x2fc>)
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800822c:	e012      	b.n	8008254 <RadioSetRxConfig+0x320>
 800822e:	bf00      	nop
 8008230:	200008b8 	.word	0x200008b8
 8008234:	2000000d 	.word	0x2000000d
 8008238:	200008f0 	.word	0x200008f0
 800823c:	200008c6 	.word	0x200008c6
 8008240:	0800c6d8 	.word	0x0800c6d8
 8008244:	0800c6e0 	.word	0x0800c6e0
 8008248:	0800c87c 	.word	0x0800c87c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800824c:	4b3b      	ldr	r3, [pc, #236]	; (800833c <RadioSetRxConfig+0x408>)
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008254:	4b39      	ldr	r3, [pc, #228]	; (800833c <RadioSetRxConfig+0x408>)
 8008256:	2201      	movs	r2, #1
 8008258:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800825a:	4b38      	ldr	r3, [pc, #224]	; (800833c <RadioSetRxConfig+0x408>)
 800825c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008260:	2b05      	cmp	r3, #5
 8008262:	d004      	beq.n	800826e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008264:	4b35      	ldr	r3, [pc, #212]	; (800833c <RadioSetRxConfig+0x408>)
 8008266:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800826a:	2b06      	cmp	r3, #6
 800826c:	d10a      	bne.n	8008284 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800826e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008270:	2b0b      	cmp	r3, #11
 8008272:	d803      	bhi.n	800827c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008274:	4b31      	ldr	r3, [pc, #196]	; (800833c <RadioSetRxConfig+0x408>)
 8008276:	220c      	movs	r2, #12
 8008278:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800827a:	e006      	b.n	800828a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800827c:	4a2f      	ldr	r2, [pc, #188]	; (800833c <RadioSetRxConfig+0x408>)
 800827e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008280:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008282:	e002      	b.n	800828a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008284:	4a2d      	ldr	r2, [pc, #180]	; (800833c <RadioSetRxConfig+0x408>)
 8008286:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008288:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800828a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800828e:	4b2b      	ldr	r3, [pc, #172]	; (800833c <RadioSetRxConfig+0x408>)
 8008290:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008292:	4b2b      	ldr	r3, [pc, #172]	; (8008340 <RadioSetRxConfig+0x40c>)
 8008294:	781a      	ldrb	r2, [r3, #0]
 8008296:	4b29      	ldr	r3, [pc, #164]	; (800833c <RadioSetRxConfig+0x408>)
 8008298:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800829a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800829e:	4b27      	ldr	r3, [pc, #156]	; (800833c <RadioSetRxConfig+0x408>)
 80082a0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80082a4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80082a8:	4b24      	ldr	r3, [pc, #144]	; (800833c <RadioSetRxConfig+0x408>)
 80082aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80082ae:	f000 fbce 	bl	8008a4e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80082b2:	2001      	movs	r0, #1
 80082b4:	f7ff fd6a 	bl	8007d8c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80082b8:	4822      	ldr	r0, [pc, #136]	; (8008344 <RadioSetRxConfig+0x410>)
 80082ba:	f002 f98d 	bl	800a5d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80082be:	4822      	ldr	r0, [pc, #136]	; (8008348 <RadioSetRxConfig+0x414>)
 80082c0:	f002 fa5c 	bl	800a77c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80082c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	4618      	mov	r0, r3
 80082ca:	f001 fef6 	bl	800a0ba <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80082ce:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80082d2:	f002 fbaf 	bl	800aa34 <SUBGRF_ReadRegister>
 80082d6:	4603      	mov	r3, r0
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	4619      	mov	r1, r3
 80082e0:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80082e4:	f002 fb92 	bl	800aa0c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80082e8:	4b14      	ldr	r3, [pc, #80]	; (800833c <RadioSetRxConfig+0x408>)
 80082ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d10d      	bne.n	800830e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80082f2:	f240 7036 	movw	r0, #1846	; 0x736
 80082f6:	f002 fb9d 	bl	800aa34 <SUBGRF_ReadRegister>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f023 0304 	bic.w	r3, r3, #4
 8008300:	b2db      	uxtb	r3, r3
 8008302:	4619      	mov	r1, r3
 8008304:	f240 7036 	movw	r0, #1846	; 0x736
 8008308:	f002 fb80 	bl	800aa0c <SUBGRF_WriteRegister>
 800830c:	e00c      	b.n	8008328 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800830e:	f240 7036 	movw	r0, #1846	; 0x736
 8008312:	f002 fb8f 	bl	800aa34 <SUBGRF_ReadRegister>
 8008316:	4603      	mov	r3, r0
 8008318:	f043 0304 	orr.w	r3, r3, #4
 800831c:	b2db      	uxtb	r3, r3
 800831e:	4619      	mov	r1, r3
 8008320:	f240 7036 	movw	r0, #1846	; 0x736
 8008324:	f002 fb72 	bl	800aa0c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8008328:	4b04      	ldr	r3, [pc, #16]	; (800833c <RadioSetRxConfig+0x408>)
 800832a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800832e:	609a      	str	r2, [r3, #8]
            break;
 8008330:	e000      	b.n	8008334 <RadioSetRxConfig+0x400>
            break;
 8008332:	bf00      	nop
    }
}
 8008334:	bf00      	nop
 8008336:	3728      	adds	r7, #40	; 0x28
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	200008b8 	.word	0x200008b8
 8008340:	2000000d 	.word	0x2000000d
 8008344:	200008f0 	.word	0x200008f0
 8008348:	200008c6 	.word	0x200008c6

0800834c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	60ba      	str	r2, [r7, #8]
 8008354:	607b      	str	r3, [r7, #4]
 8008356:	4603      	mov	r3, r0
 8008358:	73fb      	strb	r3, [r7, #15]
 800835a:	460b      	mov	r3, r1
 800835c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 800835e:	f002 fe3c 	bl	800afda <RFW_DeInit>
    switch( modem )
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	2b04      	cmp	r3, #4
 8008366:	f000 80c7 	beq.w	80084f8 <RadioSetTxConfig+0x1ac>
 800836a:	2b04      	cmp	r3, #4
 800836c:	f300 80d6 	bgt.w	800851c <RadioSetTxConfig+0x1d0>
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <RadioSetTxConfig+0x2e>
 8008374:	2b01      	cmp	r3, #1
 8008376:	d059      	beq.n	800842c <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008378:	e0d0      	b.n	800851c <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800837a:	4b77      	ldr	r3, [pc, #476]	; (8008558 <RadioSetTxConfig+0x20c>)
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008382:	4a75      	ldr	r2, [pc, #468]	; (8008558 <RadioSetTxConfig+0x20c>)
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008388:	4b73      	ldr	r3, [pc, #460]	; (8008558 <RadioSetTxConfig+0x20c>)
 800838a:	220b      	movs	r2, #11
 800838c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f002 fd55 	bl	800ae40 <SUBGRF_GetFskBandwidthRegValue>
 8008396:	4603      	mov	r3, r0
 8008398:	461a      	mov	r2, r3
 800839a:	4b6f      	ldr	r3, [pc, #444]	; (8008558 <RadioSetTxConfig+0x20c>)
 800839c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80083a0:	4a6d      	ldr	r2, [pc, #436]	; (8008558 <RadioSetTxConfig+0x20c>)
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80083a6:	4b6c      	ldr	r3, [pc, #432]	; (8008558 <RadioSetTxConfig+0x20c>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80083ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	4b69      	ldr	r3, [pc, #420]	; (8008558 <RadioSetTxConfig+0x20c>)
 80083b4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80083b6:	4b68      	ldr	r3, [pc, #416]	; (8008558 <RadioSetTxConfig+0x20c>)
 80083b8:	2204      	movs	r2, #4
 80083ba:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80083bc:	4b66      	ldr	r3, [pc, #408]	; (8008558 <RadioSetTxConfig+0x20c>)
 80083be:	2218      	movs	r2, #24
 80083c0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80083c2:	4b65      	ldr	r3, [pc, #404]	; (8008558 <RadioSetTxConfig+0x20c>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80083c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083cc:	f083 0301 	eor.w	r3, r3, #1
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	461a      	mov	r2, r3
 80083d4:	4b60      	ldr	r3, [pc, #384]	; (8008558 <RadioSetTxConfig+0x20c>)
 80083d6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80083d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80083e0:	4b5d      	ldr	r3, [pc, #372]	; (8008558 <RadioSetTxConfig+0x20c>)
 80083e2:	22f2      	movs	r2, #242	; 0xf2
 80083e4:	75da      	strb	r2, [r3, #23]
 80083e6:	e002      	b.n	80083ee <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80083e8:	4b5b      	ldr	r3, [pc, #364]	; (8008558 <RadioSetTxConfig+0x20c>)
 80083ea:	2201      	movs	r2, #1
 80083ec:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80083ee:	4b5a      	ldr	r3, [pc, #360]	; (8008558 <RadioSetTxConfig+0x20c>)
 80083f0:	2201      	movs	r2, #1
 80083f2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80083f4:	f000 fb2b 	bl	8008a4e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80083f8:	2000      	movs	r0, #0
 80083fa:	f7ff fcc7 	bl	8007d8c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80083fe:	4857      	ldr	r0, [pc, #348]	; (800855c <RadioSetTxConfig+0x210>)
 8008400:	f002 f8ea 	bl	800a5d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008404:	4856      	ldr	r0, [pc, #344]	; (8008560 <RadioSetTxConfig+0x214>)
 8008406:	f002 f9b9 	bl	800a77c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800840a:	4a56      	ldr	r2, [pc, #344]	; (8008564 <RadioSetTxConfig+0x218>)
 800840c:	f107 0310 	add.w	r3, r7, #16
 8008410:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008414:	e883 0003 	stmia.w	r3, {r0, r1}
 8008418:	f107 0310 	add.w	r3, r7, #16
 800841c:	4618      	mov	r0, r3
 800841e:	f001 fc76 	bl	8009d0e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008422:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008426:	f001 fcc1 	bl	8009dac <SUBGRF_SetWhiteningSeed>
            break;
 800842a:	e078      	b.n	800851e <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800842c:	4b4a      	ldr	r3, [pc, #296]	; (8008558 <RadioSetTxConfig+0x20c>)
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	b2da      	uxtb	r2, r3
 8008438:	4b47      	ldr	r3, [pc, #284]	; (8008558 <RadioSetTxConfig+0x20c>)
 800843a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800843e:	4a4a      	ldr	r2, [pc, #296]	; (8008568 <RadioSetTxConfig+0x21c>)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4413      	add	r3, r2
 8008444:	781a      	ldrb	r2, [r3, #0]
 8008446:	4b44      	ldr	r3, [pc, #272]	; (8008558 <RadioSetTxConfig+0x20c>)
 8008448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800844c:	4a42      	ldr	r2, [pc, #264]	; (8008558 <RadioSetTxConfig+0x20c>)
 800844e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008452:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d105      	bne.n	8008468 <RadioSetTxConfig+0x11c>
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	2b0b      	cmp	r3, #11
 8008460:	d008      	beq.n	8008474 <RadioSetTxConfig+0x128>
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	2b0c      	cmp	r3, #12
 8008466:	d005      	beq.n	8008474 <RadioSetTxConfig+0x128>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d107      	bne.n	800847e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	2b0c      	cmp	r3, #12
 8008472:	d104      	bne.n	800847e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008474:	4b38      	ldr	r3, [pc, #224]	; (8008558 <RadioSetTxConfig+0x20c>)
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800847c:	e003      	b.n	8008486 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800847e:	4b36      	ldr	r3, [pc, #216]	; (8008558 <RadioSetTxConfig+0x20c>)
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008486:	4b34      	ldr	r3, [pc, #208]	; (8008558 <RadioSetTxConfig+0x20c>)
 8008488:	2201      	movs	r2, #1
 800848a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800848c:	4b32      	ldr	r3, [pc, #200]	; (8008558 <RadioSetTxConfig+0x20c>)
 800848e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008492:	2b05      	cmp	r3, #5
 8008494:	d004      	beq.n	80084a0 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008496:	4b30      	ldr	r3, [pc, #192]	; (8008558 <RadioSetTxConfig+0x20c>)
 8008498:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800849c:	2b06      	cmp	r3, #6
 800849e:	d10a      	bne.n	80084b6 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80084a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084a2:	2b0b      	cmp	r3, #11
 80084a4:	d803      	bhi.n	80084ae <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80084a6:	4b2c      	ldr	r3, [pc, #176]	; (8008558 <RadioSetTxConfig+0x20c>)
 80084a8:	220c      	movs	r2, #12
 80084aa:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80084ac:	e006      	b.n	80084bc <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80084ae:	4a2a      	ldr	r2, [pc, #168]	; (8008558 <RadioSetTxConfig+0x20c>)
 80084b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084b2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80084b4:	e002      	b.n	80084bc <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80084b6:	4a28      	ldr	r2, [pc, #160]	; (8008558 <RadioSetTxConfig+0x20c>)
 80084b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084ba:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80084bc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80084c0:	4b25      	ldr	r3, [pc, #148]	; (8008558 <RadioSetTxConfig+0x20c>)
 80084c2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80084c4:	4b29      	ldr	r3, [pc, #164]	; (800856c <RadioSetTxConfig+0x220>)
 80084c6:	781a      	ldrb	r2, [r3, #0]
 80084c8:	4b23      	ldr	r3, [pc, #140]	; (8008558 <RadioSetTxConfig+0x20c>)
 80084ca:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80084cc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80084d0:	4b21      	ldr	r3, [pc, #132]	; (8008558 <RadioSetTxConfig+0x20c>)
 80084d2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80084d6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80084da:	4b1f      	ldr	r3, [pc, #124]	; (8008558 <RadioSetTxConfig+0x20c>)
 80084dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80084e0:	f000 fab5 	bl	8008a4e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80084e4:	2001      	movs	r0, #1
 80084e6:	f7ff fc51 	bl	8007d8c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80084ea:	481c      	ldr	r0, [pc, #112]	; (800855c <RadioSetTxConfig+0x210>)
 80084ec:	f002 f874 	bl	800a5d8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80084f0:	481b      	ldr	r0, [pc, #108]	; (8008560 <RadioSetTxConfig+0x214>)
 80084f2:	f002 f943 	bl	800a77c <SUBGRF_SetPacketParams>
            break;
 80084f6:	e012      	b.n	800851e <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80084f8:	2004      	movs	r0, #4
 80084fa:	f7ff fc47 	bl	8007d8c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80084fe:	4b16      	ldr	r3, [pc, #88]	; (8008558 <RadioSetTxConfig+0x20c>)
 8008500:	2202      	movs	r2, #2
 8008502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8008506:	4a14      	ldr	r2, [pc, #80]	; (8008558 <RadioSetTxConfig+0x20c>)
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800850c:	4b12      	ldr	r3, [pc, #72]	; (8008558 <RadioSetTxConfig+0x20c>)
 800850e:	2216      	movs	r2, #22
 8008510:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008514:	4811      	ldr	r0, [pc, #68]	; (800855c <RadioSetTxConfig+0x210>)
 8008516:	f002 f85f 	bl	800a5d8 <SUBGRF_SetModulationParams>
            break;
 800851a:	e000      	b.n	800851e <RadioSetTxConfig+0x1d2>
            break;
 800851c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800851e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008522:	4618      	mov	r0, r3
 8008524:	f002 fb8e 	bl	800ac44 <SUBGRF_SetRfTxPower>
 8008528:	4603      	mov	r3, r0
 800852a:	461a      	mov	r2, r3
 800852c:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <RadioSetTxConfig+0x20c>)
 800852e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008532:	210e      	movs	r1, #14
 8008534:	f640 101f 	movw	r0, #2335	; 0x91f
 8008538:	f002 fa68 	bl	800aa0c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800853c:	4b06      	ldr	r3, [pc, #24]	; (8008558 <RadioSetTxConfig+0x20c>)
 800853e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008542:	4618      	mov	r0, r3
 8008544:	f002 fd5d 	bl	800b002 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008548:	4a03      	ldr	r2, [pc, #12]	; (8008558 <RadioSetTxConfig+0x20c>)
 800854a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800854c:	6053      	str	r3, [r2, #4]
}
 800854e:	bf00      	nop
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	200008b8 	.word	0x200008b8
 800855c:	200008f0 	.word	0x200008f0
 8008560:	200008c6 	.word	0x200008c6
 8008564:	0800c6e0 	.word	0x0800c6e0
 8008568:	0800c87c 	.word	0x0800c87c
 800856c:	2000000d 	.word	0x2000000d

08008570 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
    return true;
 8008578:	2301      	movs	r3, #1
}
 800857a:	4618      	mov	r0, r3
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	bc80      	pop	{r7}
 8008582:	4770      	bx	lr

08008584 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8008592:	79fb      	ldrb	r3, [r7, #7]
 8008594:	2b0a      	cmp	r3, #10
 8008596:	d83e      	bhi.n	8008616 <RadioGetLoRaBandwidthInHz+0x92>
 8008598:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <RadioGetLoRaBandwidthInHz+0x1c>)
 800859a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859e:	bf00      	nop
 80085a0:	080085cd 	.word	0x080085cd
 80085a4:	080085dd 	.word	0x080085dd
 80085a8:	080085ed 	.word	0x080085ed
 80085ac:	080085fd 	.word	0x080085fd
 80085b0:	08008605 	.word	0x08008605
 80085b4:	0800860b 	.word	0x0800860b
 80085b8:	08008611 	.word	0x08008611
 80085bc:	08008617 	.word	0x08008617
 80085c0:	080085d5 	.word	0x080085d5
 80085c4:	080085e5 	.word	0x080085e5
 80085c8:	080085f5 	.word	0x080085f5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80085cc:	f641 6384 	movw	r3, #7812	; 0x1e84
 80085d0:	60fb      	str	r3, [r7, #12]
        break;
 80085d2:	e020      	b.n	8008616 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80085d4:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80085d8:	60fb      	str	r3, [r7, #12]
        break;
 80085da:	e01c      	b.n	8008616 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80085dc:	f643 5309 	movw	r3, #15625	; 0x3d09
 80085e0:	60fb      	str	r3, [r7, #12]
        break;
 80085e2:	e018      	b.n	8008616 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80085e4:	f245 1361 	movw	r3, #20833	; 0x5161
 80085e8:	60fb      	str	r3, [r7, #12]
        break;
 80085ea:	e014      	b.n	8008616 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80085ec:	f647 2312 	movw	r3, #31250	; 0x7a12
 80085f0:	60fb      	str	r3, [r7, #12]
        break;
 80085f2:	e010      	b.n	8008616 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80085f4:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80085f8:	60fb      	str	r3, [r7, #12]
        break;
 80085fa:	e00c      	b.n	8008616 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80085fc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008600:	60fb      	str	r3, [r7, #12]
        break;
 8008602:	e008      	b.n	8008616 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8008604:	4b07      	ldr	r3, [pc, #28]	; (8008624 <RadioGetLoRaBandwidthInHz+0xa0>)
 8008606:	60fb      	str	r3, [r7, #12]
        break;
 8008608:	e005      	b.n	8008616 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800860a:	4b07      	ldr	r3, [pc, #28]	; (8008628 <RadioGetLoRaBandwidthInHz+0xa4>)
 800860c:	60fb      	str	r3, [r7, #12]
        break;
 800860e:	e002      	b.n	8008616 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8008610:	4b06      	ldr	r3, [pc, #24]	; (800862c <RadioGetLoRaBandwidthInHz+0xa8>)
 8008612:	60fb      	str	r3, [r7, #12]
        break;
 8008614:	bf00      	nop
    }

    return bandwidthInHz;
 8008616:	68fb      	ldr	r3, [r7, #12]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	bc80      	pop	{r7}
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	0001e848 	.word	0x0001e848
 8008628:	0003d090 	.word	0x0003d090
 800862c:	0007a120 	.word	0x0007a120

08008630 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	4608      	mov	r0, r1
 800863a:	4611      	mov	r1, r2
 800863c:	461a      	mov	r2, r3
 800863e:	4603      	mov	r3, r0
 8008640:	70fb      	strb	r3, [r7, #3]
 8008642:	460b      	mov	r3, r1
 8008644:	803b      	strh	r3, [r7, #0]
 8008646:	4613      	mov	r3, r2
 8008648:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 800864a:	883b      	ldrh	r3, [r7, #0]
 800864c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800864e:	78ba      	ldrb	r2, [r7, #2]
 8008650:	f082 0201 	eor.w	r2, r2, #1
 8008654:	b2d2      	uxtb	r2, r2
 8008656:	2a00      	cmp	r2, #0
 8008658:	d001      	beq.n	800865e <RadioGetGfskTimeOnAirNumerator+0x2e>
 800865a:	2208      	movs	r2, #8
 800865c:	e000      	b.n	8008660 <RadioGetGfskTimeOnAirNumerator+0x30>
 800865e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008660:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008662:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008666:	7c3b      	ldrb	r3, [r7, #16]
 8008668:	7d39      	ldrb	r1, [r7, #20]
 800866a:	2900      	cmp	r1, #0
 800866c:	d001      	beq.n	8008672 <RadioGetGfskTimeOnAirNumerator+0x42>
 800866e:	2102      	movs	r1, #2
 8008670:	e000      	b.n	8008674 <RadioGetGfskTimeOnAirNumerator+0x44>
 8008672:	2100      	movs	r1, #0
 8008674:	440b      	add	r3, r1
 8008676:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008678:	4413      	add	r3, r2
}
 800867a:	4618      	mov	r0, r3
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	bc80      	pop	{r7}
 8008682:	4770      	bx	lr

08008684 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008684:	b480      	push	{r7}
 8008686:	b08b      	sub	sp, #44	; 0x2c
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4611      	mov	r1, r2
 8008690:	461a      	mov	r2, r3
 8008692:	460b      	mov	r3, r1
 8008694:	71fb      	strb	r3, [r7, #7]
 8008696:	4613      	mov	r3, r2
 8008698:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	3304      	adds	r3, #4
 800869e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80086a0:	2300      	movs	r3, #0
 80086a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b05      	cmp	r3, #5
 80086aa:	d002      	beq.n	80086b2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b06      	cmp	r3, #6
 80086b0:	d104      	bne.n	80086bc <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80086b2:	88bb      	ldrh	r3, [r7, #4]
 80086b4:	2b0b      	cmp	r3, #11
 80086b6:	d801      	bhi.n	80086bc <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80086b8:	230c      	movs	r3, #12
 80086ba:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d105      	bne.n	80086ce <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2b0b      	cmp	r3, #11
 80086c6:	d008      	beq.n	80086da <RadioGetLoRaTimeOnAirNumerator+0x56>
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2b0c      	cmp	r3, #12
 80086cc:	d005      	beq.n	80086da <RadioGetLoRaTimeOnAirNumerator+0x56>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d105      	bne.n	80086e0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b0c      	cmp	r3, #12
 80086d8:	d102      	bne.n	80086e0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80086da:	2301      	movs	r3, #1
 80086dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80086e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80086e4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80086e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086ea:	2a00      	cmp	r2, #0
 80086ec:	d001      	beq.n	80086f2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80086ee:	2210      	movs	r2, #16
 80086f0:	e000      	b.n	80086f4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80086f2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80086f4:	4413      	add	r3, r2
 80086f6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80086fc:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80086fe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008702:	2a00      	cmp	r2, #0
 8008704:	d001      	beq.n	800870a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8008706:	2200      	movs	r2, #0
 8008708:	e000      	b.n	800870c <RadioGetLoRaTimeOnAirNumerator+0x88>
 800870a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800870c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800870e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2b06      	cmp	r3, #6
 8008714:	d803      	bhi.n	800871e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	623b      	str	r3, [r7, #32]
 800871c:	e00e      	b.n	800873c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	3308      	adds	r3, #8
 8008722:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8008724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008728:	2b00      	cmp	r3, #0
 800872a:	d004      	beq.n	8008736 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	3b02      	subs	r3, #2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	623b      	str	r3, [r7, #32]
 8008734:	e002      	b.n	800873c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	2b00      	cmp	r3, #0
 8008740:	da01      	bge.n	8008746 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	4413      	add	r3, r2
 800874c:	1e5a      	subs	r2, r3, #1
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	fb92 f3f3 	sdiv	r3, r2, r3
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	fb03 f202 	mul.w	r2, r3, r2
 800875a:	88bb      	ldrh	r3, [r7, #4]
 800875c:	4413      	add	r3, r2
    int32_t intermediate =
 800875e:	330c      	adds	r3, #12
 8008760:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	2b06      	cmp	r3, #6
 8008766:	d802      	bhi.n	800876e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	3302      	adds	r3, #2
 800876c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	3b02      	subs	r3, #2
 8008778:	fa02 f303 	lsl.w	r3, r2, r3
}
 800877c:	4618      	mov	r0, r3
 800877e:	372c      	adds	r7, #44	; 0x2c
 8008780:	46bd      	mov	sp, r7
 8008782:	bc80      	pop	{r7}
 8008784:	4770      	bx	lr
	...

08008788 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08a      	sub	sp, #40	; 0x28
 800878c:	af04      	add	r7, sp, #16
 800878e:	60b9      	str	r1, [r7, #8]
 8008790:	607a      	str	r2, [r7, #4]
 8008792:	461a      	mov	r2, r3
 8008794:	4603      	mov	r3, r0
 8008796:	73fb      	strb	r3, [r7, #15]
 8008798:	4613      	mov	r3, r2
 800879a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80087a0:	2301      	movs	r3, #1
 80087a2:	613b      	str	r3, [r7, #16]

    switch( modem )
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <RadioTimeOnAir+0x28>
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d017      	beq.n	80087de <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80087ae:	e035      	b.n	800881c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80087b0:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80087b4:	8c3a      	ldrh	r2, [r7, #32]
 80087b6:	7bb9      	ldrb	r1, [r7, #14]
 80087b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087bc:	9301      	str	r3, [sp, #4]
 80087be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	4603      	mov	r3, r0
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7ff ff32 	bl	8008630 <RadioGetGfskTimeOnAirNumerator>
 80087cc:	4603      	mov	r3, r0
 80087ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087d2:	fb02 f303 	mul.w	r3, r2, r3
 80087d6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	613b      	str	r3, [r7, #16]
        break;
 80087dc:	e01e      	b.n	800881c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80087de:	8c39      	ldrh	r1, [r7, #32]
 80087e0:	7bba      	ldrb	r2, [r7, #14]
 80087e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087e6:	9302      	str	r3, [sp, #8]
 80087e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	460b      	mov	r3, r1
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	68b8      	ldr	r0, [r7, #8]
 80087fa:	f7ff ff43 	bl	8008684 <RadioGetLoRaTimeOnAirNumerator>
 80087fe:	4603      	mov	r3, r0
 8008800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008804:	fb02 f303 	mul.w	r3, r2, r3
 8008808:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800880a:	4a0a      	ldr	r2, [pc, #40]	; (8008834 <RadioTimeOnAir+0xac>)
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	4413      	add	r3, r2
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	4618      	mov	r0, r3
 8008814:	f7ff feb6 	bl	8008584 <RadioGetLoRaBandwidthInHz>
 8008818:	6138      	str	r0, [r7, #16]
        break;
 800881a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	4413      	add	r3, r2
 8008822:	1e5a      	subs	r2, r3, #1
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	0800c87c 	.word	0x0800c87c

08008838 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8008844:	2300      	movs	r3, #0
 8008846:	2200      	movs	r2, #0
 8008848:	f240 2101 	movw	r1, #513	; 0x201
 800884c:	f240 2001 	movw	r0, #513	; 0x201
 8008850:	f001 fd2c 	bl	800a2ac <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008854:	4b70      	ldr	r3, [pc, #448]	; (8008a18 <RadioSend+0x1e0>)
 8008856:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800885a:	2101      	movs	r1, #1
 800885c:	4618      	mov	r0, r3
 800885e:	f002 f9c9 	bl	800abf4 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8008862:	4b6d      	ldr	r3, [pc, #436]	; (8008a18 <RadioSend+0x1e0>)
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d112      	bne.n	8008890 <RadioSend+0x58>
 800886a:	4b6b      	ldr	r3, [pc, #428]	; (8008a18 <RadioSend+0x1e0>)
 800886c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008870:	2b06      	cmp	r3, #6
 8008872:	d10d      	bne.n	8008890 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008874:	f640 0089 	movw	r0, #2185	; 0x889
 8008878:	f002 f8dc 	bl	800aa34 <SUBGRF_ReadRegister>
 800887c:	4603      	mov	r3, r0
 800887e:	f023 0304 	bic.w	r3, r3, #4
 8008882:	b2db      	uxtb	r3, r3
 8008884:	4619      	mov	r1, r3
 8008886:	f640 0089 	movw	r0, #2185	; 0x889
 800888a:	f002 f8bf 	bl	800aa0c <SUBGRF_WriteRegister>
 800888e:	e00c      	b.n	80088aa <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008890:	f640 0089 	movw	r0, #2185	; 0x889
 8008894:	f002 f8ce 	bl	800aa34 <SUBGRF_ReadRegister>
 8008898:	4603      	mov	r3, r0
 800889a:	f043 0304 	orr.w	r3, r3, #4
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	4619      	mov	r1, r3
 80088a2:	f640 0089 	movw	r0, #2185	; 0x889
 80088a6:	f002 f8b1 	bl	800aa0c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 80088aa:	4b5b      	ldr	r3, [pc, #364]	; (8008a18 <RadioSend+0x1e0>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	f200 80a2 	bhi.w	80089f8 <RadioSend+0x1c0>
 80088b4:	a201      	add	r2, pc, #4	; (adr r2, 80088bc <RadioSend+0x84>)
 80088b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ba:	bf00      	nop
 80088bc:	080088eb 	.word	0x080088eb
 80088c0:	080088d1 	.word	0x080088d1
 80088c4:	080088eb 	.word	0x080088eb
 80088c8:	08008941 	.word	0x08008941
 80088cc:	08008961 	.word	0x08008961
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80088d0:	4a51      	ldr	r2, [pc, #324]	; (8008a18 <RadioSend+0x1e0>)
 80088d2:	78fb      	ldrb	r3, [r7, #3]
 80088d4:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80088d6:	4851      	ldr	r0, [pc, #324]	; (8008a1c <RadioSend+0x1e4>)
 80088d8:	f001 ff50 	bl	800a77c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	2200      	movs	r2, #0
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f001 fa00 	bl	8009ce8 <SUBGRF_SendPayload>
            break;
 80088e8:	e087      	b.n	80089fa <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80088ea:	f002 fb7c 	bl	800afe6 <RFW_Is_Init>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d118      	bne.n	8008926 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80088f4:	f107 020d 	add.w	r2, r7, #13
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f002 fb8a 	bl	800b016 <RFW_TransmitInit>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10c      	bne.n	8008922 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8008908:	7b7a      	ldrb	r2, [r7, #13]
 800890a:	4b43      	ldr	r3, [pc, #268]	; (8008a18 <RadioSend+0x1e0>)
 800890c:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800890e:	4843      	ldr	r0, [pc, #268]	; (8008a1c <RadioSend+0x1e4>)
 8008910:	f001 ff34 	bl	800a77c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8008914:	7b7b      	ldrb	r3, [r7, #13]
 8008916:	2200      	movs	r2, #0
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f001 f9e4 	bl	8009ce8 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8008920:	e06b      	b.n	80089fa <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8008922:	2303      	movs	r3, #3
 8008924:	e073      	b.n	8008a0e <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8008926:	4a3c      	ldr	r2, [pc, #240]	; (8008a18 <RadioSend+0x1e0>)
 8008928:	78fb      	ldrb	r3, [r7, #3]
 800892a:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800892c:	483b      	ldr	r0, [pc, #236]	; (8008a1c <RadioSend+0x1e4>)
 800892e:	f001 ff25 	bl	800a77c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8008932:	78fb      	ldrb	r3, [r7, #3]
 8008934:	2200      	movs	r2, #0
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f001 f9d5 	bl	8009ce8 <SUBGRF_SendPayload>
            break;
 800893e:	e05c      	b.n	80089fa <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008940:	4b35      	ldr	r3, [pc, #212]	; (8008a18 <RadioSend+0x1e0>)
 8008942:	2202      	movs	r2, #2
 8008944:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8008946:	4a34      	ldr	r2, [pc, #208]	; (8008a18 <RadioSend+0x1e0>)
 8008948:	78fb      	ldrb	r3, [r7, #3]
 800894a:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800894c:	4833      	ldr	r0, [pc, #204]	; (8008a1c <RadioSend+0x1e4>)
 800894e:	f001 ff15 	bl	800a77c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	2200      	movs	r2, #0
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f001 f9c5 	bl	8009ce8 <SUBGRF_SendPayload>
            break;
 800895e:	e04c      	b.n	80089fa <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008960:	78fb      	ldrb	r3, [r7, #3]
 8008962:	461a      	mov	r2, r3
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	482e      	ldr	r0, [pc, #184]	; (8008a20 <RadioSend+0x1e8>)
 8008968:	f000 fc98 	bl	800929c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800896c:	4b2a      	ldr	r3, [pc, #168]	; (8008a18 <RadioSend+0x1e0>)
 800896e:	2202      	movs	r2, #2
 8008970:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008972:	78fb      	ldrb	r3, [r7, #3]
 8008974:	3301      	adds	r3, #1
 8008976:	b2da      	uxtb	r2, r3
 8008978:	4b27      	ldr	r3, [pc, #156]	; (8008a18 <RadioSend+0x1e0>)
 800897a:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800897c:	4827      	ldr	r0, [pc, #156]	; (8008a1c <RadioSend+0x1e4>)
 800897e:	f001 fefd 	bl	800a77c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008982:	2100      	movs	r1, #0
 8008984:	20f1      	movs	r0, #241	; 0xf1
 8008986:	f000 f964 	bl	8008c52 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800898a:	2100      	movs	r1, #0
 800898c:	20f0      	movs	r0, #240	; 0xf0
 800898e:	f000 f960 	bl	8008c52 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8008992:	4b21      	ldr	r3, [pc, #132]	; (8008a18 <RadioSend+0x1e0>)
 8008994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008996:	2b64      	cmp	r3, #100	; 0x64
 8008998:	d108      	bne.n	80089ac <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800899a:	2170      	movs	r1, #112	; 0x70
 800899c:	20f3      	movs	r0, #243	; 0xf3
 800899e:	f000 f958 	bl	8008c52 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80089a2:	211d      	movs	r1, #29
 80089a4:	20f2      	movs	r0, #242	; 0xf2
 80089a6:	f000 f954 	bl	8008c52 <RadioWrite>
 80089aa:	e007      	b.n	80089bc <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80089ac:	21e1      	movs	r1, #225	; 0xe1
 80089ae:	20f3      	movs	r0, #243	; 0xf3
 80089b0:	f000 f94f 	bl	8008c52 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80089b4:	2104      	movs	r1, #4
 80089b6:	20f2      	movs	r0, #242	; 0xf2
 80089b8:	f000 f94b 	bl	8008c52 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80089bc:	78fb      	ldrb	r3, [r7, #3]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	3302      	adds	r3, #2
 80089c6:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80089c8:	89fb      	ldrh	r3, [r7, #14]
 80089ca:	0a1b      	lsrs	r3, r3, #8
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	4619      	mov	r1, r3
 80089d2:	20f4      	movs	r0, #244	; 0xf4
 80089d4:	f000 f93d 	bl	8008c52 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80089d8:	89fb      	ldrh	r3, [r7, #14]
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	4619      	mov	r1, r3
 80089de:	20f5      	movs	r0, #245	; 0xf5
 80089e0:	f000 f937 	bl	8008c52 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 80089e4:	78fb      	ldrb	r3, [r7, #3]
 80089e6:	3301      	adds	r3, #1
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80089ee:	4619      	mov	r1, r3
 80089f0:	480b      	ldr	r0, [pc, #44]	; (8008a20 <RadioSend+0x1e8>)
 80089f2:	f001 f979 	bl	8009ce8 <SUBGRF_SendPayload>
            break;
 80089f6:	e000      	b.n	80089fa <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80089f8:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80089fa:	4b07      	ldr	r3, [pc, #28]	; (8008a18 <RadioSend+0x1e0>)
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	4619      	mov	r1, r3
 8008a00:	4808      	ldr	r0, [pc, #32]	; (8008a24 <RadioSend+0x1ec>)
 8008a02:	f002 fdcf 	bl	800b5a4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8008a06:	4807      	ldr	r0, [pc, #28]	; (8008a24 <RadioSend+0x1ec>)
 8008a08:	f002 fcee 	bl	800b3e8 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	200008b8 	.word	0x200008b8
 8008a1c:	200008c6 	.word	0x200008c6
 8008a20:	200007b4 	.word	0x200007b4
 8008a24:	20000914 	.word	0x20000914

08008a28 <RadioSleep>:

static void RadioSleep( void )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008a2e:	2300      	movs	r3, #0
 8008a30:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008a32:	793b      	ldrb	r3, [r7, #4]
 8008a34:	f043 0304 	orr.w	r3, r3, #4
 8008a38:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8008a3a:	7938      	ldrb	r0, [r7, #4]
 8008a3c:	f001 fa30 	bl	8009ea0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008a40:	2002      	movs	r0, #2
 8008a42:	f7f9 ff1f 	bl	8002884 <HAL_Delay>
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <RadioStandby>:

static void RadioStandby( void )
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008a52:	2000      	movs	r0, #0
 8008a54:	f001 fa56 	bl	8009f04 <SUBGRF_SetStandby>
}
 8008a58:	bf00      	nop
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008a64:	f002 fabf 	bl	800afe6 <RFW_Is_Init>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d102      	bne.n	8008a74 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008a6e:	f002 fae2 	bl	800b036 <RFW_ReceiveInit>
 8008a72:	e007      	b.n	8008a84 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008a74:	2300      	movs	r3, #0
 8008a76:	2200      	movs	r2, #0
 8008a78:	f240 2162 	movw	r1, #610	; 0x262
 8008a7c:	f240 2062 	movw	r0, #610	; 0x262
 8008a80:	f001 fc14 	bl	800a2ac <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d006      	beq.n	8008a98 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008a8a:	6879      	ldr	r1, [r7, #4]
 8008a8c:	4811      	ldr	r0, [pc, #68]	; (8008ad4 <RadioRx+0x78>)
 8008a8e:	f002 fd89 	bl	800b5a4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008a92:	4810      	ldr	r0, [pc, #64]	; (8008ad4 <RadioRx+0x78>)
 8008a94:	f002 fca8 	bl	800b3e8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008a98:	4b0f      	ldr	r3, [pc, #60]	; (8008ad8 <RadioRx+0x7c>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008a9e:	4b0e      	ldr	r3, [pc, #56]	; (8008ad8 <RadioRx+0x7c>)
 8008aa0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f002 f8a4 	bl	800abf4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008aac:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <RadioRx+0x7c>)
 8008aae:	785b      	ldrb	r3, [r3, #1]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d004      	beq.n	8008abe <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008ab4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008ab8:	f001 fa60 	bl	8009f7c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008abc:	e005      	b.n	8008aca <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008abe:	4b06      	ldr	r3, [pc, #24]	; (8008ad8 <RadioRx+0x7c>)
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	019b      	lsls	r3, r3, #6
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f001 fa59 	bl	8009f7c <SUBGRF_SetRx>
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	2000092c 	.word	0x2000092c
 8008ad8:	200008b8 	.word	0x200008b8

08008adc <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8008ae4:	f002 fa7f 	bl	800afe6 <RFW_Is_Init>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d102      	bne.n	8008af4 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008aee:	f002 faa2 	bl	800b036 <RFW_ReceiveInit>
 8008af2:	e007      	b.n	8008b04 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008af4:	2300      	movs	r3, #0
 8008af6:	2200      	movs	r2, #0
 8008af8:	f240 2162 	movw	r1, #610	; 0x262
 8008afc:	f240 2062 	movw	r0, #610	; 0x262
 8008b00:	f001 fbd4 	bl	800a2ac <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d006      	beq.n	8008b18 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	4811      	ldr	r0, [pc, #68]	; (8008b54 <RadioRxBoosted+0x78>)
 8008b0e:	f002 fd49 	bl	800b5a4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008b12:	4810      	ldr	r0, [pc, #64]	; (8008b54 <RadioRxBoosted+0x78>)
 8008b14:	f002 fc68 	bl	800b3e8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008b18:	4b0f      	ldr	r3, [pc, #60]	; (8008b58 <RadioRxBoosted+0x7c>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008b1e:	4b0e      	ldr	r3, [pc, #56]	; (8008b58 <RadioRxBoosted+0x7c>)
 8008b20:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008b24:	2100      	movs	r1, #0
 8008b26:	4618      	mov	r0, r3
 8008b28:	f002 f864 	bl	800abf4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008b2c:	4b0a      	ldr	r3, [pc, #40]	; (8008b58 <RadioRxBoosted+0x7c>)
 8008b2e:	785b      	ldrb	r3, [r3, #1]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d004      	beq.n	8008b3e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008b34:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008b38:	f001 fa40 	bl	8009fbc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008b3c:	e005      	b.n	8008b4a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008b3e:	4b06      	ldr	r3, [pc, #24]	; (8008b58 <RadioRxBoosted+0x7c>)
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	019b      	lsls	r3, r3, #6
 8008b44:	4618      	mov	r0, r3
 8008b46:	f001 fa39 	bl	8009fbc <SUBGRF_SetRxBoosted>
}
 8008b4a:	bf00      	nop
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	2000092c 	.word	0x2000092c
 8008b58:	200008b8 	.word	0x200008b8

08008b5c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	005a      	lsls	r2, r3, #1
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	4a0c      	ldr	r2, [pc, #48]	; (8008ba0 <RadioSetRxDutyCycle+0x44>)
 8008b70:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008b72:	2300      	movs	r3, #0
 8008b74:	2200      	movs	r2, #0
 8008b76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008b7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008b7e:	f001 fb95 	bl	800a2ac <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008b82:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <RadioSetRxDutyCycle+0x44>)
 8008b84:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008b88:	2100      	movs	r1, #0
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f002 f832 	bl	800abf4 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f001 fa36 	bl	800a004 <SUBGRF_SetRxDutyCycle>
}
 8008b98:	bf00      	nop
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	200008b8 	.word	0x200008b8

08008ba4 <RadioStartCad>:

static void RadioStartCad( void )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008ba8:	4b09      	ldr	r3, [pc, #36]	; (8008bd0 <RadioStartCad+0x2c>)
 8008baa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008bae:	2100      	movs	r1, #0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f002 f81f 	bl	800abf4 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008bbe:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8008bc2:	f001 fb73 	bl	800a2ac <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8008bc6:	f001 fa49 	bl	800a05c <SUBGRF_SetCad>
}
 8008bca:	bf00      	nop
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	200008b8 	.word	0x200008b8

08008bd4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	70fb      	strb	r3, [r7, #3]
 8008be0:	4613      	mov	r3, r2
 8008be2:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8008be4:	883b      	ldrh	r3, [r7, #0]
 8008be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bea:	fb02 f303 	mul.w	r3, r2, r3
 8008bee:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 fbb7 	bl	800a364 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8008bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f002 f822 	bl	800ac44 <SUBGRF_SetRfTxPower>
 8008c00:	4603      	mov	r3, r0
 8008c02:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008c04:	210e      	movs	r1, #14
 8008c06:	f640 101f 	movw	r0, #2335	; 0x91f
 8008c0a:	f001 feff 	bl	800aa0c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008c0e:	7afb      	ldrb	r3, [r7, #11]
 8008c10:	2101      	movs	r1, #1
 8008c12:	4618      	mov	r0, r3
 8008c14:	f001 ffee 	bl	800abf4 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008c18:	f001 fa2e 	bl	800a078 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008c1c:	68f9      	ldr	r1, [r7, #12]
 8008c1e:	4805      	ldr	r0, [pc, #20]	; (8008c34 <RadioSetTxContinuousWave+0x60>)
 8008c20:	f002 fcc0 	bl	800b5a4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008c24:	4803      	ldr	r0, [pc, #12]	; (8008c34 <RadioSetTxContinuousWave+0x60>)
 8008c26:	f002 fbdf 	bl	800b3e8 <UTIL_TIMER_Start>
}
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20000914 	.word	0x20000914

08008c38 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8008c42:	f001 fe50 	bl	800a8e6 <SUBGRF_GetRssiInst>
 8008c46:	4603      	mov	r3, r0
 8008c48:	b21b      	sxth	r3, r3
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b082      	sub	sp, #8
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	4603      	mov	r3, r0
 8008c5a:	460a      	mov	r2, r1
 8008c5c:	80fb      	strh	r3, [r7, #6]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008c62:	797a      	ldrb	r2, [r7, #5]
 8008c64:	88fb      	ldrh	r3, [r7, #6]
 8008c66:	4611      	mov	r1, r2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f001 fecf 	bl	800aa0c <SUBGRF_WriteRegister>
}
 8008c6e:	bf00      	nop
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008c80:	88fb      	ldrh	r3, [r7, #6]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 fed6 	bl	800aa34 <SUBGRF_ReadRegister>
 8008c88:	4603      	mov	r3, r0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b082      	sub	sp, #8
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	4603      	mov	r3, r0
 8008c9a:	6039      	str	r1, [r7, #0]
 8008c9c:	80fb      	strh	r3, [r7, #6]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8008ca2:	797b      	ldrb	r3, [r7, #5]
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	88fb      	ldrh	r3, [r7, #6]
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f001 fed6 	bl	800aa5c <SUBGRF_WriteRegisters>
}
 8008cb0:	bf00      	nop
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	6039      	str	r1, [r7, #0]
 8008cc2:	80fb      	strh	r3, [r7, #6]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008cc8:	797b      	ldrb	r3, [r7, #5]
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	88fb      	ldrh	r3, [r7, #6]
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f001 fee5 	bl	800aaa0 <SUBGRF_ReadRegisters>
}
 8008cd6:	bf00      	nop
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	460a      	mov	r2, r1
 8008cea:	71fb      	strb	r3, [r7, #7]
 8008cec:	4613      	mov	r3, r2
 8008cee:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d10a      	bne.n	8008d0c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008cf6:	4a0e      	ldr	r2, [pc, #56]	; (8008d30 <RadioSetMaxPayloadLength+0x50>)
 8008cf8:	79bb      	ldrb	r3, [r7, #6]
 8008cfa:	7013      	strb	r3, [r2, #0]
 8008cfc:	4b0c      	ldr	r3, [pc, #48]	; (8008d30 <RadioSetMaxPayloadLength+0x50>)
 8008cfe:	781a      	ldrb	r2, [r3, #0]
 8008d00:	4b0c      	ldr	r3, [pc, #48]	; (8008d34 <RadioSetMaxPayloadLength+0x54>)
 8008d02:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d04:	480c      	ldr	r0, [pc, #48]	; (8008d38 <RadioSetMaxPayloadLength+0x58>)
 8008d06:	f001 fd39 	bl	800a77c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8008d0a:	e00d      	b.n	8008d28 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008d0c:	4b09      	ldr	r3, [pc, #36]	; (8008d34 <RadioSetMaxPayloadLength+0x54>)
 8008d0e:	7d5b      	ldrb	r3, [r3, #21]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d109      	bne.n	8008d28 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008d14:	4a06      	ldr	r2, [pc, #24]	; (8008d30 <RadioSetMaxPayloadLength+0x50>)
 8008d16:	79bb      	ldrb	r3, [r7, #6]
 8008d18:	7013      	strb	r3, [r2, #0]
 8008d1a:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <RadioSetMaxPayloadLength+0x50>)
 8008d1c:	781a      	ldrb	r2, [r3, #0]
 8008d1e:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <RadioSetMaxPayloadLength+0x54>)
 8008d20:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d22:	4805      	ldr	r0, [pc, #20]	; (8008d38 <RadioSetMaxPayloadLength+0x58>)
 8008d24:	f001 fd2a 	bl	800a77c <SUBGRF_SetPacketParams>
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	2000000d 	.word	0x2000000d
 8008d34:	200008b8 	.word	0x200008b8
 8008d38:	200008c6 	.word	0x200008c6

08008d3c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8008d46:	4a13      	ldr	r2, [pc, #76]	; (8008d94 <RadioSetPublicNetwork+0x58>)
 8008d48:	79fb      	ldrb	r3, [r7, #7]
 8008d4a:	7313      	strb	r3, [r2, #12]
 8008d4c:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <RadioSetPublicNetwork+0x58>)
 8008d4e:	7b1a      	ldrb	r2, [r3, #12]
 8008d50:	4b10      	ldr	r3, [pc, #64]	; (8008d94 <RadioSetPublicNetwork+0x58>)
 8008d52:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8008d54:	2001      	movs	r0, #1
 8008d56:	f7ff f819 	bl	8007d8c <RadioSetModem>
    if( enable == true )
 8008d5a:	79fb      	ldrb	r3, [r7, #7]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00a      	beq.n	8008d76 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008d60:	2134      	movs	r1, #52	; 0x34
 8008d62:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008d66:	f001 fe51 	bl	800aa0c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8008d6a:	2144      	movs	r1, #68	; 0x44
 8008d6c:	f240 7041 	movw	r0, #1857	; 0x741
 8008d70:	f001 fe4c 	bl	800aa0c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8008d74:	e009      	b.n	8008d8a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8008d76:	2114      	movs	r1, #20
 8008d78:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008d7c:	f001 fe46 	bl	800aa0c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008d80:	2124      	movs	r1, #36	; 0x24
 8008d82:	f240 7041 	movw	r0, #1857	; 0x741
 8008d86:	f001 fe41 	bl	800aa0c <SUBGRF_WriteRegister>
}
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	200008b8 	.word	0x200008b8

08008d98 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8008d9c:	f001 ff86 	bl	800acac <SUBGRF_GetRadioWakeUpTime>
 8008da0:	4603      	mov	r3, r0
 8008da2:	3303      	adds	r3, #3
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8008db0:	f000 f80e 	bl	8008dd0 <RadioOnTxTimeoutProcess>
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8008dc4:	f000 f818 	bl	8008df8 <RadioOnRxTimeoutProcess>
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008dd4:	4b07      	ldr	r3, [pc, #28]	; (8008df4 <RadioOnTxTimeoutProcess+0x24>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d008      	beq.n	8008dee <RadioOnTxTimeoutProcess+0x1e>
 8008ddc:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <RadioOnTxTimeoutProcess+0x24>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8008de6:	4b03      	ldr	r3, [pc, #12]	; (8008df4 <RadioOnTxTimeoutProcess+0x24>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	4798      	blx	r3
    }
}
 8008dee:	bf00      	nop
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	200008b4 	.word	0x200008b4

08008df8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008dfc:	4b07      	ldr	r3, [pc, #28]	; (8008e1c <RadioOnRxTimeoutProcess+0x24>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d008      	beq.n	8008e16 <RadioOnRxTimeoutProcess+0x1e>
 8008e04:	4b05      	ldr	r3, [pc, #20]	; (8008e1c <RadioOnRxTimeoutProcess+0x24>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8008e0e:	4b03      	ldr	r3, [pc, #12]	; (8008e1c <RadioOnRxTimeoutProcess+0x24>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	4798      	blx	r3
    }
}
 8008e16:	bf00      	nop
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	200008b4 	.word	0x200008b4

08008e20 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8008e2a:	4a05      	ldr	r2, [pc, #20]	; (8008e40 <RadioOnDioIrq+0x20>)
 8008e2c:	88fb      	ldrh	r3, [r7, #6]
 8008e2e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8008e32:	f000 f807 	bl	8008e44 <RadioIrqProcess>
}
 8008e36:	bf00      	nop
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	200008b8 	.word	0x200008b8

08008e44 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8008e44:	b5b0      	push	{r4, r5, r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8008e52:	4ba5      	ldr	r3, [pc, #660]	; (80090e8 <RadioIrqProcess+0x2a4>)
 8008e54:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e5c:	f000 810d 	beq.w	800907a <RadioIrqProcess+0x236>
 8008e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e64:	f300 81c0 	bgt.w	80091e8 <RadioIrqProcess+0x3a4>
 8008e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e6c:	f000 80f1 	beq.w	8009052 <RadioIrqProcess+0x20e>
 8008e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e74:	f300 81b8 	bgt.w	80091e8 <RadioIrqProcess+0x3a4>
 8008e78:	2b80      	cmp	r3, #128	; 0x80
 8008e7a:	f000 80d6 	beq.w	800902a <RadioIrqProcess+0x1e6>
 8008e7e:	2b80      	cmp	r3, #128	; 0x80
 8008e80:	f300 81b2 	bgt.w	80091e8 <RadioIrqProcess+0x3a4>
 8008e84:	2b20      	cmp	r3, #32
 8008e86:	dc49      	bgt.n	8008f1c <RadioIrqProcess+0xd8>
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f340 81ad 	ble.w	80091e8 <RadioIrqProcess+0x3a4>
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	2b1f      	cmp	r3, #31
 8008e92:	f200 81a9 	bhi.w	80091e8 <RadioIrqProcess+0x3a4>
 8008e96:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <RadioIrqProcess+0x58>)
 8008e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9c:	08008f25 	.word	0x08008f25
 8008ea0:	08008f5f 	.word	0x08008f5f
 8008ea4:	080091e9 	.word	0x080091e9
 8008ea8:	08009105 	.word	0x08009105
 8008eac:	080091e9 	.word	0x080091e9
 8008eb0:	080091e9 	.word	0x080091e9
 8008eb4:	080091e9 	.word	0x080091e9
 8008eb8:	08009173 	.word	0x08009173
 8008ebc:	080091e9 	.word	0x080091e9
 8008ec0:	080091e9 	.word	0x080091e9
 8008ec4:	080091e9 	.word	0x080091e9
 8008ec8:	080091e9 	.word	0x080091e9
 8008ecc:	080091e9 	.word	0x080091e9
 8008ed0:	080091e9 	.word	0x080091e9
 8008ed4:	080091e9 	.word	0x080091e9
 8008ed8:	080091e9 	.word	0x080091e9
 8008edc:	080091e9 	.word	0x080091e9
 8008ee0:	080091e9 	.word	0x080091e9
 8008ee4:	080091e9 	.word	0x080091e9
 8008ee8:	080091e9 	.word	0x080091e9
 8008eec:	080091e9 	.word	0x080091e9
 8008ef0:	080091e9 	.word	0x080091e9
 8008ef4:	080091e9 	.word	0x080091e9
 8008ef8:	080091e9 	.word	0x080091e9
 8008efc:	080091e9 	.word	0x080091e9
 8008f00:	080091e9 	.word	0x080091e9
 8008f04:	080091e9 	.word	0x080091e9
 8008f08:	080091e9 	.word	0x080091e9
 8008f0c:	080091e9 	.word	0x080091e9
 8008f10:	080091e9 	.word	0x080091e9
 8008f14:	080091e9 	.word	0x080091e9
 8008f18:	08009183 	.word	0x08009183
 8008f1c:	2b40      	cmp	r3, #64	; 0x40
 8008f1e:	f000 814b 	beq.w	80091b8 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8008f22:	e161      	b.n	80091e8 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8008f24:	4871      	ldr	r0, [pc, #452]	; (80090ec <RadioIrqProcess+0x2a8>)
 8008f26:	f002 facd 	bl	800b4c4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	f000 ffea 	bl	8009f04 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8008f30:	f002 f860 	bl	800aff4 <RFW_Is_LongPacketModeEnabled>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8008f3a:	f002 f884 	bl	800b046 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008f3e:	4b6c      	ldr	r3, [pc, #432]	; (80090f0 <RadioIrqProcess+0x2ac>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 8152 	beq.w	80091ec <RadioIrqProcess+0x3a8>
 8008f48:	4b69      	ldr	r3, [pc, #420]	; (80090f0 <RadioIrqProcess+0x2ac>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 814c 	beq.w	80091ec <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8008f54:	4b66      	ldr	r3, [pc, #408]	; (80090f0 <RadioIrqProcess+0x2ac>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4798      	blx	r3
        break;
 8008f5c:	e146      	b.n	80091ec <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8008f5e:	4865      	ldr	r0, [pc, #404]	; (80090f4 <RadioIrqProcess+0x2b0>)
 8008f60:	f002 fab0 	bl	800b4c4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008f64:	4b60      	ldr	r3, [pc, #384]	; (80090e8 <RadioIrqProcess+0x2a4>)
 8008f66:	785b      	ldrb	r3, [r3, #1]
 8008f68:	f083 0301 	eor.w	r3, r3, #1
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d014      	beq.n	8008f9c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8008f72:	2000      	movs	r0, #0
 8008f74:	f000 ffc6 	bl	8009f04 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8008f78:	2100      	movs	r1, #0
 8008f7a:	f640 1002 	movw	r0, #2306	; 0x902
 8008f7e:	f001 fd45 	bl	800aa0c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8008f82:	f640 1044 	movw	r0, #2372	; 0x944
 8008f86:	f001 fd55 	bl	800aa34 <SUBGRF_ReadRegister>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	f043 0302 	orr.w	r3, r3, #2
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	4619      	mov	r1, r3
 8008f94:	f640 1044 	movw	r0, #2372	; 0x944
 8008f98:	f001 fd38 	bl	800aa0c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8008f9c:	1dfb      	adds	r3, r7, #7
 8008f9e:	22ff      	movs	r2, #255	; 0xff
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	4855      	ldr	r0, [pc, #340]	; (80090f8 <RadioIrqProcess+0x2b4>)
 8008fa4:	f000 fe7e 	bl	8009ca4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008fa8:	4854      	ldr	r0, [pc, #336]	; (80090fc <RadioIrqProcess+0x2b8>)
 8008faa:	f001 fcdd 	bl	800a968 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008fae:	4b50      	ldr	r3, [pc, #320]	; (80090f0 <RadioIrqProcess+0x2ac>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 811c 	beq.w	80091f0 <RadioIrqProcess+0x3ac>
 8008fb8:	4b4d      	ldr	r3, [pc, #308]	; (80090f0 <RadioIrqProcess+0x2ac>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 8116 	beq.w	80091f0 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8008fc4:	4b48      	ldr	r3, [pc, #288]	; (80090e8 <RadioIrqProcess+0x2a4>)
 8008fc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d10e      	bne.n	8008fec <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8008fce:	4b48      	ldr	r3, [pc, #288]	; (80090f0 <RadioIrqProcess+0x2ac>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689c      	ldr	r4, [r3, #8]
 8008fd4:	79fb      	ldrb	r3, [r7, #7]
 8008fd6:	b299      	uxth	r1, r3
 8008fd8:	4b43      	ldr	r3, [pc, #268]	; (80090e8 <RadioIrqProcess+0x2a4>)
 8008fda:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8008fde:	b21a      	sxth	r2, r3
 8008fe0:	4b41      	ldr	r3, [pc, #260]	; (80090e8 <RadioIrqProcess+0x2a4>)
 8008fe2:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8008fe6:	4844      	ldr	r0, [pc, #272]	; (80090f8 <RadioIrqProcess+0x2b4>)
 8008fe8:	47a0      	blx	r4
                break;
 8008fea:	e01d      	b.n	8009028 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008fec:	4b3e      	ldr	r3, [pc, #248]	; (80090e8 <RadioIrqProcess+0x2a4>)
 8008fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff0:	463a      	mov	r2, r7
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f001 ff4b 	bl	800ae90 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8008ffa:	4b3d      	ldr	r3, [pc, #244]	; (80090f0 <RadioIrqProcess+0x2ac>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689c      	ldr	r4, [r3, #8]
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	b299      	uxth	r1, r3
 8009004:	4b38      	ldr	r3, [pc, #224]	; (80090e8 <RadioIrqProcess+0x2a4>)
 8009006:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800900a:	b218      	sxth	r0, r3
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009012:	4a3b      	ldr	r2, [pc, #236]	; (8009100 <RadioIrqProcess+0x2bc>)
 8009014:	fb82 5203 	smull	r5, r2, r2, r3
 8009018:	1192      	asrs	r2, r2, #6
 800901a:	17db      	asrs	r3, r3, #31
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	b25b      	sxtb	r3, r3
 8009020:	4602      	mov	r2, r0
 8009022:	4835      	ldr	r0, [pc, #212]	; (80090f8 <RadioIrqProcess+0x2b4>)
 8009024:	47a0      	blx	r4
                break;
 8009026:	bf00      	nop
        break;
 8009028:	e0e2      	b.n	80091f0 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800902a:	2000      	movs	r0, #0
 800902c:	f000 ff6a 	bl	8009f04 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009030:	4b2f      	ldr	r3, [pc, #188]	; (80090f0 <RadioIrqProcess+0x2ac>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 80dd 	beq.w	80091f4 <RadioIrqProcess+0x3b0>
 800903a:	4b2d      	ldr	r3, [pc, #180]	; (80090f0 <RadioIrqProcess+0x2ac>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 80d7 	beq.w	80091f4 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8009046:	4b2a      	ldr	r3, [pc, #168]	; (80090f0 <RadioIrqProcess+0x2ac>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	2000      	movs	r0, #0
 800904e:	4798      	blx	r3
        break;
 8009050:	e0d0      	b.n	80091f4 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8009052:	2000      	movs	r0, #0
 8009054:	f000 ff56 	bl	8009f04 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009058:	4b25      	ldr	r3, [pc, #148]	; (80090f0 <RadioIrqProcess+0x2ac>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 80cb 	beq.w	80091f8 <RadioIrqProcess+0x3b4>
 8009062:	4b23      	ldr	r3, [pc, #140]	; (80090f0 <RadioIrqProcess+0x2ac>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	2b00      	cmp	r3, #0
 800906a:	f000 80c5 	beq.w	80091f8 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 800906e:	4b20      	ldr	r3, [pc, #128]	; (80090f0 <RadioIrqProcess+0x2ac>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	2001      	movs	r0, #1
 8009076:	4798      	blx	r3
        break;
 8009078:	e0be      	b.n	80091f8 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800907a:	f000 fdf9 	bl	8009c70 <SUBGRF_GetOperatingMode>
 800907e:	4603      	mov	r3, r0
 8009080:	2b04      	cmp	r3, #4
 8009082:	d115      	bne.n	80090b0 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8009084:	4819      	ldr	r0, [pc, #100]	; (80090ec <RadioIrqProcess+0x2a8>)
 8009086:	f002 fa1d 	bl	800b4c4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800908a:	2000      	movs	r0, #0
 800908c:	f000 ff3a 	bl	8009f04 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009090:	4b17      	ldr	r3, [pc, #92]	; (80090f0 <RadioIrqProcess+0x2ac>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 80b1 	beq.w	80091fc <RadioIrqProcess+0x3b8>
 800909a:	4b15      	ldr	r3, [pc, #84]	; (80090f0 <RadioIrqProcess+0x2ac>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 80ab 	beq.w	80091fc <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 80090a6:	4b12      	ldr	r3, [pc, #72]	; (80090f0 <RadioIrqProcess+0x2ac>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	4798      	blx	r3
        break;
 80090ae:	e0a5      	b.n	80091fc <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80090b0:	f000 fdde 	bl	8009c70 <SUBGRF_GetOperatingMode>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b05      	cmp	r3, #5
 80090b8:	f040 80a0 	bne.w	80091fc <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 80090bc:	480d      	ldr	r0, [pc, #52]	; (80090f4 <RadioIrqProcess+0x2b0>)
 80090be:	f002 fa01 	bl	800b4c4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80090c2:	2000      	movs	r0, #0
 80090c4:	f000 ff1e 	bl	8009f04 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80090c8:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <RadioIrqProcess+0x2ac>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 8095 	beq.w	80091fc <RadioIrqProcess+0x3b8>
 80090d2:	4b07      	ldr	r3, [pc, #28]	; (80090f0 <RadioIrqProcess+0x2ac>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 808f 	beq.w	80091fc <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 80090de:	4b04      	ldr	r3, [pc, #16]	; (80090f0 <RadioIrqProcess+0x2ac>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	4798      	blx	r3
        break;
 80090e6:	e089      	b.n	80091fc <RadioIrqProcess+0x3b8>
 80090e8:	200008b8 	.word	0x200008b8
 80090ec:	20000914 	.word	0x20000914
 80090f0:	200008b4 	.word	0x200008b4
 80090f4:	2000092c 	.word	0x2000092c
 80090f8:	200007b4 	.word	0x200007b4
 80090fc:	200008dc 	.word	0x200008dc
 8009100:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8009104:	4b44      	ldr	r3, [pc, #272]	; (8009218 <RadioIrqProcess+0x3d4>)
 8009106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009108:	2b00      	cmp	r3, #0
 800910a:	d079      	beq.n	8009200 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800910c:	4a43      	ldr	r2, [pc, #268]	; (800921c <RadioIrqProcess+0x3d8>)
 800910e:	4b42      	ldr	r3, [pc, #264]	; (8009218 <RadioIrqProcess+0x3d4>)
 8009110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009112:	0c1b      	lsrs	r3, r3, #16
 8009114:	b2db      	uxtb	r3, r3
 8009116:	4619      	mov	r1, r3
 8009118:	f640 1003 	movw	r0, #2307	; 0x903
 800911c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800911e:	4a3f      	ldr	r2, [pc, #252]	; (800921c <RadioIrqProcess+0x3d8>)
 8009120:	4b3d      	ldr	r3, [pc, #244]	; (8009218 <RadioIrqProcess+0x3d4>)
 8009122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009124:	0a1b      	lsrs	r3, r3, #8
 8009126:	b2db      	uxtb	r3, r3
 8009128:	4619      	mov	r1, r3
 800912a:	f640 1004 	movw	r0, #2308	; 0x904
 800912e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8009130:	4a3a      	ldr	r2, [pc, #232]	; (800921c <RadioIrqProcess+0x3d8>)
 8009132:	4b39      	ldr	r3, [pc, #228]	; (8009218 <RadioIrqProcess+0x3d4>)
 8009134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009136:	b2db      	uxtb	r3, r3
 8009138:	4619      	mov	r1, r3
 800913a:	f640 1005 	movw	r0, #2309	; 0x905
 800913e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8009140:	4c36      	ldr	r4, [pc, #216]	; (800921c <RadioIrqProcess+0x3d8>)
 8009142:	4b37      	ldr	r3, [pc, #220]	; (8009220 <RadioIrqProcess+0x3dc>)
 8009144:	f640 1002 	movw	r0, #2306	; 0x902
 8009148:	4798      	blx	r3
 800914a:	4603      	mov	r3, r0
 800914c:	f043 0301 	orr.w	r3, r3, #1
 8009150:	b2db      	uxtb	r3, r3
 8009152:	4619      	mov	r1, r3
 8009154:	f640 1002 	movw	r0, #2306	; 0x902
 8009158:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800915a:	4b2f      	ldr	r3, [pc, #188]	; (8009218 <RadioIrqProcess+0x3d4>)
 800915c:	2200      	movs	r2, #0
 800915e:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009160:	2300      	movs	r3, #0
 8009162:	2200      	movs	r2, #0
 8009164:	f240 2162 	movw	r1, #610	; 0x262
 8009168:	f240 2062 	movw	r0, #610	; 0x262
 800916c:	f001 f89e 	bl	800a2ac <SUBGRF_SetDioIrqParams>
        break;
 8009170:	e046      	b.n	8009200 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8009172:	f001 ff38 	bl	800afe6 <RFW_Is_Init>
 8009176:	4603      	mov	r3, r0
 8009178:	2b01      	cmp	r3, #1
 800917a:	d143      	bne.n	8009204 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 800917c:	f001 ff69 	bl	800b052 <RFW_ReceivePayload>
        break;
 8009180:	e040      	b.n	8009204 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8009182:	4828      	ldr	r0, [pc, #160]	; (8009224 <RadioIrqProcess+0x3e0>)
 8009184:	f002 f99e 	bl	800b4c4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009188:	4b23      	ldr	r3, [pc, #140]	; (8009218 <RadioIrqProcess+0x3d4>)
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	f083 0301 	eor.w	r3, r3, #1
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8009196:	2000      	movs	r0, #0
 8009198:	f000 feb4 	bl	8009f04 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800919c:	4b22      	ldr	r3, [pc, #136]	; (8009228 <RadioIrqProcess+0x3e4>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d031      	beq.n	8009208 <RadioIrqProcess+0x3c4>
 80091a4:	4b20      	ldr	r3, [pc, #128]	; (8009228 <RadioIrqProcess+0x3e4>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d02c      	beq.n	8009208 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 80091ae:	4b1e      	ldr	r3, [pc, #120]	; (8009228 <RadioIrqProcess+0x3e4>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	4798      	blx	r3
        break;
 80091b6:	e027      	b.n	8009208 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 80091b8:	4b17      	ldr	r3, [pc, #92]	; (8009218 <RadioIrqProcess+0x3d4>)
 80091ba:	785b      	ldrb	r3, [r3, #1]
 80091bc:	f083 0301 	eor.w	r3, r3, #1
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d002      	beq.n	80091cc <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 80091c6:	2000      	movs	r0, #0
 80091c8:	f000 fe9c 	bl	8009f04 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80091cc:	4b16      	ldr	r3, [pc, #88]	; (8009228 <RadioIrqProcess+0x3e4>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d01b      	beq.n	800920c <RadioIrqProcess+0x3c8>
 80091d4:	4b14      	ldr	r3, [pc, #80]	; (8009228 <RadioIrqProcess+0x3e4>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d016      	beq.n	800920c <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 80091de:	4b12      	ldr	r3, [pc, #72]	; (8009228 <RadioIrqProcess+0x3e4>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	4798      	blx	r3
        break;
 80091e6:	e011      	b.n	800920c <RadioIrqProcess+0x3c8>
        break;
 80091e8:	bf00      	nop
 80091ea:	e010      	b.n	800920e <RadioIrqProcess+0x3ca>
        break;
 80091ec:	bf00      	nop
 80091ee:	e00e      	b.n	800920e <RadioIrqProcess+0x3ca>
        break;
 80091f0:	bf00      	nop
 80091f2:	e00c      	b.n	800920e <RadioIrqProcess+0x3ca>
        break;
 80091f4:	bf00      	nop
 80091f6:	e00a      	b.n	800920e <RadioIrqProcess+0x3ca>
        break;
 80091f8:	bf00      	nop
 80091fa:	e008      	b.n	800920e <RadioIrqProcess+0x3ca>
        break;
 80091fc:	bf00      	nop
 80091fe:	e006      	b.n	800920e <RadioIrqProcess+0x3ca>
        break;
 8009200:	bf00      	nop
 8009202:	e004      	b.n	800920e <RadioIrqProcess+0x3ca>
        break;
 8009204:	bf00      	nop
 8009206:	e002      	b.n	800920e <RadioIrqProcess+0x3ca>
        break;
 8009208:	bf00      	nop
 800920a:	e000      	b.n	800920e <RadioIrqProcess+0x3ca>
        break;
 800920c:	bf00      	nop
    }
}
 800920e:	bf00      	nop
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bdb0      	pop	{r4, r5, r7, pc}
 8009216:	bf00      	nop
 8009218:	200008b8 	.word	0x200008b8
 800921c:	08008c53 	.word	0x08008c53
 8009220:	08008c77 	.word	0x08008c77
 8009224:	2000092c 	.word	0x2000092c
 8009228:	200008b4 	.word	0x200008b4

0800922c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009230:	4b09      	ldr	r3, [pc, #36]	; (8009258 <RadioTxPrbs+0x2c>)
 8009232:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009236:	2101      	movs	r1, #1
 8009238:	4618      	mov	r0, r3
 800923a:	f001 fcdb 	bl	800abf4 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800923e:	4b07      	ldr	r3, [pc, #28]	; (800925c <RadioTxPrbs+0x30>)
 8009240:	212d      	movs	r1, #45	; 0x2d
 8009242:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009246:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8009248:	f000 ff1f 	bl	800a08a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800924c:	4804      	ldr	r0, [pc, #16]	; (8009260 <RadioTxPrbs+0x34>)
 800924e:	f000 fe75 	bl	8009f3c <SUBGRF_SetTx>
}
 8009252:	bf00      	nop
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	200008b8 	.word	0x200008b8
 800925c:	08008c53 	.word	0x08008c53
 8009260:	000fffff 	.word	0x000fffff

08009264 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800926e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009272:	4618      	mov	r0, r3
 8009274:	f001 fce6 	bl	800ac44 <SUBGRF_SetRfTxPower>
 8009278:	4603      	mov	r3, r0
 800927a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800927c:	210e      	movs	r1, #14
 800927e:	f640 101f 	movw	r0, #2335	; 0x91f
 8009282:	f001 fbc3 	bl	800aa0c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	2101      	movs	r1, #1
 800928a:	4618      	mov	r0, r3
 800928c:	f001 fcb2 	bl	800abf4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8009290:	f000 fef2 	bl	800a078 <SUBGRF_SetTxContinuousWave>
}
 8009294:	bf00      	nop
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800929c:	b480      	push	{r7}
 800929e:	b089      	sub	sp, #36	; 0x24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	4613      	mov	r3, r2
 80092a8:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80092ae:	2300      	movs	r3, #0
 80092b0:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80092b2:	2300      	movs	r3, #0
 80092b4:	61bb      	str	r3, [r7, #24]
 80092b6:	e011      	b.n	80092dc <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	4413      	add	r3, r2
 80092be:	781a      	ldrb	r2, [r3, #0]
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	440b      	add	r3, r1
 80092c6:	43d2      	mvns	r2, r2
 80092c8:	b2d2      	uxtb	r2, r2
 80092ca:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	4413      	add	r3, r2
 80092d2:	2200      	movs	r2, #0
 80092d4:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	3301      	adds	r3, #1
 80092da:	61bb      	str	r3, [r7, #24]
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	69ba      	ldr	r2, [r7, #24]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	dbe9      	blt.n	80092b8 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80092e4:	2300      	movs	r3, #0
 80092e6:	61bb      	str	r3, [r7, #24]
 80092e8:	e049      	b.n	800937e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	425a      	negs	r2, r3
 80092ee:	f003 0307 	and.w	r3, r3, #7
 80092f2:	f002 0207 	and.w	r2, r2, #7
 80092f6:	bf58      	it	pl
 80092f8:	4253      	negpl	r3, r2
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	f1c3 0307 	rsb	r3, r3, #7
 8009300:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	2b00      	cmp	r3, #0
 8009306:	da00      	bge.n	800930a <payload_integration+0x6e>
 8009308:	3307      	adds	r3, #7
 800930a:	10db      	asrs	r3, r3, #3
 800930c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	3301      	adds	r3, #1
 8009312:	425a      	negs	r2, r3
 8009314:	f003 0307 	and.w	r3, r3, #7
 8009318:	f002 0207 	and.w	r2, r2, #7
 800931c:	bf58      	it	pl
 800931e:	4253      	negpl	r3, r2
 8009320:	b2db      	uxtb	r3, r3
 8009322:	f1c3 0307 	rsb	r3, r3, #7
 8009326:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	3301      	adds	r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	da00      	bge.n	8009332 <payload_integration+0x96>
 8009330:	3307      	adds	r3, #7
 8009332:	10db      	asrs	r3, r3, #3
 8009334:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009336:	7dbb      	ldrb	r3, [r7, #22]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	4413      	add	r3, r2
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	fa42 f303 	asr.w	r3, r2, r3
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800934e:	7ffa      	ldrb	r2, [r7, #31]
 8009350:	7cfb      	ldrb	r3, [r7, #19]
 8009352:	4053      	eors	r3, r2
 8009354:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8009356:	7d3b      	ldrb	r3, [r7, #20]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	b25a      	sxtb	r2, r3
 8009360:	7ff9      	ldrb	r1, [r7, #31]
 8009362:	7d7b      	ldrb	r3, [r7, #21]
 8009364:	fa01 f303 	lsl.w	r3, r1, r3
 8009368:	b25b      	sxtb	r3, r3
 800936a:	4313      	orrs	r3, r2
 800936c:	b259      	sxtb	r1, r3
 800936e:	7d3b      	ldrb	r3, [r7, #20]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	4413      	add	r3, r2
 8009374:	b2ca      	uxtb	r2, r1
 8009376:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	3301      	adds	r3, #1
 800937c:	61bb      	str	r3, [r7, #24]
 800937e:	79fb      	ldrb	r3, [r7, #7]
 8009380:	00db      	lsls	r3, r3, #3
 8009382:	69ba      	ldr	r2, [r7, #24]
 8009384:	429a      	cmp	r2, r3
 8009386:	dbb0      	blt.n	80092ea <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8009388:	7ffb      	ldrb	r3, [r7, #31]
 800938a:	01db      	lsls	r3, r3, #7
 800938c:	b25a      	sxtb	r2, r3
 800938e:	7ffb      	ldrb	r3, [r7, #31]
 8009390:	019b      	lsls	r3, r3, #6
 8009392:	b25b      	sxtb	r3, r3
 8009394:	4313      	orrs	r3, r2
 8009396:	b25b      	sxtb	r3, r3
 8009398:	7ffa      	ldrb	r2, [r7, #31]
 800939a:	2a00      	cmp	r2, #0
 800939c:	d101      	bne.n	80093a2 <payload_integration+0x106>
 800939e:	2220      	movs	r2, #32
 80093a0:	e000      	b.n	80093a4 <payload_integration+0x108>
 80093a2:	2200      	movs	r2, #0
 80093a4:	4313      	orrs	r3, r2
 80093a6:	b259      	sxtb	r1, r3
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	4413      	add	r3, r2
 80093ae:	b2ca      	uxtb	r2, r1
 80093b0:	701a      	strb	r2, [r3, #0]
}
 80093b2:	bf00      	nop
 80093b4:	3724      	adds	r7, #36	; 0x24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bc80      	pop	{r7}
 80093ba:	4770      	bx	lr

080093bc <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08c      	sub	sp, #48	; 0x30
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	607a      	str	r2, [r7, #4]
 80093c6:	603b      	str	r3, [r7, #0]
 80093c8:	4603      	mov	r3, r0
 80093ca:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 80093d0:	2300      	movs	r3, #0
 80093d2:	623b      	str	r3, [r7, #32]
 80093d4:	2300      	movs	r3, #0
 80093d6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80093d8:	f001 fdff 	bl	800afda <RFW_DeInit>

    if( rxContinuous != 0 )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	bf14      	ite	ne
 80093ec:	2301      	movne	r3, #1
 80093ee:	2300      	moveq	r3, #0
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	4ba3      	ldr	r3, [pc, #652]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 80093f4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <RadioSetRxGenericConfig+0x48>
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	f000 80dc 	beq.w	80095ba <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8009402:	e194      	b.n	800972e <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <RadioSetRxGenericConfig+0x58>
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d102      	bne.n	800941a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8009414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009418:	e18a      	b.n	8009730 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	7f9b      	ldrb	r3, [r3, #30]
 800941e:	2b08      	cmp	r3, #8
 8009420:	d902      	bls.n	8009428 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8009422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009426:	e183      	b.n	8009730 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	6919      	ldr	r1, [r3, #16]
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	7f9b      	ldrb	r3, [r3, #30]
 8009430:	b29a      	uxth	r2, r3
 8009432:	f107 0320 	add.w	r3, r7, #32
 8009436:	4618      	mov	r0, r3
 8009438:	f001 ff66 	bl	800b308 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	bf14      	ite	ne
 8009444:	2301      	movne	r3, #1
 8009446:	2300      	moveq	r3, #0
 8009448:	b2db      	uxtb	r3, r3
 800944a:	4618      	mov	r0, r3
 800944c:	f000 fe26 	bl	800a09c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009450:	4b8b      	ldr	r3, [pc, #556]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	4a88      	ldr	r2, [pc, #544]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 800945e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009466:	4b86      	ldr	r3, [pc, #536]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 8009468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	4618      	mov	r0, r3
 8009472:	f001 fce5 	bl	800ae40 <SUBGRF_GetFskBandwidthRegValue>
 8009476:	4603      	mov	r3, r0
 8009478:	461a      	mov	r2, r3
 800947a:	4b81      	ldr	r3, [pc, #516]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 800947c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009480:	4b7f      	ldr	r3, [pc, #508]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 8009482:	2200      	movs	r2, #0
 8009484:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	b29b      	uxth	r3, r3
 800948c:	00db      	lsls	r3, r3, #3
 800948e:	b29a      	uxth	r2, r3
 8009490:	4b7b      	ldr	r3, [pc, #492]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 8009492:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	7fda      	ldrb	r2, [r3, #31]
 8009498:	4b79      	ldr	r3, [pc, #484]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 800949a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	7f9b      	ldrb	r3, [r3, #30]
 80094a0:	00db      	lsls	r3, r3, #3
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	4b76      	ldr	r3, [pc, #472]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 80094a6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80094ae:	4b74      	ldr	r3, [pc, #464]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 80094b0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d105      	bne.n	80094c8 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	4b6f      	ldr	r3, [pc, #444]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 80094c4:	759a      	strb	r2, [r3, #22]
 80094c6:	e00b      	b.n	80094e0 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d103      	bne.n	80094da <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80094d2:	4b6b      	ldr	r3, [pc, #428]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 80094d4:	22ff      	movs	r2, #255	; 0xff
 80094d6:	759a      	strb	r2, [r3, #22]
 80094d8:	e002      	b.n	80094e0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80094da:	4b69      	ldr	r3, [pc, #420]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 80094dc:	22ff      	movs	r2, #255	; 0xff
 80094de:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d004      	beq.n	80094f4 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d12d      	bne.n	8009550 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80094fa:	2bf1      	cmp	r3, #241	; 0xf1
 80094fc:	d00c      	beq.n	8009518 <RadioSetRxGenericConfig+0x15c>
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009504:	2bf2      	cmp	r3, #242	; 0xf2
 8009506:	d007      	beq.n	8009518 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800950e:	2b01      	cmp	r3, #1
 8009510:	d002      	beq.n	8009518 <RadioSetRxGenericConfig+0x15c>
                return -1;
 8009512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009516:	e10b      	b.n	8009730 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8009518:	2300      	movs	r3, #0
 800951a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8009520:	4b58      	ldr	r3, [pc, #352]	; (8009684 <RadioSetRxGenericConfig+0x2c8>)
 8009522:	6819      	ldr	r1, [r3, #0]
 8009524:	f107 0314 	add.w	r3, r7, #20
 8009528:	4a57      	ldr	r2, [pc, #348]	; (8009688 <RadioSetRxGenericConfig+0x2cc>)
 800952a:	4618      	mov	r0, r3
 800952c:	f001 fd48 	bl	800afc0 <RFW_Init>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <RadioSetRxGenericConfig+0x180>
                return -1;
 8009536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800953a:	e0f9      	b.n	8009730 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800953c:	4b50      	ldr	r3, [pc, #320]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 800953e:	2200      	movs	r2, #0
 8009540:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009542:	4b4f      	ldr	r3, [pc, #316]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 8009544:	2201      	movs	r2, #1
 8009546:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009548:	4b4d      	ldr	r3, [pc, #308]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 800954a:	2200      	movs	r2, #0
 800954c:	755a      	strb	r2, [r3, #21]
        {
 800954e:	e00e      	b.n	800956e <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8009556:	4b4a      	ldr	r3, [pc, #296]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 8009558:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8009560:	4b47      	ldr	r3, [pc, #284]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 8009562:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800956a:	4b45      	ldr	r3, [pc, #276]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 800956c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800956e:	f7ff fa6e 	bl	8008a4e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009572:	2000      	movs	r0, #0
 8009574:	f7fe fc0a 	bl	8007d8c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009578:	4844      	ldr	r0, [pc, #272]	; (800968c <RadioSetRxGenericConfig+0x2d0>)
 800957a:	f001 f82d 	bl	800a5d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800957e:	4844      	ldr	r0, [pc, #272]	; (8009690 <RadioSetRxGenericConfig+0x2d4>)
 8009580:	f001 f8fc 	bl	800a77c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009584:	f107 0320 	add.w	r3, r7, #32
 8009588:	4618      	mov	r0, r3
 800958a:	f000 fbc0 	bl	8009d0e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	8b9b      	ldrh	r3, [r3, #28]
 8009592:	4618      	mov	r0, r3
 8009594:	f000 fc0a 	bl	8009dac <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	8b1b      	ldrh	r3, [r3, #24]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 fbe5 	bl	8009d6c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80095a8:	fb03 f202 	mul.w	r2, r3, r2
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b4:	4a32      	ldr	r2, [pc, #200]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 80095b6:	6093      	str	r3, [r2, #8]
        break;
 80095b8:	e0b9      	b.n	800972e <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d102      	bne.n	80095c8 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80095c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095c6:	e0b3      	b.n	8009730 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d104      	bne.n	80095dc <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80095da:	e002      	b.n	80095e2 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 80095dc:	23ff      	movs	r3, #255	; 0xff
 80095de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	bf14      	ite	ne
 80095ea:	2301      	movne	r3, #1
 80095ec:	2300      	moveq	r3, #0
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 fd53 	bl	800a09c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 fd5d 	bl	800a0ba <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009600:	4b1f      	ldr	r3, [pc, #124]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800960e:	4b1c      	ldr	r3, [pc, #112]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 8009610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800961a:	4b19      	ldr	r3, [pc, #100]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 800961c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8009626:	4b16      	ldr	r3, [pc, #88]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 8009628:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009632:	2b02      	cmp	r3, #2
 8009634:	d010      	beq.n	8009658 <RadioSetRxGenericConfig+0x29c>
 8009636:	2b02      	cmp	r3, #2
 8009638:	dc2c      	bgt.n	8009694 <RadioSetRxGenericConfig+0x2d8>
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <RadioSetRxGenericConfig+0x288>
 800963e:	2b01      	cmp	r3, #1
 8009640:	d005      	beq.n	800964e <RadioSetRxGenericConfig+0x292>
            break;
 8009642:	e027      	b.n	8009694 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009644:	4b0e      	ldr	r3, [pc, #56]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800964c:	e023      	b.n	8009696 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800964e:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 8009650:	2201      	movs	r2, #1
 8009652:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009656:	e01e      	b.n	8009696 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800965e:	2b0b      	cmp	r3, #11
 8009660:	d004      	beq.n	800966c <RadioSetRxGenericConfig+0x2b0>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009668:	2b0c      	cmp	r3, #12
 800966a:	d104      	bne.n	8009676 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800966c:	4b04      	ldr	r3, [pc, #16]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009674:	e00f      	b.n	8009696 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009676:	4b02      	ldr	r3, [pc, #8]	; (8009680 <RadioSetRxGenericConfig+0x2c4>)
 8009678:	2200      	movs	r2, #0
 800967a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800967e:	e00a      	b.n	8009696 <RadioSetRxGenericConfig+0x2da>
 8009680:	200008b8 	.word	0x200008b8
 8009684:	200008b4 	.word	0x200008b4
 8009688:	2000092c 	.word	0x2000092c
 800968c:	200008f0 	.word	0x200008f0
 8009690:	200008c6 	.word	0x200008c6
            break;
 8009694:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009696:	4b28      	ldr	r3, [pc, #160]	; (8009738 <RadioSetRxGenericConfig+0x37c>)
 8009698:	2201      	movs	r2, #1
 800969a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80096a0:	4b25      	ldr	r3, [pc, #148]	; (8009738 <RadioSetRxGenericConfig+0x37c>)
 80096a2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80096aa:	4b23      	ldr	r3, [pc, #140]	; (8009738 <RadioSetRxGenericConfig+0x37c>)
 80096ac:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80096ae:	4a22      	ldr	r2, [pc, #136]	; (8009738 <RadioSetRxGenericConfig+0x37c>)
 80096b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096b4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80096bc:	4b1e      	ldr	r3, [pc, #120]	; (8009738 <RadioSetRxGenericConfig+0x37c>)
 80096be:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80096c8:	4b1b      	ldr	r3, [pc, #108]	; (8009738 <RadioSetRxGenericConfig+0x37c>)
 80096ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80096ce:	f7ff f9be 	bl	8008a4e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80096d2:	2001      	movs	r0, #1
 80096d4:	f7fe fb5a 	bl	8007d8c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80096d8:	4818      	ldr	r0, [pc, #96]	; (800973c <RadioSetRxGenericConfig+0x380>)
 80096da:	f000 ff7d 	bl	800a5d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80096de:	4818      	ldr	r0, [pc, #96]	; (8009740 <RadioSetRxGenericConfig+0x384>)
 80096e0:	f001 f84c 	bl	800a77c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80096e4:	4b14      	ldr	r3, [pc, #80]	; (8009738 <RadioSetRxGenericConfig+0x37c>)
 80096e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d10d      	bne.n	800970a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80096ee:	f240 7036 	movw	r0, #1846	; 0x736
 80096f2:	f001 f99f 	bl	800aa34 <SUBGRF_ReadRegister>
 80096f6:	4603      	mov	r3, r0
 80096f8:	f023 0304 	bic.w	r3, r3, #4
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	4619      	mov	r1, r3
 8009700:	f240 7036 	movw	r0, #1846	; 0x736
 8009704:	f001 f982 	bl	800aa0c <SUBGRF_WriteRegister>
 8009708:	e00c      	b.n	8009724 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800970a:	f240 7036 	movw	r0, #1846	; 0x736
 800970e:	f001 f991 	bl	800aa34 <SUBGRF_ReadRegister>
 8009712:	4603      	mov	r3, r0
 8009714:	f043 0304 	orr.w	r3, r3, #4
 8009718:	b2db      	uxtb	r3, r3
 800971a:	4619      	mov	r1, r3
 800971c:	f240 7036 	movw	r0, #1846	; 0x736
 8009720:	f001 f974 	bl	800aa0c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8009724:	4b04      	ldr	r3, [pc, #16]	; (8009738 <RadioSetRxGenericConfig+0x37c>)
 8009726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800972a:	609a      	str	r2, [r3, #8]
        break;
 800972c:	bf00      	nop
    }
    return status;
 800972e:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009730:	4618      	mov	r0, r3
 8009732:	3730      	adds	r7, #48	; 0x30
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	200008b8 	.word	0x200008b8
 800973c:	200008f0 	.word	0x200008f0
 8009740:	200008c6 	.word	0x200008c6

08009744 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08e      	sub	sp, #56	; 0x38
 8009748:	af00      	add	r7, sp, #0
 800974a:	60b9      	str	r1, [r7, #8]
 800974c:	607b      	str	r3, [r7, #4]
 800974e:	4603      	mov	r3, r0
 8009750:	73fb      	strb	r3, [r7, #15]
 8009752:	4613      	mov	r3, r2
 8009754:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8009756:	2300      	movs	r3, #0
 8009758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800975a:	2300      	movs	r3, #0
 800975c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800975e:	f001 fc3c 	bl	800afda <RFW_DeInit>
    switch( modem )
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	2b03      	cmp	r3, #3
 8009766:	f200 8204 	bhi.w	8009b72 <RadioSetTxGenericConfig+0x42e>
 800976a:	a201      	add	r2, pc, #4	; (adr r2, 8009770 <RadioSetTxGenericConfig+0x2c>)
 800976c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009770:	080098f5 	.word	0x080098f5
 8009774:	08009a3d 	.word	0x08009a3d
 8009778:	08009b35 	.word	0x08009b35
 800977c:	08009781 	.word	0x08009781
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	7c9b      	ldrb	r3, [r3, #18]
 8009784:	2b08      	cmp	r3, #8
 8009786:	d902      	bls.n	800978e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8009788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800978c:	e206      	b.n	8009b9c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	6899      	ldr	r1, [r3, #8]
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	7c9b      	ldrb	r3, [r3, #18]
 8009796:	b29a      	uxth	r2, r3
 8009798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800979c:	4618      	mov	r0, r3
 800979e:	f001 fdb3 	bl	800b308 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d102      	bne.n	80097b0 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80097aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097ae:	e1f5      	b.n	8009b9c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d813      	bhi.n	80097e4 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 80097bc:	2302      	movs	r3, #2
 80097be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80097c2:	4b99      	ldr	r3, [pc, #612]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80097c4:	2203      	movs	r2, #3
 80097c6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80097c8:	4b97      	ldr	r3, [pc, #604]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80097ca:	2203      	movs	r2, #3
 80097cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a94      	ldr	r2, [pc, #592]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80097d6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	7cda      	ldrb	r2, [r3, #19]
 80097dc:	4b92      	ldr	r3, [pc, #584]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80097de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097e2:	e017      	b.n	8009814 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80097ea:	4b8f      	ldr	r3, [pc, #572]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80097f0:	4b8d      	ldr	r3, [pc, #564]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a8a      	ldr	r2, [pc, #552]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80097fe:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	7cda      	ldrb	r2, [r3, #19]
 8009804:	4b88      	ldr	r3, [pc, #544]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 8009806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	089b      	lsrs	r3, r3, #2
 8009810:	4a85      	ldr	r2, [pc, #532]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 8009812:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	b29b      	uxth	r3, r3
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	b29a      	uxth	r2, r3
 800981e:	4b82      	ldr	r3, [pc, #520]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 8009820:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009822:	4b81      	ldr	r3, [pc, #516]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 8009824:	2204      	movs	r2, #4
 8009826:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	7c9b      	ldrb	r3, [r3, #18]
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	b2da      	uxtb	r2, r3
 8009830:	4b7d      	ldr	r3, [pc, #500]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 8009832:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009834:	4b7c      	ldr	r3, [pc, #496]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 8009836:	2200      	movs	r2, #0
 8009838:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	7d9b      	ldrb	r3, [r3, #22]
 800983e:	2b02      	cmp	r3, #2
 8009840:	d003      	beq.n	800984a <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	7d1b      	ldrb	r3, [r3, #20]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d12b      	bne.n	80098a2 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	7d5b      	ldrb	r3, [r3, #21]
 800984e:	2bf1      	cmp	r3, #241	; 0xf1
 8009850:	d00a      	beq.n	8009868 <RadioSetTxGenericConfig+0x124>
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	7d5b      	ldrb	r3, [r3, #21]
 8009856:	2bf2      	cmp	r3, #242	; 0xf2
 8009858:	d006      	beq.n	8009868 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	7d5b      	ldrb	r3, [r3, #21]
 800985e:	2b01      	cmp	r3, #1
 8009860:	d002      	beq.n	8009868 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8009862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009866:	e199      	b.n	8009b9c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800986c:	2301      	movs	r3, #1
 800986e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009872:	4b6e      	ldr	r3, [pc, #440]	; (8009a2c <RadioSetTxGenericConfig+0x2e8>)
 8009874:	6819      	ldr	r1, [r3, #0]
 8009876:	f107 0320 	add.w	r3, r7, #32
 800987a:	4a6d      	ldr	r2, [pc, #436]	; (8009a30 <RadioSetTxGenericConfig+0x2ec>)
 800987c:	4618      	mov	r0, r3
 800987e:	f001 fb9f 	bl	800afc0 <RFW_Init>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8009888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800988c:	e186      	b.n	8009b9c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800988e:	4b66      	ldr	r3, [pc, #408]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 8009890:	2200      	movs	r2, #0
 8009892:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009894:	4b64      	ldr	r3, [pc, #400]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 8009896:	2201      	movs	r2, #1
 8009898:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800989a:	4b63      	ldr	r3, [pc, #396]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 800989c:	2200      	movs	r2, #0
 800989e:	755a      	strb	r2, [r3, #21]
        {
 80098a0:	e00b      	b.n	80098ba <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	7d5a      	ldrb	r2, [r3, #21]
 80098a6:	4b60      	ldr	r3, [pc, #384]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80098a8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	7d9a      	ldrb	r2, [r3, #22]
 80098ae:	4b5e      	ldr	r3, [pc, #376]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80098b0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	7d1a      	ldrb	r2, [r3, #20]
 80098b6:	4b5c      	ldr	r3, [pc, #368]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80098b8:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80098ba:	f7ff f8c8 	bl	8008a4e <RadioStandby>
        RadioSetModem( radio_modem );
 80098be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fe fa62 	bl	8007d8c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80098c8:	485a      	ldr	r0, [pc, #360]	; (8009a34 <RadioSetTxGenericConfig+0x2f0>)
 80098ca:	f000 fe85 	bl	800a5d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80098ce:	485a      	ldr	r0, [pc, #360]	; (8009a38 <RadioSetTxGenericConfig+0x2f4>)
 80098d0:	f000 ff54 	bl	800a77c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80098d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 fa18 	bl	8009d0e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	8a1b      	ldrh	r3, [r3, #16]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fa62 	bl	8009dac <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	899b      	ldrh	r3, [r3, #12]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f000 fa3d 	bl	8009d6c <SUBGRF_SetCrcPolynomial>
        break;
 80098f2:	e13f      	b.n	8009b74 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d102      	bne.n	8009902 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 80098fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009900:	e14c      	b.n	8009b9c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	7c9b      	ldrb	r3, [r3, #18]
 8009906:	2b08      	cmp	r3, #8
 8009908:	d902      	bls.n	8009910 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800990a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800990e:	e145      	b.n	8009b9c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	6899      	ldr	r1, [r3, #8]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	7c9b      	ldrb	r3, [r3, #18]
 8009918:	b29a      	uxth	r2, r3
 800991a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800991e:	4618      	mov	r0, r3
 8009920:	f001 fcf2 	bl	800b308 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009924:	4b40      	ldr	r3, [pc, #256]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 8009926:	2200      	movs	r2, #0
 8009928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a3d      	ldr	r2, [pc, #244]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 8009932:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	7cda      	ldrb	r2, [r3, #19]
 8009938:	4b3b      	ldr	r3, [pc, #236]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 800993a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	4a39      	ldr	r2, [pc, #228]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 8009944:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009946:	4b38      	ldr	r3, [pc, #224]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 8009948:	2200      	movs	r2, #0
 800994a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	b29b      	uxth	r3, r3
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	b29a      	uxth	r2, r3
 8009956:	4b34      	ldr	r3, [pc, #208]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 8009958:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800995a:	4b33      	ldr	r3, [pc, #204]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 800995c:	2204      	movs	r2, #4
 800995e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	7c9b      	ldrb	r3, [r3, #18]
 8009964:	00db      	lsls	r3, r3, #3
 8009966:	b2da      	uxtb	r2, r3
 8009968:	4b2f      	ldr	r3, [pc, #188]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 800996a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800996c:	4b2e      	ldr	r3, [pc, #184]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 800996e:	2200      	movs	r2, #0
 8009970:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	7d9b      	ldrb	r3, [r3, #22]
 8009976:	2b02      	cmp	r3, #2
 8009978:	d003      	beq.n	8009982 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	7d1b      	ldrb	r3, [r3, #20]
 800997e:	2b02      	cmp	r3, #2
 8009980:	d12a      	bne.n	80099d8 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	7d5b      	ldrb	r3, [r3, #21]
 8009986:	2bf1      	cmp	r3, #241	; 0xf1
 8009988:	d00a      	beq.n	80099a0 <RadioSetTxGenericConfig+0x25c>
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	7d5b      	ldrb	r3, [r3, #21]
 800998e:	2bf2      	cmp	r3, #242	; 0xf2
 8009990:	d006      	beq.n	80099a0 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	7d5b      	ldrb	r3, [r3, #21]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d002      	beq.n	80099a0 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800999a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800999e:	e0fd      	b.n	8009b9c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80099a0:	2301      	movs	r3, #1
 80099a2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80099a8:	4b20      	ldr	r3, [pc, #128]	; (8009a2c <RadioSetTxGenericConfig+0x2e8>)
 80099aa:	6819      	ldr	r1, [r3, #0]
 80099ac:	f107 0314 	add.w	r3, r7, #20
 80099b0:	4a1f      	ldr	r2, [pc, #124]	; (8009a30 <RadioSetTxGenericConfig+0x2ec>)
 80099b2:	4618      	mov	r0, r3
 80099b4:	f001 fb04 	bl	800afc0 <RFW_Init>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 80099be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099c2:	e0eb      	b.n	8009b9c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80099c4:	4b18      	ldr	r3, [pc, #96]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80099c6:	2200      	movs	r2, #0
 80099c8:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80099ca:	4b17      	ldr	r3, [pc, #92]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80099cc:	2201      	movs	r2, #1
 80099ce:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80099d0:	4b15      	ldr	r3, [pc, #84]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	755a      	strb	r2, [r3, #21]
        {
 80099d6:	e00b      	b.n	80099f0 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	7d5a      	ldrb	r2, [r3, #21]
 80099dc:	4b12      	ldr	r3, [pc, #72]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80099de:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	7d9a      	ldrb	r2, [r3, #22]
 80099e4:	4b10      	ldr	r3, [pc, #64]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80099e6:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	7d1a      	ldrb	r2, [r3, #20]
 80099ec:	4b0e      	ldr	r3, [pc, #56]	; (8009a28 <RadioSetTxGenericConfig+0x2e4>)
 80099ee:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80099f0:	f7ff f82d 	bl	8008a4e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80099f4:	2000      	movs	r0, #0
 80099f6:	f7fe f9c9 	bl	8007d8c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80099fa:	480e      	ldr	r0, [pc, #56]	; (8009a34 <RadioSetTxGenericConfig+0x2f0>)
 80099fc:	f000 fdec 	bl	800a5d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009a00:	480d      	ldr	r0, [pc, #52]	; (8009a38 <RadioSetTxGenericConfig+0x2f4>)
 8009a02:	f000 febb 	bl	800a77c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 f97f 	bl	8009d0e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	8a1b      	ldrh	r3, [r3, #16]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 f9c9 	bl	8009dac <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	899b      	ldrh	r3, [r3, #12]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 f9a4 	bl	8009d6c <SUBGRF_SetCrcPolynomial>
        break;
 8009a24:	e0a6      	b.n	8009b74 <RadioSetTxGenericConfig+0x430>
 8009a26:	bf00      	nop
 8009a28:	200008b8 	.word	0x200008b8
 8009a2c:	200008b4 	.word	0x200008b4
 8009a30:	20000914 	.word	0x20000914
 8009a34:	200008f0 	.word	0x200008f0
 8009a38:	200008c6 	.word	0x200008c6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009a3c:	4b59      	ldr	r3, [pc, #356]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	781a      	ldrb	r2, [r3, #0]
 8009a48:	4b56      	ldr	r3, [pc, #344]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	785a      	ldrb	r2, [r3, #1]
 8009a52:	4b54      	ldr	r3, [pc, #336]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	789a      	ldrb	r2, [r3, #2]
 8009a5c:	4b51      	ldr	r3, [pc, #324]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009a5e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	78db      	ldrb	r3, [r3, #3]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d010      	beq.n	8009a8c <RadioSetTxGenericConfig+0x348>
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	dc20      	bgt.n	8009ab0 <RadioSetTxGenericConfig+0x36c>
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d002      	beq.n	8009a78 <RadioSetTxGenericConfig+0x334>
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d005      	beq.n	8009a82 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009a76:	e01b      	b.n	8009ab0 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009a78:	4b4a      	ldr	r3, [pc, #296]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009a80:	e017      	b.n	8009ab2 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009a82:	4b48      	ldr	r3, [pc, #288]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009a8a:	e012      	b.n	8009ab2 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2b0b      	cmp	r3, #11
 8009a92:	d003      	beq.n	8009a9c <RadioSetTxGenericConfig+0x358>
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	2b0c      	cmp	r3, #12
 8009a9a:	d104      	bne.n	8009aa6 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009a9c:	4b41      	ldr	r3, [pc, #260]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009aa4:	e005      	b.n	8009ab2 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009aa6:	4b3f      	ldr	r3, [pc, #252]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009aae:	e000      	b.n	8009ab2 <RadioSetTxGenericConfig+0x36e>
            break;
 8009ab0:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009ab2:	4b3c      	ldr	r3, [pc, #240]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	889a      	ldrh	r2, [r3, #4]
 8009abc:	4b39      	ldr	r3, [pc, #228]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009abe:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	799a      	ldrb	r2, [r3, #6]
 8009ac4:	4b37      	ldr	r3, [pc, #220]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009ac6:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	79da      	ldrb	r2, [r3, #7]
 8009acc:	4b35      	ldr	r3, [pc, #212]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009ace:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	7a1a      	ldrb	r2, [r3, #8]
 8009ad6:	4b33      	ldr	r3, [pc, #204]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8009adc:	f7fe ffb7 	bl	8008a4e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009ae0:	2001      	movs	r0, #1
 8009ae2:	f7fe f953 	bl	8007d8c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009ae6:	4830      	ldr	r0, [pc, #192]	; (8009ba8 <RadioSetTxGenericConfig+0x464>)
 8009ae8:	f000 fd76 	bl	800a5d8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009aec:	482f      	ldr	r0, [pc, #188]	; (8009bac <RadioSetTxGenericConfig+0x468>)
 8009aee:	f000 fe45 	bl	800a77c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009af2:	4b2c      	ldr	r3, [pc, #176]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009af8:	2b06      	cmp	r3, #6
 8009afa:	d10d      	bne.n	8009b18 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009afc:	f640 0089 	movw	r0, #2185	; 0x889
 8009b00:	f000 ff98 	bl	800aa34 <SUBGRF_ReadRegister>
 8009b04:	4603      	mov	r3, r0
 8009b06:	f023 0304 	bic.w	r3, r3, #4
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	f640 0089 	movw	r0, #2185	; 0x889
 8009b12:	f000 ff7b 	bl	800aa0c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8009b16:	e02d      	b.n	8009b74 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009b18:	f640 0089 	movw	r0, #2185	; 0x889
 8009b1c:	f000 ff8a 	bl	800aa34 <SUBGRF_ReadRegister>
 8009b20:	4603      	mov	r3, r0
 8009b22:	f043 0304 	orr.w	r3, r3, #4
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	4619      	mov	r1, r3
 8009b2a:	f640 0089 	movw	r0, #2185	; 0x889
 8009b2e:	f000 ff6d 	bl	800aa0c <SUBGRF_WriteRegister>
        break;
 8009b32:	e01f      	b.n	8009b74 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d004      	beq.n	8009b46 <RadioSetTxGenericConfig+0x402>
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b44:	d902      	bls.n	8009b4c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b4a:	e027      	b.n	8009b9c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009b4c:	2003      	movs	r0, #3
 8009b4e:	f7fe f91d 	bl	8007d8c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009b52:	4b14      	ldr	r3, [pc, #80]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009b54:	2202      	movs	r2, #2
 8009b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a11      	ldr	r2, [pc, #68]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009b60:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009b62:	4b10      	ldr	r3, [pc, #64]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009b64:	2216      	movs	r2, #22
 8009b66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009b6a:	480f      	ldr	r0, [pc, #60]	; (8009ba8 <RadioSetTxGenericConfig+0x464>)
 8009b6c:	f000 fd34 	bl	800a5d8 <SUBGRF_SetModulationParams>
        break;
 8009b70:	e000      	b.n	8009b74 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009b72:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009b74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f001 f863 	bl	800ac44 <SUBGRF_SetRfTxPower>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	461a      	mov	r2, r3
 8009b82:	4b08      	ldr	r3, [pc, #32]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009b84:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009b88:	4b06      	ldr	r3, [pc, #24]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009b8a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f001 fa37 	bl	800b002 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009b94:	4a03      	ldr	r2, [pc, #12]	; (8009ba4 <RadioSetTxGenericConfig+0x460>)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6053      	str	r3, [r2, #4]
    return 0;
 8009b9a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3738      	adds	r7, #56	; 0x38
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	200008b8 	.word	0x200008b8
 8009ba8:	200008f0 	.word	0x200008f0
 8009bac:	200008c6 	.word	0x200008c6

08009bb0 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3714      	adds	r7, #20
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bc80      	pop	{r7}
 8009bc6:	4770      	bx	lr

08009bc8 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009bd2:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bc80      	pop	{r7}
 8009bdc:	4770      	bx	lr
	...

08009be0 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d002      	beq.n	8009bf4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009bee:	4a1d      	ldr	r2, [pc, #116]	; (8009c64 <SUBGRF_Init+0x84>)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009bf4:	f7f8 fe06 	bl	8002804 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009bf8:	2002      	movs	r0, #2
 8009bfa:	f001 f8ff 	bl	800adfc <Radio_SMPS_Set>

    ImageCalibrated = false;
 8009bfe:	4b1a      	ldr	r3, [pc, #104]	; (8009c68 <SUBGRF_Init+0x88>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009c04:	2000      	movs	r0, #0
 8009c06:	f000 f97d 	bl	8009f04 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8009c0a:	f001 fb52 	bl	800b2b2 <RBI_IsTCXO>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d10e      	bne.n	8009c32 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009c14:	2140      	movs	r1, #64	; 0x40
 8009c16:	2001      	movs	r0, #1
 8009c18:	f000 fb82 	bl	800a320 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	f640 1011 	movw	r0, #2321	; 0x911
 8009c22:	f000 fef3 	bl	800aa0c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8009c26:	237f      	movs	r3, #127	; 0x7f
 8009c28:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8009c2a:	7b38      	ldrb	r0, [r7, #12]
 8009c2c:	f000 fa8b 	bl	800a146 <SUBGRF_Calibrate>
 8009c30:	e009      	b.n	8009c46 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009c32:	2120      	movs	r1, #32
 8009c34:	f640 1011 	movw	r0, #2321	; 0x911
 8009c38:	f000 fee8 	bl	800aa0c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009c3c:	2120      	movs	r1, #32
 8009c3e:	f640 1012 	movw	r0, #2322	; 0x912
 8009c42:	f000 fee3 	bl	800aa0c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009c46:	210e      	movs	r1, #14
 8009c48:	f640 101f 	movw	r0, #2335	; 0x91f
 8009c4c:	f000 fede 	bl	800aa0c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8009c50:	f001 fa86 	bl	800b160 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009c54:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <SUBGRF_Init+0x8c>)
 8009c56:	2201      	movs	r2, #1
 8009c58:	701a      	strb	r2, [r3, #0]
}
 8009c5a:	bf00      	nop
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	20000950 	.word	0x20000950
 8009c68:	2000094c 	.word	0x2000094c
 8009c6c:	20000944 	.word	0x20000944

08009c70 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009c70:	b480      	push	{r7}
 8009c72:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009c74:	4b02      	ldr	r3, [pc, #8]	; (8009c80 <SUBGRF_GetOperatingMode+0x10>)
 8009c76:	781b      	ldrb	r3, [r3, #0]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bc80      	pop	{r7}
 8009c7e:	4770      	bx	lr
 8009c80:	20000944 	.word	0x20000944

08009c84 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009c90:	78fb      	ldrb	r3, [r7, #3]
 8009c92:	461a      	mov	r2, r3
 8009c94:	6879      	ldr	r1, [r7, #4]
 8009c96:	2000      	movs	r0, #0
 8009c98:	f000 ff24 	bl	800aae4 <SUBGRF_WriteBuffer>
}
 8009c9c:	bf00      	nop
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009cb6:	f107 0317 	add.w	r3, r7, #23
 8009cba:	4619      	mov	r1, r3
 8009cbc:	68b8      	ldr	r0, [r7, #8]
 8009cbe:	f000 fe27 	bl	800a910 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	79fa      	ldrb	r2, [r7, #7]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d201      	bcs.n	8009cd0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e007      	b.n	8009ce0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009cd0:	7df8      	ldrb	r0, [r7, #23]
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	68f9      	ldr	r1, [r7, #12]
 8009cda:	f000 ff25 	bl	800ab28 <SUBGRF_ReadBuffer>

    return 0;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3718      	adds	r7, #24
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	607a      	str	r2, [r7, #4]
 8009cf4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8009cf6:	7afb      	ldrb	r3, [r7, #11]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f7ff ffc2 	bl	8009c84 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f91b 	bl	8009f3c <SUBGRF_SetTx>
}
 8009d06:	bf00      	nop
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8009d16:	2208      	movs	r2, #8
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8009d1e:	f000 fe9d 	bl	800aa5c <SUBGRF_WriteRegisters>
    return 0;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	4603      	mov	r3, r0
 8009d34:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8009d36:	88fb      	ldrh	r3, [r7, #6]
 8009d38:	0a1b      	lsrs	r3, r3, #8
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8009d40:	88fb      	ldrh	r3, [r7, #6]
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009d46:	f000 fb6f 	bl	800a428 <SUBGRF_GetPacketType>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d108      	bne.n	8009d62 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8009d50:	f107 030c 	add.w	r3, r7, #12
 8009d54:	2202      	movs	r2, #2
 8009d56:	4619      	mov	r1, r3
 8009d58:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8009d5c:	f000 fe7e 	bl	800aa5c <SUBGRF_WriteRegisters>
            break;
 8009d60:	e000      	b.n	8009d64 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8009d62:	bf00      	nop
    }
}
 8009d64:	bf00      	nop
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	4603      	mov	r3, r0
 8009d74:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8009d76:	88fb      	ldrh	r3, [r7, #6]
 8009d78:	0a1b      	lsrs	r3, r3, #8
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009d80:	88fb      	ldrh	r3, [r7, #6]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009d86:	f000 fb4f 	bl	800a428 <SUBGRF_GetPacketType>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d108      	bne.n	8009da2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009d90:	f107 030c 	add.w	r3, r7, #12
 8009d94:	2202      	movs	r2, #2
 8009d96:	4619      	mov	r1, r3
 8009d98:	f240 60be 	movw	r0, #1726	; 0x6be
 8009d9c:	f000 fe5e 	bl	800aa5c <SUBGRF_WriteRegisters>
            break;
 8009da0:	e000      	b.n	8009da4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8009da2:	bf00      	nop
    }
}
 8009da4:	bf00      	nop
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	4603      	mov	r3, r0
 8009db4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009dba:	f000 fb35 	bl	800a428 <SUBGRF_GetPacketType>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d121      	bne.n	8009e08 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8009dc4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009dc8:	f000 fe34 	bl	800aa34 <SUBGRF_ReadRegister>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f023 0301 	bic.w	r3, r3, #1
 8009dd2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8009dd4:	88fb      	ldrh	r3, [r7, #6]
 8009dd6:	0a1b      	lsrs	r3, r3, #8
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	b25b      	sxtb	r3, r3
 8009ddc:	f003 0301 	and.w	r3, r3, #1
 8009de0:	b25a      	sxtb	r2, r3
 8009de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	b25b      	sxtb	r3, r3
 8009dea:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
 8009dee:	4619      	mov	r1, r3
 8009df0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009df4:	f000 fe0a 	bl	800aa0c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8009df8:	88fb      	ldrh	r3, [r7, #6]
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8009e02:	f000 fe03 	bl	800aa0c <SUBGRF_WriteRegister>
            break;
 8009e06:	e000      	b.n	8009e0a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8009e08:	bf00      	nop
    }
}
 8009e0a:	bf00      	nop
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b082      	sub	sp, #8
 8009e16:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8009e24:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009e28:	f000 fe04 	bl	800aa34 <SUBGRF_ReadRegister>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8009e30:	79fb      	ldrb	r3, [r7, #7]
 8009e32:	f023 0301 	bic.w	r3, r3, #1
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	4619      	mov	r1, r3
 8009e3a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009e3e:	f000 fde5 	bl	800aa0c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8009e42:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009e46:	f000 fdf5 	bl	800aa34 <SUBGRF_ReadRegister>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8009e4e:	79bb      	ldrb	r3, [r7, #6]
 8009e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	4619      	mov	r1, r3
 8009e58:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009e5c:	f000 fdd6 	bl	800aa0c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009e60:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009e64:	f000 f88a 	bl	8009f7c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009e68:	463b      	mov	r3, r7
 8009e6a:	2204      	movs	r2, #4
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	f640 0019 	movw	r0, #2073	; 0x819
 8009e72:	f000 fe15 	bl	800aaa0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8009e76:	2000      	movs	r0, #0
 8009e78:	f000 f844 	bl	8009f04 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009e7c:	79fb      	ldrb	r3, [r7, #7]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009e84:	f000 fdc2 	bl	800aa0c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009e88:	79bb      	ldrb	r3, [r7, #6]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009e90:	f000 fdbc 	bl	800aa0c <SUBGRF_WriteRegister>

    return number;
 8009e94:	683b      	ldr	r3, [r7, #0]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
	...

08009ea0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	f001 f999 	bl	800b1e0 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009eae:	2002      	movs	r0, #2
 8009eb0:	f000 ffa4 	bl	800adfc <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009eb4:	793b      	ldrb	r3, [r7, #4]
 8009eb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009ec0:	793b      	ldrb	r3, [r7, #4]
 8009ec2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009eca:	b25b      	sxtb	r3, r3
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009ed0:	793b      	ldrb	r3, [r7, #4]
 8009ed2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009eda:	4313      	orrs	r3, r2
 8009edc:	b25b      	sxtb	r3, r3
 8009ede:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009ee0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8009ee2:	f107 030f 	add.w	r3, r7, #15
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	4619      	mov	r1, r3
 8009eea:	2084      	movs	r0, #132	; 0x84
 8009eec:	f000 fe3e 	bl	800ab6c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8009ef0:	4b03      	ldr	r3, [pc, #12]	; (8009f00 <SUBGRF_SetSleep+0x60>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	701a      	strb	r2, [r3, #0]
}
 8009ef6:	bf00      	nop
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	20000944 	.word	0x20000944

08009f04 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8009f0e:	1dfb      	adds	r3, r7, #7
 8009f10:	2201      	movs	r2, #1
 8009f12:	4619      	mov	r1, r3
 8009f14:	2080      	movs	r0, #128	; 0x80
 8009f16:	f000 fe29 	bl	800ab6c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8009f1a:	79fb      	ldrb	r3, [r7, #7]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d103      	bne.n	8009f28 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8009f20:	4b05      	ldr	r3, [pc, #20]	; (8009f38 <SUBGRF_SetStandby+0x34>)
 8009f22:	2201      	movs	r2, #1
 8009f24:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8009f26:	e002      	b.n	8009f2e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8009f28:	4b03      	ldr	r3, [pc, #12]	; (8009f38 <SUBGRF_SetStandby+0x34>)
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	701a      	strb	r2, [r3, #0]
}
 8009f2e:	bf00      	nop
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20000944 	.word	0x20000944

08009f3c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8009f44:	4b0c      	ldr	r3, [pc, #48]	; (8009f78 <SUBGRF_SetTx+0x3c>)
 8009f46:	2204      	movs	r2, #4
 8009f48:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	0c1b      	lsrs	r3, r3, #16
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	0a1b      	lsrs	r3, r3, #8
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8009f60:	f107 030c 	add.w	r3, r7, #12
 8009f64:	2203      	movs	r2, #3
 8009f66:	4619      	mov	r1, r3
 8009f68:	2083      	movs	r0, #131	; 0x83
 8009f6a:	f000 fdff 	bl	800ab6c <SUBGRF_WriteCommand>
}
 8009f6e:	bf00      	nop
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	20000944 	.word	0x20000944

08009f7c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009f84:	4b0c      	ldr	r3, [pc, #48]	; (8009fb8 <SUBGRF_SetRx+0x3c>)
 8009f86:	2205      	movs	r2, #5
 8009f88:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	0c1b      	lsrs	r3, r3, #16
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	0a1b      	lsrs	r3, r3, #8
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009fa0:	f107 030c 	add.w	r3, r7, #12
 8009fa4:	2203      	movs	r2, #3
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	2082      	movs	r0, #130	; 0x82
 8009faa:	f000 fddf 	bl	800ab6c <SUBGRF_WriteCommand>
}
 8009fae:	bf00      	nop
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	20000944 	.word	0x20000944

08009fbc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009fc4:	4b0e      	ldr	r3, [pc, #56]	; (800a000 <SUBGRF_SetRxBoosted+0x44>)
 8009fc6:	2205      	movs	r2, #5
 8009fc8:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009fca:	2197      	movs	r1, #151	; 0x97
 8009fcc:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8009fd0:	f000 fd1c 	bl	800aa0c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	0c1b      	lsrs	r3, r3, #16
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	0a1b      	lsrs	r3, r3, #8
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009fea:	f107 030c 	add.w	r3, r7, #12
 8009fee:	2203      	movs	r2, #3
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	2082      	movs	r0, #130	; 0x82
 8009ff4:	f000 fdba 	bl	800ab6c <SUBGRF_WriteCommand>
}
 8009ff8:	bf00      	nop
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	20000944 	.word	0x20000944

0800a004 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	0c1b      	lsrs	r3, r3, #16
 800a012:	b2db      	uxtb	r3, r3
 800a014:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	0a1b      	lsrs	r3, r3, #8
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	b2db      	uxtb	r3, r3
 800a022:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	0c1b      	lsrs	r3, r3, #16
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	0a1b      	lsrs	r3, r3, #8
 800a030:	b2db      	uxtb	r3, r3
 800a032:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	b2db      	uxtb	r3, r3
 800a038:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a03a:	f107 0308 	add.w	r3, r7, #8
 800a03e:	2206      	movs	r2, #6
 800a040:	4619      	mov	r1, r3
 800a042:	2094      	movs	r0, #148	; 0x94
 800a044:	f000 fd92 	bl	800ab6c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a048:	4b03      	ldr	r3, [pc, #12]	; (800a058 <SUBGRF_SetRxDutyCycle+0x54>)
 800a04a:	2206      	movs	r2, #6
 800a04c:	701a      	strb	r2, [r3, #0]
}
 800a04e:	bf00      	nop
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20000944 	.word	0x20000944

0800a05c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a060:	2200      	movs	r2, #0
 800a062:	2100      	movs	r1, #0
 800a064:	20c5      	movs	r0, #197	; 0xc5
 800a066:	f000 fd81 	bl	800ab6c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a06a:	4b02      	ldr	r3, [pc, #8]	; (800a074 <SUBGRF_SetCad+0x18>)
 800a06c:	2207      	movs	r2, #7
 800a06e:	701a      	strb	r2, [r3, #0]
}
 800a070:	bf00      	nop
 800a072:	bd80      	pop	{r7, pc}
 800a074:	20000944 	.word	0x20000944

0800a078 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a07c:	2200      	movs	r2, #0
 800a07e:	2100      	movs	r1, #0
 800a080:	20d1      	movs	r0, #209	; 0xd1
 800a082:	f000 fd73 	bl	800ab6c <SUBGRF_WriteCommand>
}
 800a086:	bf00      	nop
 800a088:	bd80      	pop	{r7, pc}

0800a08a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a08e:	2200      	movs	r2, #0
 800a090:	2100      	movs	r1, #0
 800a092:	20d2      	movs	r0, #210	; 0xd2
 800a094:	f000 fd6a 	bl	800ab6c <SUBGRF_WriteCommand>
}
 800a098:	bf00      	nop
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a0a6:	1dfb      	adds	r3, r7, #7
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	209f      	movs	r0, #159	; 0x9f
 800a0ae:	f000 fd5d 	bl	800ab6c <SUBGRF_WriteCommand>
}
 800a0b2:	bf00      	nop
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b084      	sub	sp, #16
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a0c4:	1dfb      	adds	r3, r7, #7
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	20a0      	movs	r0, #160	; 0xa0
 800a0cc:	f000 fd4e 	bl	800ab6c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a0d0:	79fb      	ldrb	r3, [r7, #7]
 800a0d2:	2b3f      	cmp	r3, #63	; 0x3f
 800a0d4:	d91c      	bls.n	800a110 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a0d6:	79fb      	ldrb	r3, [r7, #7]
 800a0d8:	085b      	lsrs	r3, r3, #1
 800a0da:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a0e4:	e005      	b.n	800a0f2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
 800a0e8:	089b      	lsrs	r3, r3, #2
 800a0ea:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
 800a0f4:	2b1f      	cmp	r3, #31
 800a0f6:	d8f6      	bhi.n	800a0e6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	7bbb      	ldrb	r3, [r7, #14]
 800a100:	4413      	add	r3, r2
 800a102:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a104:	7b7b      	ldrb	r3, [r7, #13]
 800a106:	4619      	mov	r1, r3
 800a108:	f240 7006 	movw	r0, #1798	; 0x706
 800a10c:	f000 fc7e 	bl	800aa0c <SUBGRF_WriteRegister>
    }
}
 800a110:	bf00      	nop
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a11e:	f001 f8d3 	bl	800b2c8 <RBI_IsDCDC>
 800a122:	4603      	mov	r3, r0
 800a124:	2b01      	cmp	r3, #1
 800a126:	d102      	bne.n	800a12e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a128:	2301      	movs	r3, #1
 800a12a:	71fb      	strb	r3, [r7, #7]
 800a12c:	e001      	b.n	800a132 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a12e:	2300      	movs	r3, #0
 800a130:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a132:	1dfb      	adds	r3, r7, #7
 800a134:	2201      	movs	r2, #1
 800a136:	4619      	mov	r1, r3
 800a138:	2096      	movs	r0, #150	; 0x96
 800a13a:	f000 fd17 	bl	800ab6c <SUBGRF_WriteCommand>
}
 800a13e:	bf00      	nop
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a14e:	793b      	ldrb	r3, [r7, #4]
 800a150:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a154:	b2db      	uxtb	r3, r3
 800a156:	019b      	lsls	r3, r3, #6
 800a158:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a15a:	793b      	ldrb	r3, [r7, #4]
 800a15c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a160:	b2db      	uxtb	r3, r3
 800a162:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a164:	b25b      	sxtb	r3, r3
 800a166:	4313      	orrs	r3, r2
 800a168:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a16a:	793b      	ldrb	r3, [r7, #4]
 800a16c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a170:	b2db      	uxtb	r3, r3
 800a172:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a174:	b25b      	sxtb	r3, r3
 800a176:	4313      	orrs	r3, r2
 800a178:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a17a:	793b      	ldrb	r3, [r7, #4]
 800a17c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a180:	b2db      	uxtb	r3, r3
 800a182:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a184:	b25b      	sxtb	r3, r3
 800a186:	4313      	orrs	r3, r2
 800a188:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a18a:	793b      	ldrb	r3, [r7, #4]
 800a18c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a190:	b2db      	uxtb	r3, r3
 800a192:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a194:	b25b      	sxtb	r3, r3
 800a196:	4313      	orrs	r3, r2
 800a198:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a19a:	793b      	ldrb	r3, [r7, #4]
 800a19c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a1a4:	b25b      	sxtb	r3, r3
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a1aa:	793b      	ldrb	r3, [r7, #4]
 800a1ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	b25b      	sxtb	r3, r3
 800a1b8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a1ba:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a1bc:	f107 030f 	add.w	r3, r7, #15
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	2089      	movs	r0, #137	; 0x89
 800a1c6:	f000 fcd1 	bl	800ab6c <SUBGRF_WriteCommand>
}
 800a1ca:	bf00      	nop
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
	...

0800a1d4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a1d      	ldr	r2, [pc, #116]	; (800a254 <SUBGRF_CalibrateImage+0x80>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d904      	bls.n	800a1ee <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a1e4:	23e1      	movs	r3, #225	; 0xe1
 800a1e6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a1e8:	23e9      	movs	r3, #233	; 0xe9
 800a1ea:	737b      	strb	r3, [r7, #13]
 800a1ec:	e027      	b.n	800a23e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a19      	ldr	r2, [pc, #100]	; (800a258 <SUBGRF_CalibrateImage+0x84>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d904      	bls.n	800a200 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a1f6:	23d7      	movs	r3, #215	; 0xd7
 800a1f8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a1fa:	23db      	movs	r3, #219	; 0xdb
 800a1fc:	737b      	strb	r3, [r7, #13]
 800a1fe:	e01e      	b.n	800a23e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a16      	ldr	r2, [pc, #88]	; (800a25c <SUBGRF_CalibrateImage+0x88>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d904      	bls.n	800a212 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a208:	23c1      	movs	r3, #193	; 0xc1
 800a20a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a20c:	23c5      	movs	r3, #197	; 0xc5
 800a20e:	737b      	strb	r3, [r7, #13]
 800a210:	e015      	b.n	800a23e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a12      	ldr	r2, [pc, #72]	; (800a260 <SUBGRF_CalibrateImage+0x8c>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d904      	bls.n	800a224 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800a21a:	2375      	movs	r3, #117	; 0x75
 800a21c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800a21e:	2381      	movs	r3, #129	; 0x81
 800a220:	737b      	strb	r3, [r7, #13]
 800a222:	e00c      	b.n	800a23e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a0f      	ldr	r2, [pc, #60]	; (800a264 <SUBGRF_CalibrateImage+0x90>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d904      	bls.n	800a236 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800a22c:	236b      	movs	r3, #107	; 0x6b
 800a22e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800a230:	236f      	movs	r3, #111	; 0x6f
 800a232:	737b      	strb	r3, [r7, #13]
 800a234:	e003      	b.n	800a23e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800a236:	2329      	movs	r3, #41	; 0x29
 800a238:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800a23a:	232b      	movs	r3, #43	; 0x2b
 800a23c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800a23e:	f107 030c 	add.w	r3, r7, #12
 800a242:	2202      	movs	r2, #2
 800a244:	4619      	mov	r1, r3
 800a246:	2098      	movs	r0, #152	; 0x98
 800a248:	f000 fc90 	bl	800ab6c <SUBGRF_WriteCommand>
}
 800a24c:	bf00      	nop
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	35a4e900 	.word	0x35a4e900
 800a258:	32a9f880 	.word	0x32a9f880
 800a25c:	2de54480 	.word	0x2de54480
 800a260:	1b6b0b00 	.word	0x1b6b0b00
 800a264:	1954fc40 	.word	0x1954fc40

0800a268 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800a268:	b590      	push	{r4, r7, lr}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4604      	mov	r4, r0
 800a270:	4608      	mov	r0, r1
 800a272:	4611      	mov	r1, r2
 800a274:	461a      	mov	r2, r3
 800a276:	4623      	mov	r3, r4
 800a278:	71fb      	strb	r3, [r7, #7]
 800a27a:	4603      	mov	r3, r0
 800a27c:	71bb      	strb	r3, [r7, #6]
 800a27e:	460b      	mov	r3, r1
 800a280:	717b      	strb	r3, [r7, #5]
 800a282:	4613      	mov	r3, r2
 800a284:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800a286:	79fb      	ldrb	r3, [r7, #7]
 800a288:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800a28a:	79bb      	ldrb	r3, [r7, #6]
 800a28c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800a28e:	797b      	ldrb	r3, [r7, #5]
 800a290:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800a292:	793b      	ldrb	r3, [r7, #4]
 800a294:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a296:	f107 030c 	add.w	r3, r7, #12
 800a29a:	2204      	movs	r2, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	2095      	movs	r0, #149	; 0x95
 800a2a0:	f000 fc64 	bl	800ab6c <SUBGRF_WriteCommand>
}
 800a2a4:	bf00      	nop
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd90      	pop	{r4, r7, pc}

0800a2ac <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800a2ac:	b590      	push	{r4, r7, lr}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	4623      	mov	r3, r4
 800a2bc:	80fb      	strh	r3, [r7, #6]
 800a2be:	4603      	mov	r3, r0
 800a2c0:	80bb      	strh	r3, [r7, #4]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	807b      	strh	r3, [r7, #2]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a2ca:	88fb      	ldrh	r3, [r7, #6]
 800a2cc:	0a1b      	lsrs	r3, r3, #8
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a2d4:	88fb      	ldrh	r3, [r7, #6]
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a2da:	88bb      	ldrh	r3, [r7, #4]
 800a2dc:	0a1b      	lsrs	r3, r3, #8
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a2e4:	88bb      	ldrh	r3, [r7, #4]
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a2ea:	887b      	ldrh	r3, [r7, #2]
 800a2ec:	0a1b      	lsrs	r3, r3, #8
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a2f4:	887b      	ldrh	r3, [r7, #2]
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a2fa:	883b      	ldrh	r3, [r7, #0]
 800a2fc:	0a1b      	lsrs	r3, r3, #8
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	b2db      	uxtb	r3, r3
 800a302:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a304:	883b      	ldrh	r3, [r7, #0]
 800a306:	b2db      	uxtb	r3, r3
 800a308:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a30a:	f107 0308 	add.w	r3, r7, #8
 800a30e:	2208      	movs	r2, #8
 800a310:	4619      	mov	r1, r3
 800a312:	2008      	movs	r0, #8
 800a314:	f000 fc2a 	bl	800ab6c <SUBGRF_WriteCommand>
}
 800a318:	bf00      	nop
 800a31a:	3714      	adds	r7, #20
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd90      	pop	{r4, r7, pc}

0800a320 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	4603      	mov	r3, r0
 800a328:	6039      	str	r1, [r7, #0]
 800a32a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800a32c:	79fb      	ldrb	r3, [r7, #7]
 800a32e:	f003 0307 	and.w	r3, r3, #7
 800a332:	b2db      	uxtb	r3, r3
 800a334:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	0c1b      	lsrs	r3, r3, #16
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	0a1b      	lsrs	r3, r3, #8
 800a342:	b2db      	uxtb	r3, r3
 800a344:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a34c:	f107 030c 	add.w	r3, r7, #12
 800a350:	2204      	movs	r2, #4
 800a352:	4619      	mov	r1, r3
 800a354:	2097      	movs	r0, #151	; 0x97
 800a356:	f000 fc09 	bl	800ab6c <SUBGRF_WriteCommand>
}
 800a35a:	bf00      	nop
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800a364:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a368:	b084      	sub	sp, #16
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800a36e:	2300      	movs	r3, #0
 800a370:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800a372:	4b1d      	ldr	r3, [pc, #116]	; (800a3e8 <SUBGRF_SetRfFrequency+0x84>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	f083 0301 	eor.w	r3, r3, #1
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d005      	beq.n	800a38c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7ff ff27 	bl	800a1d4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a386:	4b18      	ldr	r3, [pc, #96]	; (800a3e8 <SUBGRF_SetRfFrequency+0x84>)
 800a388:	2201      	movs	r2, #1
 800a38a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	461c      	mov	r4, r3
 800a392:	4615      	mov	r5, r2
 800a394:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a398:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a39c:	4a13      	ldr	r2, [pc, #76]	; (800a3ec <SUBGRF_SetRfFrequency+0x88>)
 800a39e:	f04f 0300 	mov.w	r3, #0
 800a3a2:	4640      	mov	r0, r8
 800a3a4:	4649      	mov	r1, r9
 800a3a6:	f7f5 ff3b 	bl	8000220 <__aeabi_uldivmod>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	0e1b      	lsrs	r3, r3, #24
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	0c1b      	lsrs	r3, r3, #16
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	0a1b      	lsrs	r3, r3, #8
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a3d0:	f107 0308 	add.w	r3, r7, #8
 800a3d4:	2204      	movs	r2, #4
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	2086      	movs	r0, #134	; 0x86
 800a3da:	f000 fbc7 	bl	800ab6c <SUBGRF_WriteCommand>
}
 800a3de:	bf00      	nop
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a3e8:	2000094c 	.word	0x2000094c
 800a3ec:	01e84800 	.word	0x01e84800

0800a3f0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800a3fa:	79fa      	ldrb	r2, [r7, #7]
 800a3fc:	4b09      	ldr	r3, [pc, #36]	; (800a424 <SUBGRF_SetPacketType+0x34>)
 800a3fe:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800a400:	79fb      	ldrb	r3, [r7, #7]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d104      	bne.n	800a410 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a406:	2100      	movs	r1, #0
 800a408:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800a40c:	f000 fafe 	bl	800aa0c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a410:	1dfb      	adds	r3, r7, #7
 800a412:	2201      	movs	r2, #1
 800a414:	4619      	mov	r1, r3
 800a416:	208a      	movs	r0, #138	; 0x8a
 800a418:	f000 fba8 	bl	800ab6c <SUBGRF_WriteCommand>
}
 800a41c:	bf00      	nop
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	20000945 	.word	0x20000945

0800a428 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800a428:	b480      	push	{r7}
 800a42a:	af00      	add	r7, sp, #0
    return PacketType;
 800a42c:	4b02      	ldr	r3, [pc, #8]	; (800a438 <SUBGRF_GetPacketType+0x10>)
 800a42e:	781b      	ldrb	r3, [r3, #0]
}
 800a430:	4618      	mov	r0, r3
 800a432:	46bd      	mov	sp, r7
 800a434:	bc80      	pop	{r7}
 800a436:	4770      	bx	lr
 800a438:	20000945 	.word	0x20000945

0800a43c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	4603      	mov	r3, r0
 800a444:	71fb      	strb	r3, [r7, #7]
 800a446:	460b      	mov	r3, r1
 800a448:	71bb      	strb	r3, [r7, #6]
 800a44a:	4613      	mov	r3, r2
 800a44c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800a44e:	79fb      	ldrb	r3, [r7, #7]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d149      	bne.n	800a4e8 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a454:	2000      	movs	r0, #0
 800a456:	f000 ff42 	bl	800b2de <RBI_GetRFOMaxPowerConfig>
 800a45a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800a45c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	429a      	cmp	r2, r3
 800a464:	da01      	bge.n	800a46a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2b0e      	cmp	r3, #14
 800a46e:	d10e      	bne.n	800a48e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a470:	2301      	movs	r3, #1
 800a472:	2201      	movs	r2, #1
 800a474:	2100      	movs	r1, #0
 800a476:	2004      	movs	r0, #4
 800a478:	f7ff fef6 	bl	800a268 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a47c:	79ba      	ldrb	r2, [r7, #6]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	b2db      	uxtb	r3, r3
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	b2db      	uxtb	r3, r3
 800a486:	330e      	adds	r3, #14
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	71bb      	strb	r3, [r7, #6]
 800a48c:	e01f      	b.n	800a4ce <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2b0a      	cmp	r3, #10
 800a492:	d10e      	bne.n	800a4b2 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a494:	2301      	movs	r3, #1
 800a496:	2201      	movs	r2, #1
 800a498:	2100      	movs	r1, #0
 800a49a:	2001      	movs	r0, #1
 800a49c:	f7ff fee4 	bl	800a268 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a4a0:	79ba      	ldrb	r2, [r7, #6]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	330d      	adds	r3, #13
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	71bb      	strb	r3, [r7, #6]
 800a4b0:	e00d      	b.n	800a4ce <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	2007      	movs	r0, #7
 800a4ba:	f7ff fed5 	bl	800a268 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a4be:	79ba      	ldrb	r2, [r7, #6]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	330e      	adds	r3, #14
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800a4ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a4d2:	f113 0f11 	cmn.w	r3, #17
 800a4d6:	da01      	bge.n	800a4dc <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800a4d8:	23ef      	movs	r3, #239	; 0xef
 800a4da:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800a4dc:	2118      	movs	r1, #24
 800a4de:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a4e2:	f000 fa93 	bl	800aa0c <SUBGRF_WriteRegister>
 800a4e6:	e067      	b.n	800a5b8 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800a4e8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a4ec:	f000 faa2 	bl	800aa34 <SUBGRF_ReadRegister>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	f043 031e 	orr.w	r3, r3, #30
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a4fe:	f000 fa85 	bl	800aa0c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800a502:	2001      	movs	r0, #1
 800a504:	f000 feeb 	bl	800b2de <RBI_GetRFOMaxPowerConfig>
 800a508:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800a50a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	429a      	cmp	r2, r3
 800a512:	da01      	bge.n	800a518 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2b14      	cmp	r3, #20
 800a51c:	d10e      	bne.n	800a53c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800a51e:	2301      	movs	r3, #1
 800a520:	2200      	movs	r2, #0
 800a522:	2105      	movs	r1, #5
 800a524:	2003      	movs	r0, #3
 800a526:	f7ff fe9f 	bl	800a268 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a52a:	79ba      	ldrb	r2, [r7, #6]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	b2db      	uxtb	r3, r3
 800a534:	3316      	adds	r3, #22
 800a536:	b2db      	uxtb	r3, r3
 800a538:	71bb      	strb	r3, [r7, #6]
 800a53a:	e031      	b.n	800a5a0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2b11      	cmp	r3, #17
 800a540:	d10e      	bne.n	800a560 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800a542:	2301      	movs	r3, #1
 800a544:	2200      	movs	r2, #0
 800a546:	2103      	movs	r1, #3
 800a548:	2002      	movs	r0, #2
 800a54a:	f7ff fe8d 	bl	800a268 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a54e:	79ba      	ldrb	r2, [r7, #6]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	1ad3      	subs	r3, r2, r3
 800a556:	b2db      	uxtb	r3, r3
 800a558:	3316      	adds	r3, #22
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	71bb      	strb	r3, [r7, #6]
 800a55e:	e01f      	b.n	800a5a0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2b0e      	cmp	r3, #14
 800a564:	d10e      	bne.n	800a584 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800a566:	2301      	movs	r3, #1
 800a568:	2200      	movs	r2, #0
 800a56a:	2102      	movs	r1, #2
 800a56c:	2002      	movs	r0, #2
 800a56e:	f7ff fe7b 	bl	800a268 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a572:	79ba      	ldrb	r2, [r7, #6]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	330e      	adds	r3, #14
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	71bb      	strb	r3, [r7, #6]
 800a582:	e00d      	b.n	800a5a0 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800a584:	2301      	movs	r3, #1
 800a586:	2200      	movs	r2, #0
 800a588:	2107      	movs	r1, #7
 800a58a:	2004      	movs	r0, #4
 800a58c:	f7ff fe6c 	bl	800a268 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a590:	79ba      	ldrb	r2, [r7, #6]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	b2db      	uxtb	r3, r3
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	3316      	adds	r3, #22
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800a5a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a5a4:	f113 0f09 	cmn.w	r3, #9
 800a5a8:	da01      	bge.n	800a5ae <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800a5aa:	23f7      	movs	r3, #247	; 0xf7
 800a5ac:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800a5ae:	2138      	movs	r1, #56	; 0x38
 800a5b0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a5b4:	f000 fa2a 	bl	800aa0c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800a5b8:	79bb      	ldrb	r3, [r7, #6]
 800a5ba:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800a5bc:	797b      	ldrb	r3, [r7, #5]
 800a5be:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800a5c0:	f107 0308 	add.w	r3, r7, #8
 800a5c4:	2202      	movs	r2, #2
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	208e      	movs	r0, #142	; 0x8e
 800a5ca:	f000 facf 	bl	800ab6c <SUBGRF_WriteCommand>
}
 800a5ce:	bf00      	nop
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800a5d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a5dc:	b086      	sub	sp, #24
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a5e6:	4a61      	ldr	r2, [pc, #388]	; (800a76c <SUBGRF_SetModulationParams+0x194>)
 800a5e8:	f107 0308 	add.w	r3, r7, #8
 800a5ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a5f0:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	781a      	ldrb	r2, [r3, #0]
 800a5f8:	4b5d      	ldr	r3, [pc, #372]	; (800a770 <SUBGRF_SetModulationParams+0x198>)
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d004      	beq.n	800a60a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff fef3 	bl	800a3f0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	2b03      	cmp	r3, #3
 800a610:	f200 80a5 	bhi.w	800a75e <SUBGRF_SetModulationParams+0x186>
 800a614:	a201      	add	r2, pc, #4	; (adr r2, 800a61c <SUBGRF_SetModulationParams+0x44>)
 800a616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61a:	bf00      	nop
 800a61c:	0800a62d 	.word	0x0800a62d
 800a620:	0800a6ed 	.word	0x0800a6ed
 800a624:	0800a6af 	.word	0x0800a6af
 800a628:	0800a71b 	.word	0x0800a71b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800a62c:	2308      	movs	r3, #8
 800a62e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	4a4f      	ldr	r2, [pc, #316]	; (800a774 <SUBGRF_SetModulationParams+0x19c>)
 800a636:	fbb2 f3f3 	udiv	r3, r2, r3
 800a63a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	0c1b      	lsrs	r3, r3, #16
 800a640:	b2db      	uxtb	r3, r3
 800a642:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	0a1b      	lsrs	r3, r3, #8
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	7b1b      	ldrb	r3, [r3, #12]
 800a656:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	7b5b      	ldrb	r3, [r3, #13]
 800a65c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	2200      	movs	r2, #0
 800a664:	461c      	mov	r4, r3
 800a666:	4615      	mov	r5, r2
 800a668:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a66c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a670:	4a41      	ldr	r2, [pc, #260]	; (800a778 <SUBGRF_SetModulationParams+0x1a0>)
 800a672:	f04f 0300 	mov.w	r3, #0
 800a676:	4640      	mov	r0, r8
 800a678:	4649      	mov	r1, r9
 800a67a:	f7f5 fdd1 	bl	8000220 <__aeabi_uldivmod>
 800a67e:	4602      	mov	r2, r0
 800a680:	460b      	mov	r3, r1
 800a682:	4613      	mov	r3, r2
 800a684:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	0c1b      	lsrs	r3, r3, #16
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	0a1b      	lsrs	r3, r3, #8
 800a692:	b2db      	uxtb	r3, r3
 800a694:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a69c:	7cfb      	ldrb	r3, [r7, #19]
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	f107 0308 	add.w	r3, r7, #8
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	208b      	movs	r0, #139	; 0x8b
 800a6a8:	f000 fa60 	bl	800ab6c <SUBGRF_WriteCommand>
        break;
 800a6ac:	e058      	b.n	800a760 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800a6ae:	2304      	movs	r3, #4
 800a6b0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	4a2f      	ldr	r2, [pc, #188]	; (800a774 <SUBGRF_SetModulationParams+0x19c>)
 800a6b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6bc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	0c1b      	lsrs	r3, r3, #16
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	0a1b      	lsrs	r3, r3, #8
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	7d1b      	ldrb	r3, [r3, #20]
 800a6d8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a6da:	7cfb      	ldrb	r3, [r7, #19]
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	f107 0308 	add.w	r3, r7, #8
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	208b      	movs	r0, #139	; 0x8b
 800a6e6:	f000 fa41 	bl	800ab6c <SUBGRF_WriteCommand>
        break;
 800a6ea:	e039      	b.n	800a760 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800a6ec:	2304      	movs	r3, #4
 800a6ee:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	7e1b      	ldrb	r3, [r3, #24]
 800a6f4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	7e5b      	ldrb	r3, [r3, #25]
 800a6fa:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	7e9b      	ldrb	r3, [r3, #26]
 800a700:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	7edb      	ldrb	r3, [r3, #27]
 800a706:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a708:	7cfb      	ldrb	r3, [r7, #19]
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	f107 0308 	add.w	r3, r7, #8
 800a710:	4619      	mov	r1, r3
 800a712:	208b      	movs	r0, #139	; 0x8b
 800a714:	f000 fa2a 	bl	800ab6c <SUBGRF_WriteCommand>

        break;
 800a718:	e022      	b.n	800a760 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800a71a:	2305      	movs	r3, #5
 800a71c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	4a14      	ldr	r2, [pc, #80]	; (800a774 <SUBGRF_SetModulationParams+0x19c>)
 800a724:	fbb2 f3f3 	udiv	r3, r2, r3
 800a728:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	0c1b      	lsrs	r3, r3, #16
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	0a1b      	lsrs	r3, r3, #8
 800a736:	b2db      	uxtb	r3, r3
 800a738:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	7b1b      	ldrb	r3, [r3, #12]
 800a744:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	7b5b      	ldrb	r3, [r3, #13]
 800a74a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a74c:	7cfb      	ldrb	r3, [r7, #19]
 800a74e:	b29a      	uxth	r2, r3
 800a750:	f107 0308 	add.w	r3, r7, #8
 800a754:	4619      	mov	r1, r3
 800a756:	208b      	movs	r0, #139	; 0x8b
 800a758:	f000 fa08 	bl	800ab6c <SUBGRF_WriteCommand>
        break;
 800a75c:	e000      	b.n	800a760 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800a75e:	bf00      	nop
    }
}
 800a760:	bf00      	nop
 800a762:	3718      	adds	r7, #24
 800a764:	46bd      	mov	sp, r7
 800a766:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a76a:	bf00      	nop
 800a76c:	0800c6e8 	.word	0x0800c6e8
 800a770:	20000945 	.word	0x20000945
 800a774:	3d090000 	.word	0x3d090000
 800a778:	01e84800 	.word	0x01e84800

0800a77c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a788:	4a48      	ldr	r2, [pc, #288]	; (800a8ac <SUBGRF_SetPacketParams+0x130>)
 800a78a:	f107 030c 	add.w	r3, r7, #12
 800a78e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a790:	c303      	stmia	r3!, {r0, r1}
 800a792:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	781a      	ldrb	r2, [r3, #0]
 800a798:	4b45      	ldr	r3, [pc, #276]	; (800a8b0 <SUBGRF_SetPacketParams+0x134>)
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d004      	beq.n	800a7aa <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7ff fe23 	bl	800a3f0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	2b03      	cmp	r3, #3
 800a7b0:	d878      	bhi.n	800a8a4 <SUBGRF_SetPacketParams+0x128>
 800a7b2:	a201      	add	r2, pc, #4	; (adr r2, 800a7b8 <SUBGRF_SetPacketParams+0x3c>)
 800a7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b8:	0800a7c9 	.word	0x0800a7c9
 800a7bc:	0800a859 	.word	0x0800a859
 800a7c0:	0800a84d 	.word	0x0800a84d
 800a7c4:	0800a7c9 	.word	0x0800a7c9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	7a5b      	ldrb	r3, [r3, #9]
 800a7cc:	2bf1      	cmp	r3, #241	; 0xf1
 800a7ce:	d10a      	bne.n	800a7e6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800a7d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a7d4:	f7ff faaa 	bl	8009d2c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800a7d8:	f248 0005 	movw	r0, #32773	; 0x8005
 800a7dc:	f7ff fac6 	bl	8009d6c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800a7e0:	2302      	movs	r3, #2
 800a7e2:	75bb      	strb	r3, [r7, #22]
 800a7e4:	e011      	b.n	800a80a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	7a5b      	ldrb	r3, [r3, #9]
 800a7ea:	2bf2      	cmp	r3, #242	; 0xf2
 800a7ec:	d10a      	bne.n	800a804 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800a7ee:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800a7f2:	f7ff fa9b 	bl	8009d2c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800a7f6:	f241 0021 	movw	r0, #4129	; 0x1021
 800a7fa:	f7ff fab7 	bl	8009d6c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800a7fe:	2306      	movs	r3, #6
 800a800:	75bb      	strb	r3, [r7, #22]
 800a802:	e002      	b.n	800a80a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	7a5b      	ldrb	r3, [r3, #9]
 800a808:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800a80a:	2309      	movs	r3, #9
 800a80c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	885b      	ldrh	r3, [r3, #2]
 800a812:	0a1b      	lsrs	r3, r3, #8
 800a814:	b29b      	uxth	r3, r3
 800a816:	b2db      	uxtb	r3, r3
 800a818:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	885b      	ldrh	r3, [r3, #2]
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	791b      	ldrb	r3, [r3, #4]
 800a826:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	795b      	ldrb	r3, [r3, #5]
 800a82c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	799b      	ldrb	r3, [r3, #6]
 800a832:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	79db      	ldrb	r3, [r3, #7]
 800a838:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	7a1b      	ldrb	r3, [r3, #8]
 800a83e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800a840:	7dbb      	ldrb	r3, [r7, #22]
 800a842:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	7a9b      	ldrb	r3, [r3, #10]
 800a848:	753b      	strb	r3, [r7, #20]
        break;
 800a84a:	e022      	b.n	800a892 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800a84c:	2301      	movs	r3, #1
 800a84e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	7b1b      	ldrb	r3, [r3, #12]
 800a854:	733b      	strb	r3, [r7, #12]
        break;
 800a856:	e01c      	b.n	800a892 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800a858:	2306      	movs	r3, #6
 800a85a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	89db      	ldrh	r3, [r3, #14]
 800a860:	0a1b      	lsrs	r3, r3, #8
 800a862:	b29b      	uxth	r3, r3
 800a864:	b2db      	uxtb	r3, r3
 800a866:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	89db      	ldrh	r3, [r3, #14]
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	7c1a      	ldrb	r2, [r3, #16]
 800a874:	4b0f      	ldr	r3, [pc, #60]	; (800a8b4 <SUBGRF_SetPacketParams+0x138>)
 800a876:	4611      	mov	r1, r2
 800a878:	7019      	strb	r1, [r3, #0]
 800a87a:	4613      	mov	r3, r2
 800a87c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	7c5b      	ldrb	r3, [r3, #17]
 800a882:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	7c9b      	ldrb	r3, [r3, #18]
 800a888:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	7cdb      	ldrb	r3, [r3, #19]
 800a88e:	747b      	strb	r3, [r7, #17]
        break;
 800a890:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800a892:	7dfb      	ldrb	r3, [r7, #23]
 800a894:	b29a      	uxth	r2, r3
 800a896:	f107 030c 	add.w	r3, r7, #12
 800a89a:	4619      	mov	r1, r3
 800a89c:	208c      	movs	r0, #140	; 0x8c
 800a89e:	f000 f965 	bl	800ab6c <SUBGRF_WriteCommand>
 800a8a2:	e000      	b.n	800a8a6 <SUBGRF_SetPacketParams+0x12a>
        return;
 800a8a4:	bf00      	nop
}
 800a8a6:	3718      	adds	r7, #24
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	0800c6f0 	.word	0x0800c6f0
 800a8b0:	20000945 	.word	0x20000945
 800a8b4:	20000946 	.word	0x20000946

0800a8b8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	460a      	mov	r2, r1
 800a8c2:	71fb      	strb	r3, [r7, #7]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800a8c8:	79fb      	ldrb	r3, [r7, #7]
 800a8ca:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800a8cc:	79bb      	ldrb	r3, [r7, #6]
 800a8ce:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800a8d0:	f107 030c 	add.w	r3, r7, #12
 800a8d4:	2202      	movs	r2, #2
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	208f      	movs	r0, #143	; 0x8f
 800a8da:	f000 f947 	bl	800ab6c <SUBGRF_WriteCommand>
}
 800a8de:	bf00      	nop
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800a8f0:	1d3b      	adds	r3, r7, #4
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	2015      	movs	r0, #21
 800a8f8:	f000 f95a 	bl	800abb0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800a8fc:	793b      	ldrb	r3, [r7, #4]
 800a8fe:	425b      	negs	r3, r3
 800a900:	105b      	asrs	r3, r3, #1
 800a902:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800a904:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800a91a:	f107 030c 	add.w	r3, r7, #12
 800a91e:	2202      	movs	r2, #2
 800a920:	4619      	mov	r1, r3
 800a922:	2013      	movs	r0, #19
 800a924:	f000 f944 	bl	800abb0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800a928:	f7ff fd7e 	bl	800a428 <SUBGRF_GetPacketType>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d10d      	bne.n	800a94e <SUBGRF_GetRxBufferStatus+0x3e>
 800a932:	4b0c      	ldr	r3, [pc, #48]	; (800a964 <SUBGRF_GetRxBufferStatus+0x54>)
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d108      	bne.n	800a94e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800a93c:	f240 7002 	movw	r0, #1794	; 0x702
 800a940:	f000 f878 	bl	800aa34 <SUBGRF_ReadRegister>
 800a944:	4603      	mov	r3, r0
 800a946:	461a      	mov	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	701a      	strb	r2, [r3, #0]
 800a94c:	e002      	b.n	800a954 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800a94e:	7b3a      	ldrb	r2, [r7, #12]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800a954:	7b7a      	ldrb	r2, [r7, #13]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	701a      	strb	r2, [r3, #0]
}
 800a95a:	bf00      	nop
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	20000946 	.word	0x20000946

0800a968 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800a970:	f107 030c 	add.w	r3, r7, #12
 800a974:	2203      	movs	r2, #3
 800a976:	4619      	mov	r1, r3
 800a978:	2014      	movs	r0, #20
 800a97a:	f000 f919 	bl	800abb0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800a97e:	f7ff fd53 	bl	800a428 <SUBGRF_GetPacketType>
 800a982:	4603      	mov	r3, r0
 800a984:	461a      	mov	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d002      	beq.n	800a998 <SUBGRF_GetPacketStatus+0x30>
 800a992:	2b01      	cmp	r3, #1
 800a994:	d013      	beq.n	800a9be <SUBGRF_GetPacketStatus+0x56>
 800a996:	e02a      	b.n	800a9ee <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800a998:	7b3a      	ldrb	r2, [r7, #12]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a99e:	7b7b      	ldrb	r3, [r7, #13]
 800a9a0:	425b      	negs	r3, r3
 800a9a2:	105b      	asrs	r3, r3, #1
 800a9a4:	b25a      	sxtb	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	425b      	negs	r3, r3
 800a9ae:	105b      	asrs	r3, r3, #1
 800a9b0:	b25a      	sxtb	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	609a      	str	r2, [r3, #8]
            break;
 800a9bc:	e020      	b.n	800aa00 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a9be:	7b3b      	ldrb	r3, [r7, #12]
 800a9c0:	425b      	negs	r3, r3
 800a9c2:	105b      	asrs	r3, r3, #1
 800a9c4:	b25a      	sxtb	r2, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800a9ca:	7b7b      	ldrb	r3, [r7, #13]
 800a9cc:	b25b      	sxtb	r3, r3
 800a9ce:	3302      	adds	r3, #2
 800a9d0:	109b      	asrs	r3, r3, #2
 800a9d2:	b25a      	sxtb	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	425b      	negs	r3, r3
 800a9dc:	105b      	asrs	r3, r3, #1
 800a9de:	b25a      	sxtb	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a9e4:	4b08      	ldr	r3, [pc, #32]	; (800aa08 <SUBGRF_GetPacketStatus+0xa0>)
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	611a      	str	r2, [r3, #16]
            break;
 800a9ec:	e008      	b.n	800aa00 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a9ee:	2214      	movs	r2, #20
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fca7 	bl	800b346 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	220f      	movs	r2, #15
 800a9fc:	701a      	strb	r2, [r3, #0]
            break;
 800a9fe:	bf00      	nop
    }
}
 800aa00:	bf00      	nop
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	20000948 	.word	0x20000948

0800aa0c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	4603      	mov	r3, r0
 800aa14:	460a      	mov	r2, r1
 800aa16:	80fb      	strh	r3, [r7, #6]
 800aa18:	4613      	mov	r3, r2
 800aa1a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800aa1c:	1d7a      	adds	r2, r7, #5
 800aa1e:	88f9      	ldrh	r1, [r7, #6]
 800aa20:	2301      	movs	r3, #1
 800aa22:	4803      	ldr	r0, [pc, #12]	; (800aa30 <SUBGRF_WriteRegister+0x24>)
 800aa24:	f7fa fd08 	bl	8005438 <HAL_SUBGHZ_WriteRegisters>
}
 800aa28:	bf00      	nop
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	20000564 	.word	0x20000564

0800aa34 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800aa3e:	f107 020f 	add.w	r2, r7, #15
 800aa42:	88f9      	ldrh	r1, [r7, #6]
 800aa44:	2301      	movs	r3, #1
 800aa46:	4804      	ldr	r0, [pc, #16]	; (800aa58 <SUBGRF_ReadRegister+0x24>)
 800aa48:	f7fa fd55 	bl	80054f6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	20000564 	.word	0x20000564

0800aa5c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	4603      	mov	r3, r0
 800aa64:	6039      	str	r1, [r7, #0]
 800aa66:	80fb      	strh	r3, [r7, #6]
 800aa68:	4613      	mov	r3, r2
 800aa6a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa6c:	f3ef 8310 	mrs	r3, PRIMASK
 800aa70:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa72:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aa74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa76:	b672      	cpsid	i
}
 800aa78:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800aa7a:	88bb      	ldrh	r3, [r7, #4]
 800aa7c:	88f9      	ldrh	r1, [r7, #6]
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	4806      	ldr	r0, [pc, #24]	; (800aa9c <SUBGRF_WriteRegisters+0x40>)
 800aa82:	f7fa fcd9 	bl	8005438 <HAL_SUBGHZ_WriteRegisters>
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	f383 8810 	msr	PRIMASK, r3
}
 800aa90:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aa92:	bf00      	nop
 800aa94:	3718      	adds	r7, #24
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20000564 	.word	0x20000564

0800aaa0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	6039      	str	r1, [r7, #0]
 800aaaa:	80fb      	strh	r3, [r7, #6]
 800aaac:	4613      	mov	r3, r2
 800aaae:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aab0:	f3ef 8310 	mrs	r3, PRIMASK
 800aab4:	60fb      	str	r3, [r7, #12]
  return(result);
 800aab6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aab8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aaba:	b672      	cpsid	i
}
 800aabc:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800aabe:	88bb      	ldrh	r3, [r7, #4]
 800aac0:	88f9      	ldrh	r1, [r7, #6]
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	4806      	ldr	r0, [pc, #24]	; (800aae0 <SUBGRF_ReadRegisters+0x40>)
 800aac6:	f7fa fd16 	bl	80054f6 <HAL_SUBGHZ_ReadRegisters>
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	f383 8810 	msr	PRIMASK, r3
}
 800aad4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aad6:	bf00      	nop
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	20000564 	.word	0x20000564

0800aae4 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaf4:	f3ef 8310 	mrs	r3, PRIMASK
 800aaf8:	60fb      	str	r3, [r7, #12]
  return(result);
 800aafa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aafc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aafe:	b672      	cpsid	i
}
 800ab00:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800ab02:	79bb      	ldrb	r3, [r7, #6]
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	79f9      	ldrb	r1, [r7, #7]
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	4806      	ldr	r0, [pc, #24]	; (800ab24 <SUBGRF_WriteBuffer+0x40>)
 800ab0c:	f7fa fe07 	bl	800571e <HAL_SUBGHZ_WriteBuffer>
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	f383 8810 	msr	PRIMASK, r3
}
 800ab1a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ab1c:	bf00      	nop
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	20000564 	.word	0x20000564

0800ab28 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	4603      	mov	r3, r0
 800ab30:	6039      	str	r1, [r7, #0]
 800ab32:	71fb      	strb	r3, [r7, #7]
 800ab34:	4613      	mov	r3, r2
 800ab36:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab38:	f3ef 8310 	mrs	r3, PRIMASK
 800ab3c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ab40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab42:	b672      	cpsid	i
}
 800ab44:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800ab46:	79bb      	ldrb	r3, [r7, #6]
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	79f9      	ldrb	r1, [r7, #7]
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	4806      	ldr	r0, [pc, #24]	; (800ab68 <SUBGRF_ReadBuffer+0x40>)
 800ab50:	f7fa fe38 	bl	80057c4 <HAL_SUBGHZ_ReadBuffer>
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	f383 8810 	msr	PRIMASK, r3
}
 800ab5e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ab60:	bf00      	nop
 800ab62:	3718      	adds	r7, #24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	20000564 	.word	0x20000564

0800ab6c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b086      	sub	sp, #24
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	6039      	str	r1, [r7, #0]
 800ab76:	71fb      	strb	r3, [r7, #7]
 800ab78:	4613      	mov	r3, r2
 800ab7a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab7c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab80:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab82:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ab84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab86:	b672      	cpsid	i
}
 800ab88:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800ab8a:	88bb      	ldrh	r3, [r7, #4]
 800ab8c:	79f9      	ldrb	r1, [r7, #7]
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	4806      	ldr	r0, [pc, #24]	; (800abac <SUBGRF_WriteCommand+0x40>)
 800ab92:	f7fa fd11 	bl	80055b8 <HAL_SUBGHZ_ExecSetCmd>
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	f383 8810 	msr	PRIMASK, r3
}
 800aba0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aba2:	bf00      	nop
 800aba4:	3718      	adds	r7, #24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	20000564 	.word	0x20000564

0800abb0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	4603      	mov	r3, r0
 800abb8:	6039      	str	r1, [r7, #0]
 800abba:	71fb      	strb	r3, [r7, #7]
 800abbc:	4613      	mov	r3, r2
 800abbe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abc0:	f3ef 8310 	mrs	r3, PRIMASK
 800abc4:	60fb      	str	r3, [r7, #12]
  return(result);
 800abc6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800abc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abca:	b672      	cpsid	i
}
 800abcc:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800abce:	88bb      	ldrh	r3, [r7, #4]
 800abd0:	79f9      	ldrb	r1, [r7, #7]
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	4806      	ldr	r0, [pc, #24]	; (800abf0 <SUBGRF_ReadCommand+0x40>)
 800abd6:	f7fa fd4e 	bl	8005676 <HAL_SUBGHZ_ExecGetCmd>
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	f383 8810 	msr	PRIMASK, r3
}
 800abe4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800abe6:	bf00      	nop
 800abe8:	3718      	adds	r7, #24
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	20000564 	.word	0x20000564

0800abf4 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	4603      	mov	r3, r0
 800abfc:	460a      	mov	r2, r1
 800abfe:	71fb      	strb	r3, [r7, #7]
 800ac00:	4613      	mov	r3, r2
 800ac02:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800ac04:	2301      	movs	r3, #1
 800ac06:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800ac08:	79bb      	ldrb	r3, [r7, #6]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d10d      	bne.n	800ac2a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800ac0e:	79fb      	ldrb	r3, [r7, #7]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d104      	bne.n	800ac1e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800ac14:	2302      	movs	r3, #2
 800ac16:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800ac18:	2004      	movs	r0, #4
 800ac1a:	f000 f8ef 	bl	800adfc <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800ac1e:	79fb      	ldrb	r3, [r7, #7]
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d107      	bne.n	800ac34 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800ac24:	2303      	movs	r3, #3
 800ac26:	73fb      	strb	r3, [r7, #15]
 800ac28:	e004      	b.n	800ac34 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800ac2a:	79bb      	ldrb	r3, [r7, #6]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800ac30:	2301      	movs	r3, #1
 800ac32:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f000 fad2 	bl	800b1e0 <RBI_ConfigRFSwitch>
}
 800ac3c:	bf00      	nop
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800ac52:	f000 fb23 	bl	800b29c <RBI_GetTxConfig>
 800ac56:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d016      	beq.n	800ac8c <SUBGRF_SetRfTxPower+0x48>
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	dc16      	bgt.n	800ac92 <SUBGRF_SetRfTxPower+0x4e>
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d003      	beq.n	800ac72 <SUBGRF_SetRfTxPower+0x2e>
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d00a      	beq.n	800ac86 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800ac70:	e00f      	b.n	800ac92 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800ac72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac76:	2b0f      	cmp	r3, #15
 800ac78:	dd02      	ble.n	800ac80 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800ac7a:	2302      	movs	r3, #2
 800ac7c:	73fb      	strb	r3, [r7, #15]
            break;
 800ac7e:	e009      	b.n	800ac94 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800ac80:	2301      	movs	r3, #1
 800ac82:	73fb      	strb	r3, [r7, #15]
            break;
 800ac84:	e006      	b.n	800ac94 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800ac86:	2301      	movs	r3, #1
 800ac88:	73fb      	strb	r3, [r7, #15]
            break;
 800ac8a:	e003      	b.n	800ac94 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	73fb      	strb	r3, [r7, #15]
            break;
 800ac90:	e000      	b.n	800ac94 <SUBGRF_SetRfTxPower+0x50>
            break;
 800ac92:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800ac94:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800ac98:	7bfb      	ldrb	r3, [r7, #15]
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7ff fbcd 	bl	800a43c <SUBGRF_SetTxParams>

    return paSelect;
 800aca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800acac:	b480      	push	{r7}
 800acae:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800acb0:	2301      	movs	r3, #1
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bc80      	pop	{r7}
 800acb8:	4770      	bx	lr
	...

0800acbc <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800acc4:	4b03      	ldr	r3, [pc, #12]	; (800acd4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2001      	movs	r0, #1
 800acca:	4798      	blx	r3
}
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	20000950 	.word	0x20000950

0800acd8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800ace0:	4b03      	ldr	r3, [pc, #12]	; (800acf0 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2002      	movs	r0, #2
 800ace6:	4798      	blx	r3
}
 800ace8:	bf00      	nop
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	20000950 	.word	0x20000950

0800acf4 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800acfc:	4b03      	ldr	r3, [pc, #12]	; (800ad0c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2040      	movs	r0, #64	; 0x40
 800ad02:	4798      	blx	r3
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	20000950 	.word	0x20000950

0800ad10 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800ad1c:	78fb      	ldrb	r3, [r7, #3]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d002      	beq.n	800ad28 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d005      	beq.n	800ad32 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800ad26:	e00a      	b.n	800ad3e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800ad28:	4b07      	ldr	r3, [pc, #28]	; (800ad48 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2080      	movs	r0, #128	; 0x80
 800ad2e:	4798      	blx	r3
            break;
 800ad30:	e005      	b.n	800ad3e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800ad32:	4b05      	ldr	r3, [pc, #20]	; (800ad48 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ad3a:	4798      	blx	r3
            break;
 800ad3c:	bf00      	nop
    }
}
 800ad3e:	bf00      	nop
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20000950 	.word	0x20000950

0800ad4c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800ad54:	4b04      	ldr	r3, [pc, #16]	; (800ad68 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ad5c:	4798      	blx	r3
}
 800ad5e:	bf00      	nop
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20000950 	.word	0x20000950

0800ad6c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800ad74:	4b03      	ldr	r3, [pc, #12]	; (800ad84 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2020      	movs	r0, #32
 800ad7a:	4798      	blx	r3
}
 800ad7c:	bf00      	nop
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	20000950 	.word	0x20000950

0800ad88 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800ad90:	4b03      	ldr	r3, [pc, #12]	; (800ada0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2004      	movs	r0, #4
 800ad96:	4798      	blx	r3
}
 800ad98:	bf00      	nop
 800ad9a:	3708      	adds	r7, #8
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	20000950 	.word	0x20000950

0800ada4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800adac:	4b03      	ldr	r3, [pc, #12]	; (800adbc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2008      	movs	r0, #8
 800adb2:	4798      	blx	r3
}
 800adb4:	bf00      	nop
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	20000950 	.word	0x20000950

0800adc0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800adc8:	4b03      	ldr	r3, [pc, #12]	; (800add8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2010      	movs	r0, #16
 800adce:	4798      	blx	r3
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	20000950 	.word	0x20000950

0800addc <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800ade4:	4b04      	ldr	r3, [pc, #16]	; (800adf8 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800adec:	4798      	blx	r3
}
 800adee:	bf00      	nop
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20000950 	.word	0x20000950

0800adfc <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	4603      	mov	r3, r0
 800ae04:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800ae06:	f000 fa5f 	bl	800b2c8 <RBI_IsDCDC>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d112      	bne.n	800ae36 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800ae10:	f640 1023 	movw	r0, #2339	; 0x923
 800ae14:	f7ff fe0e 	bl	800aa34 <SUBGRF_ReadRegister>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
 800ae1e:	f023 0306 	bic.w	r3, r3, #6
 800ae22:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800ae24:	7bfa      	ldrb	r2, [r7, #15]
 800ae26:	79fb      	ldrb	r3, [r7, #7]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	f640 1023 	movw	r0, #2339	; 0x923
 800ae32:	f7ff fdeb 	bl	800aa0c <SUBGRF_WriteRegister>
  }
}
 800ae36:	bf00      	nop
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
	...

0800ae40 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d101      	bne.n	800ae52 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800ae4e:	231f      	movs	r3, #31
 800ae50:	e016      	b.n	800ae80 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ae52:	2300      	movs	r3, #0
 800ae54:	73fb      	strb	r3, [r7, #15]
 800ae56:	e00f      	b.n	800ae78 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
 800ae5a:	4a0c      	ldr	r2, [pc, #48]	; (800ae8c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800ae5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d205      	bcs.n	800ae72 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800ae66:	7bfb      	ldrb	r3, [r7, #15]
 800ae68:	4a08      	ldr	r2, [pc, #32]	; (800ae8c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800ae6a:	00db      	lsls	r3, r3, #3
 800ae6c:	4413      	add	r3, r2
 800ae6e:	791b      	ldrb	r3, [r3, #4]
 800ae70:	e006      	b.n	800ae80 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ae72:	7bfb      	ldrb	r3, [r7, #15]
 800ae74:	3301      	adds	r3, #1
 800ae76:	73fb      	strb	r3, [r7, #15]
 800ae78:	7bfb      	ldrb	r3, [r7, #15]
 800ae7a:	2b15      	cmp	r3, #21
 800ae7c:	d9ec      	bls.n	800ae58 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800ae7e:	e7fe      	b.n	800ae7e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bc80      	pop	{r7}
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	0800c880 	.word	0x0800c880

0800ae90 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b08a      	sub	sp, #40	; 0x28
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800ae9a:	4b35      	ldr	r3, [pc, #212]	; (800af70 <SUBGRF_GetCFO+0xe0>)
 800ae9c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800ae9e:	f640 0007 	movw	r0, #2055	; 0x807
 800aea2:	f7ff fdc7 	bl	800aa34 <SUBGRF_ReadRegister>
 800aea6:	4603      	mov	r3, r0
 800aea8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800aeaa:	7ffb      	ldrb	r3, [r7, #31]
 800aeac:	08db      	lsrs	r3, r3, #3
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	f003 0303 	and.w	r3, r3, #3
 800aeb4:	3328      	adds	r3, #40	; 0x28
 800aeb6:	443b      	add	r3, r7
 800aeb8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800aebc:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800aebe:	7ffb      	ldrb	r3, [r7, #31]
 800aec0:	f003 0307 	and.w	r3, r3, #7
 800aec4:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800aec6:	7fba      	ldrb	r2, [r7, #30]
 800aec8:	7f7b      	ldrb	r3, [r7, #29]
 800aeca:	3301      	adds	r3, #1
 800aecc:	fa02 f303 	lsl.w	r3, r2, r3
 800aed0:	461a      	mov	r2, r3
 800aed2:	4b28      	ldr	r3, [pc, #160]	; (800af74 <SUBGRF_GetCFO+0xe4>)
 800aed4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aed8:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800aeda:	69ba      	ldr	r2, [r7, #24]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee2:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800aee4:	2301      	movs	r3, #1
 800aee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800aeea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	fb02 f303 	mul.w	r3, r2, r3
 800aef4:	2b07      	cmp	r3, #7
 800aef6:	d802      	bhi.n	800aefe <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800aef8:	2302      	movs	r3, #2
 800aefa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800aefe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	fb02 f303 	mul.w	r3, r2, r3
 800af08:	2b03      	cmp	r3, #3
 800af0a:	d802      	bhi.n	800af12 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800af0c:	2304      	movs	r3, #4
 800af0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800af12:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	fb02 f303 	mul.w	r3, r2, r3
 800af1c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800af1e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800af22:	f7ff fd87 	bl	800aa34 <SUBGRF_ReadRegister>
 800af26:	4603      	mov	r3, r0
 800af28:	021b      	lsls	r3, r3, #8
 800af2a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800af2e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800af30:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800af34:	f7ff fd7e 	bl	800aa34 <SUBGRF_ReadRegister>
 800af38:	4603      	mov	r3, r0
 800af3a:	461a      	mov	r2, r3
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	4313      	orrs	r3, r2
 800af40:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d005      	beq.n	800af58 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800af52:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800af56:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	095b      	lsrs	r3, r3, #5
 800af5c:	6a3a      	ldr	r2, [r7, #32]
 800af5e:	fb02 f303 	mul.w	r3, r2, r3
 800af62:	11da      	asrs	r2, r3, #7
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	601a      	str	r2, [r3, #0]
}
 800af68:	bf00      	nop
 800af6a:	3728      	adds	r7, #40	; 0x28
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	0c0a0804 	.word	0x0c0a0804
 800af74:	01e84800 	.word	0x01e84800

0800af78 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800af78:	b480      	push	{r7}
 800af7a:	b087      	sub	sp, #28
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
 800af84:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800af86:	2300      	movs	r3, #0
 800af88:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800af8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af8e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800af90:	697b      	ldr	r3, [r7, #20]
}
 800af92:	4618      	mov	r0, r3
 800af94:	371c      	adds	r7, #28
 800af96:	46bd      	mov	sp, r7
 800af98:	bc80      	pop	{r7}
 800af9a:	4770      	bx	lr

0800af9c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800af9c:	b480      	push	{r7}
 800af9e:	b087      	sub	sp, #28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4603      	mov	r3, r0
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800afaa:	2300      	movs	r3, #0
 800afac:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800afae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afb2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800afb4:	697b      	ldr	r3, [r7, #20]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	371c      	adds	r7, #28
 800afba:	46bd      	mov	sp, r7
 800afbc:	bc80      	pop	{r7}
 800afbe:	4770      	bx	lr

0800afc0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800afcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bc80      	pop	{r7}
 800afd8:	4770      	bx	lr

0800afda <RFW_DeInit>:

void RFW_DeInit( void )
{
 800afda:	b480      	push	{r7}
 800afdc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800afde:	bf00      	nop
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bc80      	pop	{r7}
 800afe4:	4770      	bx	lr

0800afe6 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800afe6:	b480      	push	{r7}
 800afe8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800afea:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800afec:	4618      	mov	r0, r3
 800afee:	46bd      	mov	sp, r7
 800aff0:	bc80      	pop	{r7}
 800aff2:	4770      	bx	lr

0800aff4 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800aff4:	b480      	push	{r7}
 800aff6:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800aff8:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800affa:	4618      	mov	r0, r3
 800affc:	46bd      	mov	sp, r7
 800affe:	bc80      	pop	{r7}
 800b000:	4770      	bx	lr

0800b002 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800b002:	b480      	push	{r7}
 800b004:	b083      	sub	sp, #12
 800b006:	af00      	add	r7, sp, #0
 800b008:	4603      	mov	r3, r0
 800b00a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	bc80      	pop	{r7}
 800b014:	4770      	bx	lr

0800b016 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800b016:	b480      	push	{r7}
 800b018:	b087      	sub	sp, #28
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	60f8      	str	r0, [r7, #12]
 800b01e:	460b      	mov	r3, r1
 800b020:	607a      	str	r2, [r7, #4]
 800b022:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800b024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b028:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800b02a:	697b      	ldr	r3, [r7, #20]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	371c      	adds	r7, #28
 800b030:	46bd      	mov	sp, r7
 800b032:	bc80      	pop	{r7}
 800b034:	4770      	bx	lr

0800b036 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800b036:	b480      	push	{r7}
 800b038:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800b03a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b03e:	4618      	mov	r0, r3
 800b040:	46bd      	mov	sp, r7
 800b042:	bc80      	pop	{r7}
 800b044:	4770      	bx	lr

0800b046 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800b046:	b480      	push	{r7}
 800b048:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800b04a:	bf00      	nop
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bc80      	pop	{r7}
 800b050:	4770      	bx	lr

0800b052 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800b052:	b480      	push	{r7}
 800b054:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800b056:	bf00      	nop
 800b058:	46bd      	mov	sp, r7
 800b05a:	bc80      	pop	{r7}
 800b05c:	4770      	bx	lr

0800b05e <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800b05e:	b480      	push	{r7}
 800b060:	b083      	sub	sp, #12
 800b062:	af00      	add	r7, sp, #0
 800b064:	4603      	mov	r3, r0
 800b066:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800b068:	bf00      	nop
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bc80      	pop	{r7}
 800b070:	4770      	bx	lr

0800b072 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800b076:	f7f7 fbea 	bl	800284e <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800b07a:	f000 f809 	bl	800b090 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b07e:	bf00      	nop
 800b080:	bd80      	pop	{r7, pc}

0800b082 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800b082:	b480      	push	{r7}
 800b084:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800b086:	bf00      	nop
 800b088:	46bd      	mov	sp, r7
 800b08a:	bc80      	pop	{r7}
 800b08c:	4770      	bx	lr
	...

0800b090 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800b094:	4b0a      	ldr	r3, [pc, #40]	; (800b0c0 <SubghzApp_Init+0x30>)
 800b096:	4a0b      	ldr	r2, [pc, #44]	; (800b0c4 <SubghzApp_Init+0x34>)
 800b098:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800b09a:	4b09      	ldr	r3, [pc, #36]	; (800b0c0 <SubghzApp_Init+0x30>)
 800b09c:	4a0a      	ldr	r2, [pc, #40]	; (800b0c8 <SubghzApp_Init+0x38>)
 800b09e:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800b0a0:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <SubghzApp_Init+0x30>)
 800b0a2:	4a0a      	ldr	r2, [pc, #40]	; (800b0cc <SubghzApp_Init+0x3c>)
 800b0a4:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800b0a6:	4b06      	ldr	r3, [pc, #24]	; (800b0c0 <SubghzApp_Init+0x30>)
 800b0a8:	4a09      	ldr	r2, [pc, #36]	; (800b0d0 <SubghzApp_Init+0x40>)
 800b0aa:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800b0ac:	4b04      	ldr	r3, [pc, #16]	; (800b0c0 <SubghzApp_Init+0x30>)
 800b0ae:	4a09      	ldr	r2, [pc, #36]	; (800b0d4 <SubghzApp_Init+0x44>)
 800b0b0:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800b0b2:	4b09      	ldr	r3, [pc, #36]	; (800b0d8 <SubghzApp_Init+0x48>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4802      	ldr	r0, [pc, #8]	; (800b0c0 <SubghzApp_Init+0x30>)
 800b0b8:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800b0ba:	bf00      	nop
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20000954 	.word	0x20000954
 800b0c4:	0800b0dd 	.word	0x0800b0dd
 800b0c8:	0800b0e9 	.word	0x0800b0e9
 800b0cc:	0800b10d 	.word	0x0800b10d
 800b0d0:	0800b119 	.word	0x0800b119
 800b0d4:	0800b125 	.word	0x0800b125
 800b0d8:	0800c7f0 	.word	0x0800c7f0

0800b0dc <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800b0e0:	bf00      	nop
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bc80      	pop	{r7}
 800b0e6:	4770      	bx	lr

0800b0e8 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	4608      	mov	r0, r1
 800b0f2:	4611      	mov	r1, r2
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	817b      	strh	r3, [r7, #10]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	813b      	strh	r3, [r7, #8]
 800b0fe:	4613      	mov	r3, r2
 800b100:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800b102:	bf00      	nop
 800b104:	3714      	adds	r7, #20
 800b106:	46bd      	mov	sp, r7
 800b108:	bc80      	pop	{r7}
 800b10a:	4770      	bx	lr

0800b10c <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800b10c:	b480      	push	{r7}
 800b10e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800b110:	bf00      	nop
 800b112:	46bd      	mov	sp, r7
 800b114:	bc80      	pop	{r7}
 800b116:	4770      	bx	lr

0800b118 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800b118:	b480      	push	{r7}
 800b11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800b11c:	bf00      	nop
 800b11e:	46bd      	mov	sp, r7
 800b120:	bc80      	pop	{r7}
 800b122:	4770      	bx	lr

0800b124 <OnRxError>:

static void OnRxError(void)
{
 800b124:	b480      	push	{r7}
 800b126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800b128:	bf00      	nop
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bc80      	pop	{r7}
 800b12e:	4770      	bx	lr

0800b130 <LL_AHB2_GRP1_EnableClock>:
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b13c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b13e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4313      	orrs	r3, r2
 800b146:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b14c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4013      	ands	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b154:	68fb      	ldr	r3, [r7, #12]
}
 800b156:	bf00      	nop
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bc80      	pop	{r7}
 800b15e:	4770      	bx	lr

0800b160 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b086      	sub	sp, #24
 800b164:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800b166:	2300      	movs	r3, #0
 800b168:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800b16a:	463b      	mov	r3, r7
 800b16c:	2200      	movs	r2, #0
 800b16e:	601a      	str	r2, [r3, #0]
 800b170:	605a      	str	r2, [r3, #4]
 800b172:	609a      	str	r2, [r3, #8]
 800b174:	60da      	str	r2, [r3, #12]
 800b176:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800b178:	2004      	movs	r0, #4
 800b17a:	f7ff ffd9 	bl	800b130 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800b17e:	2310      	movs	r3, #16
 800b180:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800b182:	2301      	movs	r3, #1
 800b184:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800b186:	2300      	movs	r3, #0
 800b188:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b18a:	2303      	movs	r3, #3
 800b18c:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800b18e:	463b      	mov	r3, r7
 800b190:	4619      	mov	r1, r3
 800b192:	4812      	ldr	r0, [pc, #72]	; (800b1dc <RBI_Init+0x7c>)
 800b194:	f7f8 fbac 	bl	80038f0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800b198:	2320      	movs	r3, #32
 800b19a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800b19c:	463b      	mov	r3, r7
 800b19e:	4619      	mov	r1, r3
 800b1a0:	480e      	ldr	r0, [pc, #56]	; (800b1dc <RBI_Init+0x7c>)
 800b1a2:	f7f8 fba5 	bl	80038f0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800b1a6:	2308      	movs	r3, #8
 800b1a8:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800b1aa:	463b      	mov	r3, r7
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	480b      	ldr	r0, [pc, #44]	; (800b1dc <RBI_Init+0x7c>)
 800b1b0:	f7f8 fb9e 	bl	80038f0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	2120      	movs	r1, #32
 800b1b8:	4808      	ldr	r0, [pc, #32]	; (800b1dc <RBI_Init+0x7c>)
 800b1ba:	f7f8 fcf9 	bl	8003bb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800b1be:	2200      	movs	r2, #0
 800b1c0:	2110      	movs	r1, #16
 800b1c2:	4806      	ldr	r0, [pc, #24]	; (800b1dc <RBI_Init+0x7c>)
 800b1c4:	f7f8 fcf4 	bl	8003bb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	2108      	movs	r1, #8
 800b1cc:	4803      	ldr	r0, [pc, #12]	; (800b1dc <RBI_Init+0x7c>)
 800b1ce:	f7f8 fcef 	bl	8003bb0 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800b1d2:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3718      	adds	r7, #24
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	48000800 	.word	0x48000800

0800b1e0 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 800b1ee:	79fb      	ldrb	r3, [r7, #7]
 800b1f0:	2b03      	cmp	r3, #3
 800b1f2:	d84b      	bhi.n	800b28c <RBI_ConfigRFSwitch+0xac>
 800b1f4:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <RBI_ConfigRFSwitch+0x1c>)
 800b1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fa:	bf00      	nop
 800b1fc:	0800b20d 	.word	0x0800b20d
 800b200:	0800b22d 	.word	0x0800b22d
 800b204:	0800b24d 	.word	0x0800b24d
 800b208:	0800b26d 	.word	0x0800b26d
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 800b20c:	2200      	movs	r2, #0
 800b20e:	2108      	movs	r1, #8
 800b210:	4821      	ldr	r0, [pc, #132]	; (800b298 <RBI_ConfigRFSwitch+0xb8>)
 800b212:	f7f8 fccd 	bl	8003bb0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b216:	2200      	movs	r2, #0
 800b218:	2110      	movs	r1, #16
 800b21a:	481f      	ldr	r0, [pc, #124]	; (800b298 <RBI_ConfigRFSwitch+0xb8>)
 800b21c:	f7f8 fcc8 	bl	8003bb0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800b220:	2200      	movs	r2, #0
 800b222:	2120      	movs	r1, #32
 800b224:	481c      	ldr	r0, [pc, #112]	; (800b298 <RBI_ConfigRFSwitch+0xb8>)
 800b226:	f7f8 fcc3 	bl	8003bb0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800b22a:	e030      	b.n	800b28e <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800b22c:	2201      	movs	r2, #1
 800b22e:	2108      	movs	r1, #8
 800b230:	4819      	ldr	r0, [pc, #100]	; (800b298 <RBI_ConfigRFSwitch+0xb8>)
 800b232:	f7f8 fcbd 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800b236:	2201      	movs	r2, #1
 800b238:	2110      	movs	r1, #16
 800b23a:	4817      	ldr	r0, [pc, #92]	; (800b298 <RBI_ConfigRFSwitch+0xb8>)
 800b23c:	f7f8 fcb8 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800b240:	2200      	movs	r2, #0
 800b242:	2120      	movs	r1, #32
 800b244:	4814      	ldr	r0, [pc, #80]	; (800b298 <RBI_ConfigRFSwitch+0xb8>)
 800b246:	f7f8 fcb3 	bl	8003bb0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800b24a:	e020      	b.n	800b28e <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800b24c:	2201      	movs	r2, #1
 800b24e:	2108      	movs	r1, #8
 800b250:	4811      	ldr	r0, [pc, #68]	; (800b298 <RBI_ConfigRFSwitch+0xb8>)
 800b252:	f7f8 fcad 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800b256:	2201      	movs	r2, #1
 800b258:	2110      	movs	r1, #16
 800b25a:	480f      	ldr	r0, [pc, #60]	; (800b298 <RBI_ConfigRFSwitch+0xb8>)
 800b25c:	f7f8 fca8 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b260:	2201      	movs	r2, #1
 800b262:	2120      	movs	r1, #32
 800b264:	480c      	ldr	r0, [pc, #48]	; (800b298 <RBI_ConfigRFSwitch+0xb8>)
 800b266:	f7f8 fca3 	bl	8003bb0 <HAL_GPIO_WritePin>
		break;
 800b26a:	e010      	b.n	800b28e <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800b26c:	2201      	movs	r2, #1
 800b26e:	2108      	movs	r1, #8
 800b270:	4809      	ldr	r0, [pc, #36]	; (800b298 <RBI_ConfigRFSwitch+0xb8>)
 800b272:	f7f8 fc9d 	bl	8003bb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b276:	2200      	movs	r2, #0
 800b278:	2110      	movs	r1, #16
 800b27a:	4807      	ldr	r0, [pc, #28]	; (800b298 <RBI_ConfigRFSwitch+0xb8>)
 800b27c:	f7f8 fc98 	bl	8003bb0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b280:	2201      	movs	r2, #1
 800b282:	2120      	movs	r1, #32
 800b284:	4804      	ldr	r0, [pc, #16]	; (800b298 <RBI_ConfigRFSwitch+0xb8>)
 800b286:	f7f8 fc93 	bl	8003bb0 <HAL_GPIO_WritePin>
		break;
 800b28a:	e000      	b.n	800b28e <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 800b28c:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800b28e:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	48000800 	.word	0x48000800

0800b29c <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800b2a6:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bc80      	pop	{r7}
 800b2b0:	4770      	bx	lr

0800b2b2 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b2b2:	b480      	push	{r7}
 800b2b4:	b083      	sub	sp, #12
 800b2b6:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800b2bc:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	370c      	adds	r7, #12
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bc80      	pop	{r7}
 800b2c6:	4770      	bx	lr

0800b2c8 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800b2d2:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bc80      	pop	{r7}
 800b2dc:	4770      	bx	lr

0800b2de <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b085      	sub	sp, #20
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800b2ec:	79fb      	ldrb	r3, [r7, #7]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d102      	bne.n	800b2f8 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800b2f2:	230f      	movs	r3, #15
 800b2f4:	60fb      	str	r3, [r7, #12]
 800b2f6:	e001      	b.n	800b2fc <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800b2f8:	2316      	movs	r3, #22
 800b2fa:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3714      	adds	r7, #20
 800b302:	46bd      	mov	sp, r7
 800b304:	bc80      	pop	{r7}
 800b306:	4770      	bx	lr

0800b308 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b308:	b480      	push	{r7}
 800b30a:	b087      	sub	sp, #28
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	4613      	mov	r3, r2
 800b314:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b31e:	e007      	b.n	800b330 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	1c53      	adds	r3, r2, #1
 800b324:	613b      	str	r3, [r7, #16]
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	1c59      	adds	r1, r3, #1
 800b32a:	6179      	str	r1, [r7, #20]
 800b32c:	7812      	ldrb	r2, [r2, #0]
 800b32e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b330:	88fb      	ldrh	r3, [r7, #6]
 800b332:	1e5a      	subs	r2, r3, #1
 800b334:	80fa      	strh	r2, [r7, #6]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1f2      	bne.n	800b320 <UTIL_MEM_cpy_8+0x18>
    }
}
 800b33a:	bf00      	nop
 800b33c:	bf00      	nop
 800b33e:	371c      	adds	r7, #28
 800b340:	46bd      	mov	sp, r7
 800b342:	bc80      	pop	{r7}
 800b344:	4770      	bx	lr

0800b346 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b346:	b480      	push	{r7}
 800b348:	b085      	sub	sp, #20
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	460b      	mov	r3, r1
 800b350:	70fb      	strb	r3, [r7, #3]
 800b352:	4613      	mov	r3, r2
 800b354:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b35a:	e004      	b.n	800b366 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	1c5a      	adds	r2, r3, #1
 800b360:	60fa      	str	r2, [r7, #12]
 800b362:	78fa      	ldrb	r2, [r7, #3]
 800b364:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b366:	883b      	ldrh	r3, [r7, #0]
 800b368:	1e5a      	subs	r2, r3, #1
 800b36a:	803a      	strh	r2, [r7, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1f5      	bne.n	800b35c <UTIL_MEM_set_8+0x16>
  }
}
 800b370:	bf00      	nop
 800b372:	bf00      	nop
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	bc80      	pop	{r7}
 800b37a:	4770      	bx	lr

0800b37c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	603b      	str	r3, [r7, #0]
 800b388:	4613      	mov	r3, r2
 800b38a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d023      	beq.n	800b3da <UTIL_TIMER_Create+0x5e>
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d020      	beq.n	800b3da <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b39e:	4b11      	ldr	r3, [pc, #68]	; (800b3e4 <UTIL_TIMER_Create+0x68>)
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a2:	68b8      	ldr	r0, [r7, #8]
 800b3a4:	4798      	blx	r3
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	69ba      	ldr	r2, [r7, #24]
 800b3c8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	79fa      	ldrb	r2, [r7, #7]
 800b3ce:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	e000      	b.n	800b3dc <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b3da:	2301      	movs	r3, #1
  }
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	0800c79c 	.word	0x0800c79c

0800b3e8 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b08a      	sub	sp, #40	; 0x28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d056      	beq.n	800b4aa <UTIL_TIMER_Start+0xc2>
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f929 	bl	800b654 <TimerExists>
 800b402:	4603      	mov	r3, r0
 800b404:	f083 0301 	eor.w	r3, r3, #1
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d04d      	beq.n	800b4aa <UTIL_TIMER_Start+0xc2>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	7a5b      	ldrb	r3, [r3, #9]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d149      	bne.n	800b4aa <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b416:	f3ef 8310 	mrs	r3, PRIMASK
 800b41a:	613b      	str	r3, [r7, #16]
  return(result);
 800b41c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b41e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b420:	b672      	cpsid	i
}
 800b422:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b42a:	4b24      	ldr	r3, [pc, #144]	; (800b4bc <UTIL_TIMER_Start+0xd4>)
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	4798      	blx	r3
 800b430:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b432:	6a3a      	ldr	r2, [r7, #32]
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	429a      	cmp	r2, r3
 800b438:	d201      	bcs.n	800b43e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a3a      	ldr	r2, [r7, #32]
 800b442:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b456:	4b1a      	ldr	r3, [pc, #104]	; (800b4c0 <UTIL_TIMER_Start+0xd8>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d106      	bne.n	800b46c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b45e:	4b17      	ldr	r3, [pc, #92]	; (800b4bc <UTIL_TIMER_Start+0xd4>)
 800b460:	691b      	ldr	r3, [r3, #16]
 800b462:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f96b 	bl	800b740 <TimerInsertNewHeadTimer>
 800b46a:	e017      	b.n	800b49c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b46c:	4b13      	ldr	r3, [pc, #76]	; (800b4bc <UTIL_TIMER_Start+0xd4>)
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	4798      	blx	r3
 800b472:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	441a      	add	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	4b0e      	ldr	r3, [pc, #56]	; (800b4c0 <UTIL_TIMER_Start+0xd8>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d203      	bcs.n	800b496 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f956 	bl	800b740 <TimerInsertNewHeadTimer>
 800b494:	e002      	b.n	800b49c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f922 	bl	800b6e0 <TimerInsertTimer>
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f383 8810 	msr	PRIMASK, r3
}
 800b4a6:	bf00      	nop
  {
 800b4a8:	e002      	b.n	800b4b0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3728      	adds	r7, #40	; 0x28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	0800c79c 	.word	0x0800c79c
 800b4c0:	20000970 	.word	0x20000970

0800b4c4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b088      	sub	sp, #32
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d05b      	beq.n	800b58e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4d6:	f3ef 8310 	mrs	r3, PRIMASK
 800b4da:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b4de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4e0:	b672      	cpsid	i
}
 800b4e2:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b4e4:	4b2d      	ldr	r3, [pc, #180]	; (800b59c <UTIL_TIMER_Stop+0xd8>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b4ea:	4b2c      	ldr	r3, [pc, #176]	; (800b59c <UTIL_TIMER_Stop+0xd8>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b4f6:	4b29      	ldr	r3, [pc, #164]	; (800b59c <UTIL_TIMER_Stop+0xd8>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d041      	beq.n	800b582 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b504:	4b25      	ldr	r3, [pc, #148]	; (800b59c <UTIL_TIMER_Stop+0xd8>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d134      	bne.n	800b578 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b50e:	4b23      	ldr	r3, [pc, #140]	; (800b59c <UTIL_TIMER_Stop+0xd8>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2200      	movs	r2, #0
 800b514:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b516:	4b21      	ldr	r3, [pc, #132]	; (800b59c <UTIL_TIMER_Stop+0xd8>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	695b      	ldr	r3, [r3, #20]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00a      	beq.n	800b536 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b520:	4b1e      	ldr	r3, [pc, #120]	; (800b59c <UTIL_TIMER_Stop+0xd8>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	4a1d      	ldr	r2, [pc, #116]	; (800b59c <UTIL_TIMER_Stop+0xd8>)
 800b528:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b52a:	4b1c      	ldr	r3, [pc, #112]	; (800b59c <UTIL_TIMER_Stop+0xd8>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 f8ac 	bl	800b68c <TimerSetTimeout>
 800b534:	e023      	b.n	800b57e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b536:	4b1a      	ldr	r3, [pc, #104]	; (800b5a0 <UTIL_TIMER_Stop+0xdc>)
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	4798      	blx	r3
            TimerListHead = NULL;
 800b53c:	4b17      	ldr	r3, [pc, #92]	; (800b59c <UTIL_TIMER_Stop+0xd8>)
 800b53e:	2200      	movs	r2, #0
 800b540:	601a      	str	r2, [r3, #0]
 800b542:	e01c      	b.n	800b57e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b544:	697a      	ldr	r2, [r7, #20]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d110      	bne.n	800b56e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	695b      	ldr	r3, [r3, #20]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d006      	beq.n	800b562 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	695b      	ldr	r3, [r3, #20]
 800b558:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	697a      	ldr	r2, [r7, #20]
 800b55e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b560:	e00d      	b.n	800b57e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b562:	2300      	movs	r3, #0
 800b564:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	615a      	str	r2, [r3, #20]
            break;
 800b56c:	e007      	b.n	800b57e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1e2      	bne.n	800b544 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	77fb      	strb	r3, [r7, #31]
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f383 8810 	msr	PRIMASK, r3
}
 800b58c:	e001      	b.n	800b592 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b58e:	2301      	movs	r3, #1
 800b590:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b592:	7ffb      	ldrb	r3, [r7, #31]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3720      	adds	r7, #32
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	20000970 	.word	0x20000970
 800b5a0:	0800c79c 	.word	0x0800c79c

0800b5a4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d102      	bne.n	800b5be <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	73fb      	strb	r3, [r7, #15]
 800b5bc:	e014      	b.n	800b5e8 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b5be:	4b0d      	ldr	r3, [pc, #52]	; (800b5f4 <UTIL_TIMER_SetPeriod+0x50>)
 800b5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c2:	6838      	ldr	r0, [r7, #0]
 800b5c4:	4798      	blx	r3
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f841 	bl	800b654 <TimerExists>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d007      	beq.n	800b5e8 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7ff ff73 	bl	800b4c4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7ff ff02 	bl	800b3e8 <UTIL_TIMER_Start>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	0800c79c 	.word	0x0800c79c

0800b5f8 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b5fe:	4b06      	ldr	r3, [pc, #24]	; (800b618 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b600:	69db      	ldr	r3, [r3, #28]
 800b602:	4798      	blx	r3
 800b604:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b606:	4b04      	ldr	r3, [pc, #16]	; (800b618 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	4798      	blx	r3
 800b60e:	4603      	mov	r3, r0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	0800c79c 	.word	0x0800c79c

0800b61c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b624:	4b0a      	ldr	r3, [pc, #40]	; (800b650 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b626:	69db      	ldr	r3, [r3, #28]
 800b628:	4798      	blx	r3
 800b62a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b62c:	4b08      	ldr	r3, [pc, #32]	; (800b650 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	4798      	blx	r3
 800b634:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b636:	4b06      	ldr	r3, [pc, #24]	; (800b650 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b63a:	68f9      	ldr	r1, [r7, #12]
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	1a8a      	subs	r2, r1, r2
 800b640:	4610      	mov	r0, r2
 800b642:	4798      	blx	r3
 800b644:	4603      	mov	r3, r0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	0800c79c 	.word	0x0800c79c

0800b654 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b65c:	4b0a      	ldr	r3, [pc, #40]	; (800b688 <TimerExists+0x34>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800b662:	e008      	b.n	800b676 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d101      	bne.n	800b670 <TimerExists+0x1c>
    {
      return true;
 800b66c:	2301      	movs	r3, #1
 800b66e:	e006      	b.n	800b67e <TimerExists+0x2a>
    }
    cur = cur->Next;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	695b      	ldr	r3, [r3, #20]
 800b674:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1f3      	bne.n	800b664 <TimerExists+0x10>
  }
  return false;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3714      	adds	r7, #20
 800b682:	46bd      	mov	sp, r7
 800b684:	bc80      	pop	{r7}
 800b686:	4770      	bx	lr
 800b688:	20000970 	.word	0x20000970

0800b68c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b68c:	b590      	push	{r4, r7, lr}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b694:	4b11      	ldr	r3, [pc, #68]	; (800b6dc <TimerSetTimeout+0x50>)
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	4798      	blx	r3
 800b69a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681c      	ldr	r4, [r3, #0]
 800b6a6:	4b0d      	ldr	r3, [pc, #52]	; (800b6dc <TimerSetTimeout+0x50>)
 800b6a8:	699b      	ldr	r3, [r3, #24]
 800b6aa:	4798      	blx	r3
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	429c      	cmp	r4, r3
 800b6b4:	d207      	bcs.n	800b6c6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800b6b6:	4b09      	ldr	r3, [pc, #36]	; (800b6dc <TimerSetTimeout+0x50>)
 800b6b8:	699b      	ldr	r3, [r3, #24]
 800b6ba:	4798      	blx	r3
 800b6bc:	4602      	mov	r2, r0
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	441a      	add	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800b6c6:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <TimerSetTimeout+0x50>)
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	6812      	ldr	r2, [r2, #0]
 800b6ce:	4610      	mov	r0, r2
 800b6d0:	4798      	blx	r3
}
 800b6d2:	bf00      	nop
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd90      	pop	{r4, r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	0800c79c 	.word	0x0800c79c

0800b6e0 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b6e8:	4b14      	ldr	r3, [pc, #80]	; (800b73c <TimerInsertTimer+0x5c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800b6ee:	4b13      	ldr	r3, [pc, #76]	; (800b73c <TimerInsertTimer+0x5c>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	695b      	ldr	r3, [r3, #20]
 800b6f4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800b6f6:	e012      	b.n	800b71e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	429a      	cmp	r2, r3
 800b702:	d905      	bls.n	800b710 <TimerInsertTimer+0x30>
    {
        cur = next;
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	695b      	ldr	r3, [r3, #20]
 800b70c:	60bb      	str	r3, [r7, #8]
 800b70e:	e006      	b.n	800b71e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	615a      	str	r2, [r3, #20]
        return;
 800b71c:	e009      	b.n	800b732 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	695b      	ldr	r3, [r3, #20]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1e8      	bne.n	800b6f8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	615a      	str	r2, [r3, #20]
}
 800b732:	3714      	adds	r7, #20
 800b734:	46bd      	mov	sp, r7
 800b736:	bc80      	pop	{r7}
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	20000970 	.word	0x20000970

0800b740 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b748:	4b0b      	ldr	r3, [pc, #44]	; (800b778 <TimerInsertNewHeadTimer+0x38>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2200      	movs	r2, #0
 800b758:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800b760:	4a05      	ldr	r2, [pc, #20]	; (800b778 <TimerInsertNewHeadTimer+0x38>)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800b766:	4b04      	ldr	r3, [pc, #16]	; (800b778 <TimerInsertNewHeadTimer+0x38>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7ff ff8e 	bl	800b68c <TimerSetTimeout>
}
 800b770:	bf00      	nop
 800b772:	3710      	adds	r7, #16
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	20000970 	.word	0x20000970

0800b77c <_vsniprintf_r>:
 800b77c:	b530      	push	{r4, r5, lr}
 800b77e:	4614      	mov	r4, r2
 800b780:	2c00      	cmp	r4, #0
 800b782:	b09b      	sub	sp, #108	; 0x6c
 800b784:	4605      	mov	r5, r0
 800b786:	461a      	mov	r2, r3
 800b788:	da05      	bge.n	800b796 <_vsniprintf_r+0x1a>
 800b78a:	238b      	movs	r3, #139	; 0x8b
 800b78c:	6003      	str	r3, [r0, #0]
 800b78e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b792:	b01b      	add	sp, #108	; 0x6c
 800b794:	bd30      	pop	{r4, r5, pc}
 800b796:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b79a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b79e:	bf14      	ite	ne
 800b7a0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b7a4:	4623      	moveq	r3, r4
 800b7a6:	9302      	str	r3, [sp, #8]
 800b7a8:	9305      	str	r3, [sp, #20]
 800b7aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7ae:	9100      	str	r1, [sp, #0]
 800b7b0:	9104      	str	r1, [sp, #16]
 800b7b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b7b6:	4669      	mov	r1, sp
 800b7b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b7ba:	f000 f8eb 	bl	800b994 <_svfiprintf_r>
 800b7be:	1c43      	adds	r3, r0, #1
 800b7c0:	bfbc      	itt	lt
 800b7c2:	238b      	movlt	r3, #139	; 0x8b
 800b7c4:	602b      	strlt	r3, [r5, #0]
 800b7c6:	2c00      	cmp	r4, #0
 800b7c8:	d0e3      	beq.n	800b792 <_vsniprintf_r+0x16>
 800b7ca:	9b00      	ldr	r3, [sp, #0]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	701a      	strb	r2, [r3, #0]
 800b7d0:	e7df      	b.n	800b792 <_vsniprintf_r+0x16>
	...

0800b7d4 <vsniprintf>:
 800b7d4:	b507      	push	{r0, r1, r2, lr}
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	460a      	mov	r2, r1
 800b7dc:	4601      	mov	r1, r0
 800b7de:	4803      	ldr	r0, [pc, #12]	; (800b7ec <vsniprintf+0x18>)
 800b7e0:	6800      	ldr	r0, [r0, #0]
 800b7e2:	f7ff ffcb 	bl	800b77c <_vsniprintf_r>
 800b7e6:	b003      	add	sp, #12
 800b7e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7ec:	2000005c 	.word	0x2000005c

0800b7f0 <strchr>:
 800b7f0:	b2c9      	uxtb	r1, r1
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7fa:	b112      	cbz	r2, 800b802 <strchr+0x12>
 800b7fc:	428a      	cmp	r2, r1
 800b7fe:	d1f9      	bne.n	800b7f4 <strchr+0x4>
 800b800:	4770      	bx	lr
 800b802:	2900      	cmp	r1, #0
 800b804:	bf18      	it	ne
 800b806:	2000      	movne	r0, #0
 800b808:	4770      	bx	lr

0800b80a <strncpy>:
 800b80a:	b510      	push	{r4, lr}
 800b80c:	3901      	subs	r1, #1
 800b80e:	4603      	mov	r3, r0
 800b810:	b132      	cbz	r2, 800b820 <strncpy+0x16>
 800b812:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b816:	f803 4b01 	strb.w	r4, [r3], #1
 800b81a:	3a01      	subs	r2, #1
 800b81c:	2c00      	cmp	r4, #0
 800b81e:	d1f7      	bne.n	800b810 <strncpy+0x6>
 800b820:	441a      	add	r2, r3
 800b822:	2100      	movs	r1, #0
 800b824:	4293      	cmp	r3, r2
 800b826:	d100      	bne.n	800b82a <strncpy+0x20>
 800b828:	bd10      	pop	{r4, pc}
 800b82a:	f803 1b01 	strb.w	r1, [r3], #1
 800b82e:	e7f9      	b.n	800b824 <strncpy+0x1a>

0800b830 <strstr>:
 800b830:	780a      	ldrb	r2, [r1, #0]
 800b832:	b570      	push	{r4, r5, r6, lr}
 800b834:	b96a      	cbnz	r2, 800b852 <strstr+0x22>
 800b836:	bd70      	pop	{r4, r5, r6, pc}
 800b838:	429a      	cmp	r2, r3
 800b83a:	d109      	bne.n	800b850 <strstr+0x20>
 800b83c:	460c      	mov	r4, r1
 800b83e:	4605      	mov	r5, r0
 800b840:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b844:	2b00      	cmp	r3, #0
 800b846:	d0f6      	beq.n	800b836 <strstr+0x6>
 800b848:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b84c:	429e      	cmp	r6, r3
 800b84e:	d0f7      	beq.n	800b840 <strstr+0x10>
 800b850:	3001      	adds	r0, #1
 800b852:	7803      	ldrb	r3, [r0, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1ef      	bne.n	800b838 <strstr+0x8>
 800b858:	4618      	mov	r0, r3
 800b85a:	e7ec      	b.n	800b836 <strstr+0x6>

0800b85c <memset>:
 800b85c:	4402      	add	r2, r0
 800b85e:	4603      	mov	r3, r0
 800b860:	4293      	cmp	r3, r2
 800b862:	d100      	bne.n	800b866 <memset+0xa>
 800b864:	4770      	bx	lr
 800b866:	f803 1b01 	strb.w	r1, [r3], #1
 800b86a:	e7f9      	b.n	800b860 <memset+0x4>

0800b86c <__errno>:
 800b86c:	4b01      	ldr	r3, [pc, #4]	; (800b874 <__errno+0x8>)
 800b86e:	6818      	ldr	r0, [r3, #0]
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	2000005c 	.word	0x2000005c

0800b878 <__libc_init_array>:
 800b878:	b570      	push	{r4, r5, r6, lr}
 800b87a:	4d0d      	ldr	r5, [pc, #52]	; (800b8b0 <__libc_init_array+0x38>)
 800b87c:	4c0d      	ldr	r4, [pc, #52]	; (800b8b4 <__libc_init_array+0x3c>)
 800b87e:	1b64      	subs	r4, r4, r5
 800b880:	10a4      	asrs	r4, r4, #2
 800b882:	2600      	movs	r6, #0
 800b884:	42a6      	cmp	r6, r4
 800b886:	d109      	bne.n	800b89c <__libc_init_array+0x24>
 800b888:	4d0b      	ldr	r5, [pc, #44]	; (800b8b8 <__libc_init_array+0x40>)
 800b88a:	4c0c      	ldr	r4, [pc, #48]	; (800b8bc <__libc_init_array+0x44>)
 800b88c:	f000 fc68 	bl	800c160 <_init>
 800b890:	1b64      	subs	r4, r4, r5
 800b892:	10a4      	asrs	r4, r4, #2
 800b894:	2600      	movs	r6, #0
 800b896:	42a6      	cmp	r6, r4
 800b898:	d105      	bne.n	800b8a6 <__libc_init_array+0x2e>
 800b89a:	bd70      	pop	{r4, r5, r6, pc}
 800b89c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8a0:	4798      	blx	r3
 800b8a2:	3601      	adds	r6, #1
 800b8a4:	e7ee      	b.n	800b884 <__libc_init_array+0xc>
 800b8a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8aa:	4798      	blx	r3
 800b8ac:	3601      	adds	r6, #1
 800b8ae:	e7f2      	b.n	800b896 <__libc_init_array+0x1e>
 800b8b0:	0800c96c 	.word	0x0800c96c
 800b8b4:	0800c96c 	.word	0x0800c96c
 800b8b8:	0800c96c 	.word	0x0800c96c
 800b8bc:	0800c970 	.word	0x0800c970

0800b8c0 <__retarget_lock_acquire_recursive>:
 800b8c0:	4770      	bx	lr

0800b8c2 <__retarget_lock_release_recursive>:
 800b8c2:	4770      	bx	lr

0800b8c4 <memcpy>:
 800b8c4:	440a      	add	r2, r1
 800b8c6:	4291      	cmp	r1, r2
 800b8c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b8cc:	d100      	bne.n	800b8d0 <memcpy+0xc>
 800b8ce:	4770      	bx	lr
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8da:	4291      	cmp	r1, r2
 800b8dc:	d1f9      	bne.n	800b8d2 <memcpy+0xe>
 800b8de:	bd10      	pop	{r4, pc}

0800b8e0 <__ssputs_r>:
 800b8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e4:	688e      	ldr	r6, [r1, #8]
 800b8e6:	461f      	mov	r7, r3
 800b8e8:	42be      	cmp	r6, r7
 800b8ea:	680b      	ldr	r3, [r1, #0]
 800b8ec:	4682      	mov	sl, r0
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	4690      	mov	r8, r2
 800b8f2:	d82c      	bhi.n	800b94e <__ssputs_r+0x6e>
 800b8f4:	898a      	ldrh	r2, [r1, #12]
 800b8f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8fa:	d026      	beq.n	800b94a <__ssputs_r+0x6a>
 800b8fc:	6965      	ldr	r5, [r4, #20]
 800b8fe:	6909      	ldr	r1, [r1, #16]
 800b900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b904:	eba3 0901 	sub.w	r9, r3, r1
 800b908:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b90c:	1c7b      	adds	r3, r7, #1
 800b90e:	444b      	add	r3, r9
 800b910:	106d      	asrs	r5, r5, #1
 800b912:	429d      	cmp	r5, r3
 800b914:	bf38      	it	cc
 800b916:	461d      	movcc	r5, r3
 800b918:	0553      	lsls	r3, r2, #21
 800b91a:	d527      	bpl.n	800b96c <__ssputs_r+0x8c>
 800b91c:	4629      	mov	r1, r5
 800b91e:	f000 f957 	bl	800bbd0 <_malloc_r>
 800b922:	4606      	mov	r6, r0
 800b924:	b360      	cbz	r0, 800b980 <__ssputs_r+0xa0>
 800b926:	6921      	ldr	r1, [r4, #16]
 800b928:	464a      	mov	r2, r9
 800b92a:	f7ff ffcb 	bl	800b8c4 <memcpy>
 800b92e:	89a3      	ldrh	r3, [r4, #12]
 800b930:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b938:	81a3      	strh	r3, [r4, #12]
 800b93a:	6126      	str	r6, [r4, #16]
 800b93c:	6165      	str	r5, [r4, #20]
 800b93e:	444e      	add	r6, r9
 800b940:	eba5 0509 	sub.w	r5, r5, r9
 800b944:	6026      	str	r6, [r4, #0]
 800b946:	60a5      	str	r5, [r4, #8]
 800b948:	463e      	mov	r6, r7
 800b94a:	42be      	cmp	r6, r7
 800b94c:	d900      	bls.n	800b950 <__ssputs_r+0x70>
 800b94e:	463e      	mov	r6, r7
 800b950:	6820      	ldr	r0, [r4, #0]
 800b952:	4632      	mov	r2, r6
 800b954:	4641      	mov	r1, r8
 800b956:	f000 fb86 	bl	800c066 <memmove>
 800b95a:	68a3      	ldr	r3, [r4, #8]
 800b95c:	1b9b      	subs	r3, r3, r6
 800b95e:	60a3      	str	r3, [r4, #8]
 800b960:	6823      	ldr	r3, [r4, #0]
 800b962:	4433      	add	r3, r6
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	2000      	movs	r0, #0
 800b968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96c:	462a      	mov	r2, r5
 800b96e:	f000 fb4b 	bl	800c008 <_realloc_r>
 800b972:	4606      	mov	r6, r0
 800b974:	2800      	cmp	r0, #0
 800b976:	d1e0      	bne.n	800b93a <__ssputs_r+0x5a>
 800b978:	6921      	ldr	r1, [r4, #16]
 800b97a:	4650      	mov	r0, sl
 800b97c:	f000 fb9e 	bl	800c0bc <_free_r>
 800b980:	230c      	movs	r3, #12
 800b982:	f8ca 3000 	str.w	r3, [sl]
 800b986:	89a3      	ldrh	r3, [r4, #12]
 800b988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b98c:	81a3      	strh	r3, [r4, #12]
 800b98e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b992:	e7e9      	b.n	800b968 <__ssputs_r+0x88>

0800b994 <_svfiprintf_r>:
 800b994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b998:	4698      	mov	r8, r3
 800b99a:	898b      	ldrh	r3, [r1, #12]
 800b99c:	061b      	lsls	r3, r3, #24
 800b99e:	b09d      	sub	sp, #116	; 0x74
 800b9a0:	4607      	mov	r7, r0
 800b9a2:	460d      	mov	r5, r1
 800b9a4:	4614      	mov	r4, r2
 800b9a6:	d50e      	bpl.n	800b9c6 <_svfiprintf_r+0x32>
 800b9a8:	690b      	ldr	r3, [r1, #16]
 800b9aa:	b963      	cbnz	r3, 800b9c6 <_svfiprintf_r+0x32>
 800b9ac:	2140      	movs	r1, #64	; 0x40
 800b9ae:	f000 f90f 	bl	800bbd0 <_malloc_r>
 800b9b2:	6028      	str	r0, [r5, #0]
 800b9b4:	6128      	str	r0, [r5, #16]
 800b9b6:	b920      	cbnz	r0, 800b9c2 <_svfiprintf_r+0x2e>
 800b9b8:	230c      	movs	r3, #12
 800b9ba:	603b      	str	r3, [r7, #0]
 800b9bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9c0:	e0d0      	b.n	800bb64 <_svfiprintf_r+0x1d0>
 800b9c2:	2340      	movs	r3, #64	; 0x40
 800b9c4:	616b      	str	r3, [r5, #20]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ca:	2320      	movs	r3, #32
 800b9cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9d4:	2330      	movs	r3, #48	; 0x30
 800b9d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bb7c <_svfiprintf_r+0x1e8>
 800b9da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9de:	f04f 0901 	mov.w	r9, #1
 800b9e2:	4623      	mov	r3, r4
 800b9e4:	469a      	mov	sl, r3
 800b9e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9ea:	b10a      	cbz	r2, 800b9f0 <_svfiprintf_r+0x5c>
 800b9ec:	2a25      	cmp	r2, #37	; 0x25
 800b9ee:	d1f9      	bne.n	800b9e4 <_svfiprintf_r+0x50>
 800b9f0:	ebba 0b04 	subs.w	fp, sl, r4
 800b9f4:	d00b      	beq.n	800ba0e <_svfiprintf_r+0x7a>
 800b9f6:	465b      	mov	r3, fp
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	4638      	mov	r0, r7
 800b9fe:	f7ff ff6f 	bl	800b8e0 <__ssputs_r>
 800ba02:	3001      	adds	r0, #1
 800ba04:	f000 80a9 	beq.w	800bb5a <_svfiprintf_r+0x1c6>
 800ba08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba0a:	445a      	add	r2, fp
 800ba0c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f000 80a1 	beq.w	800bb5a <_svfiprintf_r+0x1c6>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba22:	f10a 0a01 	add.w	sl, sl, #1
 800ba26:	9304      	str	r3, [sp, #16]
 800ba28:	9307      	str	r3, [sp, #28]
 800ba2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba2e:	931a      	str	r3, [sp, #104]	; 0x68
 800ba30:	4654      	mov	r4, sl
 800ba32:	2205      	movs	r2, #5
 800ba34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba38:	4850      	ldr	r0, [pc, #320]	; (800bb7c <_svfiprintf_r+0x1e8>)
 800ba3a:	f7f4 fba1 	bl	8000180 <memchr>
 800ba3e:	9a04      	ldr	r2, [sp, #16]
 800ba40:	b9d8      	cbnz	r0, 800ba7a <_svfiprintf_r+0xe6>
 800ba42:	06d0      	lsls	r0, r2, #27
 800ba44:	bf44      	itt	mi
 800ba46:	2320      	movmi	r3, #32
 800ba48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba4c:	0711      	lsls	r1, r2, #28
 800ba4e:	bf44      	itt	mi
 800ba50:	232b      	movmi	r3, #43	; 0x2b
 800ba52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba56:	f89a 3000 	ldrb.w	r3, [sl]
 800ba5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba5c:	d015      	beq.n	800ba8a <_svfiprintf_r+0xf6>
 800ba5e:	9a07      	ldr	r2, [sp, #28]
 800ba60:	4654      	mov	r4, sl
 800ba62:	2000      	movs	r0, #0
 800ba64:	f04f 0c0a 	mov.w	ip, #10
 800ba68:	4621      	mov	r1, r4
 800ba6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba6e:	3b30      	subs	r3, #48	; 0x30
 800ba70:	2b09      	cmp	r3, #9
 800ba72:	d94d      	bls.n	800bb10 <_svfiprintf_r+0x17c>
 800ba74:	b1b0      	cbz	r0, 800baa4 <_svfiprintf_r+0x110>
 800ba76:	9207      	str	r2, [sp, #28]
 800ba78:	e014      	b.n	800baa4 <_svfiprintf_r+0x110>
 800ba7a:	eba0 0308 	sub.w	r3, r0, r8
 800ba7e:	fa09 f303 	lsl.w	r3, r9, r3
 800ba82:	4313      	orrs	r3, r2
 800ba84:	9304      	str	r3, [sp, #16]
 800ba86:	46a2      	mov	sl, r4
 800ba88:	e7d2      	b.n	800ba30 <_svfiprintf_r+0x9c>
 800ba8a:	9b03      	ldr	r3, [sp, #12]
 800ba8c:	1d19      	adds	r1, r3, #4
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	9103      	str	r1, [sp, #12]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	bfbb      	ittet	lt
 800ba96:	425b      	neglt	r3, r3
 800ba98:	f042 0202 	orrlt.w	r2, r2, #2
 800ba9c:	9307      	strge	r3, [sp, #28]
 800ba9e:	9307      	strlt	r3, [sp, #28]
 800baa0:	bfb8      	it	lt
 800baa2:	9204      	strlt	r2, [sp, #16]
 800baa4:	7823      	ldrb	r3, [r4, #0]
 800baa6:	2b2e      	cmp	r3, #46	; 0x2e
 800baa8:	d10c      	bne.n	800bac4 <_svfiprintf_r+0x130>
 800baaa:	7863      	ldrb	r3, [r4, #1]
 800baac:	2b2a      	cmp	r3, #42	; 0x2a
 800baae:	d134      	bne.n	800bb1a <_svfiprintf_r+0x186>
 800bab0:	9b03      	ldr	r3, [sp, #12]
 800bab2:	1d1a      	adds	r2, r3, #4
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	9203      	str	r2, [sp, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	bfb8      	it	lt
 800babc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bac0:	3402      	adds	r4, #2
 800bac2:	9305      	str	r3, [sp, #20]
 800bac4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bb80 <_svfiprintf_r+0x1ec>
 800bac8:	7821      	ldrb	r1, [r4, #0]
 800baca:	2203      	movs	r2, #3
 800bacc:	4650      	mov	r0, sl
 800bace:	f7f4 fb57 	bl	8000180 <memchr>
 800bad2:	b138      	cbz	r0, 800bae4 <_svfiprintf_r+0x150>
 800bad4:	9b04      	ldr	r3, [sp, #16]
 800bad6:	eba0 000a 	sub.w	r0, r0, sl
 800bada:	2240      	movs	r2, #64	; 0x40
 800badc:	4082      	lsls	r2, r0
 800bade:	4313      	orrs	r3, r2
 800bae0:	3401      	adds	r4, #1
 800bae2:	9304      	str	r3, [sp, #16]
 800bae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae8:	4826      	ldr	r0, [pc, #152]	; (800bb84 <_svfiprintf_r+0x1f0>)
 800baea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baee:	2206      	movs	r2, #6
 800baf0:	f7f4 fb46 	bl	8000180 <memchr>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d038      	beq.n	800bb6a <_svfiprintf_r+0x1d6>
 800baf8:	4b23      	ldr	r3, [pc, #140]	; (800bb88 <_svfiprintf_r+0x1f4>)
 800bafa:	bb1b      	cbnz	r3, 800bb44 <_svfiprintf_r+0x1b0>
 800bafc:	9b03      	ldr	r3, [sp, #12]
 800bafe:	3307      	adds	r3, #7
 800bb00:	f023 0307 	bic.w	r3, r3, #7
 800bb04:	3308      	adds	r3, #8
 800bb06:	9303      	str	r3, [sp, #12]
 800bb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb0a:	4433      	add	r3, r6
 800bb0c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb0e:	e768      	b.n	800b9e2 <_svfiprintf_r+0x4e>
 800bb10:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb14:	460c      	mov	r4, r1
 800bb16:	2001      	movs	r0, #1
 800bb18:	e7a6      	b.n	800ba68 <_svfiprintf_r+0xd4>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	3401      	adds	r4, #1
 800bb1e:	9305      	str	r3, [sp, #20]
 800bb20:	4619      	mov	r1, r3
 800bb22:	f04f 0c0a 	mov.w	ip, #10
 800bb26:	4620      	mov	r0, r4
 800bb28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb2c:	3a30      	subs	r2, #48	; 0x30
 800bb2e:	2a09      	cmp	r2, #9
 800bb30:	d903      	bls.n	800bb3a <_svfiprintf_r+0x1a6>
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0c6      	beq.n	800bac4 <_svfiprintf_r+0x130>
 800bb36:	9105      	str	r1, [sp, #20]
 800bb38:	e7c4      	b.n	800bac4 <_svfiprintf_r+0x130>
 800bb3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb3e:	4604      	mov	r4, r0
 800bb40:	2301      	movs	r3, #1
 800bb42:	e7f0      	b.n	800bb26 <_svfiprintf_r+0x192>
 800bb44:	ab03      	add	r3, sp, #12
 800bb46:	9300      	str	r3, [sp, #0]
 800bb48:	462a      	mov	r2, r5
 800bb4a:	4b10      	ldr	r3, [pc, #64]	; (800bb8c <_svfiprintf_r+0x1f8>)
 800bb4c:	a904      	add	r1, sp, #16
 800bb4e:	4638      	mov	r0, r7
 800bb50:	f3af 8000 	nop.w
 800bb54:	1c42      	adds	r2, r0, #1
 800bb56:	4606      	mov	r6, r0
 800bb58:	d1d6      	bne.n	800bb08 <_svfiprintf_r+0x174>
 800bb5a:	89ab      	ldrh	r3, [r5, #12]
 800bb5c:	065b      	lsls	r3, r3, #25
 800bb5e:	f53f af2d 	bmi.w	800b9bc <_svfiprintf_r+0x28>
 800bb62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb64:	b01d      	add	sp, #116	; 0x74
 800bb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb6a:	ab03      	add	r3, sp, #12
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	462a      	mov	r2, r5
 800bb70:	4b06      	ldr	r3, [pc, #24]	; (800bb8c <_svfiprintf_r+0x1f8>)
 800bb72:	a904      	add	r1, sp, #16
 800bb74:	4638      	mov	r0, r7
 800bb76:	f000 f919 	bl	800bdac <_printf_i>
 800bb7a:	e7eb      	b.n	800bb54 <_svfiprintf_r+0x1c0>
 800bb7c:	0800c930 	.word	0x0800c930
 800bb80:	0800c936 	.word	0x0800c936
 800bb84:	0800c93a 	.word	0x0800c93a
 800bb88:	00000000 	.word	0x00000000
 800bb8c:	0800b8e1 	.word	0x0800b8e1

0800bb90 <sbrk_aligned>:
 800bb90:	b570      	push	{r4, r5, r6, lr}
 800bb92:	4e0e      	ldr	r6, [pc, #56]	; (800bbcc <sbrk_aligned+0x3c>)
 800bb94:	460c      	mov	r4, r1
 800bb96:	6831      	ldr	r1, [r6, #0]
 800bb98:	4605      	mov	r5, r0
 800bb9a:	b911      	cbnz	r1, 800bba2 <sbrk_aligned+0x12>
 800bb9c:	f000 fa7e 	bl	800c09c <_sbrk_r>
 800bba0:	6030      	str	r0, [r6, #0]
 800bba2:	4621      	mov	r1, r4
 800bba4:	4628      	mov	r0, r5
 800bba6:	f000 fa79 	bl	800c09c <_sbrk_r>
 800bbaa:	1c43      	adds	r3, r0, #1
 800bbac:	d00a      	beq.n	800bbc4 <sbrk_aligned+0x34>
 800bbae:	1cc4      	adds	r4, r0, #3
 800bbb0:	f024 0403 	bic.w	r4, r4, #3
 800bbb4:	42a0      	cmp	r0, r4
 800bbb6:	d007      	beq.n	800bbc8 <sbrk_aligned+0x38>
 800bbb8:	1a21      	subs	r1, r4, r0
 800bbba:	4628      	mov	r0, r5
 800bbbc:	f000 fa6e 	bl	800c09c <_sbrk_r>
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	d101      	bne.n	800bbc8 <sbrk_aligned+0x38>
 800bbc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bbc8:	4620      	mov	r0, r4
 800bbca:	bd70      	pop	{r4, r5, r6, pc}
 800bbcc:	20000ab4 	.word	0x20000ab4

0800bbd0 <_malloc_r>:
 800bbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd4:	1ccd      	adds	r5, r1, #3
 800bbd6:	f025 0503 	bic.w	r5, r5, #3
 800bbda:	3508      	adds	r5, #8
 800bbdc:	2d0c      	cmp	r5, #12
 800bbde:	bf38      	it	cc
 800bbe0:	250c      	movcc	r5, #12
 800bbe2:	2d00      	cmp	r5, #0
 800bbe4:	4607      	mov	r7, r0
 800bbe6:	db01      	blt.n	800bbec <_malloc_r+0x1c>
 800bbe8:	42a9      	cmp	r1, r5
 800bbea:	d905      	bls.n	800bbf8 <_malloc_r+0x28>
 800bbec:	230c      	movs	r3, #12
 800bbee:	603b      	str	r3, [r7, #0]
 800bbf0:	2600      	movs	r6, #0
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbf8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bccc <_malloc_r+0xfc>
 800bbfc:	f000 f9f8 	bl	800bff0 <__malloc_lock>
 800bc00:	f8d8 3000 	ldr.w	r3, [r8]
 800bc04:	461c      	mov	r4, r3
 800bc06:	bb5c      	cbnz	r4, 800bc60 <_malloc_r+0x90>
 800bc08:	4629      	mov	r1, r5
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	f7ff ffc0 	bl	800bb90 <sbrk_aligned>
 800bc10:	1c43      	adds	r3, r0, #1
 800bc12:	4604      	mov	r4, r0
 800bc14:	d155      	bne.n	800bcc2 <_malloc_r+0xf2>
 800bc16:	f8d8 4000 	ldr.w	r4, [r8]
 800bc1a:	4626      	mov	r6, r4
 800bc1c:	2e00      	cmp	r6, #0
 800bc1e:	d145      	bne.n	800bcac <_malloc_r+0xdc>
 800bc20:	2c00      	cmp	r4, #0
 800bc22:	d048      	beq.n	800bcb6 <_malloc_r+0xe6>
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	4631      	mov	r1, r6
 800bc28:	4638      	mov	r0, r7
 800bc2a:	eb04 0903 	add.w	r9, r4, r3
 800bc2e:	f000 fa35 	bl	800c09c <_sbrk_r>
 800bc32:	4581      	cmp	r9, r0
 800bc34:	d13f      	bne.n	800bcb6 <_malloc_r+0xe6>
 800bc36:	6821      	ldr	r1, [r4, #0]
 800bc38:	1a6d      	subs	r5, r5, r1
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	4638      	mov	r0, r7
 800bc3e:	f7ff ffa7 	bl	800bb90 <sbrk_aligned>
 800bc42:	3001      	adds	r0, #1
 800bc44:	d037      	beq.n	800bcb6 <_malloc_r+0xe6>
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	442b      	add	r3, r5
 800bc4a:	6023      	str	r3, [r4, #0]
 800bc4c:	f8d8 3000 	ldr.w	r3, [r8]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d038      	beq.n	800bcc6 <_malloc_r+0xf6>
 800bc54:	685a      	ldr	r2, [r3, #4]
 800bc56:	42a2      	cmp	r2, r4
 800bc58:	d12b      	bne.n	800bcb2 <_malloc_r+0xe2>
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	605a      	str	r2, [r3, #4]
 800bc5e:	e00f      	b.n	800bc80 <_malloc_r+0xb0>
 800bc60:	6822      	ldr	r2, [r4, #0]
 800bc62:	1b52      	subs	r2, r2, r5
 800bc64:	d41f      	bmi.n	800bca6 <_malloc_r+0xd6>
 800bc66:	2a0b      	cmp	r2, #11
 800bc68:	d917      	bls.n	800bc9a <_malloc_r+0xca>
 800bc6a:	1961      	adds	r1, r4, r5
 800bc6c:	42a3      	cmp	r3, r4
 800bc6e:	6025      	str	r5, [r4, #0]
 800bc70:	bf18      	it	ne
 800bc72:	6059      	strne	r1, [r3, #4]
 800bc74:	6863      	ldr	r3, [r4, #4]
 800bc76:	bf08      	it	eq
 800bc78:	f8c8 1000 	streq.w	r1, [r8]
 800bc7c:	5162      	str	r2, [r4, r5]
 800bc7e:	604b      	str	r3, [r1, #4]
 800bc80:	4638      	mov	r0, r7
 800bc82:	f104 060b 	add.w	r6, r4, #11
 800bc86:	f000 f9b9 	bl	800bffc <__malloc_unlock>
 800bc8a:	f026 0607 	bic.w	r6, r6, #7
 800bc8e:	1d23      	adds	r3, r4, #4
 800bc90:	1af2      	subs	r2, r6, r3
 800bc92:	d0ae      	beq.n	800bbf2 <_malloc_r+0x22>
 800bc94:	1b9b      	subs	r3, r3, r6
 800bc96:	50a3      	str	r3, [r4, r2]
 800bc98:	e7ab      	b.n	800bbf2 <_malloc_r+0x22>
 800bc9a:	42a3      	cmp	r3, r4
 800bc9c:	6862      	ldr	r2, [r4, #4]
 800bc9e:	d1dd      	bne.n	800bc5c <_malloc_r+0x8c>
 800bca0:	f8c8 2000 	str.w	r2, [r8]
 800bca4:	e7ec      	b.n	800bc80 <_malloc_r+0xb0>
 800bca6:	4623      	mov	r3, r4
 800bca8:	6864      	ldr	r4, [r4, #4]
 800bcaa:	e7ac      	b.n	800bc06 <_malloc_r+0x36>
 800bcac:	4634      	mov	r4, r6
 800bcae:	6876      	ldr	r6, [r6, #4]
 800bcb0:	e7b4      	b.n	800bc1c <_malloc_r+0x4c>
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	e7cc      	b.n	800bc50 <_malloc_r+0x80>
 800bcb6:	230c      	movs	r3, #12
 800bcb8:	603b      	str	r3, [r7, #0]
 800bcba:	4638      	mov	r0, r7
 800bcbc:	f000 f99e 	bl	800bffc <__malloc_unlock>
 800bcc0:	e797      	b.n	800bbf2 <_malloc_r+0x22>
 800bcc2:	6025      	str	r5, [r4, #0]
 800bcc4:	e7dc      	b.n	800bc80 <_malloc_r+0xb0>
 800bcc6:	605b      	str	r3, [r3, #4]
 800bcc8:	deff      	udf	#255	; 0xff
 800bcca:	bf00      	nop
 800bccc:	20000ab0 	.word	0x20000ab0

0800bcd0 <_printf_common>:
 800bcd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcd4:	4616      	mov	r6, r2
 800bcd6:	4699      	mov	r9, r3
 800bcd8:	688a      	ldr	r2, [r1, #8]
 800bcda:	690b      	ldr	r3, [r1, #16]
 800bcdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bce0:	4293      	cmp	r3, r2
 800bce2:	bfb8      	it	lt
 800bce4:	4613      	movlt	r3, r2
 800bce6:	6033      	str	r3, [r6, #0]
 800bce8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcec:	4607      	mov	r7, r0
 800bcee:	460c      	mov	r4, r1
 800bcf0:	b10a      	cbz	r2, 800bcf6 <_printf_common+0x26>
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	6033      	str	r3, [r6, #0]
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	0699      	lsls	r1, r3, #26
 800bcfa:	bf42      	ittt	mi
 800bcfc:	6833      	ldrmi	r3, [r6, #0]
 800bcfe:	3302      	addmi	r3, #2
 800bd00:	6033      	strmi	r3, [r6, #0]
 800bd02:	6825      	ldr	r5, [r4, #0]
 800bd04:	f015 0506 	ands.w	r5, r5, #6
 800bd08:	d106      	bne.n	800bd18 <_printf_common+0x48>
 800bd0a:	f104 0a19 	add.w	sl, r4, #25
 800bd0e:	68e3      	ldr	r3, [r4, #12]
 800bd10:	6832      	ldr	r2, [r6, #0]
 800bd12:	1a9b      	subs	r3, r3, r2
 800bd14:	42ab      	cmp	r3, r5
 800bd16:	dc26      	bgt.n	800bd66 <_printf_common+0x96>
 800bd18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd1c:	1e13      	subs	r3, r2, #0
 800bd1e:	6822      	ldr	r2, [r4, #0]
 800bd20:	bf18      	it	ne
 800bd22:	2301      	movne	r3, #1
 800bd24:	0692      	lsls	r2, r2, #26
 800bd26:	d42b      	bmi.n	800bd80 <_printf_common+0xb0>
 800bd28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd2c:	4649      	mov	r1, r9
 800bd2e:	4638      	mov	r0, r7
 800bd30:	47c0      	blx	r8
 800bd32:	3001      	adds	r0, #1
 800bd34:	d01e      	beq.n	800bd74 <_printf_common+0xa4>
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	6922      	ldr	r2, [r4, #16]
 800bd3a:	f003 0306 	and.w	r3, r3, #6
 800bd3e:	2b04      	cmp	r3, #4
 800bd40:	bf02      	ittt	eq
 800bd42:	68e5      	ldreq	r5, [r4, #12]
 800bd44:	6833      	ldreq	r3, [r6, #0]
 800bd46:	1aed      	subeq	r5, r5, r3
 800bd48:	68a3      	ldr	r3, [r4, #8]
 800bd4a:	bf0c      	ite	eq
 800bd4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd50:	2500      	movne	r5, #0
 800bd52:	4293      	cmp	r3, r2
 800bd54:	bfc4      	itt	gt
 800bd56:	1a9b      	subgt	r3, r3, r2
 800bd58:	18ed      	addgt	r5, r5, r3
 800bd5a:	2600      	movs	r6, #0
 800bd5c:	341a      	adds	r4, #26
 800bd5e:	42b5      	cmp	r5, r6
 800bd60:	d11a      	bne.n	800bd98 <_printf_common+0xc8>
 800bd62:	2000      	movs	r0, #0
 800bd64:	e008      	b.n	800bd78 <_printf_common+0xa8>
 800bd66:	2301      	movs	r3, #1
 800bd68:	4652      	mov	r2, sl
 800bd6a:	4649      	mov	r1, r9
 800bd6c:	4638      	mov	r0, r7
 800bd6e:	47c0      	blx	r8
 800bd70:	3001      	adds	r0, #1
 800bd72:	d103      	bne.n	800bd7c <_printf_common+0xac>
 800bd74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd7c:	3501      	adds	r5, #1
 800bd7e:	e7c6      	b.n	800bd0e <_printf_common+0x3e>
 800bd80:	18e1      	adds	r1, r4, r3
 800bd82:	1c5a      	adds	r2, r3, #1
 800bd84:	2030      	movs	r0, #48	; 0x30
 800bd86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd8a:	4422      	add	r2, r4
 800bd8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd94:	3302      	adds	r3, #2
 800bd96:	e7c7      	b.n	800bd28 <_printf_common+0x58>
 800bd98:	2301      	movs	r3, #1
 800bd9a:	4622      	mov	r2, r4
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	4638      	mov	r0, r7
 800bda0:	47c0      	blx	r8
 800bda2:	3001      	adds	r0, #1
 800bda4:	d0e6      	beq.n	800bd74 <_printf_common+0xa4>
 800bda6:	3601      	adds	r6, #1
 800bda8:	e7d9      	b.n	800bd5e <_printf_common+0x8e>
	...

0800bdac <_printf_i>:
 800bdac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb0:	7e0f      	ldrb	r7, [r1, #24]
 800bdb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bdb4:	2f78      	cmp	r7, #120	; 0x78
 800bdb6:	4691      	mov	r9, r2
 800bdb8:	4680      	mov	r8, r0
 800bdba:	460c      	mov	r4, r1
 800bdbc:	469a      	mov	sl, r3
 800bdbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bdc2:	d807      	bhi.n	800bdd4 <_printf_i+0x28>
 800bdc4:	2f62      	cmp	r7, #98	; 0x62
 800bdc6:	d80a      	bhi.n	800bdde <_printf_i+0x32>
 800bdc8:	2f00      	cmp	r7, #0
 800bdca:	f000 80d4 	beq.w	800bf76 <_printf_i+0x1ca>
 800bdce:	2f58      	cmp	r7, #88	; 0x58
 800bdd0:	f000 80c0 	beq.w	800bf54 <_printf_i+0x1a8>
 800bdd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bddc:	e03a      	b.n	800be54 <_printf_i+0xa8>
 800bdde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bde2:	2b15      	cmp	r3, #21
 800bde4:	d8f6      	bhi.n	800bdd4 <_printf_i+0x28>
 800bde6:	a101      	add	r1, pc, #4	; (adr r1, 800bdec <_printf_i+0x40>)
 800bde8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdec:	0800be45 	.word	0x0800be45
 800bdf0:	0800be59 	.word	0x0800be59
 800bdf4:	0800bdd5 	.word	0x0800bdd5
 800bdf8:	0800bdd5 	.word	0x0800bdd5
 800bdfc:	0800bdd5 	.word	0x0800bdd5
 800be00:	0800bdd5 	.word	0x0800bdd5
 800be04:	0800be59 	.word	0x0800be59
 800be08:	0800bdd5 	.word	0x0800bdd5
 800be0c:	0800bdd5 	.word	0x0800bdd5
 800be10:	0800bdd5 	.word	0x0800bdd5
 800be14:	0800bdd5 	.word	0x0800bdd5
 800be18:	0800bf5d 	.word	0x0800bf5d
 800be1c:	0800be85 	.word	0x0800be85
 800be20:	0800bf17 	.word	0x0800bf17
 800be24:	0800bdd5 	.word	0x0800bdd5
 800be28:	0800bdd5 	.word	0x0800bdd5
 800be2c:	0800bf7f 	.word	0x0800bf7f
 800be30:	0800bdd5 	.word	0x0800bdd5
 800be34:	0800be85 	.word	0x0800be85
 800be38:	0800bdd5 	.word	0x0800bdd5
 800be3c:	0800bdd5 	.word	0x0800bdd5
 800be40:	0800bf1f 	.word	0x0800bf1f
 800be44:	682b      	ldr	r3, [r5, #0]
 800be46:	1d1a      	adds	r2, r3, #4
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	602a      	str	r2, [r5, #0]
 800be4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be54:	2301      	movs	r3, #1
 800be56:	e09f      	b.n	800bf98 <_printf_i+0x1ec>
 800be58:	6820      	ldr	r0, [r4, #0]
 800be5a:	682b      	ldr	r3, [r5, #0]
 800be5c:	0607      	lsls	r7, r0, #24
 800be5e:	f103 0104 	add.w	r1, r3, #4
 800be62:	6029      	str	r1, [r5, #0]
 800be64:	d501      	bpl.n	800be6a <_printf_i+0xbe>
 800be66:	681e      	ldr	r6, [r3, #0]
 800be68:	e003      	b.n	800be72 <_printf_i+0xc6>
 800be6a:	0646      	lsls	r6, r0, #25
 800be6c:	d5fb      	bpl.n	800be66 <_printf_i+0xba>
 800be6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800be72:	2e00      	cmp	r6, #0
 800be74:	da03      	bge.n	800be7e <_printf_i+0xd2>
 800be76:	232d      	movs	r3, #45	; 0x2d
 800be78:	4276      	negs	r6, r6
 800be7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be7e:	485a      	ldr	r0, [pc, #360]	; (800bfe8 <_printf_i+0x23c>)
 800be80:	230a      	movs	r3, #10
 800be82:	e012      	b.n	800beaa <_printf_i+0xfe>
 800be84:	682b      	ldr	r3, [r5, #0]
 800be86:	6820      	ldr	r0, [r4, #0]
 800be88:	1d19      	adds	r1, r3, #4
 800be8a:	6029      	str	r1, [r5, #0]
 800be8c:	0605      	lsls	r5, r0, #24
 800be8e:	d501      	bpl.n	800be94 <_printf_i+0xe8>
 800be90:	681e      	ldr	r6, [r3, #0]
 800be92:	e002      	b.n	800be9a <_printf_i+0xee>
 800be94:	0641      	lsls	r1, r0, #25
 800be96:	d5fb      	bpl.n	800be90 <_printf_i+0xe4>
 800be98:	881e      	ldrh	r6, [r3, #0]
 800be9a:	4853      	ldr	r0, [pc, #332]	; (800bfe8 <_printf_i+0x23c>)
 800be9c:	2f6f      	cmp	r7, #111	; 0x6f
 800be9e:	bf0c      	ite	eq
 800bea0:	2308      	moveq	r3, #8
 800bea2:	230a      	movne	r3, #10
 800bea4:	2100      	movs	r1, #0
 800bea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800beaa:	6865      	ldr	r5, [r4, #4]
 800beac:	60a5      	str	r5, [r4, #8]
 800beae:	2d00      	cmp	r5, #0
 800beb0:	bfa2      	ittt	ge
 800beb2:	6821      	ldrge	r1, [r4, #0]
 800beb4:	f021 0104 	bicge.w	r1, r1, #4
 800beb8:	6021      	strge	r1, [r4, #0]
 800beba:	b90e      	cbnz	r6, 800bec0 <_printf_i+0x114>
 800bebc:	2d00      	cmp	r5, #0
 800bebe:	d04b      	beq.n	800bf58 <_printf_i+0x1ac>
 800bec0:	4615      	mov	r5, r2
 800bec2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bec6:	fb03 6711 	mls	r7, r3, r1, r6
 800beca:	5dc7      	ldrb	r7, [r0, r7]
 800becc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bed0:	4637      	mov	r7, r6
 800bed2:	42bb      	cmp	r3, r7
 800bed4:	460e      	mov	r6, r1
 800bed6:	d9f4      	bls.n	800bec2 <_printf_i+0x116>
 800bed8:	2b08      	cmp	r3, #8
 800beda:	d10b      	bne.n	800bef4 <_printf_i+0x148>
 800bedc:	6823      	ldr	r3, [r4, #0]
 800bede:	07de      	lsls	r6, r3, #31
 800bee0:	d508      	bpl.n	800bef4 <_printf_i+0x148>
 800bee2:	6923      	ldr	r3, [r4, #16]
 800bee4:	6861      	ldr	r1, [r4, #4]
 800bee6:	4299      	cmp	r1, r3
 800bee8:	bfde      	ittt	le
 800beea:	2330      	movle	r3, #48	; 0x30
 800beec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bef0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bef4:	1b52      	subs	r2, r2, r5
 800bef6:	6122      	str	r2, [r4, #16]
 800bef8:	f8cd a000 	str.w	sl, [sp]
 800befc:	464b      	mov	r3, r9
 800befe:	aa03      	add	r2, sp, #12
 800bf00:	4621      	mov	r1, r4
 800bf02:	4640      	mov	r0, r8
 800bf04:	f7ff fee4 	bl	800bcd0 <_printf_common>
 800bf08:	3001      	adds	r0, #1
 800bf0a:	d14a      	bne.n	800bfa2 <_printf_i+0x1f6>
 800bf0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf10:	b004      	add	sp, #16
 800bf12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf16:	6823      	ldr	r3, [r4, #0]
 800bf18:	f043 0320 	orr.w	r3, r3, #32
 800bf1c:	6023      	str	r3, [r4, #0]
 800bf1e:	4833      	ldr	r0, [pc, #204]	; (800bfec <_printf_i+0x240>)
 800bf20:	2778      	movs	r7, #120	; 0x78
 800bf22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf26:	6823      	ldr	r3, [r4, #0]
 800bf28:	6829      	ldr	r1, [r5, #0]
 800bf2a:	061f      	lsls	r7, r3, #24
 800bf2c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf30:	d402      	bmi.n	800bf38 <_printf_i+0x18c>
 800bf32:	065f      	lsls	r7, r3, #25
 800bf34:	bf48      	it	mi
 800bf36:	b2b6      	uxthmi	r6, r6
 800bf38:	07df      	lsls	r7, r3, #31
 800bf3a:	bf48      	it	mi
 800bf3c:	f043 0320 	orrmi.w	r3, r3, #32
 800bf40:	6029      	str	r1, [r5, #0]
 800bf42:	bf48      	it	mi
 800bf44:	6023      	strmi	r3, [r4, #0]
 800bf46:	b91e      	cbnz	r6, 800bf50 <_printf_i+0x1a4>
 800bf48:	6823      	ldr	r3, [r4, #0]
 800bf4a:	f023 0320 	bic.w	r3, r3, #32
 800bf4e:	6023      	str	r3, [r4, #0]
 800bf50:	2310      	movs	r3, #16
 800bf52:	e7a7      	b.n	800bea4 <_printf_i+0xf8>
 800bf54:	4824      	ldr	r0, [pc, #144]	; (800bfe8 <_printf_i+0x23c>)
 800bf56:	e7e4      	b.n	800bf22 <_printf_i+0x176>
 800bf58:	4615      	mov	r5, r2
 800bf5a:	e7bd      	b.n	800bed8 <_printf_i+0x12c>
 800bf5c:	682b      	ldr	r3, [r5, #0]
 800bf5e:	6826      	ldr	r6, [r4, #0]
 800bf60:	6961      	ldr	r1, [r4, #20]
 800bf62:	1d18      	adds	r0, r3, #4
 800bf64:	6028      	str	r0, [r5, #0]
 800bf66:	0635      	lsls	r5, r6, #24
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	d501      	bpl.n	800bf70 <_printf_i+0x1c4>
 800bf6c:	6019      	str	r1, [r3, #0]
 800bf6e:	e002      	b.n	800bf76 <_printf_i+0x1ca>
 800bf70:	0670      	lsls	r0, r6, #25
 800bf72:	d5fb      	bpl.n	800bf6c <_printf_i+0x1c0>
 800bf74:	8019      	strh	r1, [r3, #0]
 800bf76:	2300      	movs	r3, #0
 800bf78:	6123      	str	r3, [r4, #16]
 800bf7a:	4615      	mov	r5, r2
 800bf7c:	e7bc      	b.n	800bef8 <_printf_i+0x14c>
 800bf7e:	682b      	ldr	r3, [r5, #0]
 800bf80:	1d1a      	adds	r2, r3, #4
 800bf82:	602a      	str	r2, [r5, #0]
 800bf84:	681d      	ldr	r5, [r3, #0]
 800bf86:	6862      	ldr	r2, [r4, #4]
 800bf88:	2100      	movs	r1, #0
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f7f4 f8f8 	bl	8000180 <memchr>
 800bf90:	b108      	cbz	r0, 800bf96 <_printf_i+0x1ea>
 800bf92:	1b40      	subs	r0, r0, r5
 800bf94:	6060      	str	r0, [r4, #4]
 800bf96:	6863      	ldr	r3, [r4, #4]
 800bf98:	6123      	str	r3, [r4, #16]
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfa0:	e7aa      	b.n	800bef8 <_printf_i+0x14c>
 800bfa2:	6923      	ldr	r3, [r4, #16]
 800bfa4:	462a      	mov	r2, r5
 800bfa6:	4649      	mov	r1, r9
 800bfa8:	4640      	mov	r0, r8
 800bfaa:	47d0      	blx	sl
 800bfac:	3001      	adds	r0, #1
 800bfae:	d0ad      	beq.n	800bf0c <_printf_i+0x160>
 800bfb0:	6823      	ldr	r3, [r4, #0]
 800bfb2:	079b      	lsls	r3, r3, #30
 800bfb4:	d413      	bmi.n	800bfde <_printf_i+0x232>
 800bfb6:	68e0      	ldr	r0, [r4, #12]
 800bfb8:	9b03      	ldr	r3, [sp, #12]
 800bfba:	4298      	cmp	r0, r3
 800bfbc:	bfb8      	it	lt
 800bfbe:	4618      	movlt	r0, r3
 800bfc0:	e7a6      	b.n	800bf10 <_printf_i+0x164>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	4632      	mov	r2, r6
 800bfc6:	4649      	mov	r1, r9
 800bfc8:	4640      	mov	r0, r8
 800bfca:	47d0      	blx	sl
 800bfcc:	3001      	adds	r0, #1
 800bfce:	d09d      	beq.n	800bf0c <_printf_i+0x160>
 800bfd0:	3501      	adds	r5, #1
 800bfd2:	68e3      	ldr	r3, [r4, #12]
 800bfd4:	9903      	ldr	r1, [sp, #12]
 800bfd6:	1a5b      	subs	r3, r3, r1
 800bfd8:	42ab      	cmp	r3, r5
 800bfda:	dcf2      	bgt.n	800bfc2 <_printf_i+0x216>
 800bfdc:	e7eb      	b.n	800bfb6 <_printf_i+0x20a>
 800bfde:	2500      	movs	r5, #0
 800bfe0:	f104 0619 	add.w	r6, r4, #25
 800bfe4:	e7f5      	b.n	800bfd2 <_printf_i+0x226>
 800bfe6:	bf00      	nop
 800bfe8:	0800c941 	.word	0x0800c941
 800bfec:	0800c952 	.word	0x0800c952

0800bff0 <__malloc_lock>:
 800bff0:	4801      	ldr	r0, [pc, #4]	; (800bff8 <__malloc_lock+0x8>)
 800bff2:	f7ff bc65 	b.w	800b8c0 <__retarget_lock_acquire_recursive>
 800bff6:	bf00      	nop
 800bff8:	20000aac 	.word	0x20000aac

0800bffc <__malloc_unlock>:
 800bffc:	4801      	ldr	r0, [pc, #4]	; (800c004 <__malloc_unlock+0x8>)
 800bffe:	f7ff bc60 	b.w	800b8c2 <__retarget_lock_release_recursive>
 800c002:	bf00      	nop
 800c004:	20000aac 	.word	0x20000aac

0800c008 <_realloc_r>:
 800c008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c00c:	4680      	mov	r8, r0
 800c00e:	4614      	mov	r4, r2
 800c010:	460e      	mov	r6, r1
 800c012:	b921      	cbnz	r1, 800c01e <_realloc_r+0x16>
 800c014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c018:	4611      	mov	r1, r2
 800c01a:	f7ff bdd9 	b.w	800bbd0 <_malloc_r>
 800c01e:	b92a      	cbnz	r2, 800c02c <_realloc_r+0x24>
 800c020:	f000 f84c 	bl	800c0bc <_free_r>
 800c024:	4625      	mov	r5, r4
 800c026:	4628      	mov	r0, r5
 800c028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c02c:	f000 f890 	bl	800c150 <_malloc_usable_size_r>
 800c030:	4284      	cmp	r4, r0
 800c032:	4607      	mov	r7, r0
 800c034:	d802      	bhi.n	800c03c <_realloc_r+0x34>
 800c036:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c03a:	d812      	bhi.n	800c062 <_realloc_r+0x5a>
 800c03c:	4621      	mov	r1, r4
 800c03e:	4640      	mov	r0, r8
 800c040:	f7ff fdc6 	bl	800bbd0 <_malloc_r>
 800c044:	4605      	mov	r5, r0
 800c046:	2800      	cmp	r0, #0
 800c048:	d0ed      	beq.n	800c026 <_realloc_r+0x1e>
 800c04a:	42bc      	cmp	r4, r7
 800c04c:	4622      	mov	r2, r4
 800c04e:	4631      	mov	r1, r6
 800c050:	bf28      	it	cs
 800c052:	463a      	movcs	r2, r7
 800c054:	f7ff fc36 	bl	800b8c4 <memcpy>
 800c058:	4631      	mov	r1, r6
 800c05a:	4640      	mov	r0, r8
 800c05c:	f000 f82e 	bl	800c0bc <_free_r>
 800c060:	e7e1      	b.n	800c026 <_realloc_r+0x1e>
 800c062:	4635      	mov	r5, r6
 800c064:	e7df      	b.n	800c026 <_realloc_r+0x1e>

0800c066 <memmove>:
 800c066:	4288      	cmp	r0, r1
 800c068:	b510      	push	{r4, lr}
 800c06a:	eb01 0402 	add.w	r4, r1, r2
 800c06e:	d902      	bls.n	800c076 <memmove+0x10>
 800c070:	4284      	cmp	r4, r0
 800c072:	4623      	mov	r3, r4
 800c074:	d807      	bhi.n	800c086 <memmove+0x20>
 800c076:	1e43      	subs	r3, r0, #1
 800c078:	42a1      	cmp	r1, r4
 800c07a:	d008      	beq.n	800c08e <memmove+0x28>
 800c07c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c080:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c084:	e7f8      	b.n	800c078 <memmove+0x12>
 800c086:	4402      	add	r2, r0
 800c088:	4601      	mov	r1, r0
 800c08a:	428a      	cmp	r2, r1
 800c08c:	d100      	bne.n	800c090 <memmove+0x2a>
 800c08e:	bd10      	pop	{r4, pc}
 800c090:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c094:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c098:	e7f7      	b.n	800c08a <memmove+0x24>
	...

0800c09c <_sbrk_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4d06      	ldr	r5, [pc, #24]	; (800c0b8 <_sbrk_r+0x1c>)
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	4608      	mov	r0, r1
 800c0a6:	602b      	str	r3, [r5, #0]
 800c0a8:	f7f6 fbf8 	bl	800289c <_sbrk>
 800c0ac:	1c43      	adds	r3, r0, #1
 800c0ae:	d102      	bne.n	800c0b6 <_sbrk_r+0x1a>
 800c0b0:	682b      	ldr	r3, [r5, #0]
 800c0b2:	b103      	cbz	r3, 800c0b6 <_sbrk_r+0x1a>
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	bd38      	pop	{r3, r4, r5, pc}
 800c0b8:	20000ab8 	.word	0x20000ab8

0800c0bc <_free_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	4605      	mov	r5, r0
 800c0c0:	2900      	cmp	r1, #0
 800c0c2:	d041      	beq.n	800c148 <_free_r+0x8c>
 800c0c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0c8:	1f0c      	subs	r4, r1, #4
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	bfb8      	it	lt
 800c0ce:	18e4      	addlt	r4, r4, r3
 800c0d0:	f7ff ff8e 	bl	800bff0 <__malloc_lock>
 800c0d4:	4a1d      	ldr	r2, [pc, #116]	; (800c14c <_free_r+0x90>)
 800c0d6:	6813      	ldr	r3, [r2, #0]
 800c0d8:	b933      	cbnz	r3, 800c0e8 <_free_r+0x2c>
 800c0da:	6063      	str	r3, [r4, #4]
 800c0dc:	6014      	str	r4, [r2, #0]
 800c0de:	4628      	mov	r0, r5
 800c0e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0e4:	f7ff bf8a 	b.w	800bffc <__malloc_unlock>
 800c0e8:	42a3      	cmp	r3, r4
 800c0ea:	d908      	bls.n	800c0fe <_free_r+0x42>
 800c0ec:	6820      	ldr	r0, [r4, #0]
 800c0ee:	1821      	adds	r1, r4, r0
 800c0f0:	428b      	cmp	r3, r1
 800c0f2:	bf01      	itttt	eq
 800c0f4:	6819      	ldreq	r1, [r3, #0]
 800c0f6:	685b      	ldreq	r3, [r3, #4]
 800c0f8:	1809      	addeq	r1, r1, r0
 800c0fa:	6021      	streq	r1, [r4, #0]
 800c0fc:	e7ed      	b.n	800c0da <_free_r+0x1e>
 800c0fe:	461a      	mov	r2, r3
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	b10b      	cbz	r3, 800c108 <_free_r+0x4c>
 800c104:	42a3      	cmp	r3, r4
 800c106:	d9fa      	bls.n	800c0fe <_free_r+0x42>
 800c108:	6811      	ldr	r1, [r2, #0]
 800c10a:	1850      	adds	r0, r2, r1
 800c10c:	42a0      	cmp	r0, r4
 800c10e:	d10b      	bne.n	800c128 <_free_r+0x6c>
 800c110:	6820      	ldr	r0, [r4, #0]
 800c112:	4401      	add	r1, r0
 800c114:	1850      	adds	r0, r2, r1
 800c116:	4283      	cmp	r3, r0
 800c118:	6011      	str	r1, [r2, #0]
 800c11a:	d1e0      	bne.n	800c0de <_free_r+0x22>
 800c11c:	6818      	ldr	r0, [r3, #0]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	6053      	str	r3, [r2, #4]
 800c122:	4408      	add	r0, r1
 800c124:	6010      	str	r0, [r2, #0]
 800c126:	e7da      	b.n	800c0de <_free_r+0x22>
 800c128:	d902      	bls.n	800c130 <_free_r+0x74>
 800c12a:	230c      	movs	r3, #12
 800c12c:	602b      	str	r3, [r5, #0]
 800c12e:	e7d6      	b.n	800c0de <_free_r+0x22>
 800c130:	6820      	ldr	r0, [r4, #0]
 800c132:	1821      	adds	r1, r4, r0
 800c134:	428b      	cmp	r3, r1
 800c136:	bf04      	itt	eq
 800c138:	6819      	ldreq	r1, [r3, #0]
 800c13a:	685b      	ldreq	r3, [r3, #4]
 800c13c:	6063      	str	r3, [r4, #4]
 800c13e:	bf04      	itt	eq
 800c140:	1809      	addeq	r1, r1, r0
 800c142:	6021      	streq	r1, [r4, #0]
 800c144:	6054      	str	r4, [r2, #4]
 800c146:	e7ca      	b.n	800c0de <_free_r+0x22>
 800c148:	bd38      	pop	{r3, r4, r5, pc}
 800c14a:	bf00      	nop
 800c14c:	20000ab0 	.word	0x20000ab0

0800c150 <_malloc_usable_size_r>:
 800c150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c154:	1f18      	subs	r0, r3, #4
 800c156:	2b00      	cmp	r3, #0
 800c158:	bfbc      	itt	lt
 800c15a:	580b      	ldrlt	r3, [r1, r0]
 800c15c:	18c0      	addlt	r0, r0, r3
 800c15e:	4770      	bx	lr

0800c160 <_init>:
 800c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c162:	bf00      	nop
 800c164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c166:	bc08      	pop	{r3}
 800c168:	469e      	mov	lr, r3
 800c16a:	4770      	bx	lr

0800c16c <_fini>:
 800c16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16e:	bf00      	nop
 800c170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c172:	bc08      	pop	{r3}
 800c174:	469e      	mov	lr, r3
 800c176:	4770      	bx	lr
