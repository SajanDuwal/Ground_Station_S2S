
Ground_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b384  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0800b4c4  0800b4c4  0001b4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbf0  0800bbf0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbf0  0800bbf0  0001bbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbf8  0800bbf8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbf8  0800bbf8  0001bbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbfc  0800bbfc  0001bbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800bc00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  20000060  0800bc60  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  0800bc60  000208d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021ca9  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d1c  00000000  00000000  00041d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ee0  00000000  00000000  00046a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001787  00000000  00000000  00048978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022171  00000000  00000000  0004a0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022271  00000000  00000000  0006c270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c457d  00000000  00000000  0008e4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008460  00000000  00000000  00152a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0015aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b4ac 	.word	0x0800b4ac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	0800b4ac 	.word	0x0800b4ac

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <getHDLCPacket>:
extern uint8_t temp_tx_buffer[100];

uint8_t ax_buffer[100] = { 0 };
uint8_t ax_buff_stuffed[100] = { 0 };

void getHDLCPacket(uint8_t *data, uint8_t data_len) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	70fb      	strb	r3, [r7, #3]
//		myDebug("%02x ", data[j]);
//	}
//	myDebug("\r\n");
//	myDebug("length of stuffed_packet: %d\r\n", data_len);

	uint16_t crc = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	81fb      	strh	r3, [r7, #14]
	crc = calculateCRC_CCITT_AX25(data, data_len);
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	4619      	mov	r1, r3
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 f935 	bl	80007a0 <calculateCRC_CCITT_AX25>
 8000536:	4603      	mov	r3, r0
 8000538:	81fb      	strh	r3, [r7, #14]

	temp_tx_buffer[0] = 0x7e;
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <getHDLCPacket+0xa8>)
 800053c:	227e      	movs	r2, #126	; 0x7e
 800053e:	701a      	strb	r2, [r3, #0]

	int i = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	e00e      	b.n	8000568 <getHDLCPacket+0x4c>
		temp_tx_buffer[i] = data[k];
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4413      	add	r3, r2
 8000550:	7819      	ldrb	r1, [r3, #0]
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <getHDLCPacket+0xa8>)
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	4413      	add	r3, r2
 8000558:	460a      	mov	r2, r1
 800055a:	701a      	strb	r2, [r3, #0]
		i++;
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3301      	adds	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	3301      	adds	r3, #1
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	693a      	ldr	r2, [r7, #16]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbec      	blt.n	800054a <getHDLCPacket+0x2e>
	}

	// Store CRC result in the packet array (from packet[1] to end of for loop)
	temp_tx_buffer[i] = (crc >> 8) & 0xFF; // Most significant byte
 8000570:	89fb      	ldrh	r3, [r7, #14]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	b2d9      	uxtb	r1, r3
 8000578:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <getHDLCPacket+0xa8>)
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	4413      	add	r3, r2
 800057e:	460a      	mov	r2, r1
 8000580:	701a      	strb	r2, [r3, #0]
	i++;
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	3301      	adds	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
	temp_tx_buffer[i] = crc & 0xFF;        // Least significant byte
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	b2d9      	uxtb	r1, r3
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <getHDLCPacket+0xa8>)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	4413      	add	r3, r2
 8000592:	460a      	mov	r2, r1
 8000594:	701a      	strb	r2, [r3, #0]
	i++;
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3301      	adds	r3, #1
 800059a:	617b      	str	r3, [r7, #20]

	temp_tx_buffer[i] = 0x7e;
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <getHDLCPacket+0xa8>)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	4413      	add	r3, r2
 80005a2:	227e      	movs	r2, #126	; 0x7e
 80005a4:	701a      	strb	r2, [r3, #0]
//		myDebug("%02x ", temp_tx_buffer[j]);
//	}
//	myDebug("\r\n");
//	myDebug("size of tx_buffer = %d\r\n", i + 1);

	memset(ax_buffer, '\0', sizeof(ax_buffer));
 80005a6:	2264      	movs	r2, #100	; 0x64
 80005a8:	2100      	movs	r1, #0
 80005aa:	4807      	ldr	r0, [pc, #28]	; (80005c8 <getHDLCPacket+0xac>)
 80005ac:	f00a fafc 	bl	800aba8 <memset>
	memset(ax_buff_stuffed, '\0', sizeof(ax_buff_stuffed));
 80005b0:	2264      	movs	r2, #100	; 0x64
 80005b2:	2100      	movs	r1, #0
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <getHDLCPacket+0xb0>)
 80005b6:	f00a faf7 	bl	800aba8 <memset>

}
 80005ba:	bf00      	nop
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000238 	.word	0x20000238
 80005c8:	2000007c 	.word	0x2000007c
 80005cc:	200000e0 	.word	0x200000e0

080005d0 <getAX25Packet>:

void getAX25Packet(uint8_t *infoField, uint8_t size) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]

	//destination field   9N2SI -0
	ax_buffer[0] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 80005dc:	4b2b      	ldr	r3, [pc, #172]	; (800068c <getAX25Packet+0xbc>)
 80005de:	2272      	movs	r2, #114	; 0x72
 80005e0:	701a      	strb	r2, [r3, #0]
	ax_buffer[1] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 80005e2:	4b2a      	ldr	r3, [pc, #168]	; (800068c <getAX25Packet+0xbc>)
 80005e4:	229c      	movs	r2, #156	; 0x9c
 80005e6:	705a      	strb	r2, [r3, #1]
	ax_buffer[2] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <getAX25Packet+0xbc>)
 80005ea:	2264      	movs	r2, #100	; 0x64
 80005ec:	709a      	strb	r2, [r3, #2]
	ax_buffer[3] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 80005ee:	4b27      	ldr	r3, [pc, #156]	; (800068c <getAX25Packet+0xbc>)
 80005f0:	22a6      	movs	r2, #166	; 0xa6
 80005f2:	70da      	strb	r2, [r3, #3]
	ax_buffer[4] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <getAX25Packet+0xbc>)
 80005f6:	2264      	movs	r2, #100	; 0x64
 80005f8:	711a      	strb	r2, [r3, #4]
	ax_buffer[5] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 80005fa:	4b24      	ldr	r3, [pc, #144]	; (800068c <getAX25Packet+0xbc>)
 80005fc:	2240      	movs	r2, #64	; 0x40
 80005fe:	715a      	strb	r2, [r3, #5]
	ax_buffer[6] = 0xE0; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <getAX25Packet+0xbc>)
 8000602:	22e0      	movs	r2, #224	; 0xe0
 8000604:	719a      	strb	r2, [r3, #6]

	//source field   9N2SI -0
	ax_buffer[7] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <getAX25Packet+0xbc>)
 8000608:	2272      	movs	r2, #114	; 0x72
 800060a:	71da      	strb	r2, [r3, #7]
	ax_buffer[8] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <getAX25Packet+0xbc>)
 800060e:	229c      	movs	r2, #156	; 0x9c
 8000610:	721a      	strb	r2, [r3, #8]
	ax_buffer[9] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <getAX25Packet+0xbc>)
 8000614:	2264      	movs	r2, #100	; 0x64
 8000616:	725a      	strb	r2, [r3, #9]
	ax_buffer[10] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <getAX25Packet+0xbc>)
 800061a:	22a6      	movs	r2, #166	; 0xa6
 800061c:	729a      	strb	r2, [r3, #10]
	ax_buffer[11] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <getAX25Packet+0xbc>)
 8000620:	2264      	movs	r2, #100	; 0x64
 8000622:	72da      	strb	r2, [r3, #11]
	ax_buffer[12] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <getAX25Packet+0xbc>)
 8000626:	2240      	movs	r2, #64	; 0x40
 8000628:	731a      	strb	r2, [r3, #12]
	ax_buffer[13] = 0x61; //	0b011SSID1, SSID->0000 and LSB is set to 1 if this is the last address, HEX->0x61
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <getAX25Packet+0xbc>)
 800062c:	2261      	movs	r2, #97	; 0x61
 800062e:	735a      	strb	r2, [r3, #13]

	//control bit
	ax_buffer[14] = 0x03; //  Unnumbered Information Frame, AX.25 is always 0b00000011 i.e 0x03 in HEX
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <getAX25Packet+0xbc>)
 8000632:	2203      	movs	r2, #3
 8000634:	739a      	strb	r2, [r3, #14]

	//protocol identifier
	ax_buffer[15] = 0xF0; //	No Layer-3 Implemented so, 0b11110000 i.e 0xF0 in HEX
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <getAX25Packet+0xbc>)
 8000638:	22f0      	movs	r2, #240	; 0xf0
 800063a:	73da      	strb	r2, [r3, #15]

	int i = 16;
 800063c:	2310      	movs	r3, #16
 800063e:	617b      	str	r3, [r7, #20]

	for (int k = 0; k < size; k++) {
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	e00e      	b.n	8000664 <getAX25Packet+0x94>
		ax_buffer[i] = infoField[k];
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	7819      	ldrb	r1, [r3, #0]
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <getAX25Packet+0xbc>)
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < size; k++) {
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	3301      	adds	r3, #1
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbec      	blt.n	8000646 <getAX25Packet+0x76>
//		myDebug("%02x ", ax_buffer[j]);
//	}
//	myDebug("\r\n");

	// Bit Stuffing
	int stuffed_size = bit_stuffing(ax_buffer, ax_buff_stuffed, i);
 800066c:	697a      	ldr	r2, [r7, #20]
 800066e:	4908      	ldr	r1, [pc, #32]	; (8000690 <getAX25Packet+0xc0>)
 8000670:	4806      	ldr	r0, [pc, #24]	; (800068c <getAX25Packet+0xbc>)
 8000672:	f000 f8d4 	bl	800081e <bit_stuffing>
 8000676:	60f8      	str	r0, [r7, #12]
//		myDebug("%02x ", tem[j]);
//	}
//	myDebug("\r\n");
//	myDebug("length of de-stuffed_packet: %d\r\n", destuffed_size);

	getHDLCPacket(ax_buff_stuffed, stuffed_size);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	4619      	mov	r1, r3
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <getAX25Packet+0xc0>)
 8000680:	f7ff ff4c 	bl	800051c <getHDLCPacket>
}
 8000684:	bf00      	nop
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000007c 	.word	0x2000007c
 8000690:	200000e0 	.word	0x200000e0

08000694 <myDebug>:
 *      Author: sajanduwal
 */

#include "com_debug.h"

void myDebug(const char *fmt, ...) {
 8000694:	b40f      	push	{r0, r1, r2, r3}
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	2164      	movs	r1, #100	; 0x64
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <myDebug+0x40>)
 80006aa:	f00a fa6f 	bl	800ab8c <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 80006ae:	4809      	ldr	r0, [pc, #36]	; (80006d4 <myDebug+0x40>)
 80006b0:	f000 f814 	bl	80006dc <bufferSize>
 80006b4:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	4905      	ldr	r1, [pc, #20]	; (80006d4 <myDebug+0x40>)
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <myDebug+0x44>)
 80006c2:	f005 f8e7 	bl	8005894 <HAL_UART_Transmit>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006d0:	b004      	add	sp, #16
 80006d2:	4770      	bx	lr
 80006d4:	20000144 	.word	0x20000144
 80006d8:	200003e0 	.word	0x200003e0

080006dc <bufferSize>:

int bufferSize(char *buffer) {
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80006e8:	e002      	b.n	80006f0 <bufferSize+0x14>
		i++;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f6      	bne.n	80006ea <bufferSize+0xe>
	return i;
 80006fc:	68fb      	ldr	r3, [r7, #12]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <delay_us>:

void delay_us(uint32_t us) {
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <delay_us+0x30>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000718:	e002      	b.n	8000720 <delay_us+0x18>
		delay_counter_disp++;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	3301      	adds	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <delay_us+0x30>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f6      	bhi.n	800071a <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 800072c:	bf00      	nop
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000390 	.word	0x20000390

0800073c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800074a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4313      	orrs	r3, r2
 8000752:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000760:	68fb      	ldr	r3, [r7, #12]
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000770:	2004      	movs	r0, #4
 8000772:	f7ff ffe3 	bl	800073c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff ffe0 	bl	800073c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	200b      	movs	r0, #11
 8000782:	f001 feda 	bl	800253a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000786:	200b      	movs	r0, #11
 8000788:	f001 fef1 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	200c      	movs	r0, #12
 8000792:	f001 fed2 	bl	800253a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000796:	200c      	movs	r0, #12
 8000798:	f001 fee9 	bl	800256e <HAL_NVIC_EnableIRQ>

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <calculateCRC_CCITT_AX25>:
 */

#include "error_handler.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 80007a0:	b480      	push	{r7}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 80007aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ae:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 80007b0:	f241 0321 	movw	r3, #4129	; 0x1021
 80007b4:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	e026      	b.n	800080a <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007cc:	4053      	eors	r3, r2
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e012      	b.n	80007fe <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 80007d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	da08      	bge.n	80007f2 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 80007e0:	8afb      	ldrh	r3, [r7, #22]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007ea:	4053      	eors	r3, r2
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	82fb      	strh	r3, [r7, #22]
 80007f0:	e002      	b.n	80007f8 <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 80007f2:	8afb      	ldrh	r3, [r7, #22]
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b07      	cmp	r3, #7
 8000802:	dde9      	ble.n	80007d8 <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	3301      	adds	r3, #1
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	429a      	cmp	r2, r3
 8000810:	d3d4      	bcc.n	80007bc <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 8000812:	8afb      	ldrh	r3, [r7, #22]
}
 8000814:	4618      	mov	r0, r3
 8000816:	371c      	adds	r7, #28
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <bit_stuffing>:
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
	return crcReg;
}

int bit_stuffing(uint8_t *data, uint8_t *output_data, int length) {
 800081e:	b480      	push	{r7}
 8000820:	b08f      	sub	sp, #60	; 0x3c
 8000822:	af00      	add	r7, sp, #0
 8000824:	60f8      	str	r0, [r7, #12]
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_count = 0; // Count of consecutive 1 bits
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t current_byte = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int bit_pos = 7;
 8000838:	2307      	movs	r3, #7
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
	int stuffed_size = 0; // Track size of output data after bit stuffing
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
	int bits_stuffed = 0; // Number of bits stuffed since last size increase
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]

	//myDebug("Error handler: before Bit stuffing \n");

	for (int i = 0; i < length; i++) {
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
 8000848:	e078      	b.n	800093c <bit_stuffing+0x11e>
		for (int bit = 7; bit >= 0; bit--) {
 800084a:	2307      	movs	r3, #7
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	e06f      	b.n	8000930 <bit_stuffing+0x112>
			int bit_val = (data[i] >> bit) & 1;
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	fa42 f303 	asr.w	r3, r2, r3
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	613b      	str	r3, [r7, #16]

//			myDebug("%d ", bit_val);

			current_byte |= (bit_val << bit_pos);
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	b25a      	sxtb	r2, r3
 8000870:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000874:	4313      	orrs	r3, r2
 8000876:	b25b      	sxtb	r3, r3
 8000878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			bit_pos--;
 800087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087e:	3b01      	subs	r3, #1
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28

			if (bit_val) {
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d02f      	beq.n	80008e8 <bit_stuffing+0xca>
				bit_count++;
 8000888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800088a:	3301      	adds	r3, #1
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
				if (bit_count == 5) {
 800088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000890:	2b05      	cmp	r3, #5
 8000892:	d12b      	bne.n	80008ec <bit_stuffing+0xce>
					// Insert a 0 bit after five consecutive 1s
					if (bit_pos < 0) {
 8000894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000896:	2b00      	cmp	r3, #0
 8000898:	da10      	bge.n	80008bc <bit_stuffing+0x9e>
						output_data[out_index++] = current_byte;
 800089a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089c:	1c5a      	adds	r2, r3, #1
 800089e:	637a      	str	r2, [r7, #52]	; 0x34
 80008a0:	461a      	mov	r2, r3
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	4413      	add	r3, r2
 80008a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80008aa:	701a      	strb	r2, [r3, #0]
						stuffed_size++;
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	3301      	adds	r3, #1
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
						current_byte = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						bit_pos = 7;
 80008b8:	2307      	movs	r3, #7
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					current_byte &= ~(1 << bit_pos);
 80008bc:	2201      	movs	r2, #1
 80008be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	b25a      	sxtb	r2, r3
 80008ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80008ce:	4013      	ands	r3, r2
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					bit_pos--;
 80008d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d8:	3b01      	subs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
					bits_stuffed++;
 80008dc:	6a3b      	ldr	r3, [r7, #32]
 80008de:	3301      	adds	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
					bit_count = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
 80008e6:	e001      	b.n	80008ec <bit_stuffing+0xce>
				}
			} else {
				bit_count = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (bit_pos < 0) {
 80008ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da10      	bge.n	8000914 <bit_stuffing+0xf6>
				output_data[out_index++] = current_byte;
 80008f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	637a      	str	r2, [r7, #52]	; 0x34
 80008f8:	461a      	mov	r2, r3
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	4413      	add	r3, r2
 80008fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000902:	701a      	strb	r2, [r3, #0]
				stuffed_size++;
 8000904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000906:	3301      	adds	r3, #1
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
				current_byte = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				bit_pos = 7;
 8000910:	2307      	movs	r3, #7
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			// Check if we've stuffed enough bits to increase size
			if (bits_stuffed >= 9 && bit_pos >= 0) {
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	2b08      	cmp	r3, #8
 8000918:	dd07      	ble.n	800092a <bit_stuffing+0x10c>
 800091a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091c:	2b00      	cmp	r3, #0
 800091e:	db04      	blt.n	800092a <bit_stuffing+0x10c>
				stuffed_size++;
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	3301      	adds	r3, #1
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
				bits_stuffed = 0; // Reset bits_stuffed after increasing size
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	3b01      	subs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	2b00      	cmp	r3, #0
 8000934:	da8c      	bge.n	8000850 <bit_stuffing+0x32>
	for (int i = 0; i < length; i++) {
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3301      	adds	r3, #1
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	69fa      	ldr	r2, [r7, #28]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	db82      	blt.n	800084a <bit_stuffing+0x2c>
			}
		}
	}
	//myDebug("\n");

	if (bit_pos < 7) {
 8000944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000946:	2b06      	cmp	r3, #6
 8000948:	dc0b      	bgt.n	8000962 <bit_stuffing+0x144>
		output_data[out_index++] = current_byte;
 800094a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	637a      	str	r2, [r7, #52]	; 0x34
 8000950:	461a      	mov	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	4413      	add	r3, r2
 8000956:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800095a:	701a      	strb	r2, [r3, #0]
		stuffed_size++;
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	3301      	adds	r3, #1
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	for (int i = 0; i < length; i++) {
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	e00a      	b.n	800097e <bit_stuffing+0x160>
		output_data[i] = data[i];
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	441a      	add	r2, r3
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	440b      	add	r3, r1
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	3301      	adds	r3, #1
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	429a      	cmp	r2, r3
 8000984:	dbf0      	blt.n	8000968 <bit_stuffing+0x14a>
	}

	out_index = length;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	637b      	str	r3, [r7, #52]	; 0x34

	return out_index; // Return the size of output data after bit stuffing
 800098a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800098c:	4618      	mov	r0, r3
 800098e:	373c      	adds	r7, #60	; 0x3c
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr

08000996 <bit_destuffing>:

int bit_destuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000996:	b480      	push	{r7}
 8000998:	b08d      	sub	sp, #52	; 0x34
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int bit_count = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t current_byte = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int bit_pos = 7;
 80009b0:	2307      	movs	r3, #7
 80009b2:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < length; i++) {
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
 80009b8:	e052      	b.n	8000a60 <bit_destuffing+0xca>
		for (int bit = 7; bit >= 0; bit--) {
 80009ba:	2307      	movs	r3, #7
 80009bc:	61bb      	str	r3, [r7, #24]
 80009be:	e049      	b.n	8000a54 <bit_destuffing+0xbe>
			int bit_val = (data[i] >> bit) & 1;
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4413      	add	r3, r2
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	fa42 f303 	asr.w	r3, r2, r3
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	613b      	str	r3, [r7, #16]

			if (bit_val) {
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d011      	beq.n	8000a00 <bit_destuffing+0x6a>
				bit_count++;
 80009dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009de:	3301      	adds	r3, #1
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
				current_byte |= (bit_val << bit_pos);
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	6a3b      	ldr	r3, [r7, #32]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	b25a      	sxtb	r2, r3
 80009ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos--;
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	623b      	str	r3, [r7, #32]
 80009fe:	e015      	b.n	8000a2c <bit_destuffing+0x96>
			} else {
				if (bit_count == 5) {
 8000a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a02:	2b05      	cmp	r3, #5
 8000a04:	d102      	bne.n	8000a0c <bit_destuffing+0x76>
					// Skip this bit as it is a stuffed bit
					bit_count = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
					continue;
 8000a0a:	e020      	b.n	8000a4e <bit_destuffing+0xb8>
				} else {
					bit_count = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
					current_byte |= (bit_val << bit_pos);
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	b25a      	sxtb	r2, r3
 8000a1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					bit_pos--;
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
				}
			}

			if (bit_pos < 0) {
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	da0d      	bge.n	8000a4e <bit_destuffing+0xb8>
				output_data[out_index++] = current_byte;
 8000a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000a38:	461a      	mov	r2, r3
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000a42:	701a      	strb	r2, [r3, #0]
				current_byte = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos = 7;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	dab2      	bge.n	80009c0 <bit_destuffing+0x2a>
	for (int i = 0; i < length; i++) {
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	69fa      	ldr	r2, [r7, #28]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dba8      	blt.n	80009ba <bit_destuffing+0x24>
			}
		}
	}

	// Ensure the last byte is written if it's partially filled
	if (bit_pos < 7) {
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	dc08      	bgt.n	8000a80 <bit_destuffing+0xea>
		output_data[out_index++] = current_byte;
 8000a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a70:	1c5a      	adds	r2, r3, #1
 8000a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000a74:	461a      	mov	r2, r3
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	4413      	add	r3, r2
 8000a7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000a7e:	701a      	strb	r2, [r3, #0]
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	for (int i = 0; i < length; i++) {
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e00a      	b.n	8000a9c <bit_destuffing+0x106>
		output_data[i] = data[i];
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	441a      	add	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	68b9      	ldr	r1, [r7, #8]
 8000a90:	440b      	add	r3, r1
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf0      	blt.n	8000a86 <bit_destuffing+0xf0>
	}

	out_index = length;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c

	return out_index;
 8000aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3734      	adds	r7, #52	; 0x34
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <acciiToHex>:

uint8_t acciiToHex(uint8_t ascii) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	if (ascii >= '0' && ascii <= '9') {
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ac2:	d906      	bls.n	8000ad2 <acciiToHex+0x1e>
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	2b39      	cmp	r3, #57	; 0x39
 8000ac8:	d803      	bhi.n	8000ad2 <acciiToHex+0x1e>
		return ascii - '0';
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	3b30      	subs	r3, #48	; 0x30
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	e014      	b.n	8000afc <acciiToHex+0x48>
	} else if (ascii >= 'A' && ascii <= 'F') {
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b40      	cmp	r3, #64	; 0x40
 8000ad6:	d906      	bls.n	8000ae6 <acciiToHex+0x32>
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b46      	cmp	r3, #70	; 0x46
 8000adc:	d803      	bhi.n	8000ae6 <acciiToHex+0x32>
		return ascii - 'A' + 10;
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	3b37      	subs	r3, #55	; 0x37
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	e00a      	b.n	8000afc <acciiToHex+0x48>
	} else if (ascii >= 'a' && ascii <= 'f') {
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2b60      	cmp	r3, #96	; 0x60
 8000aea:	d906      	bls.n	8000afa <acciiToHex+0x46>
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b66      	cmp	r3, #102	; 0x66
 8000af0:	d803      	bhi.n	8000afa <acciiToHex+0x46>
		return ascii - 'a' + 10;
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	3b57      	subs	r3, #87	; 0x57
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	e000      	b.n	8000afc <acciiToHex+0x48>
	} else {
		// Invalid character for hex conversion
		return 0xFF;
 8000afa:	23ff      	movs	r3, #255	; 0xff
	}
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr

08000b06 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b085      	sub	sp, #20
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4013      	ands	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
	...

08000b38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff ffda 	bl	8000b06 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2002      	movs	r0, #2
 8000b54:	f7ff ffd7 	bl	8000b06 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b58:	2004      	movs	r0, #4
 8000b5a:	f7ff ffd4 	bl	8000b06 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000b64:	481f      	ldr	r0, [pc, #124]	; (8000be4 <MX_GPIO_Init+0xac>)
 8000b66:	f002 f9ff 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2138      	movs	r1, #56	; 0x38
 8000b6e:	481e      	ldr	r0, [pc, #120]	; (8000be8 <MX_GPIO_Init+0xb0>)
 8000b70:	f002 f9fa 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000b74:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000b78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b82:	2302      	movs	r3, #2
 8000b84:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4816      	ldr	r0, [pc, #88]	; (8000be4 <MX_GPIO_Init+0xac>)
 8000b8c:	f002 f88c 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000b90:	2338      	movs	r3, #56	; 0x38
 8000b92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4810      	ldr	r0, [pc, #64]	; (8000be8 <MX_GPIO_Init+0xb0>)
 8000ba6:	f002 f87f 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000baa:	2303      	movs	r3, #3
 8000bac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc0:	f002 f872 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000bc4:	2340      	movs	r3, #64	; 0x40
 8000bc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_GPIO_Init+0xb0>)
 8000bd8:	f002 f866 	bl	8002ca8 <HAL_GPIO_Init>

}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	48000400 	.word	0x48000400
 8000be8:	48000800 	.word	0x48000800

08000bec <countsDataBetweenFlags>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int countsDataBetweenFlags(uint8_t *data, int data_length) {
 8000bec:	b480      	push	{r7}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
	int found_first_7e = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
	int start_index = 0, end_index = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < data_length; i++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	e013      	b.n	8000c30 <countsDataBetweenFlags+0x44>
		if (data[i] == 0x7e) {
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b7e      	cmp	r3, #126	; 0x7e
 8000c12:	d10a      	bne.n	8000c2a <countsDataBetweenFlags+0x3e>
			if (!found_first_7e) {
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d104      	bne.n	8000c24 <countsDataBetweenFlags+0x38>
				found_first_7e = 1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	617b      	str	r3, [r7, #20]
				start_index = i;
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	e002      	b.n	8000c2a <countsDataBetweenFlags+0x3e>
			} else {
				end_index = i;
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60fb      	str	r3, [r7, #12]
				break;
 8000c28:	e006      	b.n	8000c38 <countsDataBetweenFlags+0x4c>
	for (int i = 0; i < data_length; i++) {
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	dbe7      	blt.n	8000c08 <countsDataBetweenFlags+0x1c>
			}
		}
	}

	if (end_index > start_index) {
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dd04      	ble.n	8000c4a <countsDataBetweenFlags+0x5e>
		return end_index - start_index + 1;
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	3301      	adds	r3, #1
 8000c48:	e001      	b.n	8000c4e <countsDataBetweenFlags+0x62>
	} else {
		return -1; // Return -1 if two 0x7E flags are not found
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	371c      	adds	r7, #28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <setPacketParams>:

void setPacketParams(uint8_t buffer_length) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <setPacketParams+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = buffer_length;
 8000c68:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <setPacketParams+0x50>)
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	7213      	strb	r3, [r2, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <setPacketParams+0x50>)
 8000c70:	2208      	movs	r2, #8
 8000c72:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <setPacketParams+0x50>)
 8000c76:	2204      	movs	r2, #4
 8000c78:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <setPacketParams+0x50>)
 8000c7c:	2218      	movs	r2, #24
 8000c7e:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <setPacketParams+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <setPacketParams+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <setPacketParams+0x50>)
 8000c8e:	22f2      	movs	r2, #242	; 0xf2
 8000c90:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <setPacketParams+0x50>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	729a      	strb	r2, [r3, #10]
	SUBGRF_SetPacketParams(&pkt_params);
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <setPacketParams+0x50>)
 8000c9a:	f008 ff4b 	bl	8009b34 <SUBGRF_SetPacketParams>

}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200001a8 	.word	0x200001a8

08000cac <setModulationParams>:
void setModulationParams(unsigned long bitRate, unsigned long fDev) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <setModulationParams+0x38>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <setModulationParams+0x38>)
 8000cbe:	220d      	movs	r2, #13
 8000cc0:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = bitRate;
 8000cc2:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <setModulationParams+0x38>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6053      	str	r3, [r2, #4]
	mod_params.Params.Gfsk.Fdev = fDev;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <setModulationParams+0x38>)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	6093      	str	r3, [r2, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <setModulationParams+0x38>)
 8000cd0:	220b      	movs	r2, #11
 8000cd2:	731a      	strb	r2, [r3, #12]
	SUBGRF_SetModulationParams(&mod_params);
 8000cd4:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <setModulationParams+0x38>)
 8000cd6:	f008 fe5b 	bl	8009990 <SUBGRF_SetModulationParams>

}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200001bc 	.word	0x200001bc

08000ce8 <radioConfig>:

void radioConfig(uint8_t *buffer, uint8_t buffer_len) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f008 ffba 	bl	8009c70 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(buffer, buffer_len);
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f008 f99b 	bl	800903c <SUBGRF_SetPayload>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000d06:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <radioConfig+0x5c>)
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d10:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f008 f9d4 	bl	80090c6 <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000d1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000d22:	f008 fa1f 	bl	8009164 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000d26:	2301      	movs	r3, #1
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2007      	movs	r0, #7
 8000d2e:	f008 fc77 	bl	8009620 <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8000d32:	2202      	movs	r2, #2
 8000d34:	210e      	movs	r1, #14
 8000d36:	2001      	movs	r0, #1
 8000d38:	f008 fd5c 	bl	80097f4 <SUBGRF_SetTxParams>

}
 8000d3c:	bf00      	nop
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	0800b4c4 	.word	0x0800b4c4

08000d48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d4c:	b093      	sub	sp, #76	; 0x4c
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
	if (huart == &huart2) {
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4a8b      	ldr	r2, [pc, #556]	; (8000f84 <HAL_UART_RxCpltCallback+0x23c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	f040 810f 	bne.w	8000f7a <HAL_UART_RxCpltCallback+0x232>
 8000d5c:	466b      	mov	r3, sp
 8000d5e:	60bb      	str	r3, [r7, #8]

		uint8_t newLine = 0x0a;
 8000d60:	230a      	movs	r3, #10
 8000d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		uint8_t header = 0x00;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

		if (cmd_temp[0] == header || cmd_temp[0] == newLine) {
 8000d6c:	4b86      	ldr	r3, [pc, #536]	; (8000f88 <HAL_UART_RxCpltCallback+0x240>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d005      	beq.n	8000d84 <HAL_UART_RxCpltCallback+0x3c>
 8000d78:	4b83      	ldr	r3, [pc, #524]	; (8000f88 <HAL_UART_RxCpltCallback+0x240>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d111      	bne.n	8000da8 <HAL_UART_RxCpltCallback+0x60>

			for (int loop1 = 0; loop1 < sizeof(cmd_temp); loop1++) {
 8000d84:	2300      	movs	r3, #0
 8000d86:	647b      	str	r3, [r7, #68]	; 0x44
 8000d88:	e00b      	b.n	8000da2 <HAL_UART_RxCpltCallback+0x5a>
				cmd_temp[loop1] = cmd_temp[loop1 + 1];
 8000d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	4a7e      	ldr	r2, [pc, #504]	; (8000f88 <HAL_UART_RxCpltCallback+0x240>)
 8000d90:	5cd1      	ldrb	r1, [r2, r3]
 8000d92:	4a7d      	ldr	r2, [pc, #500]	; (8000f88 <HAL_UART_RxCpltCallback+0x240>)
 8000d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d96:	4413      	add	r3, r2
 8000d98:	460a      	mov	r2, r1
 8000d9a:	701a      	strb	r2, [r3, #0]
			for (int loop1 = 0; loop1 < sizeof(cmd_temp); loop1++) {
 8000d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d9e:	3301      	adds	r3, #1
 8000da0:	647b      	str	r3, [r7, #68]	; 0x44
 8000da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000da4:	2b26      	cmp	r3, #38	; 0x26
 8000da6:	d9f0      	bls.n	8000d8a <HAL_UART_RxCpltCallback+0x42>
//				myDebug("%02x ", cmd_temp[loop1]);
			}
		}

		for (int loop2 = 0; loop2 < sizeof(main_cmd_temp); loop2++) {
 8000da8:	2300      	movs	r3, #0
 8000daa:	643b      	str	r3, [r7, #64]	; 0x40
 8000dac:	e00b      	b.n	8000dc6 <HAL_UART_RxCpltCallback+0x7e>
			main_cmd_temp[loop2] = cmd_temp[loop2];
 8000dae:	4a76      	ldr	r2, [pc, #472]	; (8000f88 <HAL_UART_RxCpltCallback+0x240>)
 8000db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000db2:	4413      	add	r3, r2
 8000db4:	7819      	ldrb	r1, [r3, #0]
 8000db6:	4a75      	ldr	r2, [pc, #468]	; (8000f8c <HAL_UART_RxCpltCallback+0x244>)
 8000db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dba:	4413      	add	r3, r2
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	701a      	strb	r2, [r3, #0]
		for (int loop2 = 0; loop2 < sizeof(main_cmd_temp); loop2++) {
 8000dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8000dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc8:	2b25      	cmp	r3, #37	; 0x25
 8000dca:	d9f0      	bls.n	8000dae <HAL_UART_RxCpltCallback+0x66>
//			myDebug("%02x ", main_cmd_temp[loop2]);
		}

		int input_length = sizeof(main_cmd_temp) / sizeof(main_cmd_temp[0]);
 8000dcc:	2326      	movs	r3, #38	; 0x26
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28

		// Temporary array to store non-space characters
		uint8_t temp_chars[input_length];
 8000dd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000dd2:	1e4b      	subs	r3, r1, #1
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd6:	460a      	mov	r2, r1
 8000dd8:	2300      	movs	r3, #0
 8000dda:	603a      	str	r2, [r7, #0]
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	00c3      	lsls	r3, r0, #3
 8000dea:	6838      	ldr	r0, [r7, #0]
 8000dec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000df0:	6838      	ldr	r0, [r7, #0]
 8000df2:	00c2      	lsls	r2, r0, #3
 8000df4:	460a      	mov	r2, r1
 8000df6:	2300      	movs	r3, #0
 8000df8:	4692      	mov	sl, r2
 8000dfa:	469b      	mov	fp, r3
 8000dfc:	f04f 0200 	mov.w	r2, #0
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000e08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000e0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000e10:	460b      	mov	r3, r1
 8000e12:	3307      	adds	r3, #7
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	ebad 0d03 	sub.w	sp, sp, r3
 8000e1c:	466b      	mov	r3, sp
 8000e1e:	3300      	adds	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
		int temp_count = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c

		// Filter out space characters (ASCII 0x20)
		for (int i = 0; i < input_length; i++) {
 8000e26:	2300      	movs	r3, #0
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e2a:	e011      	b.n	8000e50 <HAL_UART_RxCpltCallback+0x108>
			if (main_cmd_temp[i] != 0x20) {
 8000e2c:	4a57      	ldr	r2, [pc, #348]	; (8000f8c <HAL_UART_RxCpltCallback+0x244>)
 8000e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b20      	cmp	r3, #32
 8000e36:	d008      	beq.n	8000e4a <HAL_UART_RxCpltCallback+0x102>
				temp_chars[temp_count++] = main_cmd_temp[i];
 8000e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000e3e:	4953      	ldr	r1, [pc, #332]	; (8000f8c <HAL_UART_RxCpltCallback+0x244>)
 8000e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e42:	440a      	add	r2, r1
 8000e44:	7811      	ldrb	r1, [r2, #0]
 8000e46:	6a3a      	ldr	r2, [r7, #32]
 8000e48:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < input_length; i++) {
 8000e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbe9      	blt.n	8000e2c <HAL_UART_RxCpltCallback+0xe4>
			}
		}

		// Calculate the number of bytes
		int byte_count = temp_count / 2;
 8000e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e5a:	0fda      	lsrs	r2, r3, #31
 8000e5c:	4413      	add	r3, r2
 8000e5e:	105b      	asrs	r3, r3, #1
 8000e60:	61fb      	str	r3, [r7, #28]

		// Output byte array
		uint8_t byte_array[byte_count];
 8000e62:	69fe      	ldr	r6, [r7, #28]
 8000e64:	1e73      	subs	r3, r6, #1
 8000e66:	61bb      	str	r3, [r7, #24]
 8000e68:	4632      	mov	r2, r6
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	4690      	mov	r8, r2
 8000e6e:	4699      	mov	r9, r3
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e84:	4632      	mov	r2, r6
 8000e86:	2300      	movs	r3, #0
 8000e88:	4614      	mov	r4, r2
 8000e8a:	461d      	mov	r5, r3
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	00eb      	lsls	r3, r5, #3
 8000e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e9a:	00e2      	lsls	r2, r4, #3
 8000e9c:	4633      	mov	r3, r6
 8000e9e:	3307      	adds	r3, #7
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ea8:	466b      	mov	r3, sp
 8000eaa:	3300      	adds	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]

		// Convert pairs of characters to bytes
		for (int i = 0; i < byte_count; i++) {
 8000eae:	2300      	movs	r3, #0
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8000eb2:	e022      	b.n	8000efa <HAL_UART_RxCpltCallback+0x1b2>
			uint8_t high_nibble = acciiToHex(temp_chars[2 * i]);
 8000eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	6a3a      	ldr	r2, [r7, #32]
 8000eba:	5cd3      	ldrb	r3, [r2, r3]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fdf9 	bl	8000ab4 <acciiToHex>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	74fb      	strb	r3, [r7, #19]
			uint8_t low_nibble = acciiToHex(temp_chars[2 * i + 1]);
 8000ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	3301      	adds	r3, #1
 8000ecc:	6a3a      	ldr	r2, [r7, #32]
 8000ece:	5cd3      	ldrb	r3, [r2, r3]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fdef 	bl	8000ab4 <acciiToHex>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	74bb      	strb	r3, [r7, #18]

			byte_array[i] = (high_nibble << 4) | low_nibble;
 8000eda:	7cfb      	ldrb	r3, [r7, #19]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	b25a      	sxtb	r2, r3
 8000ee0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	b2d9      	uxtb	r1, r3
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eee:	4413      	add	r3, r2
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < byte_count; i++) {
 8000ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8000efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dbd8      	blt.n	8000eb4 <HAL_UART_RxCpltCallback+0x16c>
		}

		myDebug("\n-->Main command Received: 0x%x\r\n", main_cmd);
 8000f02:	4923      	ldr	r1, [pc, #140]	; (8000f90 <HAL_UART_RxCpltCallback+0x248>)
 8000f04:	4823      	ldr	r0, [pc, #140]	; (8000f94 <HAL_UART_RxCpltCallback+0x24c>)
 8000f06:	f7ff fbc5 	bl	8000694 <myDebug>

		if (sizeof(byte_array) == main_cmd_len) {
 8000f0a:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <HAL_UART_RxCpltCallback+0x250>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	d123      	bne.n	8000f5a <HAL_UART_RxCpltCallback+0x212>
//			myDebug("-->Command ACK: 0x%x\r\n", main_cmd);
			for (int i = 0; i < main_cmd_len; i++) {
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
 8000f16:	e013      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x1f8>
				main_cmd[i] = byte_array[i];
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f1c:	4413      	add	r3, r2
 8000f1e:	7819      	ldrb	r1, [r3, #0]
 8000f20:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <HAL_UART_RxCpltCallback+0x248>)
 8000f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f24:	4413      	add	r3, r2
 8000f26:	460a      	mov	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
				myDebug("%02x ", main_cmd[i]);
 8000f2a:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_UART_RxCpltCallback+0x248>)
 8000f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	4619      	mov	r1, r3
 8000f34:	4819      	ldr	r0, [pc, #100]	; (8000f9c <HAL_UART_RxCpltCallback+0x254>)
 8000f36:	f7ff fbad 	bl	8000694 <myDebug>
			for (int i = 0; i < main_cmd_len; i++) {
 8000f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_UART_RxCpltCallback+0x250>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	dbe5      	blt.n	8000f18 <HAL_UART_RxCpltCallback+0x1d0>
			}
			myDebug("\r\n");
 8000f4c:	4814      	ldr	r0, [pc, #80]	; (8000fa0 <HAL_UART_RxCpltCallback+0x258>)
 8000f4e:	f7ff fba1 	bl	8000694 <myDebug>
			TX_FLAG = 1;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_UART_RxCpltCallback+0x25c>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e00d      	b.n	8000f76 <HAL_UART_RxCpltCallback+0x22e>
		} else {
			myDebug("-->Command Not ACK: 0x%x\r\n", main_cmd);
 8000f5a:	490d      	ldr	r1, [pc, #52]	; (8000f90 <HAL_UART_RxCpltCallback+0x248>)
 8000f5c:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <HAL_UART_RxCpltCallback+0x260>)
 8000f5e:	f7ff fb99 	bl	8000694 <myDebug>
			memset(main_cmd, '\0', main_cmd_len);
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_UART_RxCpltCallback+0x250>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4809      	ldr	r0, [pc, #36]	; (8000f90 <HAL_UART_RxCpltCallback+0x248>)
 8000f6c:	f009 fe1c 	bl	800aba8 <memset>
			TX_FLAG = 0;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_UART_RxCpltCallback+0x25c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	f8d7 d008 	ldr.w	sp, [r7, #8]
		}
	}
}
 8000f7a:	bf00      	nop
 8000f7c:	374c      	adds	r7, #76	; 0x4c
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f84:	20000474 	.word	0x20000474
 8000f88:	200001d8 	.word	0x200001d8
 8000f8c:	20000200 	.word	0x20000200
 8000f90:	20000228 	.word	0x20000228
 8000f94:	0800b4cc 	.word	0x0800b4cc
 8000f98:	20000001 	.word	0x20000001
 8000f9c:	0800b4f0 	.word	0x0800b4f0
 8000fa0:	0800b4f8 	.word	0x0800b4f8
 8000fa4:	20000370 	.word	0x20000370
 8000fa8:	0800b4fc 	.word	0x0800b4fc

08000fac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fb2:	f001 f97f 	bl	80022b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fb6:	f000 f987 	bl	80012c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fba:	f7ff fdbd 	bl	8000b38 <MX_GPIO_Init>
	MX_DMA_Init();
 8000fbe:	f7ff fbd5 	bl	800076c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000fc2:	f001 f80d 	bl	8001fe0 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000fc6:	f000 fe99 	bl	8001cfc <MX_TIM2_Init>
	MX_SubGHz_Phy_Init();
 8000fca:	f009 fa2e 	bl	800a42a <MX_SubGHz_Phy_Init>
	MX_USART1_UART_Init();
 8000fce:	f000 ffbb 	bl	8001f48 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 8000fd2:	4895      	ldr	r0, [pc, #596]	; (8001228 <main+0x27c>)
 8000fd4:	f004 f820 	bl	8005018 <HAL_TIM_Base_Start>

	SUBGRF_Init(DioIrqHndlr);
 8000fd8:	4894      	ldr	r0, [pc, #592]	; (800122c <main+0x280>)
 8000fda:	f007 ffdd 	bl	8008f98 <SUBGRF_Init>
	SUBGRF_SetDioIrqParams(
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f240 210f 	movw	r1, #527	; 0x20f
 8000fe6:	f240 200f 	movw	r0, #527	; 0x20f
 8000fea:	f008 fb3b 	bl	8009664 <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	myDebug("########## Slippers2Sat Ground Station: BEGIN ##########\r\n");
 8000fee:	4890      	ldr	r0, [pc, #576]	; (8001230 <main+0x284>)
 8000ff0:	f7ff fb50 	bl	8000694 <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 8000ff4:	488f      	ldr	r0, [pc, #572]	; (8001234 <main+0x288>)
 8000ff6:	f7ff fb4d 	bl	8000694 <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 8000ffa:	488f      	ldr	r0, [pc, #572]	; (8001238 <main+0x28c>)
 8000ffc:	f7ff fb4a 	bl	8000694 <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz, UPLINK FREQ: %lu Hz\r\n",
 8001000:	4a8e      	ldr	r2, [pc, #568]	; (800123c <main+0x290>)
 8001002:	498f      	ldr	r1, [pc, #572]	; (8001240 <main+0x294>)
 8001004:	488f      	ldr	r0, [pc, #572]	; (8001244 <main+0x298>)
 8001006:	f7ff fb45 	bl	8000694 <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 800100a:	488f      	ldr	r0, [pc, #572]	; (8001248 <main+0x29c>)
 800100c:	f7ff fb42 	bl	8000694 <myDebug>
	myDebug(
 8001010:	230e      	movs	r3, #14
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	2200      	movs	r2, #0
 8001018:	2107      	movs	r1, #7
 800101a:	488c      	ldr	r0, [pc, #560]	; (800124c <main+0x2a0>)
 800101c:	f7ff fb3a 	bl	8000694 <myDebug>
			"POWER CONFIG:::: \n"
					"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug(
 8001020:	488b      	ldr	r0, [pc, #556]	; (8001250 <main+0x2a4>)
 8001022:	f7ff fb37 	bl	8000694 <myDebug>
			"\n########## Operation Starts, Perform any one operation: ##########\r\n");
	myDebug("1. Transmit Command of 13 bytes\r\n");
 8001026:	488b      	ldr	r0, [pc, #556]	; (8001254 <main+0x2a8>)
 8001028:	f7ff fb34 	bl	8000694 <myDebug>
	myDebug("2. Wait to receive beacon from Satellite\r\n");
 800102c:	488a      	ldr	r0, [pc, #552]	; (8001258 <main+0x2ac>)
 800102e:	f7ff fb31 	bl	8000694 <myDebug>

	setPacketParams(rx_buffer_len);
 8001032:	4b8a      	ldr	r3, [pc, #552]	; (800125c <main+0x2b0>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fe0e 	bl	8000c58 <setPacketParams>
	setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 800103c:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8001040:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 8001044:	f7ff fe32 	bl	8000cac <setModulationParams>
	radioConfig(rx_buffer, rx_buffer_len);
 8001048:	4b84      	ldr	r3, [pc, #528]	; (800125c <main+0x2b0>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	4884      	ldr	r0, [pc, #528]	; (8001260 <main+0x2b4>)
 8001050:	f7ff fe4a 	bl	8000ce8 <radioConfig>

	myDebug("\n########## RX Configuration: ##########\n");
 8001054:	4883      	ldr	r0, [pc, #524]	; (8001264 <main+0x2b8>)
 8001056:	f7ff fb1d 	bl	8000694 <myDebug>

	myDebug("FREQUENCY MODS: Downlink FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 800105a:	4979      	ldr	r1, [pc, #484]	; (8001240 <main+0x294>)
 800105c:	4882      	ldr	r0, [pc, #520]	; (8001268 <main+0x2bc>)
 800105e:	f7ff fb19 	bl	8000694 <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001062:	4b82      	ldr	r3, [pc, #520]	; (800126c <main+0x2c0>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4619      	mov	r1, r3
 8001068:	4881      	ldr	r0, [pc, #516]	; (8001270 <main+0x2c4>)
 800106a:	f7ff fb13 	bl	8000694 <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 800106e:	4b7f      	ldr	r3, [pc, #508]	; (800126c <main+0x2c0>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	4619      	mov	r1, r3
 8001074:	487f      	ldr	r0, [pc, #508]	; (8001274 <main+0x2c8>)
 8001076:	f7ff fb0d 	bl	8000694 <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 800107a:	4b7c      	ldr	r3, [pc, #496]	; (800126c <main+0x2c0>)
 800107c:	7b5b      	ldrb	r3, [r3, #13]
 800107e:	4619      	mov	r1, r3
 8001080:	487d      	ldr	r0, [pc, #500]	; (8001278 <main+0x2cc>)
 8001082:	f7ff fb07 	bl	8000694 <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001086:	4b7d      	ldr	r3, [pc, #500]	; (800127c <main+0x2d0>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4619      	mov	r1, r3
 800108c:	487c      	ldr	r0, [pc, #496]	; (8001280 <main+0x2d4>)
 800108e:	f7ff fb01 	bl	8000694 <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 8001092:	4b7a      	ldr	r3, [pc, #488]	; (800127c <main+0x2d0>)
 8001094:	7a1b      	ldrb	r3, [r3, #8]
 8001096:	4619      	mov	r1, r3
 8001098:	487a      	ldr	r0, [pc, #488]	; (8001284 <main+0x2d8>)
 800109a:	f7ff fafb 	bl	8000694 <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 800109e:	4b77      	ldr	r3, [pc, #476]	; (800127c <main+0x2d0>)
 80010a0:	885b      	ldrh	r3, [r3, #2]
 80010a2:	4619      	mov	r1, r3
 80010a4:	4878      	ldr	r0, [pc, #480]	; (8001288 <main+0x2dc>)
 80010a6:	f7ff faf5 	bl	8000694 <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 80010aa:	4b74      	ldr	r3, [pc, #464]	; (800127c <main+0x2d0>)
 80010ac:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 80010ae:	4619      	mov	r1, r3
 80010b0:	4876      	ldr	r0, [pc, #472]	; (800128c <main+0x2e0>)
 80010b2:	f7ff faef 	bl	8000694 <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80010b6:	4b71      	ldr	r3, [pc, #452]	; (800127c <main+0x2d0>)
 80010b8:	79db      	ldrb	r3, [r3, #7]
 80010ba:	4619      	mov	r1, r3
 80010bc:	4874      	ldr	r0, [pc, #464]	; (8001290 <main+0x2e4>)
 80010be:	f7ff fae9 	bl	8000694 <myDebug>
	myDebug("______________*******************______________\r\n");
 80010c2:	4874      	ldr	r0, [pc, #464]	; (8001294 <main+0x2e8>)
 80010c4:	f7ff fae6 	bl	8000694 <myDebug>

	SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 80010c8:	485d      	ldr	r0, [pc, #372]	; (8001240 <main+0x294>)
 80010ca:	f008 fb27 	bl	800971c <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 80010ce:	2100      	movs	r1, #0
 80010d0:	2001      	movs	r0, #1
 80010d2:	f008 ff6b 	bl	8009fac <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 80010d6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80010da:	f008 f94b 	bl	8009374 <SUBGRF_SetRxBoosted>

	HAL_UART_Receive_DMA(&huart2, cmd_temp, cmd_temp_len);
 80010de:	4b6e      	ldr	r3, [pc, #440]	; (8001298 <main+0x2ec>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	496d      	ldr	r1, [pc, #436]	; (800129c <main+0x2f0>)
 80010e8:	486d      	ldr	r0, [pc, #436]	; (80012a0 <main+0x2f4>)
 80010ea:	f004 fc59 	bl	80059a0 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 80010ee:	f009 f9a4 	bl	800a43a <MX_SubGHz_Phy_Process>

		/* USER CODE BEGIN 3 */

		delay_us(500000);
 80010f2:	486c      	ldr	r0, [pc, #432]	; (80012a4 <main+0x2f8>)
 80010f4:	f7ff fb08 	bl	8000708 <delay_us>

		if (TX_FLAG) {
 80010f8:	4b6b      	ldr	r3, [pc, #428]	; (80012a8 <main+0x2fc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 8089 	beq.w	8001214 <main+0x268>

			getAX25Packet(main_cmd, main_cmd_len);
 8001102:	4b6a      	ldr	r3, [pc, #424]	; (80012ac <main+0x300>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	4869      	ldr	r0, [pc, #420]	; (80012b0 <main+0x304>)
 800110a:	f7ff fa61 	bl	80005d0 <getAX25Packet>

			tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 800110e:	2164      	movs	r1, #100	; 0x64
 8001110:	4868      	ldr	r0, [pc, #416]	; (80012b4 <main+0x308>)
 8001112:	f7ff fd6b 	bl	8000bec <countsDataBetweenFlags>
 8001116:	4603      	mov	r3, r0
 8001118:	4a67      	ldr	r2, [pc, #412]	; (80012b8 <main+0x30c>)
 800111a:	6013      	str	r3, [r2, #0]
					sizeof(temp_tx_buffer));

//			myDebug("AX.25 complete GS packet ready to TX: 0x%x\r\n", temp_tx_buffer);
			for (int j = 0; j < tx_buffer_len; j++) {
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	e00b      	b.n	800113a <main+0x18e>
				tx_buffer[j] = temp_tx_buffer[j];
 8001122:	4a64      	ldr	r2, [pc, #400]	; (80012b4 <main+0x308>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	7819      	ldrb	r1, [r3, #0]
 800112a:	4a64      	ldr	r2, [pc, #400]	; (80012bc <main+0x310>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	460a      	mov	r2, r1
 8001132:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < tx_buffer_len; j++) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b5f      	ldr	r3, [pc, #380]	; (80012b8 <main+0x30c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	429a      	cmp	r2, r3
 8001142:	dbee      	blt.n	8001122 <main+0x176>
			}
//			myDebug("\r\n");

//			myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

			memset(main_cmd, '\0', main_cmd_len);
 8001144:	4b59      	ldr	r3, [pc, #356]	; (80012ac <main+0x300>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	2100      	movs	r1, #0
 800114c:	4858      	ldr	r0, [pc, #352]	; (80012b0 <main+0x304>)
 800114e:	f009 fd2b 	bl	800aba8 <memset>
			memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 8001152:	2264      	movs	r2, #100	; 0x64
 8001154:	2100      	movs	r1, #0
 8001156:	4857      	ldr	r0, [pc, #348]	; (80012b4 <main+0x308>)
 8001158:	f009 fd26 	bl	800aba8 <memset>

			setPacketParams(tx_buffer_len);
 800115c:	4b56      	ldr	r3, [pc, #344]	; (80012b8 <main+0x30c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fd78 	bl	8000c58 <setPacketParams>
			setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8001168:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800116c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001170:	f7ff fd9c 	bl	8000cac <setModulationParams>
			radioConfig(tx_buffer, tx_buffer_len);
 8001174:	4b50      	ldr	r3, [pc, #320]	; (80012b8 <main+0x30c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4619      	mov	r1, r3
 800117c:	484f      	ldr	r0, [pc, #316]	; (80012bc <main+0x310>)
 800117e:	f7ff fdb3 	bl	8000ce8 <radioConfig>

			myDebug("########## TX Configuration: ##########\n");
 8001182:	484f      	ldr	r0, [pc, #316]	; (80012c0 <main+0x314>)
 8001184:	f7ff fa86 	bl	8000694 <myDebug>

			myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8001188:	492c      	ldr	r1, [pc, #176]	; (800123c <main+0x290>)
 800118a:	484e      	ldr	r0, [pc, #312]	; (80012c4 <main+0x318>)
 800118c:	f7ff fa82 	bl	8000694 <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001190:	4b36      	ldr	r3, [pc, #216]	; (800126c <main+0x2c0>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4619      	mov	r1, r3
 8001196:	4836      	ldr	r0, [pc, #216]	; (8001270 <main+0x2c4>)
 8001198:	f7ff fa7c 	bl	8000694 <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <main+0x2c0>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4619      	mov	r1, r3
 80011a2:	4834      	ldr	r0, [pc, #208]	; (8001274 <main+0x2c8>)
 80011a4:	f7ff fa76 	bl	8000694 <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 80011a8:	4b30      	ldr	r3, [pc, #192]	; (800126c <main+0x2c0>)
 80011aa:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80011ac:	4619      	mov	r1, r3
 80011ae:	4832      	ldr	r0, [pc, #200]	; (8001278 <main+0x2cc>)
 80011b0:	f7ff fa70 	bl	8000694 <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 80011b4:	4b31      	ldr	r3, [pc, #196]	; (800127c <main+0x2d0>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	4831      	ldr	r0, [pc, #196]	; (8001280 <main+0x2d4>)
 80011bc:	f7ff fa6a 	bl	8000694 <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 80011c0:	4b2e      	ldr	r3, [pc, #184]	; (800127c <main+0x2d0>)
 80011c2:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 80011c4:	4619      	mov	r1, r3
 80011c6:	482f      	ldr	r0, [pc, #188]	; (8001284 <main+0x2d8>)
 80011c8:	f7ff fa64 	bl	8000694 <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <main+0x2d0>)
 80011ce:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 80011d0:	4619      	mov	r1, r3
 80011d2:	482d      	ldr	r0, [pc, #180]	; (8001288 <main+0x2dc>)
 80011d4:	f7ff fa5e 	bl	8000694 <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <main+0x2d0>)
 80011da:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 80011dc:	4619      	mov	r1, r3
 80011de:	482b      	ldr	r0, [pc, #172]	; (800128c <main+0x2e0>)
 80011e0:	f7ff fa58 	bl	8000694 <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <main+0x2d0>)
 80011e6:	79db      	ldrb	r3, [r3, #7]
 80011e8:	4619      	mov	r1, r3
 80011ea:	4829      	ldr	r0, [pc, #164]	; (8001290 <main+0x2e4>)
 80011ec:	f7ff fa52 	bl	8000694 <myDebug>
			myDebug("______________*******************______________\r\n");
 80011f0:	4828      	ldr	r0, [pc, #160]	; (8001294 <main+0x2e8>)
 80011f2:	f7ff fa4f 	bl	8000694 <myDebug>

			SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 80011f6:	4811      	ldr	r0, [pc, #68]	; (800123c <main+0x290>)
 80011f8:	f008 fa90 	bl	800971c <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 80011fc:	2101      	movs	r1, #1
 80011fe:	2001      	movs	r0, #1
 8001200:	f008 fed4 	bl	8009fac <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8001204:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <main+0x30c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2200      	movs	r2, #0
 800120c:	4619      	mov	r1, r3
 800120e:	482b      	ldr	r0, [pc, #172]	; (80012bc <main+0x310>)
 8001210:	f007 ff46 	bl	80090a0 <SUBGRF_SendPayload>
		}

		HAL_UART_Receive_DMA(&huart2, cmd_temp, cmd_temp_len);
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <main+0x2ec>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	491f      	ldr	r1, [pc, #124]	; (800129c <main+0x2f0>)
 800121e:	4820      	ldr	r0, [pc, #128]	; (80012a0 <main+0x2f4>)
 8001220:	f004 fbbe 	bl	80059a0 <HAL_UART_Receive_DMA>
		MX_SubGHz_Phy_Process();
 8001224:	e763      	b.n	80010ee <main+0x142>
 8001226:	bf00      	nop
 8001228:	20000390 	.word	0x20000390
 800122c:	08001389 	.word	0x08001389
 8001230:	0800b518 	.word	0x0800b518
 8001234:	0800b554 	.word	0x0800b554
 8001238:	0800b588 	.word	0x0800b588
 800123c:	19f25968 	.word	0x19f25968
 8001240:	1a11d018 	.word	0x1a11d018
 8001244:	0800b5a4 	.word	0x0800b5a4
 8001248:	0800b5e4 	.word	0x0800b5e4
 800124c:	0800b60c 	.word	0x0800b60c
 8001250:	0800b660 	.word	0x0800b660
 8001254:	0800b6a8 	.word	0x0800b6a8
 8001258:	0800b6cc 	.word	0x0800b6cc
 800125c:	20000002 	.word	0x20000002
 8001260:	20000304 	.word	0x20000304
 8001264:	0800b6f8 	.word	0x0800b6f8
 8001268:	0800b724 	.word	0x0800b724
 800126c:	200001bc 	.word	0x200001bc
 8001270:	0800b74c 	.word	0x0800b74c
 8001274:	0800b75c 	.word	0x0800b75c
 8001278:	0800b778 	.word	0x0800b778
 800127c:	200001a8 	.word	0x200001a8
 8001280:	0800b794 	.word	0x0800b794
 8001284:	0800b7a8 	.word	0x0800b7a8
 8001288:	0800b7c0 	.word	0x0800b7c0
 800128c:	0800b7d8 	.word	0x0800b7d8
 8001290:	0800b7f0 	.word	0x0800b7f0
 8001294:	0800b804 	.word	0x0800b804
 8001298:	20000000 	.word	0x20000000
 800129c:	200001d8 	.word	0x200001d8
 80012a0:	20000474 	.word	0x20000474
 80012a4:	0007a120 	.word	0x0007a120
 80012a8:	20000370 	.word	0x20000370
 80012ac:	20000001 	.word	0x20000001
 80012b0:	20000228 	.word	0x20000228
 80012b4:	20000238 	.word	0x20000238
 80012b8:	2000029c 	.word	0x2000029c
 80012bc:	200002a0 	.word	0x200002a0
 80012c0:	0800b838 	.word	0x0800b838
 80012c4:	0800b864 	.word	0x0800b864

080012c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b09a      	sub	sp, #104	; 0x68
 80012cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012ce:	f107 0320 	add.w	r3, r7, #32
 80012d2:	2248      	movs	r2, #72	; 0x48
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f009 fc66 	bl	800aba8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
 80012ea:	615a      	str	r2, [r3, #20]
 80012ec:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ee:	4b25      	ldr	r3, [pc, #148]	; (8001384 <SystemClock_Config+0xbc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f6:	4a23      	ldr	r2, [pc, #140]	; (8001384 <SystemClock_Config+0xbc>)
 80012f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <SystemClock_Config+0xbc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800130a:	2301      	movs	r3, #1
 800130c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 800130e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001318:	2302      	movs	r3, #2
 800131a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800131c:	2303      	movs	r3, #3
 800131e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001320:	2310      	movs	r3, #16
 8001322:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 8001324:	2306      	movs	r3, #6
 8001326:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800132c:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800132e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001332:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001338:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	4618      	mov	r0, r3
 8001340:	f002 f8fc 	bl	800353c <HAL_RCC_OscConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x86>
		Error_Handler();
 800134a:	f000 fbb1 	bl	8001ab0 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 800134e:	234f      	movs	r3, #79	; 0x4f
 8001350:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001352:	2303      	movs	r3, #3
 8001354:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2102      	movs	r1, #2
 800136a:	4618      	mov	r0, r3
 800136c:	f002 fc68 	bl	8003c40 <HAL_RCC_ClockConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0xb2>
		Error_Handler();
 8001376:	f000 fb9b 	bl	8001ab0 <Error_Handler>
	}
}
 800137a:	bf00      	nop
 800137c:	3768      	adds	r7, #104	; 0x68
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	58000400 	.word	0x58000400

08001388 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8001388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800138c:	b0d3      	sub	sp, #332	; 0x14c
 800138e:	af00      	add	r7, sp, #0
 8001390:	4601      	mov	r1, r0
 8001392:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001396:	f5a3 7285 	sub.w	r2, r3, #266	; 0x10a
 800139a:	460b      	mov	r3, r1
 800139c:	8013      	strh	r3, [r2, #0]
	if (radioIrq == IRQ_TX_DONE) {
 800139e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80013a2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	f040 8087 	bne.w	80014bc <DioIrqHndlr+0x134>
		TX_FLAG = 0;
 80013ae:	4a95      	ldr	r2, [pc, #596]	; (8001604 <DioIrqHndlr+0x27c>)
 80013b0:	2300      	movs	r3, #0
 80013b2:	6013      	str	r3, [r2, #0]
		myDebug("\nGS Command Transmitted Successful, Length: %d\r\n",
 80013b4:	4b94      	ldr	r3, [pc, #592]	; (8001608 <DioIrqHndlr+0x280>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	4894      	ldr	r0, [pc, #592]	; (800160c <DioIrqHndlr+0x284>)
 80013bc:	f7ff f96a 	bl	8000694 <myDebug>
				tx_buffer_len);
		for (int i = 0; i < tx_buffer_len; i++) {
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013c6:	e00d      	b.n	80013e4 <DioIrqHndlr+0x5c>
			myDebug("%02x ", tx_buffer[i]);
 80013c8:	4a91      	ldr	r2, [pc, #580]	; (8001610 <DioIrqHndlr+0x288>)
 80013ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80013ce:	4413      	add	r3, r2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	488f      	ldr	r0, [pc, #572]	; (8001614 <DioIrqHndlr+0x28c>)
 80013d6:	f7ff f95d 	bl	8000694 <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 80013da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80013de:	3301      	adds	r3, #1
 80013e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013e4:	4b88      	ldr	r3, [pc, #544]	; (8001608 <DioIrqHndlr+0x280>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80013ec:	4293      	cmp	r3, r2
 80013ee:	dbeb      	blt.n	80013c8 <DioIrqHndlr+0x40>
		}

		myDebug("\r\n");
 80013f0:	4889      	ldr	r0, [pc, #548]	; (8001618 <DioIrqHndlr+0x290>)
 80013f2:	f7ff f94f 	bl	8000694 <myDebug>
		memset(tx_buffer, '\0', sizeof(tx_buffer));
 80013f6:	2264      	movs	r2, #100	; 0x64
 80013f8:	2100      	movs	r1, #0
 80013fa:	4885      	ldr	r0, [pc, #532]	; (8001610 <DioIrqHndlr+0x288>)
 80013fc:	f009 fbd4 	bl	800aba8 <memset>

		setPacketParams(rx_buffer_len);
 8001400:	4b86      	ldr	r3, [pc, #536]	; (800161c <DioIrqHndlr+0x294>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fc27 	bl	8000c58 <setPacketParams>
		setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 800140a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 800140e:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 8001412:	f7ff fc4b 	bl	8000cac <setModulationParams>
		radioConfig(rx_buffer, rx_buffer_len);
 8001416:	4b81      	ldr	r3, [pc, #516]	; (800161c <DioIrqHndlr+0x294>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4619      	mov	r1, r3
 800141c:	4880      	ldr	r0, [pc, #512]	; (8001620 <DioIrqHndlr+0x298>)
 800141e:	f7ff fc63 	bl	8000ce8 <radioConfig>

		myDebug("\n########## RX Configuration: ##########\n");
 8001422:	4880      	ldr	r0, [pc, #512]	; (8001624 <DioIrqHndlr+0x29c>)
 8001424:	f7ff f936 	bl	8000694 <myDebug>

		myDebug("FREQUENCY MODS: Downlink FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 8001428:	497f      	ldr	r1, [pc, #508]	; (8001628 <DioIrqHndlr+0x2a0>)
 800142a:	4880      	ldr	r0, [pc, #512]	; (800162c <DioIrqHndlr+0x2a4>)
 800142c:	f7ff f932 	bl	8000694 <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001430:	4b7f      	ldr	r3, [pc, #508]	; (8001630 <DioIrqHndlr+0x2a8>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4619      	mov	r1, r3
 8001436:	487f      	ldr	r0, [pc, #508]	; (8001634 <DioIrqHndlr+0x2ac>)
 8001438:	f7ff f92c 	bl	8000694 <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 800143c:	4b7c      	ldr	r3, [pc, #496]	; (8001630 <DioIrqHndlr+0x2a8>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4619      	mov	r1, r3
 8001442:	487d      	ldr	r0, [pc, #500]	; (8001638 <DioIrqHndlr+0x2b0>)
 8001444:	f7ff f926 	bl	8000694 <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 8001448:	4b79      	ldr	r3, [pc, #484]	; (8001630 <DioIrqHndlr+0x2a8>)
 800144a:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 800144c:	4619      	mov	r1, r3
 800144e:	487b      	ldr	r0, [pc, #492]	; (800163c <DioIrqHndlr+0x2b4>)
 8001450:	f7ff f920 	bl	8000694 <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001454:	4b7a      	ldr	r3, [pc, #488]	; (8001640 <DioIrqHndlr+0x2b8>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	487a      	ldr	r0, [pc, #488]	; (8001644 <DioIrqHndlr+0x2bc>)
 800145c:	f7ff f91a 	bl	8000694 <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 8001460:	4b77      	ldr	r3, [pc, #476]	; (8001640 <DioIrqHndlr+0x2b8>)
 8001462:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 8001464:	4619      	mov	r1, r3
 8001466:	4878      	ldr	r0, [pc, #480]	; (8001648 <DioIrqHndlr+0x2c0>)
 8001468:	f7ff f914 	bl	8000694 <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 800146c:	4b74      	ldr	r3, [pc, #464]	; (8001640 <DioIrqHndlr+0x2b8>)
 800146e:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 8001470:	4619      	mov	r1, r3
 8001472:	4876      	ldr	r0, [pc, #472]	; (800164c <DioIrqHndlr+0x2c4>)
 8001474:	f7ff f90e 	bl	8000694 <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 8001478:	4b71      	ldr	r3, [pc, #452]	; (8001640 <DioIrqHndlr+0x2b8>)
 800147a:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 800147c:	4619      	mov	r1, r3
 800147e:	4874      	ldr	r0, [pc, #464]	; (8001650 <DioIrqHndlr+0x2c8>)
 8001480:	f7ff f908 	bl	8000694 <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001484:	4b6e      	ldr	r3, [pc, #440]	; (8001640 <DioIrqHndlr+0x2b8>)
 8001486:	79db      	ldrb	r3, [r3, #7]
 8001488:	4619      	mov	r1, r3
 800148a:	4872      	ldr	r0, [pc, #456]	; (8001654 <DioIrqHndlr+0x2cc>)
 800148c:	f7ff f902 	bl	8000694 <myDebug>
		myDebug("______________*******************______________\r\n");
 8001490:	4871      	ldr	r0, [pc, #452]	; (8001658 <DioIrqHndlr+0x2d0>)
 8001492:	f7ff f8ff 	bl	8000694 <myDebug>

		SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001496:	4864      	ldr	r0, [pc, #400]	; (8001628 <DioIrqHndlr+0x2a0>)
 8001498:	f008 f940 	bl	800971c <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 800149c:	2100      	movs	r1, #0
 800149e:	2001      	movs	r0, #1
 80014a0:	f008 fd84 	bl	8009fac <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 80014a4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80014a8:	f007 ff64 	bl	8009374 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, cmd_temp, cmd_temp_len);
 80014ac:	4b6b      	ldr	r3, [pc, #428]	; (800165c <DioIrqHndlr+0x2d4>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	496a      	ldr	r1, [pc, #424]	; (8001660 <DioIrqHndlr+0x2d8>)
 80014b6:	486b      	ldr	r0, [pc, #428]	; (8001664 <DioIrqHndlr+0x2dc>)
 80014b8:	f004 fa72 	bl	80059a0 <HAL_UART_Receive_DMA>

	}

	if (radioIrq == IRQ_RX_DONE) {
 80014bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80014c0:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	f040 82d4 	bne.w	8001a74 <DioIrqHndlr+0x6ec>
		TX_FLAG = 0;
 80014cc:	4a4d      	ldr	r2, [pc, #308]	; (8001604 <DioIrqHndlr+0x27c>)
 80014ce:	2300      	movs	r3, #0
 80014d0:	6013      	str	r3, [r2, #0]
		SUBGRF_GetPayload(rx_buffer, &rx_buffer_len, RX_PAYLOAD_LENGTH);
 80014d2:	2269      	movs	r2, #105	; 0x69
 80014d4:	4951      	ldr	r1, [pc, #324]	; (800161c <DioIrqHndlr+0x294>)
 80014d6:	4852      	ldr	r0, [pc, #328]	; (8001620 <DioIrqHndlr+0x298>)
 80014d8:	f007 fdc0 	bl	800905c <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 80014dc:	f008 fbdf 	bl	8009c9e <SUBGRF_GetRssiInst>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b60      	ldr	r3, [pc, #384]	; (8001668 <DioIrqHndlr+0x2e0>)
 80014e6:	601a      	str	r2, [r3, #0]

		uint8_t temp_rx_buffer_len = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer, rx_buffer_len);
 80014ee:	4b4b      	ldr	r3, [pc, #300]	; (800161c <DioIrqHndlr+0x294>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	4619      	mov	r1, r3
 80014f4:	484a      	ldr	r0, [pc, #296]	; (8001620 <DioIrqHndlr+0x298>)
 80014f6:	f7ff fb79 	bl	8000bec <countsDataBetweenFlags>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

		if (temp_rx_buffer_len != -1) {
 8001500:	466b      	mov	r3, sp
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38

//			myDebug("\nSatellite Data Received, Length: %d and RSSI: %d dBm\r\n", temp_rx_buffer_len, rssi_value);

			uint8_t temp_check_buff[temp_rx_buffer_len];
 8001504:	f897 611f 	ldrb.w	r6, [r7, #287]	; 0x11f
 8001508:	4633      	mov	r3, r6
 800150a:	3b01      	subs	r3, #1
 800150c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001510:	b2f3      	uxtb	r3, r6
 8001512:	2200      	movs	r2, #0
 8001514:	461c      	mov	r4, r3
 8001516:	4615      	mov	r5, r2
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	00eb      	lsls	r3, r5, #3
 8001522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001526:	00e2      	lsls	r2, r4, #3
 8001528:	b2f3      	uxtb	r3, r6
 800152a:	2200      	movs	r2, #0
 800152c:	4698      	mov	r8, r3
 800152e:	4691      	mov	r9, r2
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800153c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001540:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001544:	4633      	mov	r3, r6
 8001546:	3307      	adds	r3, #7
 8001548:	08db      	lsrs	r3, r3, #3
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	ebad 0d03 	sub.w	sp, sp, r3
 8001550:	466b      	mov	r3, sp
 8001552:	3300      	adds	r3, #0
 8001554:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800155e:	e010      	b.n	8001582 <DioIrqHndlr+0x1fa>
				temp_check_buff[i] = rx_buffer[i];
 8001560:	4a2f      	ldr	r2, [pc, #188]	; (8001620 <DioIrqHndlr+0x298>)
 8001562:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001566:	4413      	add	r3, r2
 8001568:	7819      	ldrb	r1, [r3, #0]
 800156a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800156e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001572:	441a      	add	r2, r3
 8001574:	460b      	mov	r3, r1
 8001576:	7013      	strb	r3, [r2, #0]
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001578:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800157c:	3301      	adds	r3, #1
 800157e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001582:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8001586:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800158a:	4293      	cmp	r3, r2
 800158c:	dbe8      	blt.n	8001560 <DioIrqHndlr+0x1d8>
			}
//			myDebug("\r\n");

//			memset(rx_buffer, '\0', sizeof(rx_buffer_len));

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 800158e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8001592:	3b04      	subs	r3, #4
 8001594:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			uint8_t crc_buff[crc_buff_len];
 8001598:	f897 5113 	ldrb.w	r5, [r7, #275]	; 0x113
 800159c:	462b      	mov	r3, r5
 800159e:	3b01      	subs	r3, #1
 80015a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80015a4:	b2eb      	uxtb	r3, r5
 80015a6:	2200      	movs	r2, #0
 80015a8:	469a      	mov	sl, r3
 80015aa:	4693      	mov	fp, r2
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015c0:	b2eb      	uxtb	r3, r5
 80015c2:	2200      	movs	r2, #0
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
 80015c6:	637a      	str	r2, [r7, #52]	; 0x34
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 80015d4:	4649      	mov	r1, r9
 80015d6:	00cb      	lsls	r3, r1, #3
 80015d8:	4644      	mov	r4, r8
 80015da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015de:	4641      	mov	r1, r8
 80015e0:	00ca      	lsls	r2, r1, #3
 80015e2:	462b      	mov	r3, r5
 80015e4:	3307      	adds	r3, #7
 80015e6:	08db      	lsrs	r3, r3, #3
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	ebad 0d03 	sub.w	sp, sp, r3
 80015ee:	466b      	mov	r3, sp
 80015f0:	3300      	adds	r3, #0
 80015f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

//			myDebug("\nSatellite Data Testing: 0x%x\r\n");

			int j = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			for (int i = 1; i <= crc_buff_len; i++) {
 80015fc:	2301      	movs	r3, #1
 80015fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001602:	e04a      	b.n	800169a <DioIrqHndlr+0x312>
 8001604:	20000370 	.word	0x20000370
 8001608:	2000029c 	.word	0x2000029c
 800160c:	0800b88c 	.word	0x0800b88c
 8001610:	200002a0 	.word	0x200002a0
 8001614:	0800b4f0 	.word	0x0800b4f0
 8001618:	0800b4f8 	.word	0x0800b4f8
 800161c:	20000002 	.word	0x20000002
 8001620:	20000304 	.word	0x20000304
 8001624:	0800b6f8 	.word	0x0800b6f8
 8001628:	1a11d018 	.word	0x1a11d018
 800162c:	0800b724 	.word	0x0800b724
 8001630:	200001bc 	.word	0x200001bc
 8001634:	0800b74c 	.word	0x0800b74c
 8001638:	0800b75c 	.word	0x0800b75c
 800163c:	0800b778 	.word	0x0800b778
 8001640:	200001a8 	.word	0x200001a8
 8001644:	0800b794 	.word	0x0800b794
 8001648:	0800b7a8 	.word	0x0800b7a8
 800164c:	0800b7c0 	.word	0x0800b7c0
 8001650:	0800b7d8 	.word	0x0800b7d8
 8001654:	0800b7f0 	.word	0x0800b7f0
 8001658:	0800b804 	.word	0x0800b804
 800165c:	20000000 	.word	0x20000000
 8001660:	200001d8 	.word	0x200001d8
 8001664:	20000474 	.word	0x20000474
 8001668:	20000374 	.word	0x20000374
				crc_buff[j] = temp_check_buff[i];
 800166c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001674:	4413      	add	r3, r2
 8001676:	7819      	ldrb	r1, [r3, #0]
 8001678:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800167c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001680:	441a      	add	r2, r3
 8001682:	460b      	mov	r3, r1
 8001684:	7013      	strb	r3, [r2, #0]
//				myDebug("%02x ", crc_buff[j]);
				j++;
 8001686:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800168a:	3301      	adds	r3, #1
 800168c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			for (int i = 1; i <= crc_buff_len; i++) {
 8001690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001694:	3301      	adds	r3, #1
 8001696:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800169a:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 800169e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016a2:	4293      	cmp	r3, r2
 80016a4:	dde2      	ble.n	800166c <DioIrqHndlr+0x2e4>
			}
//			myDebug("\r\n");

			uint16_t crc = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
			crc = calculateCRC_CCITT_AX25(crc_buff, crc_buff_len);
 80016ac:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80016b0:	4619      	mov	r1, r3
 80016b2:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80016b6:	f7ff f873 	bl	80007a0 <calculateCRC_CCITT_AX25>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

			uint8_t calc_crc[2];
			calc_crc[0] = (crc >> 8) & 0xFF;
 80016c0:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
			calc_crc[1] = crc & 0xFF;
 80016ce:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd

			uint8_t msb_crc = temp_check_buff[temp_rx_buffer_len - 3];
 80016d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80016dc:	1eda      	subs	r2, r3, #3
 80016de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016e2:	5c9b      	ldrb	r3, [r3, r2]
 80016e4:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
			uint8_t lsb_crc = temp_check_buff[temp_rx_buffer_len - 2];
 80016e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80016ec:	1e9a      	subs	r2, r3, #2
 80016ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016f2:	5c9b      	ldrb	r3, [r3, r2]
 80016f4:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104

			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 80016f8:	f897 20dc 	ldrb.w	r2, [r7, #220]	; 0xdc
 80016fc:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8001700:	4293      	cmp	r3, r2
 8001702:	f040 80f9 	bne.w	80018f8 <DioIrqHndlr+0x570>
 8001706:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 800170a:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 800170e:	4293      	cmp	r3, r2
 8001710:	f040 80f2 	bne.w	80018f8 <DioIrqHndlr+0x570>
 8001714:	466b      	mov	r3, sp
 8001716:	461d      	mov	r5, r3
//				myDebug("Satellite Data checksum correct: 0x%x\r\n");

				uint8_t gs_cmd_buff[150];
				int gs_cmd_len = bit_destuffing(crc_buff, gs_cmd_buff,
 8001718:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 800171c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001720:	4619      	mov	r1, r3
 8001722:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001726:	f7ff f936 	bl	8000996 <bit_destuffing>
 800172a:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
						crc_buff_len);
//				gs_cmd_len--;

				myDebug(
 800172e:	4bd4      	ldr	r3, [pc, #848]	; (8001a80 <DioIrqHndlr+0x6f8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001738:	48d2      	ldr	r0, [pc, #840]	; (8001a84 <DioIrqHndlr+0x6fc>)
 800173a:	f7fe ffab 	bl	8000694 <myDebug>
						"\nSatellite Real Data, Length: %d bytes  and RSSI: %d dBm\r\n",
						gs_cmd_len, rssi_value);

				uint8_t main_gs_cmd[gs_cmd_len];
 800173e:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8001742:	1e63      	subs	r3, r4, #1
 8001744:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001748:	4622      	mov	r2, r4
 800174a:	2300      	movs	r3, #0
 800174c:	62ba      	str	r2, [r7, #40]	; 0x28
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800175c:	4649      	mov	r1, r9
 800175e:	00cb      	lsls	r3, r1, #3
 8001760:	4646      	mov	r6, r8
 8001762:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 8001766:	4641      	mov	r1, r8
 8001768:	00ca      	lsls	r2, r1, #3
 800176a:	4622      	mov	r2, r4
 800176c:	2300      	movs	r3, #0
 800176e:	623a      	str	r2, [r7, #32]
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800177e:	4649      	mov	r1, r9
 8001780:	00cb      	lsls	r3, r1, #3
 8001782:	4646      	mov	r6, r8
 8001784:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 8001788:	4641      	mov	r1, r8
 800178a:	00ca      	lsls	r2, r1, #3
 800178c:	4623      	mov	r3, r4
 800178e:	3307      	adds	r3, #7
 8001790:	08db      	lsrs	r3, r3, #3
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	ebad 0d03 	sub.w	sp, sp, r3
 8001798:	466b      	mov	r3, sp
 800179a:	3300      	adds	r3, #0
 800179c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
				for (int i = 0; i < gs_cmd_len; i++) {
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80017a6:	e01d      	b.n	80017e4 <DioIrqHndlr+0x45c>
					main_gs_cmd[i] = gs_cmd_buff[i];
 80017a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80017ac:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 80017b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80017b4:	4413      	add	r3, r2
 80017b6:	7819      	ldrb	r1, [r3, #0]
 80017b8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80017bc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80017c0:	4413      	add	r3, r2
 80017c2:	460a      	mov	r2, r1
 80017c4:	701a      	strb	r2, [r3, #0]
					myDebug("%02x ", main_gs_cmd[i]);
 80017c6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80017ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	4619      	mov	r1, r3
 80017d4:	48ac      	ldr	r0, [pc, #688]	; (8001a88 <DioIrqHndlr+0x700>)
 80017d6:	f7fe ff5d 	bl	8000694 <myDebug>
				for (int i = 0; i < gs_cmd_len; i++) {
 80017da:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80017de:	3301      	adds	r3, #1
 80017e0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80017e4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80017e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dbdb      	blt.n	80017a8 <DioIrqHndlr+0x420>
				}

				uint8_t main_gs_cmd_7e_len = sizeof(main_gs_cmd) + 2;
 80017f0:	b2e3      	uxtb	r3, r4
 80017f2:	3302      	adds	r3, #2
 80017f4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
				uint8_t main_gs_cmd_7e[main_gs_cmd_7e_len];
 80017f8:	f897 10f7 	ldrb.w	r1, [r7, #247]	; 0xf7
 80017fc:	460b      	mov	r3, r1
 80017fe:	3b01      	subs	r3, #1
 8001800:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001804:	b2cb      	uxtb	r3, r1
 8001806:	2200      	movs	r2, #0
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	61fa      	str	r2, [r7, #28]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001818:	4648      	mov	r0, r9
 800181a:	00c3      	lsls	r3, r0, #3
 800181c:	4640      	mov	r0, r8
 800181e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001822:	4640      	mov	r0, r8
 8001824:	00c2      	lsls	r2, r0, #3
 8001826:	b2cb      	uxtb	r3, r1
 8001828:	2200      	movs	r2, #0
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	617a      	str	r2, [r7, #20]
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800183a:	4648      	mov	r0, r9
 800183c:	00c3      	lsls	r3, r0, #3
 800183e:	4640      	mov	r0, r8
 8001840:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001844:	4640      	mov	r0, r8
 8001846:	00c2      	lsls	r2, r0, #3
 8001848:	460b      	mov	r3, r1
 800184a:	3307      	adds	r3, #7
 800184c:	08db      	lsrs	r3, r3, #3
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	ebad 0d03 	sub.w	sp, sp, r3
 8001854:	466b      	mov	r3, sp
 8001856:	3300      	adds	r3, #0
 8001858:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

				main_gs_cmd_7e[0] = 0x7e;
 800185c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001860:	227e      	movs	r2, #126	; 0x7e
 8001862:	701a      	strb	r2, [r3, #0]

				int j = 1;
 8001864:	2301      	movs	r3, #1
 8001866:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
				for (int i = 0; i < sizeof(main_gs_cmd); i++) {
 800186a:	2300      	movs	r3, #0
 800186c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001870:	e016      	b.n	80018a0 <DioIrqHndlr+0x518>
					main_gs_cmd_7e[j] = main_gs_cmd[i];
 8001872:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001876:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800187a:	4413      	add	r3, r2
 800187c:	7818      	ldrb	r0, [r3, #0]
 800187e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001882:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001886:	4413      	add	r3, r2
 8001888:	4602      	mov	r2, r0
 800188a:	701a      	strb	r2, [r3, #0]
					j++;
 800188c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001890:	3301      	adds	r3, #1
 8001892:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
				for (int i = 0; i < sizeof(main_gs_cmd); i++) {
 8001896:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800189a:	3301      	adds	r3, #1
 800189c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80018a0:	4622      	mov	r2, r4
 80018a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d8e3      	bhi.n	8001872 <DioIrqHndlr+0x4ea>
				}

				main_gs_cmd_7e[j] = 0x7e;
 80018aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80018ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80018b2:	4413      	add	r3, r2
 80018b4:	227e      	movs	r2, #126	; 0x7e
 80018b6:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&huart2, main_gs_cmd_7e,
 80018b8:	b28a      	uxth	r2, r1
 80018ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018be:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80018c2:	4872      	ldr	r0, [pc, #456]	; (8001a8c <DioIrqHndlr+0x704>)
 80018c4:	f003 ffe6 	bl	8005894 <HAL_UART_Transmit>
						sizeof(main_gs_cmd_7e), 2000);

				myDebug("\r\n");
 80018c8:	4871      	ldr	r0, [pc, #452]	; (8001a90 <DioIrqHndlr+0x708>)
 80018ca:	f7fe fee3 	bl	8000694 <myDebug>
				myDebug("__________\r\n");
 80018ce:	4871      	ldr	r0, [pc, #452]	; (8001a94 <DioIrqHndlr+0x70c>)
 80018d0:	f7fe fee0 	bl	8000694 <myDebug>
				memset(main_gs_cmd, '\0', gs_cmd_len);
 80018d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80018d8:	461a      	mov	r2, r3
 80018da:	2100      	movs	r1, #0
 80018dc:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80018e0:	f009 f962 	bl	800aba8 <memset>
				memset(main_gs_cmd_7e, '\0', main_gs_cmd_7e_len);
 80018e4:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 80018e8:	461a      	mov	r2, r3
 80018ea:	2100      	movs	r1, #0
 80018ec:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80018f0:	f009 f95a 	bl	800aba8 <memset>
 80018f4:	46ad      	mov	sp, r5
			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 80018f6:	e0a8      	b.n	8001a4a <DioIrqHndlr+0x6c2>

			} else {
 80018f8:	466b      	mov	r3, sp
 80018fa:	461c      	mov	r4, r3
				checksum_error_count++;
 80018fc:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <DioIrqHndlr+0x710>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	4a65      	ldr	r2, [pc, #404]	; (8001a98 <DioIrqHndlr+0x710>)
 8001904:	6013      	str	r3, [r2, #0]
				myDebug(
 8001906:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <DioIrqHndlr+0x710>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4619      	mov	r1, r3
 800190c:	4863      	ldr	r0, [pc, #396]	; (8001a9c <DioIrqHndlr+0x714>)
 800190e:	f7fe fec1 	bl	8000694 <myDebug>
						"Satellite Data checksum error and no of error packets: %d\r\n",
						checksum_error_count);
				for (int i = 0; i < sizeof(temp_check_buff); i++) {
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001918:	e00e      	b.n	8001938 <DioIrqHndlr+0x5b0>
					myDebug("%02x ", temp_check_buff[i]);
 800191a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800191e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	4619      	mov	r1, r3
 8001928:	4857      	ldr	r0, [pc, #348]	; (8001a88 <DioIrqHndlr+0x700>)
 800192a:	f7fe feb3 	bl	8000694 <myDebug>
				for (int i = 0; i < sizeof(temp_check_buff); i++) {
 800192e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001932:	3301      	adds	r3, #1
 8001934:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001938:	4632      	mov	r2, r6
 800193a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800193e:	429a      	cmp	r2, r3
 8001940:	d8eb      	bhi.n	800191a <DioIrqHndlr+0x592>
				}

				uint8_t main_gs_cmd_7e_len = sizeof(temp_check_buff) + 2;
 8001942:	1cb3      	adds	r3, r6, #2
 8001944:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
				uint8_t main_gs_cmd_7e[main_gs_cmd_7e_len];
 8001948:	f897 10eb 	ldrb.w	r1, [r7, #235]	; 0xeb
 800194c:	460b      	mov	r3, r1
 800194e:	3b01      	subs	r3, #1
 8001950:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001954:	b2cb      	uxtb	r3, r1
 8001956:	2200      	movs	r2, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	60fa      	str	r2, [r7, #12]
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001968:	4648      	mov	r0, r9
 800196a:	00c3      	lsls	r3, r0, #3
 800196c:	4640      	mov	r0, r8
 800196e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001972:	4640      	mov	r0, r8
 8001974:	00c2      	lsls	r2, r0, #3
 8001976:	b2cb      	uxtb	r3, r1
 8001978:	2200      	movs	r2, #0
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9d7 8900 	ldrd	r8, r9, [r7]
 800198a:	4648      	mov	r0, r9
 800198c:	00c3      	lsls	r3, r0, #3
 800198e:	4640      	mov	r0, r8
 8001990:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001994:	4640      	mov	r0, r8
 8001996:	00c2      	lsls	r2, r0, #3
 8001998:	460b      	mov	r3, r1
 800199a:	3307      	adds	r3, #7
 800199c:	08db      	lsrs	r3, r3, #3
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	ebad 0d03 	sub.w	sp, sp, r3
 80019a4:	466b      	mov	r3, sp
 80019a6:	3300      	adds	r3, #0
 80019a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

				main_gs_cmd_7e[0] = 0x7e;
 80019ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80019b0:	227e      	movs	r2, #126	; 0x7e
 80019b2:	701a      	strb	r2, [r3, #0]

				int j = 1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				for (int i = 0; i < sizeof(temp_check_buff); i++) {
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80019c0:	e016      	b.n	80019f0 <DioIrqHndlr+0x668>
					main_gs_cmd_7e[j] = temp_check_buff[i];
 80019c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80019c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019ca:	4413      	add	r3, r2
 80019cc:	7818      	ldrb	r0, [r3, #0]
 80019ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80019d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019d6:	4413      	add	r3, r2
 80019d8:	4602      	mov	r2, r0
 80019da:	701a      	strb	r2, [r3, #0]
					j++;
 80019dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019e0:	3301      	adds	r3, #1
 80019e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				for (int i = 0; i < sizeof(temp_check_buff); i++) {
 80019e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019ea:	3301      	adds	r3, #1
 80019ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80019f0:	4632      	mov	r2, r6
 80019f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d8e3      	bhi.n	80019c2 <DioIrqHndlr+0x63a>
				}

				main_gs_cmd_7e[j] = 0x7e;
 80019fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80019fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a02:	4413      	add	r3, r2
 8001a04:	227e      	movs	r2, #126	; 0x7e
 8001a06:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&huart2, main_gs_cmd_7e,
 8001a08:	b28a      	uxth	r2, r1
 8001a0a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a0e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8001a12:	481e      	ldr	r0, [pc, #120]	; (8001a8c <DioIrqHndlr+0x704>)
 8001a14:	f003 ff3e 	bl	8005894 <HAL_UART_Transmit>
						sizeof(main_gs_cmd_7e), 2000);

				myDebug("\r\n");
 8001a18:	481d      	ldr	r0, [pc, #116]	; (8001a90 <DioIrqHndlr+0x708>)
 8001a1a:	f7fe fe3b 	bl	8000694 <myDebug>
				myDebug("__________\r\n");
 8001a1e:	481d      	ldr	r0, [pc, #116]	; (8001a94 <DioIrqHndlr+0x70c>)
 8001a20:	f7fe fe38 	bl	8000694 <myDebug>
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <DioIrqHndlr+0x718>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
				memset(rx_buffer, '\0', sizeof(rx_buffer_len));
				memset(crc_buff, '\0', sizeof(crc_buff));
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2100      	movs	r1, #0
 8001a30:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001a34:	f009 f8b8 	bl	800aba8 <memset>
				memset(main_gs_cmd_7e, '\0', main_gs_cmd_7e_len);
 8001a38:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2100      	movs	r1, #0
 8001a40:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8001a44:	f009 f8b0 	bl	800aba8 <memset>
 8001a48:	46a5      	mov	sp, r4
 8001a4a:	f8d7 d038 	ldr.w	sp, [r7, #56]	; 0x38
			myDebug("__________\r\n");
			memset(rx_buffer, '\0', sizeof(rx_buffer_len));
			memset(main_gs_cmd_7e, '\0', main_gs_cmd_7e_len);
		}

		SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001a4e:	4815      	ldr	r0, [pc, #84]	; (8001aa4 <DioIrqHndlr+0x71c>)
 8001a50:	f007 fe64 	bl	800971c <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8001a54:	2100      	movs	r1, #0
 8001a56:	2001      	movs	r0, #1
 8001a58:	f008 faa8 	bl	8009fac <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8001a5c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001a60:	f007 fc88 	bl	8009374 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, cmd_temp, cmd_temp_len);
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <DioIrqHndlr+0x720>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	490f      	ldr	r1, [pc, #60]	; (8001aac <DioIrqHndlr+0x724>)
 8001a6e:	4807      	ldr	r0, [pc, #28]	; (8001a8c <DioIrqHndlr+0x704>)
 8001a70:	f003 ff96 	bl	80059a0 <HAL_UART_Receive_DMA>
	}
}
 8001a74:	bf00      	nop
 8001a76:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a80:	20000374 	.word	0x20000374
 8001a84:	0800b8c0 	.word	0x0800b8c0
 8001a88:	0800b4f0 	.word	0x0800b4f0
 8001a8c:	20000474 	.word	0x20000474
 8001a90:	0800b4f8 	.word	0x0800b4f8
 8001a94:	0800b8fc 	.word	0x0800b8fc
 8001a98:	20000378 	.word	0x20000378
 8001a9c:	0800b90c 	.word	0x0800b90c
 8001aa0:	20000304 	.word	0x20000304
 8001aa4:	1a11d018 	.word	0x1a11d018
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	200001d8 	.word	0x200001d8

08001ab0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab4:	b672      	cpsid	i
}
 8001ab6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ab8:	e7fe      	b.n	8001ab8 <Error_Handler+0x8>

08001aba <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <NMI_Handler+0x4>

08001acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <HardFault_Handler+0x4>

08001ad2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <MemManage_Handler+0x4>

08001ad8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <BusFault_Handler+0x4>

08001ade <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <UsageFault_Handler+0x4>

08001ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0c:	f000 fc2c 	bl	8002368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <DMA1_Channel1_IRQHandler+0x10>)
 8001b1a:	f000 ff27 	bl	800296c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000508 	.word	0x20000508

08001b28 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <DMA1_Channel2_IRQHandler+0x10>)
 8001b2e:	f000 ff1d 	bl	800296c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000568 	.word	0x20000568

08001b3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 Global Interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <TIM2_IRQHandler+0x10>)
 8001b42:	f003 faad 	bl	80050a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000390 	.word	0x20000390

08001b50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <USART1_IRQHandler+0x10>)
 8001b56:	f003 ff6f 	bl	8005a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200003e0 	.word	0x200003e0

08001b64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <USART2_IRQHandler+0x10>)
 8001b6a:	f003 ff65 	bl	8005a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000474 	.word	0x20000474

08001b78 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001b7e:	f003 f855 	bl	8004c2c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000037c 	.word	0x2000037c

08001b8c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b98:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <MX_SUBGHZ_Init+0x20>)
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_SUBGHZ_Init+0x20>)
 8001bc8:	f002 fdae 	bl	8004728 <HAL_SUBGHZ_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001bd2:	f7ff ff6d 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2000037c 	.word	0x2000037c

08001be0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001be8:	2001      	movs	r0, #1
 8001bea:	f7ff ffcf 	bl	8001b8c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2032      	movs	r0, #50	; 0x32
 8001bf4:	f000 fca1 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001bf8:	2032      	movs	r0, #50	; 0x32
 8001bfa:	f000 fcb8 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_GetTick+0x24>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001c26:	f000 f910 	bl	8001e4a <TIMER_IF_GetTimerValue>
 8001c2a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001c2c:	687b      	ldr	r3, [r7, #4]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000388 	.word	0x20000388

08001c3c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f92d 	bl	8001ea6 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <_sbrk+0x5c>)
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <_sbrk+0x60>)
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <_sbrk+0x64>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <_sbrk+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c84:	f008 ff98 	bl	800abb8 <__errno>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20010000 	.word	0x20010000
 8001cb4:	00000400 	.word	0x00000400
 8001cb8:	2000038c 	.word	0x2000038c
 8001cbc:	200008d8 	.word	0x200008d8

08001cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <LL_APB1_GRP1_EnableClock>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d02:	f107 0310 	add.w	r3, r7, #16
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <MX_TIM2_Init+0x94>)
 8001d1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <MX_TIM2_Init+0x94>)
 8001d24:	222f      	movs	r2, #47	; 0x2f
 8001d26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <MX_TIM2_Init+0x94>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000001-1;
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <MX_TIM2_Init+0x94>)
 8001d30:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <MX_TIM2_Init+0x98>)
 8001d32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <MX_TIM2_Init+0x94>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <MX_TIM2_Init+0x94>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d40:	4813      	ldr	r0, [pc, #76]	; (8001d90 <MX_TIM2_Init+0x94>)
 8001d42:	f003 f911 	bl	8004f68 <HAL_TIM_Base_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d4c:	f7ff feb0 	bl	8001ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	480c      	ldr	r0, [pc, #48]	; (8001d90 <MX_TIM2_Init+0x94>)
 8001d5e:	f003 fabe 	bl	80052de <HAL_TIM_ConfigClockSource>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d68:	f7ff fea2 	bl	8001ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4619      	mov	r1, r3
 8001d78:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_TIM2_Init+0x94>)
 8001d7a:	f003 fca1 	bl	80056c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d84:	f7ff fe94 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000390 	.word	0x20000390
 8001d94:	000f4240 	.word	0x000f4240

08001d98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da8:	d10a      	bne.n	8001dc0 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001daa:	2001      	movs	r0, #1
 8001dac:	f7ff ff8e 	bl	8001ccc <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2100      	movs	r1, #0
 8001db4:	201b      	movs	r0, #27
 8001db6:	f000 fbc0 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dba:	201b      	movs	r0, #27
 8001dbc:	f000 fbd7 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8001e00:	79fb      	ldrb	r3, [r7, #7]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001e10:	4b02      	ldr	r3, [pc, #8]	; (8001e1c <TIMER_IF_SetTimerContext+0x10>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	200003dc 	.word	0x200003dc

08001e20 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001e24:	4b02      	ldr	r3, [pc, #8]	; (8001e30 <TIMER_IF_GetTimerContext+0x10>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	200003dc 	.word	0x200003dc

08001e34 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8001e3e:	687b      	ldr	r3, [r7, #4]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001e54:	687b      	ldr	r3, [r7, #4]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8001e6a:	687b      	ldr	r3, [r7, #4]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b085      	sub	sp, #20
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <LL_AHB2_GRP1_EnableClock>:
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001edc:	68fb      	ldr	r3, [r7, #12]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <LL_APB1_GRP1_EnableClock>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <LL_APB2_GRP1_EnableClock>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001f4e:	4a23      	ldr	r2, [pc, #140]	; (8001fdc <MX_USART1_UART_Init+0x94>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f90:	4811      	ldr	r0, [pc, #68]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001f92:	f003 fc2f 	bl	80057f4 <HAL_UART_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f9c:	f7ff fd88 	bl	8001ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001fa4:	f004 ff92 	bl	8006ecc <HAL_UARTEx_SetTxFifoThreshold>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001fae:	f7ff fd7f 	bl	8001ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4808      	ldr	r0, [pc, #32]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001fb6:	f004 ffc7 	bl	8006f48 <HAL_UARTEx_SetRxFifoThreshold>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001fc0:	f7ff fd76 	bl	8001ab0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <MX_USART1_UART_Init+0x90>)
 8001fc6:	f004 ff49 	bl	8006e5c <HAL_UARTEx_DisableFifoMode>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001fd0:	f7ff fd6e 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200003e0 	.word	0x200003e0
 8001fdc:	40013800 	.word	0x40013800

08001fe0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <MX_USART2_UART_Init+0x90>)
 8001fe6:	4a23      	ldr	r2, [pc, #140]	; (8002074 <MX_USART2_UART_Init+0x94>)
 8001fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <MX_USART2_UART_Init+0x90>)
 8001fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <MX_USART2_UART_Init+0x90>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <MX_USART2_UART_Init+0x90>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <MX_USART2_UART_Init+0x90>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <MX_USART2_UART_Init+0x90>)
 8002006:	220c      	movs	r2, #12
 8002008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <MX_USART2_UART_Init+0x90>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <MX_USART2_UART_Init+0x90>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002016:	4b16      	ldr	r3, [pc, #88]	; (8002070 <MX_USART2_UART_Init+0x90>)
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <MX_USART2_UART_Init+0x90>)
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <MX_USART2_UART_Init+0x90>)
 8002024:	2200      	movs	r2, #0
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002028:	4811      	ldr	r0, [pc, #68]	; (8002070 <MX_USART2_UART_Init+0x90>)
 800202a:	f003 fbe3 	bl	80057f4 <HAL_UART_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002034:	f7ff fd3c 	bl	8001ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002038:	2100      	movs	r1, #0
 800203a:	480d      	ldr	r0, [pc, #52]	; (8002070 <MX_USART2_UART_Init+0x90>)
 800203c:	f004 ff46 	bl	8006ecc <HAL_UARTEx_SetTxFifoThreshold>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002046:	f7ff fd33 	bl	8001ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800204a:	2100      	movs	r1, #0
 800204c:	4808      	ldr	r0, [pc, #32]	; (8002070 <MX_USART2_UART_Init+0x90>)
 800204e:	f004 ff7b 	bl	8006f48 <HAL_UARTEx_SetRxFifoThreshold>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002058:	f7ff fd2a 	bl	8001ab0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800205c:	4804      	ldr	r0, [pc, #16]	; (8002070 <MX_USART2_UART_Init+0x90>)
 800205e:	f004 fefd 	bl	8006e5c <HAL_UARTEx_DisableFifoMode>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002068:	f7ff fd22 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000474 	.word	0x20000474
 8002074:	40004400 	.word	0x40004400

08002078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b096      	sub	sp, #88	; 0x58
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	2238      	movs	r2, #56	; 0x38
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f008 fd85 	bl	800aba8 <memset>
  if(uartHandle->Instance==USART1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a69      	ldr	r2, [pc, #420]	; (8002248 <HAL_UART_MspInit+0x1d0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d130      	bne.n	800210a <HAL_UART_MspInit+0x92>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020a8:	2301      	movs	r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020ac:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80020b0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	4618      	mov	r0, r3
 80020b8:	f002 f982 	bl	80043c0 <HAL_RCCEx_PeriphCLKConfig>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020c2:	f7ff fcf5 	bl	8001ab0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020ca:	f7ff ff25 	bl	8001f18 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	2001      	movs	r0, #1
 80020d0:	f7ff fef2 	bl	8001eb8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80020d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020d8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020e6:	2307      	movs	r3, #7
 80020e8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020ee:	4619      	mov	r1, r3
 80020f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f4:	f000 fdd8 	bl	8002ca8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	2024      	movs	r0, #36	; 0x24
 80020fe:	f000 fa1c 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002102:	2024      	movs	r0, #36	; 0x24
 8002104:	f000 fa33 	bl	800256e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002108:	e099      	b.n	800223e <HAL_UART_MspInit+0x1c6>
  else if(uartHandle->Instance==USART2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a4f      	ldr	r2, [pc, #316]	; (800224c <HAL_UART_MspInit+0x1d4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	f040 8094 	bne.w	800223e <HAL_UART_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002116:	2302      	movs	r3, #2
 8002118:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800211a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800211e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	4618      	mov	r0, r3
 8002126:	f002 f94b 	bl	80043c0 <HAL_RCCEx_PeriphCLKConfig>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_UART_MspInit+0xbc>
      Error_Handler();
 8002130:	f7ff fcbe 	bl	8001ab0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002134:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002138:	f7ff fed6 	bl	8001ee8 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213c:	2001      	movs	r0, #1
 800213e:	f7ff febb 	bl	8001eb8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8002142:	230c      	movs	r3, #12
 8002144:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002152:	2307      	movs	r3, #7
 8002154:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800215a:	4619      	mov	r1, r3
 800215c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002160:	f000 fda2 	bl	8002ca8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8002164:	4b3a      	ldr	r3, [pc, #232]	; (8002250 <HAL_UART_MspInit+0x1d8>)
 8002166:	4a3b      	ldr	r2, [pc, #236]	; (8002254 <HAL_UART_MspInit+0x1dc>)
 8002168:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800216a:	4b39      	ldr	r3, [pc, #228]	; (8002250 <HAL_UART_MspInit+0x1d8>)
 800216c:	2213      	movs	r2, #19
 800216e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002170:	4b37      	ldr	r3, [pc, #220]	; (8002250 <HAL_UART_MspInit+0x1d8>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002176:	4b36      	ldr	r3, [pc, #216]	; (8002250 <HAL_UART_MspInit+0x1d8>)
 8002178:	2200      	movs	r2, #0
 800217a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800217c:	4b34      	ldr	r3, [pc, #208]	; (8002250 <HAL_UART_MspInit+0x1d8>)
 800217e:	2280      	movs	r2, #128	; 0x80
 8002180:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002182:	4b33      	ldr	r3, [pc, #204]	; (8002250 <HAL_UART_MspInit+0x1d8>)
 8002184:	2200      	movs	r2, #0
 8002186:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002188:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_UART_MspInit+0x1d8>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800218e:	4b30      	ldr	r3, [pc, #192]	; (8002250 <HAL_UART_MspInit+0x1d8>)
 8002190:	2200      	movs	r2, #0
 8002192:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002194:	4b2e      	ldr	r3, [pc, #184]	; (8002250 <HAL_UART_MspInit+0x1d8>)
 8002196:	2200      	movs	r2, #0
 8002198:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800219a:	482d      	ldr	r0, [pc, #180]	; (8002250 <HAL_UART_MspInit+0x1d8>)
 800219c:	f000 fa02 	bl	80025a4 <HAL_DMA_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_UART_MspInit+0x132>
      Error_Handler();
 80021a6:	f7ff fc83 	bl	8001ab0 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80021aa:	2110      	movs	r1, #16
 80021ac:	4828      	ldr	r0, [pc, #160]	; (8002250 <HAL_UART_MspInit+0x1d8>)
 80021ae:	f000 fca3 	bl	8002af8 <HAL_DMA_ConfigChannelAttributes>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_UART_MspInit+0x144>
      Error_Handler();
 80021b8:	f7ff fc7a 	bl	8001ab0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a24      	ldr	r2, [pc, #144]	; (8002250 <HAL_UART_MspInit+0x1d8>)
 80021c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80021c4:	4a22      	ldr	r2, [pc, #136]	; (8002250 <HAL_UART_MspInit+0x1d8>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80021ca:	4b23      	ldr	r3, [pc, #140]	; (8002258 <HAL_UART_MspInit+0x1e0>)
 80021cc:	4a23      	ldr	r2, [pc, #140]	; (800225c <HAL_UART_MspInit+0x1e4>)
 80021ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_UART_MspInit+0x1e0>)
 80021d2:	2214      	movs	r2, #20
 80021d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_UART_MspInit+0x1e0>)
 80021d8:	2210      	movs	r2, #16
 80021da:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021dc:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <HAL_UART_MspInit+0x1e0>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_UART_MspInit+0x1e0>)
 80021e4:	2280      	movs	r2, #128	; 0x80
 80021e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_UART_MspInit+0x1e0>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_UART_MspInit+0x1e0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <HAL_UART_MspInit+0x1e0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021fa:	4b17      	ldr	r3, [pc, #92]	; (8002258 <HAL_UART_MspInit+0x1e0>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002200:	4815      	ldr	r0, [pc, #84]	; (8002258 <HAL_UART_MspInit+0x1e0>)
 8002202:	f000 f9cf 	bl	80025a4 <HAL_DMA_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_UART_MspInit+0x198>
      Error_Handler();
 800220c:	f7ff fc50 	bl	8001ab0 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002210:	2110      	movs	r1, #16
 8002212:	4811      	ldr	r0, [pc, #68]	; (8002258 <HAL_UART_MspInit+0x1e0>)
 8002214:	f000 fc70 	bl	8002af8 <HAL_DMA_ConfigChannelAttributes>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 800221e:	f7ff fc47 	bl	8001ab0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <HAL_UART_MspInit+0x1e0>)
 8002226:	67da      	str	r2, [r3, #124]	; 0x7c
 8002228:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <HAL_UART_MspInit+0x1e0>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2025      	movs	r0, #37	; 0x25
 8002234:	f000 f981 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002238:	2025      	movs	r0, #37	; 0x25
 800223a:	f000 f998 	bl	800256e <HAL_NVIC_EnableIRQ>
}
 800223e:	bf00      	nop
 8002240:	3758      	adds	r7, #88	; 0x58
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40013800 	.word	0x40013800
 800224c:	40004400 	.word	0x40004400
 8002250:	20000508 	.word	0x20000508
 8002254:	40020008 	.word	0x40020008
 8002258:	20000568 	.word	0x20000568
 800225c:	4002001c 	.word	0x4002001c

08002260 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002260:	480d      	ldr	r0, [pc, #52]	; (8002298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002262:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002264:	f7ff fd2c 	bl	8001cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002268:	480c      	ldr	r0, [pc, #48]	; (800229c <LoopForever+0x6>)
  ldr r1, =_edata
 800226a:	490d      	ldr	r1, [pc, #52]	; (80022a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <LoopForever+0xe>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002270:	e002      	b.n	8002278 <LoopCopyDataInit>

08002272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002276:	3304      	adds	r3, #4

08002278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800227c:	d3f9      	bcc.n	8002272 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002280:	4c0a      	ldr	r4, [pc, #40]	; (80022ac <LoopForever+0x16>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002284:	e001      	b.n	800228a <LoopFillZerobss>

08002286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002288:	3204      	adds	r2, #4

0800228a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800228c:	d3fb      	bcc.n	8002286 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800228e:	f008 fc99 	bl	800abc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002292:	f7fe fe8b 	bl	8000fac <main>

08002296 <LoopForever>:

LoopForever:
    b LoopForever
 8002296:	e7fe      	b.n	8002296 <LoopForever>
  ldr   r0, =_estack
 8002298:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800229c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80022a4:	0800bc00 	.word	0x0800bc00
  ldr r2, =_sbss
 80022a8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80022ac:	200008d4 	.word	0x200008d4

080022b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022b0:	e7fe      	b.n	80022b0 <ADC_IRQHandler>
	...

080022b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022be:	2003      	movs	r0, #3
 80022c0:	f000 f930 	bl	8002524 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80022c4:	f001 fe9e 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a09      	ldr	r2, [pc, #36]	; (80022f0 <HAL_Init+0x3c>)
 80022cc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ce:	2000      	movs	r0, #0
 80022d0:	f000 f810 	bl	80022f4 <HAL_InitTick>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	71fb      	strb	r3, [r7, #7]
 80022de:	e001      	b.n	80022e4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022e0:	f7ff fbeb 	bl	8001aba <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022e4:	79fb      	ldrb	r3, [r7, #7]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_InitTick+0x6c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d024      	beq.n	8002352 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002308:	f001 fe7c 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_InitTick+0x6c>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	4619      	mov	r1, r3
 8002314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002318:	fbb3 f3f1 	udiv	r3, r3, r1
 800231c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002320:	4618      	mov	r0, r3
 8002322:	f000 f932 	bl	800258a <HAL_SYSTICK_Config>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10f      	bne.n	800234c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b0f      	cmp	r3, #15
 8002330:	d809      	bhi.n	8002346 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002332:	2200      	movs	r2, #0
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800233a:	f000 f8fe 	bl	800253a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800233e:	4a09      	ldr	r2, [pc, #36]	; (8002364 <HAL_InitTick+0x70>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	e007      	b.n	8002356 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
 800234a:	e004      	b.n	8002356 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e001      	b.n	8002356 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	2000000c 	.word	0x2000000c
 8002364:	20000008 	.word	0x20000008

08002368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_IncTick+0x1c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_IncTick+0x20>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4413      	add	r3, r2
 8002378:	4a03      	ldr	r2, [pc, #12]	; (8002388 <HAL_IncTick+0x20>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	2000000c 	.word	0x2000000c
 8002388:	200005c8 	.word	0x200005c8

0800238c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a8:	4013      	ands	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023be:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	60d3      	str	r3, [r2, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <__NVIC_GetPriorityGrouping+0x18>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 0307 	and.w	r3, r3, #7
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db0b      	blt.n	800241a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	4906      	ldr	r1, [pc, #24]	; (8002424 <__NVIC_EnableIRQ+0x34>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	db0a      	blt.n	8002452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	490c      	ldr	r1, [pc, #48]	; (8002474 <__NVIC_SetPriority+0x4c>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	440b      	add	r3, r1
 800244c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002450:	e00a      	b.n	8002468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4908      	ldr	r1, [pc, #32]	; (8002478 <__NVIC_SetPriority+0x50>)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3b04      	subs	r3, #4
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	440b      	add	r3, r1
 8002466:	761a      	strb	r2, [r3, #24]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000e100 	.word	0xe000e100
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f1c3 0307 	rsb	r3, r3, #7
 8002496:	2b04      	cmp	r3, #4
 8002498:	bf28      	it	cs
 800249a:	2304      	movcs	r3, #4
 800249c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d902      	bls.n	80024ac <NVIC_EncodePriority+0x30>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3b03      	subs	r3, #3
 80024aa:	e000      	b.n	80024ae <NVIC_EncodePriority+0x32>
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	401a      	ands	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43d9      	mvns	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	4313      	orrs	r3, r2
         );
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	; 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f0:	d301      	bcc.n	80024f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00f      	b.n	8002516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <SysTick_Config+0x40>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fe:	210f      	movs	r1, #15
 8002500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002504:	f7ff ff90 	bl	8002428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <SysTick_Config+0x40>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <SysTick_Config+0x40>)
 8002510:	2207      	movs	r2, #7
 8002512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff2d 	bl	800238c <__NVIC_SetPriorityGrouping>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002548:	f7ff ff44 	bl	80023d4 <__NVIC_GetPriorityGrouping>
 800254c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f7ff ff92 	bl	800247c <NVIC_EncodePriority>
 8002558:	4602      	mov	r2, r0
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff61 	bl	8002428 <__NVIC_SetPriority>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff37 	bl	80023f0 <__NVIC_EnableIRQ>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffa4 	bl	80024e0 <SysTick_Config>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e08e      	b.n	80026d4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_DMA_Init+0x138>)
 80025be:	429a      	cmp	r2, r3
 80025c0:	d80f      	bhi.n	80025e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b45      	ldr	r3, [pc, #276]	; (80026e0 <HAL_DMA_Init+0x13c>)
 80025ca:	4413      	add	r3, r2
 80025cc:	4a45      	ldr	r2, [pc, #276]	; (80026e4 <HAL_DMA_Init+0x140>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	009a      	lsls	r2, r3, #2
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a42      	ldr	r2, [pc, #264]	; (80026e8 <HAL_DMA_Init+0x144>)
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
 80025e0:	e00e      	b.n	8002600 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b40      	ldr	r3, [pc, #256]	; (80026ec <HAL_DMA_Init+0x148>)
 80025ea:	4413      	add	r3, r2
 80025ec:	4a3d      	ldr	r2, [pc, #244]	; (80026e4 <HAL_DMA_Init+0x140>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	009a      	lsls	r2, r3, #2
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a3c      	ldr	r2, [pc, #240]	; (80026f0 <HAL_DMA_Init+0x14c>)
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fabc 	bl	8002bd0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002660:	d102      	bne.n	8002668 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002670:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002674:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800267e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d010      	beq.n	80026aa <HAL_DMA_Init+0x106>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b04      	cmp	r3, #4
 800268e:	d80c      	bhi.n	80026aa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 fae5 	bl	8002c60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	e008      	b.n	80026bc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40020407 	.word	0x40020407
 80026e0:	bffdfff8 	.word	0xbffdfff8
 80026e4:	cccccccd 	.word	0xcccccccd
 80026e8:	40020000 	.word	0x40020000
 80026ec:	bffdfbf8 	.word	0xbffdfbf8
 80026f0:	40020400 	.word	0x40020400

080026f4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_DMA_Start_IT+0x20>
 8002710:	2302      	movs	r3, #2
 8002712:	e069      	b.n	80027e8 <HAL_DMA_Start_IT+0xf4>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d155      	bne.n	80027d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0201 	bic.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fa02 	bl	8002b56 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 020e 	orr.w	r2, r2, #14
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e00f      	b.n	800278c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0204 	bic.w	r2, r2, #4
 800277a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 020a 	orr.w	r2, r2, #10
 800278a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	e008      	b.n	80027e6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e04f      	b.n	80028a2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d008      	beq.n	8002820 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2204      	movs	r2, #4
 8002812:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e040      	b.n	80028a2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 020e 	bic.w	r2, r2, #14
 800282e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800283e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	f003 021c 	and.w	r2, r3, #28
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	2101      	movs	r1, #1
 800285e:	fa01 f202 	lsl.w	r2, r1, r2
 8002862:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800286c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00c      	beq.n	8002890 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002884:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800288e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d005      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2204      	movs	r2, #4
 80028c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
 80028ce:	e047      	b.n	8002960 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 020e 	bic.w	r2, r2, #14
 80028de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	f003 021c 	and.w	r2, r3, #28
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	2101      	movs	r1, #1
 800290e:	fa01 f202 	lsl.w	r2, r1, r2
 8002912:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800291c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00c      	beq.n	8002940 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002934:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800293e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
    }
  }
  return status;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	f003 031c 	and.w	r3, r3, #28
 800298c:	2204      	movs	r2, #4
 800298e:	409a      	lsls	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d027      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x7c>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d022      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0204 	bic.w	r2, r2, #4
 80029be:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	f003 021c 	and.w	r2, r3, #28
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	2104      	movs	r1, #4
 80029ce:	fa01 f202 	lsl.w	r2, r1, r2
 80029d2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 8081 	beq.w	8002ae0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80029e6:	e07b      	b.n	8002ae0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	f003 031c 	and.w	r3, r3, #28
 80029f0:	2202      	movs	r2, #2
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d03d      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x10c>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d038      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 020a 	bic.w	r2, r2, #10
 8002a22:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b2e      	ldr	r3, [pc, #184]	; (8002aec <HAL_DMA_IRQHandler+0x180>)
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d909      	bls.n	8002a4c <HAL_DMA_IRQHandler+0xe0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	f003 031c 	and.w	r3, r3, #28
 8002a40:	4a2b      	ldr	r2, [pc, #172]	; (8002af0 <HAL_DMA_IRQHandler+0x184>)
 8002a42:	2102      	movs	r1, #2
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	6053      	str	r3, [r2, #4]
 8002a4a:	e008      	b.n	8002a5e <HAL_DMA_IRQHandler+0xf2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	f003 031c 	and.w	r3, r3, #28
 8002a54:	4a27      	ldr	r2, [pc, #156]	; (8002af4 <HAL_DMA_IRQHandler+0x188>)
 8002a56:	2102      	movs	r1, #2
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d038      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002a76:	e033      	b.n	8002ae0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f003 031c 	and.w	r3, r3, #28
 8002a80:	2208      	movs	r2, #8
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d02a      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x176>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d025      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 020e 	bic.w	r2, r2, #14
 8002aa4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f003 021c 	and.w	r2, r3, #28
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
}
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40020080 	.word	0x40020080
 8002af0:	40020400 	.word	0x40020400
 8002af4:	40020000 	.word	0x40020000

08002af8 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	72fb      	strb	r3, [r7, #11]
    return status;
 8002b10:	7afb      	ldrb	r3, [r7, #11]
 8002b12:	e01b      	b.n	8002b4c <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e003      	b.n	8002b42 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b40:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	601a      	str	r2, [r3, #0]

  return status;
 8002b4a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b6c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b7e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	f003 021c 	and.w	r2, r3, #28
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d108      	bne.n	8002bb6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bb4:	e007      	b.n	8002bc6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	60da      	str	r2, [r3, #12]
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d813      	bhi.n	8002c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bf0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	3b08      	subs	r3, #8
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e011      	b.n	8002c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c10:	089b      	lsrs	r3, r3, #2
 8002c12:	009a      	lsls	r2, r3, #2
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002c16:	4413      	add	r3, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	3b08      	subs	r3, #8
 8002c24:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	3307      	adds	r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002c34:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40020407 	.word	0x40020407
 8002c54:	cccccccd 	.word	0xcccccccd
 8002c58:	4002081c 	.word	0x4002081c
 8002c5c:	40020880 	.word	0x40020880

08002c60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c70:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a08      	ldr	r2, [pc, #32]	; (8002ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c84:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2201      	movs	r2, #1
 8002c90:	409a      	lsls	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	1000823f 	.word	0x1000823f
 8002ca4:	40020940 	.word	0x40020940

08002ca8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb6:	e140      	b.n	8002f3a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 8132 	beq.w	8002f34 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d005      	beq.n	8002ce8 <HAL_GPIO_Init+0x40>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d130      	bne.n	8002d4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d1e:	2201      	movs	r2, #1
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	f003 0201 	and.w	r2, r3, #1
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d017      	beq.n	8002d86 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	2203      	movs	r2, #3
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d123      	bne.n	8002dda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	08da      	lsrs	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3208      	adds	r2, #8
 8002d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	220f      	movs	r2, #15
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	08da      	lsrs	r2, r3, #3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3208      	adds	r2, #8
 8002dd4:	6939      	ldr	r1, [r7, #16]
 8002dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	2203      	movs	r2, #3
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4013      	ands	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0203 	and.w	r2, r3, #3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 808c 	beq.w	8002f34 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002e1c:	4a4e      	ldr	r2, [pc, #312]	; (8002f58 <HAL_GPIO_Init+0x2b0>)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	089b      	lsrs	r3, r3, #2
 8002e22:	3302      	adds	r3, #2
 8002e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	2207      	movs	r2, #7
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e46:	d00d      	beq.n	8002e64 <HAL_GPIO_Init+0x1bc>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a44      	ldr	r2, [pc, #272]	; (8002f5c <HAL_GPIO_Init+0x2b4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d007      	beq.n	8002e60 <HAL_GPIO_Init+0x1b8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a43      	ldr	r2, [pc, #268]	; (8002f60 <HAL_GPIO_Init+0x2b8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d101      	bne.n	8002e5c <HAL_GPIO_Init+0x1b4>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e004      	b.n	8002e66 <HAL_GPIO_Init+0x1be>
 8002e5c:	2307      	movs	r3, #7
 8002e5e:	e002      	b.n	8002e66 <HAL_GPIO_Init+0x1be>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_GPIO_Init+0x1be>
 8002e64:	2300      	movs	r3, #0
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	f002 0203 	and.w	r2, r2, #3
 8002e6c:	0092      	lsls	r2, r2, #2
 8002e6e:	4093      	lsls	r3, r2
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e76:	4938      	ldr	r1, [pc, #224]	; (8002f58 <HAL_GPIO_Init+0x2b0>)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e84:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <HAL_GPIO_Init+0x2bc>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ea8:	4a2e      	ldr	r2, [pc, #184]	; (8002f64 <HAL_GPIO_Init+0x2bc>)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002eae:	4b2d      	ldr	r3, [pc, #180]	; (8002f64 <HAL_GPIO_Init+0x2bc>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ed2:	4a24      	ldr	r2, [pc, #144]	; (8002f64 <HAL_GPIO_Init+0x2bc>)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002ed8:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <HAL_GPIO_Init+0x2bc>)
 8002eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ede:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002efe:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <HAL_GPIO_Init+0x2bc>)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002f06:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <HAL_GPIO_Init+0x2bc>)
 8002f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f0c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	; (8002f64 <HAL_GPIO_Init+0x2bc>)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	3301      	adds	r3, #1
 8002f38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f47f aeb7 	bne.w	8002cb8 <HAL_GPIO_Init+0x10>
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	bf00      	nop
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	48000400 	.word	0x48000400
 8002f60:	48000800 	.word	0x48000800
 8002f64:	58000800 	.word	0x58000800

08002f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
 8002f74:	4613      	mov	r3, r2
 8002f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f78:	787b      	ldrb	r3, [r7, #1]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f7e:	887a      	ldrh	r2, [r7, #2]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f84:	e002      	b.n	8002f8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f86:	887a      	ldrh	r2, [r7, #2]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
	...

08002f98 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa6:	6013      	str	r3, [r2, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	58000400 	.word	0x58000400

08002fb4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_PWREx_GetVoltageRange+0x14>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	58000400 	.word	0x58000400

08002fcc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fdc:	d101      	bne.n	8002fe2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	58000400 	.word	0x58000400

08002ff0 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ffe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003002:	6013      	str	r3, [r2, #0]
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800301a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800301e:	6013      	str	r3, [r2, #0]
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800303a:	d101      	bne.n	8003040 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	6013      	str	r3, [r2, #0]
}
 800305e:	bf00      	nop
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800306a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
}
 800307a:	bf00      	nop
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003094:	d101      	bne.n	800309a <LL_RCC_HSE_IsReady+0x18>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <LL_RCC_HSE_IsReady+0x1a>
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80030a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b6:	6013      	str	r3, [r2, #0]
}
 80030b8:	bf00      	nop
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80030c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80030e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ee:	d101      	bne.n	80030f4 <LL_RCC_HSI_IsReady+0x18>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <LL_RCC_HSI_IsReady+0x1a>
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr

080030fe <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	061b      	lsls	r3, r3, #24
 8003114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800312a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b02      	cmp	r3, #2
 8003138:	d101      	bne.n	800313e <LL_RCC_LSE_IsReady+0x18>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <LL_RCC_LSE_IsReady+0x1a>
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800314c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800316c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b02      	cmp	r3, #2
 800319a:	d101      	bne.n	80031a0 <LL_RCC_LSI_IsReady+0x18>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <LL_RCC_LSI_IsReady+0x1a>
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6013      	str	r3, [r2, #0]
}
 80031be:	bf00      	nop
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80031ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6013      	str	r3, [r2, #0]
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80031e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d101      	bne.n	80031f8 <LL_RCC_MSI_IsReady+0x16>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <LL_RCC_MSI_IsReady+0x18>
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b08      	cmp	r3, #8
 8003212:	d101      	bne.n	8003218 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800323c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003244:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800326a:	4313      	orrs	r3, r2
 800326c:	604b      	str	r3, [r1, #4]
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f023 0203 	bic.w	r2, r3, #3
 800328a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4313      	orrs	r3, r2
 8003292:	608b      	str	r3, [r1, #8]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr

0800329e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80032bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80032e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800330c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003310:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003314:	f023 020f 	bic.w	r2, r3, #15
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4313      	orrs	r3, r2
 800334a:	608b      	str	r3, [r1, #8]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800335e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80033b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80033c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80033dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ea:	6013      	str	r3, [r2, #0]
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80033f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003406:	6013      	str	r3, [r2, #0]
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003422:	d101      	bne.n	8003428 <LL_RCC_PLL_IsReady+0x18>
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <LL_RCC_PLL_IsReady+0x1a>
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003442:	4618      	mov	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800344a:	b480      	push	{r7}
 800344c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800344e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800346e:	4618      	mov	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003476:	b480      	push	{r7}
 8003478:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800347a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0303 	and.w	r3, r3, #3
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349e:	d101      	bne.n	80034a4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80034ae:	b480      	push	{r7}
 80034b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80034b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034c2:	d101      	bne.n	80034c8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80034d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e6:	d101      	bne.n	80034ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80034fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003508:	d101      	bne.n	800350e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800351c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003526:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800352a:	d101      	bne.n	8003530 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
	...

0800353c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e36f      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354e:	f7ff fea6 	bl	800329e <LL_RCC_GetSysClkSource>
 8003552:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003554:	f7ff ff8f 	bl	8003476 <LL_RCC_PLL_GetMainSource>
 8003558:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80c4 	beq.w	80036f0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_RCC_OscConfig+0x3e>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	2b0c      	cmp	r3, #12
 8003572:	d176      	bne.n	8003662 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d173      	bne.n	8003662 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e353      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800358a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_OscConfig+0x68>
 8003598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a2:	e006      	b.n	80035b2 <HAL_RCC_OscConfig+0x76>
 80035a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d222      	bcs.n	80035fc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fd5a 	bl	8004074 <RCC_SetFlashLatencyFromMSIRange>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e331      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035d4:	f043 0308 	orr.w	r3, r3, #8
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fe2b 	bl	8003250 <LL_RCC_MSI_SetCalibTrimming>
 80035fa:	e021      	b.n	8003640 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003606:	f043 0308 	orr.w	r3, r3, #8
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fe12 	bl	8003250 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fd1f 	bl	8004074 <RCC_SetFlashLatencyFromMSIRange>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e2f6      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003640:	f000 fce0 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 8003644:	4603      	mov	r3, r0
 8003646:	4aa7      	ldr	r2, [pc, #668]	; (80038e4 <HAL_RCC_OscConfig+0x3a8>)
 8003648:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800364a:	4ba7      	ldr	r3, [pc, #668]	; (80038e8 <HAL_RCC_OscConfig+0x3ac>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe fe50 	bl	80022f4 <HAL_InitTick>
 8003654:	4603      	mov	r3, r0
 8003656:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d047      	beq.n	80036ee <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	e2e5      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d02c      	beq.n	80036c4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800366a:	f7ff fd9e 	bl	80031aa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800366e:	f7fe fad1 	bl	8001c14 <HAL_GetTick>
 8003672:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003676:	f7fe facd 	bl	8001c14 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e2d2      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003688:	f7ff fdab 	bl	80031e2 <LL_RCC_MSI_IsReady>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f1      	beq.n	8003676 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800369c:	f043 0308 	orr.w	r3, r3, #8
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fdc7 	bl	8003250 <LL_RCC_MSI_SetCalibTrimming>
 80036c2:	e015      	b.n	80036f0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036c4:	f7ff fd7f 	bl	80031c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036c8:	f7fe faa4 	bl	8001c14 <HAL_GetTick>
 80036cc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036d0:	f7fe faa0 	bl	8001c14 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e2a5      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80036e2:	f7ff fd7e 	bl	80031e2 <LL_RCC_MSI_IsReady>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f1      	bne.n	80036d0 <HAL_RCC_OscConfig+0x194>
 80036ec:	e000      	b.n	80036f0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80036ee:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d058      	beq.n	80037ae <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d005      	beq.n	800370e <HAL_RCC_OscConfig+0x1d2>
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	2b0c      	cmp	r3, #12
 8003706:	d108      	bne.n	800371a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b03      	cmp	r3, #3
 800370c:	d105      	bne.n	800371a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d14b      	bne.n	80037ae <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e289      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800371a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003738:	d102      	bne.n	8003740 <HAL_RCC_OscConfig+0x204>
 800373a:	f7ff fc86 	bl	800304a <LL_RCC_HSE_Enable>
 800373e:	e00d      	b.n	800375c <HAL_RCC_OscConfig+0x220>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003748:	d104      	bne.n	8003754 <HAL_RCC_OscConfig+0x218>
 800374a:	f7ff fc51 	bl	8002ff0 <LL_RCC_HSE_EnableTcxo>
 800374e:	f7ff fc7c 	bl	800304a <LL_RCC_HSE_Enable>
 8003752:	e003      	b.n	800375c <HAL_RCC_OscConfig+0x220>
 8003754:	f7ff fc87 	bl	8003066 <LL_RCC_HSE_Disable>
 8003758:	f7ff fc58 	bl	800300c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d012      	beq.n	800378a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fa56 	bl	8001c14 <HAL_GetTick>
 8003768:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800376c:	f7fe fa52 	bl	8001c14 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	; 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e257      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800377e:	f7ff fc80 	bl	8003082 <LL_RCC_HSE_IsReady>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f1      	beq.n	800376c <HAL_RCC_OscConfig+0x230>
 8003788:	e011      	b.n	80037ae <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378a:	f7fe fa43 	bl	8001c14 <HAL_GetTick>
 800378e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003792:	f7fe fa3f 	bl	8001c14 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b64      	cmp	r3, #100	; 0x64
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e244      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80037a4:	f7ff fc6d 	bl	8003082 <LL_RCC_HSE_IsReady>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f1      	bne.n	8003792 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d046      	beq.n	8003848 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d005      	beq.n	80037cc <HAL_RCC_OscConfig+0x290>
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b0c      	cmp	r3, #12
 80037c4:	d10e      	bne.n	80037e4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d10b      	bne.n	80037e4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e22a      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fc8e 	bl	80030fe <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80037e2:	e031      	b.n	8003848 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d019      	beq.n	8003820 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ec:	f7ff fc5a 	bl	80030a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fe fa10 	bl	8001c14 <HAL_GetTick>
 80037f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f8:	f7fe fa0c 	bl	8001c14 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e211      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800380a:	f7ff fc67 	bl	80030dc <LL_RCC_HSI_IsReady>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f1      	beq.n	80037f8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff fc70 	bl	80030fe <LL_RCC_HSI_SetCalibTrimming>
 800381e:	e013      	b.n	8003848 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003820:	f7ff fc4e 	bl	80030c0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fe f9f6 	bl	8001c14 <HAL_GetTick>
 8003828:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382c:	f7fe f9f2 	bl	8001c14 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e1f7      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800383e:	f7ff fc4d 	bl	80030dc <LL_RCC_HSI_IsReady>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f1      	bne.n	800382c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d06e      	beq.n	8003932 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d056      	beq.n	800390a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003864:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69da      	ldr	r2, [r3, #28]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	429a      	cmp	r2, r3
 8003872:	d031      	beq.n	80038d8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d006      	beq.n	800388c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e1d0      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d013      	beq.n	80038be <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003896:	f7ff fc67 	bl	8003168 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800389a:	f7fe f9bb 	bl	8001c14 <HAL_GetTick>
 800389e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a2:	f7fe f9b7 	bl	8001c14 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b11      	cmp	r3, #17
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e1bc      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80038b4:	f7ff fc68 	bl	8003188 <LL_RCC_LSI_IsReady>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f1      	bne.n	80038a2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80038be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c6:	f023 0210 	bic.w	r2, r3, #16
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d8:	f7ff fc36 	bl	8003148 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038dc:	f7fe f99a 	bl	8001c14 <HAL_GetTick>
 80038e0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80038e2:	e00c      	b.n	80038fe <HAL_RCC_OscConfig+0x3c2>
 80038e4:	20000004 	.word	0x20000004
 80038e8:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ec:	f7fe f992 	bl	8001c14 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b11      	cmp	r3, #17
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e197      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80038fe:	f7ff fc43 	bl	8003188 <LL_RCC_LSI_IsReady>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f1      	beq.n	80038ec <HAL_RCC_OscConfig+0x3b0>
 8003908:	e013      	b.n	8003932 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800390a:	f7ff fc2d 	bl	8003168 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390e:	f7fe f981 	bl	8001c14 <HAL_GetTick>
 8003912:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003916:	f7fe f97d 	bl	8001c14 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b11      	cmp	r3, #17
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e182      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003928:	f7ff fc2e 	bl	8003188 <LL_RCC_LSI_IsReady>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f1      	bne.n	8003916 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80d8 	beq.w	8003af0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003940:	f7ff fb44 	bl	8002fcc <LL_PWR_IsEnabledBkUpAccess>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d113      	bne.n	8003972 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800394a:	f7ff fb25 	bl	8002f98 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800394e:	f7fe f961 	bl	8001c14 <HAL_GetTick>
 8003952:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003956:	f7fe f95d 	bl	8001c14 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e162      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003968:	f7ff fb30 	bl	8002fcc <LL_PWR_IsEnabledBkUpAccess>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f1      	beq.n	8003956 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d07b      	beq.n	8003a72 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2b85      	cmp	r3, #133	; 0x85
 8003980:	d003      	beq.n	800398a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2b05      	cmp	r3, #5
 8003988:	d109      	bne.n	800399e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800398a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003996:	f043 0304 	orr.w	r3, r3, #4
 800399a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399e:	f7fe f939 	bl	8001c14 <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ba:	f7fe f92b 	bl	8001c14 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e12e      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80039d0:	f7ff fba9 	bl	8003126 <LL_RCC_LSE_IsReady>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0ef      	beq.n	80039ba <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b81      	cmp	r3, #129	; 0x81
 80039e0:	d003      	beq.n	80039ea <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	2b85      	cmp	r3, #133	; 0x85
 80039e8:	d121      	bne.n	8003a2e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ea:	f7fe f913 	bl	8001c14 <HAL_GetTick>
 80039ee:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80039f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a04:	e00a      	b.n	8003a1c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7fe f905 	bl	8001c14 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e108      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ec      	beq.n	8003a06 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003a2c:	e060      	b.n	8003af0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2e:	f7fe f8f1 	bl	8001c14 <HAL_GetTick>
 8003a32:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7fe f8e3 	bl	8001c14 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e0e6      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1ec      	bne.n	8003a4a <HAL_RCC_OscConfig+0x50e>
 8003a70:	e03e      	b.n	8003af0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a72:	f7fe f8cf 	bl	8001c14 <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fe f8c1 	bl	8001c14 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e0c4      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ec      	bne.n	8003a8e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab4:	f7fe f8ae 	bl	8001c14 <HAL_GetTick>
 8003ab8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac6:	f023 0301 	bic.w	r3, r3, #1
 8003aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7fe f8a0 	bl	8001c14 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e0a3      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003ae6:	f7ff fb1e 	bl	8003126 <LL_RCC_LSE_IsReady>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ef      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8099 	beq.w	8003c2c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	2b0c      	cmp	r3, #12
 8003afe:	d06c      	beq.n	8003bda <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d14b      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b08:	f7ff fc74 	bl	80033f4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe f882 	bl	8001c14 <HAL_GetTick>
 8003b10:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b14:	f7fe f87e 	bl	8001c14 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b0a      	cmp	r3, #10
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e083      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003b26:	f7ff fc73 	bl	8003410 <LL_RCC_PLL_IsReady>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f1      	bne.n	8003b14 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	4b40      	ldr	r3, [pc, #256]	; (8003c38 <HAL_RCC_OscConfig+0x6fc>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b42:	4311      	orrs	r1, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b48:	0212      	lsls	r2, r2, #8
 8003b4a:	4311      	orrs	r1, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b50:	4311      	orrs	r1, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b56:	4311      	orrs	r1, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b66:	f7ff fc37 	bl	80033d8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b78:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7a:	f7fe f84b 	bl	8001c14 <HAL_GetTick>
 8003b7e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b82:	f7fe f847 	bl	8001c14 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b0a      	cmp	r3, #10
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e04c      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003b94:	f7ff fc3c 	bl	8003410 <LL_RCC_PLL_IsReady>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f1      	beq.n	8003b82 <HAL_RCC_OscConfig+0x646>
 8003b9e:	e045      	b.n	8003c2c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba0:	f7ff fc28 	bl	80033f4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fe f836 	bl	8001c14 <HAL_GetTick>
 8003ba8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fe f832 	bl	8001c14 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b0a      	cmp	r3, #10
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e037      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003bbe:	f7ff fc27 	bl	8003410 <LL_RCC_PLL_IsReady>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f1      	bne.n	8003bac <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bd2:	4b1a      	ldr	r3, [pc, #104]	; (8003c3c <HAL_RCC_OscConfig+0x700>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60cb      	str	r3, [r1, #12]
 8003bd8:	e028      	b.n	8003c2c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e023      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f003 0203 	and.w	r2, r3, #3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d115      	bne.n	8003c28 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d10e      	bne.n	8003c28 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d106      	bne.n	8003c28 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3720      	adds	r7, #32
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	11c1808c 	.word	0x11c1808c
 8003c3c:	eefefffc 	.word	0xeefefffc

08003c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e12c      	b.n	8003eae <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c54:	4b98      	ldr	r3, [pc, #608]	; (8003eb8 <HAL_RCC_ClockConfig+0x278>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d91b      	bls.n	8003c9a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c62:	4b95      	ldr	r3, [pc, #596]	; (8003eb8 <HAL_RCC_ClockConfig+0x278>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 0207 	bic.w	r2, r3, #7
 8003c6a:	4993      	ldr	r1, [pc, #588]	; (8003eb8 <HAL_RCC_ClockConfig+0x278>)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c72:	f7fd ffcf 	bl	8001c14 <HAL_GetTick>
 8003c76:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c7a:	f7fd ffcb 	bl	8001c14 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e110      	b.n	8003eae <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8c:	4b8a      	ldr	r3, [pc, #552]	; (8003eb8 <HAL_RCC_ClockConfig+0x278>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d1ef      	bne.n	8003c7a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fb02 	bl	80032b4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003cb0:	f7fd ffb0 	bl	8001c14 <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003cb8:	f7fd ffac 	bl	8001c14 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0f1      	b.n	8003eae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003cca:	f7ff fbdf 	bl	800348c <LL_RCC_IsActiveFlag_HPRE>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f1      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d016      	beq.n	8003d0e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff faf8 	bl	80032da <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003cea:	f7fd ff93 	bl	8001c14 <HAL_GetTick>
 8003cee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003cf2:	f7fd ff8f 	bl	8001c14 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e0d4      	b.n	8003eae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003d04:	f7ff fbd3 	bl	80034ae <LL_RCC_IsActiveFlag_C2HPRE>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f1      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff faf0 	bl	8003304 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d24:	f7fd ff76 	bl	8001c14 <HAL_GetTick>
 8003d28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d2c:	f7fd ff72 	bl	8001c14 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e0b7      	b.n	8003eae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003d3e:	f7ff fbc8 	bl	80034d2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f1      	beq.n	8003d2c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d016      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff fae9 	bl	8003330 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d5e:	f7fd ff59 	bl	8001c14 <HAL_GetTick>
 8003d62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d66:	f7fd ff55 	bl	8001c14 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e09a      	b.n	8003eae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003d78:	f7ff fbbd 	bl	80034f6 <LL_RCC_IsActiveFlag_PPRE1>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f1      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d017      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fade 	bl	8003356 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d9a:	f7fd ff3b 	bl	8001c14 <HAL_GetTick>
 8003d9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003da2:	f7fd ff37 	bl	8001c14 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e07c      	b.n	8003eae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003db4:	f7ff fbb0 	bl	8003518 <LL_RCC_IsActiveFlag_PPRE2>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f1      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d043      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d106      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003dd2:	f7ff f956 	bl	8003082 <LL_RCC_HSE_IsReady>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d11e      	bne.n	8003e1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e066      	b.n	8003eae <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d106      	bne.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003de8:	f7ff fb12 	bl	8003410 <LL_RCC_PLL_IsReady>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d113      	bne.n	8003e1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e05b      	b.n	8003eae <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003dfe:	f7ff f9f0 	bl	80031e2 <LL_RCC_MSI_IsReady>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d108      	bne.n	8003e1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e050      	b.n	8003eae <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003e0c:	f7ff f966 	bl	80030dc <LL_RCC_HSI_IsReady>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e049      	b.n	8003eae <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fa2a 	bl	8003278 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e24:	f7fd fef6 	bl	8001c14 <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2c:	f7fd fef2 	bl	8001c14 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e035      	b.n	8003eae <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	f7ff fa2c 	bl	800329e <LL_RCC_GetSysClkSource>
 8003e46:	4602      	mov	r2, r0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d1ec      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e52:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <HAL_RCC_ClockConfig+0x278>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d21b      	bcs.n	8003e98 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e60:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <HAL_RCC_ClockConfig+0x278>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f023 0207 	bic.w	r2, r3, #7
 8003e68:	4913      	ldr	r1, [pc, #76]	; (8003eb8 <HAL_RCC_ClockConfig+0x278>)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e70:	f7fd fed0 	bl	8001c14 <HAL_GetTick>
 8003e74:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e78:	f7fd fecc 	bl	8001c14 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e011      	b.n	8003eae <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_RCC_ClockConfig+0x278>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1ef      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003e98:	f000 f8b4 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <HAL_RCC_ClockConfig+0x27c>)
 8003ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003ea2:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <HAL_RCC_ClockConfig+0x280>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe fa24 	bl	80022f4 <HAL_InitTick>
 8003eac:	4603      	mov	r3, r0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	58004000 	.word	0x58004000
 8003ebc:	20000004 	.word	0x20000004
 8003ec0:	20000008 	.word	0x20000008

08003ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ed2:	f7ff f9e4 	bl	800329e <LL_RCC_GetSysClkSource>
 8003ed6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ed8:	f7ff facd 	bl	8003476 <LL_RCC_PLL_GetMainSource>
 8003edc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x2c>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b0c      	cmp	r3, #12
 8003ee8:	d139      	bne.n	8003f5e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d136      	bne.n	8003f5e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003ef0:	f7ff f987 	bl	8003202 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d115      	bne.n	8003f26 <HAL_RCC_GetSysClockFreq+0x62>
 8003efa:	f7ff f982 	bl	8003202 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d106      	bne.n	8003f12 <HAL_RCC_GetSysClockFreq+0x4e>
 8003f04:	f7ff f98d 	bl	8003222 <LL_RCC_MSI_GetRange>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	e005      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0x5a>
 8003f12:	f7ff f991 	bl	8003238 <LL_RCC_MSI_GetRangeAfterStandby>
 8003f16:	4603      	mov	r3, r0
 8003f18:	0a1b      	lsrs	r3, r3, #8
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	4a36      	ldr	r2, [pc, #216]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f24:	e014      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x8c>
 8003f26:	f7ff f96c 	bl	8003202 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d106      	bne.n	8003f3e <HAL_RCC_GetSysClockFreq+0x7a>
 8003f30:	f7ff f977 	bl	8003222 <LL_RCC_MSI_GetRange>
 8003f34:	4603      	mov	r3, r0
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	e005      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0x86>
 8003f3e:	f7ff f97b 	bl	8003238 <LL_RCC_MSI_GetRangeAfterStandby>
 8003f42:	4603      	mov	r3, r0
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	4a2b      	ldr	r2, [pc, #172]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f50:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d115      	bne.n	8003f84 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f5c:	e012      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d102      	bne.n	8003f6a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f64:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x138>)
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	e00c      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d109      	bne.n	8003f84 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003f70:	f7ff f85a 	bl	8003028 <LL_RCC_HSE_IsEnabledDiv2>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d102      	bne.n	8003f80 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x138>)
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e001      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003f80:	4b1f      	ldr	r3, [pc, #124]	; (8004000 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003f82:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f84:	f7ff f98b 	bl	800329e <LL_RCC_GetSysClkSource>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b0c      	cmp	r3, #12
 8003f8c:	d12f      	bne.n	8003fee <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003f8e:	f7ff fa72 	bl	8003476 <LL_RCC_PLL_GetMainSource>
 8003f92:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d003      	beq.n	8003fa2 <HAL_RCC_GetSysClockFreq+0xde>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d003      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xe4>
 8003fa0:	e00d      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003fa2:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x138>)
 8003fa4:	60fb      	str	r3, [r7, #12]
        break;
 8003fa6:	e00d      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003fa8:	f7ff f83e 	bl	8003028 <LL_RCC_HSE_IsEnabledDiv2>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d102      	bne.n	8003fb8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x138>)
 8003fb4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003fb6:	e005      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003fb8:	4b11      	ldr	r3, [pc, #68]	; (8004000 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003fba:	60fb      	str	r3, [r7, #12]
        break;
 8003fbc:	e002      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	60fb      	str	r3, [r7, #12]
        break;
 8003fc2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003fc4:	f7ff fa35 	bl	8003432 <LL_RCC_PLL_GetN>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	fb03 f402 	mul.w	r4, r3, r2
 8003fd0:	f7ff fa46 	bl	8003460 <LL_RCC_PLL_GetDivider>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	3301      	adds	r3, #1
 8003fda:	fbb4 f4f3 	udiv	r4, r4, r3
 8003fde:	f7ff fa34 	bl	800344a <LL_RCC_PLL_GetR>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	0f5b      	lsrs	r3, r3, #29
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	fbb4 f3f3 	udiv	r3, r4, r3
 8003fec:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003fee:	697b      	ldr	r3, [r7, #20]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd90      	pop	{r4, r7, pc}
 8003ff8:	0800b9e8 	.word	0x0800b9e8
 8003ffc:	00f42400 	.word	0x00f42400
 8004000:	01e84800 	.word	0x01e84800

08004004 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004004:	b598      	push	{r3, r4, r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004008:	f7ff ff5c 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 800400c:	4604      	mov	r4, r0
 800400e:	f7ff f9b5 	bl	800337c <LL_RCC_GetAHBPrescaler>
 8004012:	4603      	mov	r3, r0
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	4a03      	ldr	r2, [pc, #12]	; (8004028 <HAL_RCC_GetHCLKFreq+0x24>)
 800401c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004020:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004024:	4618      	mov	r0, r3
 8004026:	bd98      	pop	{r3, r4, r7, pc}
 8004028:	0800b988 	.word	0x0800b988

0800402c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800402c:	b598      	push	{r3, r4, r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004030:	f7ff ffe8 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 8004034:	4604      	mov	r4, r0
 8004036:	f7ff f9b9 	bl	80033ac <LL_RCC_GetAPB1Prescaler>
 800403a:	4603      	mov	r3, r0
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	4a03      	ldr	r2, [pc, #12]	; (800404c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004044:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	bd98      	pop	{r3, r4, r7, pc}
 800404c:	0800b9c8 	.word	0x0800b9c8

08004050 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004050:	b598      	push	{r3, r4, r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004054:	f7ff ffd6 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 8004058:	4604      	mov	r4, r0
 800405a:	f7ff f9b2 	bl	80033c2 <LL_RCC_GetAPB2Prescaler>
 800405e:	4603      	mov	r3, r0
 8004060:	0adb      	lsrs	r3, r3, #11
 8004062:	4a03      	ldr	r2, [pc, #12]	; (8004070 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004068:	fa24 f303 	lsr.w	r3, r4, r3
}
 800406c:	4618      	mov	r0, r3
 800406e:	bd98      	pop	{r3, r4, r7, pc}
 8004070:	0800b9c8 	.word	0x0800b9c8

08004074 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	4a10      	ldr	r2, [pc, #64]	; (80040c8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800408a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800408c:	f7ff f981 	bl	8003392 <LL_RCC_GetAHB3Prescaler>
 8004090:	4603      	mov	r3, r0
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	4a0c      	ldr	r2, [pc, #48]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800409a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	0c9c      	lsrs	r4, r3, #18
 80040b0:	f7fe ff80 	bl	8002fb4 <HAL_PWREx_GetVoltageRange>
 80040b4:	4603      	mov	r3, r0
 80040b6:	4619      	mov	r1, r3
 80040b8:	4620      	mov	r0, r4
 80040ba:	f000 f80b 	bl	80040d4 <RCC_SetFlashLatency>
 80040be:	4603      	mov	r3, r0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd90      	pop	{r4, r7, pc}
 80040c8:	0800b9e8 	.word	0x0800b9e8
 80040cc:	0800b988 	.word	0x0800b988
 80040d0:	431bde83 	.word	0x431bde83

080040d4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08e      	sub	sp, #56	; 0x38
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80040de:	4a3a      	ldr	r2, [pc, #232]	; (80041c8 <RCC_SetFlashLatency+0xf4>)
 80040e0:	f107 0320 	add.w	r3, r7, #32
 80040e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040e8:	6018      	str	r0, [r3, #0]
 80040ea:	3304      	adds	r3, #4
 80040ec:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80040ee:	4a37      	ldr	r2, [pc, #220]	; (80041cc <RCC_SetFlashLatency+0xf8>)
 80040f0:	f107 0318 	add.w	r3, r7, #24
 80040f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040f8:	6018      	str	r0, [r3, #0]
 80040fa:	3304      	adds	r3, #4
 80040fc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80040fe:	4a34      	ldr	r2, [pc, #208]	; (80041d0 <RCC_SetFlashLatency+0xfc>)
 8004100:	f107 030c 	add.w	r3, r7, #12
 8004104:	ca07      	ldmia	r2, {r0, r1, r2}
 8004106:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800410a:	2300      	movs	r3, #0
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004114:	d11b      	bne.n	800414e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004116:	2300      	movs	r3, #0
 8004118:	633b      	str	r3, [r7, #48]	; 0x30
 800411a:	e014      	b.n	8004146 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	3338      	adds	r3, #56	; 0x38
 8004122:	443b      	add	r3, r7
 8004124:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004128:	461a      	mov	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4293      	cmp	r3, r2
 800412e:	d807      	bhi.n	8004140 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	3338      	adds	r3, #56	; 0x38
 8004136:	443b      	add	r3, r7
 8004138:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800413e:	e021      	b.n	8004184 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004142:	3301      	adds	r3, #1
 8004144:	633b      	str	r3, [r7, #48]	; 0x30
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	2b02      	cmp	r3, #2
 800414a:	d9e7      	bls.n	800411c <RCC_SetFlashLatency+0x48>
 800414c:	e01a      	b.n	8004184 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800414e:	2300      	movs	r3, #0
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004152:	e014      	b.n	800417e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	3338      	adds	r3, #56	; 0x38
 800415a:	443b      	add	r3, r7
 800415c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004160:	461a      	mov	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4293      	cmp	r3, r2
 8004166:	d807      	bhi.n	8004178 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	3338      	adds	r3, #56	; 0x38
 800416e:	443b      	add	r3, r7
 8004170:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004176:	e005      	b.n	8004184 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417a:	3301      	adds	r3, #1
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004180:	2b02      	cmp	r3, #2
 8004182:	d9e7      	bls.n	8004154 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004184:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <RCC_SetFlashLatency+0x100>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f023 0207 	bic.w	r2, r3, #7
 800418c:	4911      	ldr	r1, [pc, #68]	; (80041d4 <RCC_SetFlashLatency+0x100>)
 800418e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004190:	4313      	orrs	r3, r2
 8004192:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004194:	f7fd fd3e 	bl	8001c14 <HAL_GetTick>
 8004198:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800419a:	e008      	b.n	80041ae <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800419c:	f7fd fd3a 	bl	8001c14 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e007      	b.n	80041be <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <RCC_SetFlashLatency+0x100>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d1ef      	bne.n	800419c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3738      	adds	r7, #56	; 0x38
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	0800b948 	.word	0x0800b948
 80041cc:	0800b950 	.word	0x0800b950
 80041d0:	0800b958 	.word	0x0800b958
 80041d4:	58004000 	.word	0x58004000

080041d8 <LL_RCC_LSE_IsReady>:
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d101      	bne.n	80041f0 <LL_RCC_LSE_IsReady+0x18>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <LL_RCC_LSE_IsReady+0x1a>
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <LL_RCC_SetUSARTClockSource>:
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004206:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	0c1b      	lsrs	r3, r3, #16
 800420e:	43db      	mvns	r3, r3
 8004210:	401a      	ands	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr

0800422a <LL_RCC_SetI2SClockSource>:
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800423e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <LL_RCC_SetLPUARTClockSource>:
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800425c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004264:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr

0800427e <LL_RCC_SetI2CClockSource>:
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004296:	43db      	mvns	r3, r3
 8004298:	401a      	ands	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80042a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr

080042b6 <LL_RCC_SetLPTIMClockSource>:
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80042be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	0c1b      	lsrs	r3, r3, #16
 80042ca:	041b      	lsls	r3, r3, #16
 80042cc:	43db      	mvns	r3, r3
 80042ce:	401a      	ands	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	041b      	lsls	r3, r3, #16
 80042d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <LL_RCC_SetRNGClockSource>:
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80042f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80042fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	bc80      	pop	{r7}
 8004310:	4770      	bx	lr

08004312 <LL_RCC_SetADCClockSource>:
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800431a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <LL_RCC_SetRTCClockSource>:
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <LL_RCC_GetRTCClockSource>:
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004376:	4618      	mov	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr

0800437e <LL_RCC_ForceBackupDomainReset>:
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800438e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004396:	bf00      	nop
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr

0800439e <LL_RCC_ReleaseBackupDomainReset>:
{
 800439e:	b480      	push	{r7}
 80043a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80043a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr
	...

080043c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80043cc:	2300      	movs	r3, #0
 80043ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80043d0:	2300      	movs	r3, #0
 80043d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d058      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80043e0:	f7fe fdda 	bl	8002f98 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043e4:	f7fd fc16 	bl	8001c14 <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80043ea:	e009      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ec:	f7fd fc12 	bl	8001c14 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d902      	bls.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	74fb      	strb	r3, [r7, #19]
        break;
 80043fe:	e006      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004400:	4b7b      	ldr	r3, [pc, #492]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440c:	d1ee      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800440e:	7cfb      	ldrb	r3, [r7, #19]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d13c      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004414:	f7ff ffa7 	bl	8004366 <LL_RCC_GetRTCClockSource>
 8004418:	4602      	mov	r2, r0
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	429a      	cmp	r2, r3
 8004420:	d00f      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004430:	f7ff ffa5 	bl	800437e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004434:	f7ff ffb3 	bl	800439e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004438:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d014      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fd fbe2 	bl	8001c14 <HAL_GetTick>
 8004450:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004452:	e00b      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fd fbde 	bl	8001c14 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d902      	bls.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	74fb      	strb	r3, [r7, #19]
            break;
 800446a:	e004      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800446c:	f7ff feb4 	bl	80041d8 <LL_RCC_LSE_IsReady>
 8004470:	4603      	mov	r3, r0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d1ee      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004476:	7cfb      	ldrb	r3, [r7, #19]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d105      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff ff5b 	bl	800433c <LL_RCC_SetRTCClockSource>
 8004486:	e004      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	74bb      	strb	r3, [r7, #18]
 800448c:	e001      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448e:	7cfb      	ldrb	r3, [r7, #19]
 8004490:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d004      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fea9 	bl	80041fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d004      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fe9e 	bl	80041fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0320 	and.w	r3, r3, #32
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fec0 	bl	8004254 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fee6 	bl	80042b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d004      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fedb 	bl	80042b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004508:	2b00      	cmp	r3, #0
 800450a:	d004      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff fed0 	bl	80042b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d004      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff fea9 	bl	800427e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b00      	cmp	r3, #0
 8004536:	d004      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff fe9e 	bl	800427e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454a:	2b00      	cmp	r3, #0
 800454c:	d004      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fe93 	bl	800427e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	2b00      	cmp	r3, #0
 8004562:	d011      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fe5e 	bl	800422a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004576:	d107      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004586:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d010      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fea5 	bl	80042e8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d107      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80045a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d011      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fea3 	bl	8004312 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d4:	d107      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80045e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	58000400 	.word	0x58000400

080045f4 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004604:	4904      	ldr	r1, [pc, #16]	; (8004618 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4313      	orrs	r3, r2
 800460a:	608b      	str	r3, [r1, #8]
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	58000400 	.word	0x58000400

0800461c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004620:	4b05      	ldr	r3, [pc, #20]	; (8004638 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	4a04      	ldr	r2, [pc, #16]	; (8004638 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800462c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004630:	bf00      	nop
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	58000400 	.word	0x58000400

0800463c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004646:	4a04      	ldr	r2, [pc, #16]	; (8004658 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004648:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800464c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004650:	bf00      	nop
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	58000400 	.word	0x58000400

0800465c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004660:	4b03      	ldr	r3, [pc, #12]	; (8004670 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004662:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004666:	619a      	str	r2, [r3, #24]
}
 8004668:	bf00      	nop
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr
 8004670:	58000400 	.word	0x58000400

08004674 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b02      	cmp	r3, #2
 8004682:	d101      	bne.n	8004688 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	58000400 	.word	0x58000400

08004698 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d101      	bne.n	80046ac <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	58000400 	.word	0x58000400

080046bc <LL_RCC_RF_DisableReset>:
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80046c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <LL_RCC_IsRFUnderReset>:
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80046e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046f0:	d101      	bne.n	80046f6 <LL_RCC_IsRFUnderReset+0x1a>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <LL_RCC_IsRFUnderReset+0x1c>
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <LL_EXTI_EnableIT_32_63+0x24>)
 800470a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800470e:	4905      	ldr	r1, [pc, #20]	; (8004724 <LL_EXTI_EnableIT_32_63+0x24>)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	58000800 	.word	0x58000800

08004728 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d103      	bne.n	800473e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	73fb      	strb	r3, [r7, #15]
    return status;
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	e052      	b.n	80047e4 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	799b      	ldrb	r3, [r3, #6]
 8004746:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8004748:	7bbb      	ldrb	r3, [r7, #14]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_SUBGHZ_Init+0x2c>
 800474e:	7bbb      	ldrb	r3, [r7, #14]
 8004750:	2b03      	cmp	r3, #3
 8004752:	d109      	bne.n	8004768 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fd fa40 	bl	8001be0 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004760:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004764:	f7ff ffcc 	bl	8004700 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8004768:	7bbb      	ldrb	r3, [r7, #14]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d126      	bne.n	80047bc <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004774:	f7ff ffa2 	bl	80046bc <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004778:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <HAL_SUBGHZ_Init+0xc4>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	0cdb      	lsrs	r3, r3, #19
 8004786:	2264      	movs	r2, #100	; 0x64
 8004788:	fb02 f303 	mul.w	r3, r2, r3
 800478c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	609a      	str	r2, [r3, #8]
        break;
 800479e:	e007      	b.n	80047b0 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80047a6:	f7ff ff99 	bl	80046dc <LL_RCC_IsRFUnderReset>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1ee      	bne.n	800478e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80047b0:	f7ff ff34 	bl	800461c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80047b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80047b8:	f7ff ff1c 	bl	80045f4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80047bc:	f7ff ff4e 	bl	800465c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 faac 	bl	8004d28 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	719a      	strb	r2, [r3, #6]

  return status;
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20000004 	.word	0x20000004

080047f0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	461a      	mov	r2, r3
 80047fc:	460b      	mov	r3, r1
 80047fe:	817b      	strh	r3, [r7, #10]
 8004800:	4613      	mov	r3, r2
 8004802:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	799b      	ldrb	r3, [r3, #6]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b01      	cmp	r3, #1
 800480c:	d14a      	bne.n	80048a4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	795b      	ldrb	r3, [r3, #5]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004816:	2302      	movs	r3, #2
 8004818:	e045      	b.n	80048a6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2202      	movs	r2, #2
 8004824:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fb4c 	bl	8004ec4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800482c:	f7ff ff06 	bl	800463c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004830:	210d      	movs	r1, #13
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fa98 	bl	8004d68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004838:	897b      	ldrh	r3, [r7, #10]
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	b29b      	uxth	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	4619      	mov	r1, r3
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 fa90 	bl	8004d68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004848:	897b      	ldrh	r3, [r7, #10]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	4619      	mov	r1, r3
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fa8a 	bl	8004d68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004854:	2300      	movs	r3, #0
 8004856:	82bb      	strh	r3, [r7, #20]
 8004858:	e00a      	b.n	8004870 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800485a:	8abb      	ldrh	r3, [r7, #20]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	4413      	add	r3, r2
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	4619      	mov	r1, r3
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fa7f 	bl	8004d68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800486a:	8abb      	ldrh	r3, [r7, #20]
 800486c:	3301      	adds	r3, #1
 800486e:	82bb      	strh	r3, [r7, #20]
 8004870:	8aba      	ldrh	r2, [r7, #20]
 8004872:	893b      	ldrh	r3, [r7, #8]
 8004874:	429a      	cmp	r2, r3
 8004876:	d3f0      	bcc.n	800485a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004878:	f7ff fed0 	bl	800461c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fb45 	bl	8004f0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	75fb      	strb	r3, [r7, #23]
 800488e:	e001      	b.n	8004894 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	715a      	strb	r2, [r3, #5]

    return status;
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	e000      	b.n	80048a6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b088      	sub	sp, #32
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	461a      	mov	r2, r3
 80048ba:	460b      	mov	r3, r1
 80048bc:	817b      	strh	r3, [r7, #10]
 80048be:	4613      	mov	r3, r2
 80048c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	799b      	ldrb	r3, [r3, #6]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d14a      	bne.n	8004966 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	795b      	ldrb	r3, [r3, #5]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_SUBGHZ_ReadRegisters+0x2e>
 80048d8:	2302      	movs	r3, #2
 80048da:	e045      	b.n	8004968 <HAL_SUBGHZ_ReadRegisters+0xba>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 faee 	bl	8004ec4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80048e8:	f7ff fea8 	bl	800463c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80048ec:	211d      	movs	r1, #29
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 fa3a 	bl	8004d68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80048f4:	897b      	ldrh	r3, [r7, #10]
 80048f6:	0a1b      	lsrs	r3, r3, #8
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	4619      	mov	r1, r3
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 fa32 	bl	8004d68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004904:	897b      	ldrh	r3, [r7, #10]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	4619      	mov	r1, r3
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fa2c 	bl	8004d68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004910:	2100      	movs	r1, #0
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fa28 	bl	8004d68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004918:	2300      	movs	r3, #0
 800491a:	82fb      	strh	r3, [r7, #22]
 800491c:	e009      	b.n	8004932 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800491e:	69b9      	ldr	r1, [r7, #24]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fa77 	bl	8004e14 <SUBGHZSPI_Receive>
      pData++;
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	3301      	adds	r3, #1
 800492a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800492c:	8afb      	ldrh	r3, [r7, #22]
 800492e:	3301      	adds	r3, #1
 8004930:	82fb      	strh	r3, [r7, #22]
 8004932:	8afa      	ldrh	r2, [r7, #22]
 8004934:	893b      	ldrh	r3, [r7, #8]
 8004936:	429a      	cmp	r2, r3
 8004938:	d3f1      	bcc.n	800491e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800493a:	f7ff fe6f 	bl	800461c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fae4 	bl	8004f0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e001      	b.n	8004956 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	715a      	strb	r2, [r3, #5]

    return status;
 8004962:	7ffb      	ldrb	r3, [r7, #31]
 8004964:	e000      	b.n	8004968 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004966:	2302      	movs	r3, #2
  }
}
 8004968:	4618      	mov	r0, r3
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	461a      	mov	r2, r3
 800497c:	460b      	mov	r3, r1
 800497e:	72fb      	strb	r3, [r7, #11]
 8004980:	4613      	mov	r3, r2
 8004982:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	799b      	ldrb	r3, [r3, #6]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b01      	cmp	r3, #1
 800498c:	d14a      	bne.n	8004a24 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	795b      	ldrb	r3, [r3, #5]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004996:	2302      	movs	r3, #2
 8004998:	e045      	b.n	8004a26 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fa8f 	bl	8004ec4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80049a6:	7afb      	ldrb	r3, [r7, #11]
 80049a8:	2b84      	cmp	r3, #132	; 0x84
 80049aa:	d002      	beq.n	80049b2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80049ac:	7afb      	ldrb	r3, [r7, #11]
 80049ae:	2b94      	cmp	r3, #148	; 0x94
 80049b0:	d103      	bne.n	80049ba <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	711a      	strb	r2, [r3, #4]
 80049b8:	e002      	b.n	80049c0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80049c0:	f7ff fe3c 	bl	800463c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80049c4:	7afb      	ldrb	r3, [r7, #11]
 80049c6:	4619      	mov	r1, r3
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f9cd 	bl	8004d68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80049ce:	2300      	movs	r3, #0
 80049d0:	82bb      	strh	r3, [r7, #20]
 80049d2:	e00a      	b.n	80049ea <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80049d4:	8abb      	ldrh	r3, [r7, #20]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	4413      	add	r3, r2
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	4619      	mov	r1, r3
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f9c2 	bl	8004d68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80049e4:	8abb      	ldrh	r3, [r7, #20]
 80049e6:	3301      	adds	r3, #1
 80049e8:	82bb      	strh	r3, [r7, #20]
 80049ea:	8aba      	ldrh	r2, [r7, #20]
 80049ec:	893b      	ldrh	r3, [r7, #8]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d3f0      	bcc.n	80049d4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80049f2:	f7ff fe13 	bl	800461c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80049f6:	7afb      	ldrb	r3, [r7, #11]
 80049f8:	2b84      	cmp	r3, #132	; 0x84
 80049fa:	d002      	beq.n	8004a02 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fa85 	bl	8004f0c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
 8004a0e:	e001      	b.n	8004a14 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	715a      	strb	r2, [r3, #5]

    return status;
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	e000      	b.n	8004a26 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b088      	sub	sp, #32
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	72fb      	strb	r3, [r7, #11]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	799b      	ldrb	r3, [r3, #6]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d13d      	bne.n	8004acc <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	795b      	ldrb	r3, [r3, #5]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e038      	b.n	8004ace <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fa2e 	bl	8004ec4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a68:	f7ff fde8 	bl	800463c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004a6c:	7afb      	ldrb	r3, [r7, #11]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f979 	bl	8004d68 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004a76:	2100      	movs	r1, #0
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f975 	bl	8004d68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004a7e:	2300      	movs	r3, #0
 8004a80:	82fb      	strh	r3, [r7, #22]
 8004a82:	e009      	b.n	8004a98 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004a84:	69b9      	ldr	r1, [r7, #24]
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f9c4 	bl	8004e14 <SUBGHZSPI_Receive>
      pData++;
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004a92:	8afb      	ldrh	r3, [r7, #22]
 8004a94:	3301      	adds	r3, #1
 8004a96:	82fb      	strh	r3, [r7, #22]
 8004a98:	8afa      	ldrh	r2, [r7, #22]
 8004a9a:	893b      	ldrh	r3, [r7, #8]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d3f1      	bcc.n	8004a84 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004aa0:	f7ff fdbc 	bl	800461c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fa31 	bl	8004f0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e001      	b.n	8004abc <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	715a      	strb	r2, [r3, #5]

    return status;
 8004ac8:	7ffb      	ldrb	r3, [r7, #31]
 8004aca:	e000      	b.n	8004ace <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004acc:	2302      	movs	r3, #2
  }
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b086      	sub	sp, #24
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	72fb      	strb	r3, [r7, #11]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	799b      	ldrb	r3, [r3, #6]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d13e      	bne.n	8004b72 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	795b      	ldrb	r3, [r3, #5]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e039      	b.n	8004b74 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f9dc 	bl	8004ec4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004b0c:	f7ff fd96 	bl	800463c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004b10:	210e      	movs	r1, #14
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f928 	bl	8004d68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004b18:	7afb      	ldrb	r3, [r7, #11]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 f923 	bl	8004d68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	82bb      	strh	r3, [r7, #20]
 8004b26:	e00a      	b.n	8004b3e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004b28:	8abb      	ldrh	r3, [r7, #20]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	4619      	mov	r1, r3
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f918 	bl	8004d68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004b38:	8abb      	ldrh	r3, [r7, #20]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	82bb      	strh	r3, [r7, #20]
 8004b3e:	8aba      	ldrh	r2, [r7, #20]
 8004b40:	893b      	ldrh	r3, [r7, #8]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d3f0      	bcc.n	8004b28 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004b46:	f7ff fd69 	bl	800461c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f9de 	bl	8004f0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	75fb      	strb	r3, [r7, #23]
 8004b5c:	e001      	b.n	8004b62 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	715a      	strb	r2, [r3, #5]

    return status;
 8004b6e:	7dfb      	ldrb	r3, [r7, #23]
 8004b70:	e000      	b.n	8004b74 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
  }
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	461a      	mov	r2, r3
 8004b88:	460b      	mov	r3, r1
 8004b8a:	72fb      	strb	r3, [r7, #11]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	799b      	ldrb	r3, [r3, #6]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d141      	bne.n	8004c22 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	795b      	ldrb	r3, [r3, #5]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e03c      	b.n	8004c24 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f987 	bl	8004ec4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004bb6:	f7ff fd41 	bl	800463c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004bba:	211e      	movs	r1, #30
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 f8d3 	bl	8004d68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004bc2:	7afb      	ldrb	r3, [r7, #11]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 f8ce 	bl	8004d68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004bcc:	2100      	movs	r1, #0
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 f8ca 	bl	8004d68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	82fb      	strh	r3, [r7, #22]
 8004bd8:	e009      	b.n	8004bee <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004bda:	69b9      	ldr	r1, [r7, #24]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f919 	bl	8004e14 <SUBGHZSPI_Receive>
      pData++;
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	3301      	adds	r3, #1
 8004be6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004be8:	8afb      	ldrh	r3, [r7, #22]
 8004bea:	3301      	adds	r3, #1
 8004bec:	82fb      	strh	r3, [r7, #22]
 8004bee:	8afa      	ldrh	r2, [r7, #22]
 8004bf0:	893b      	ldrh	r3, [r7, #8]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d3f1      	bcc.n	8004bda <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004bf6:	f7ff fd11 	bl	800461c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f986 	bl	8004f0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	77fb      	strb	r3, [r7, #31]
 8004c0c:	e001      	b.n	8004c12 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	715a      	strb	r2, [r3, #5]

    return status;
 8004c1e:	7ffb      	ldrb	r3, [r7, #31]
 8004c20:	e000      	b.n	8004c24 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004c22:	2302      	movs	r3, #2
  }
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3720      	adds	r7, #32
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004c34:	2300      	movs	r3, #0
 8004c36:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004c38:	f107 020c 	add.w	r2, r7, #12
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	2112      	movs	r1, #18
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff fef4 	bl	8004a2e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004c46:	7b3b      	ldrb	r3, [r7, #12]
 8004c48:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004c4a:	89fb      	ldrh	r3, [r7, #14]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	b21a      	sxth	r2, r3
 8004c50:	7b7b      	ldrb	r3, [r7, #13]
 8004c52:	b21b      	sxth	r3, r3
 8004c54:	4313      	orrs	r3, r2
 8004c56:	b21b      	sxth	r3, r3
 8004c58:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004c5a:	f107 020c 	add.w	r2, r7, #12
 8004c5e:	2302      	movs	r3, #2
 8004c60:	2102      	movs	r1, #2
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff fe84 	bl	8004970 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004c68:	89fb      	ldrh	r3, [r7, #14]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f005 f9fe 	bl	800a074 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004c78:	89fb      	ldrh	r3, [r7, #14]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f005 fa04 	bl	800a090 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004c88:	89fb      	ldrh	r3, [r7, #14]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f005 fa54 	bl	800a140 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004c98:	89fb      	ldrh	r3, [r7, #14]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f005 fa5a 	bl	800a15c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004ca8:	89fb      	ldrh	r3, [r7, #14]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f005 fa60 	bl	800a178 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004cb8:	89fb      	ldrh	r3, [r7, #14]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f005 fa2e 	bl	800a124 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004cc8:	89fb      	ldrh	r3, [r7, #14]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f005 f9ea 	bl	800a0ac <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004cd8:	89fb      	ldrh	r3, [r7, #14]
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00d      	beq.n	8004cfe <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004ce2:	89fb      	ldrh	r3, [r7, #14]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004cec:	2101      	movs	r1, #1
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f005 f9ea 	bl	800a0c8 <HAL_SUBGHZ_CADStatusCallback>
 8004cf4:	e003      	b.n	8004cfe <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f005 f9e5 	bl	800a0c8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004cfe:	89fb      	ldrh	r3, [r7, #14]
 8004d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f005 f9fb 	bl	800a104 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004d0e:	89fb      	ldrh	r3, [r7, #14]
 8004d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f005 fa3b 	bl	800a194 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <SUBGHZSPI_Init+0x3c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a0b      	ldr	r2, [pc, #44]	; (8004d64 <SUBGHZSPI_Init+0x3c>)
 8004d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004d3c:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <SUBGHZSPI_Init+0x3c>)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004d44:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004d46:	4b07      	ldr	r3, [pc, #28]	; (8004d64 <SUBGHZSPI_Init+0x3c>)
 8004d48:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004d4c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004d4e:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <SUBGHZSPI_Init+0x3c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a04      	ldr	r2, [pc, #16]	; (8004d64 <SUBGHZSPI_Init+0x3c>)
 8004d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d58:	6013      	str	r3, [r2, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr
 8004d64:	58010000 	.word	0x58010000

08004d68 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d78:	4b23      	ldr	r3, [pc, #140]	; (8004e08 <SUBGHZSPI_Transmit+0xa0>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	0cdb      	lsrs	r3, r3, #19
 8004d86:	2264      	movs	r2, #100	; 0x64
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	609a      	str	r2, [r3, #8]
      break;
 8004d9e:	e008      	b.n	8004db2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004da6:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <SUBGHZSPI_Transmit+0xa4>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d1ed      	bne.n	8004d8e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004db2:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <SUBGHZSPI_Transmit+0xa8>)
 8004db4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004dbc:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <SUBGHZSPI_Transmit+0xa0>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	0cdb      	lsrs	r3, r3, #19
 8004dca:	2264      	movs	r2, #100	; 0x64
 8004dcc:	fb02 f303 	mul.w	r3, r2, r3
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d105      	bne.n	8004de4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	609a      	str	r2, [r3, #8]
      break;
 8004de2:	e008      	b.n	8004df6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004dea:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <SUBGHZSPI_Transmit+0xa4>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d1ed      	bne.n	8004dd2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004df6:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <SUBGHZSPI_Transmit+0xa4>)
 8004df8:	68db      	ldr	r3, [r3, #12]

  return status;
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000004 	.word	0x20000004
 8004e0c:	58010000 	.word	0x58010000
 8004e10:	5801000c 	.word	0x5801000c

08004e14 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004e22:	4b25      	ldr	r3, [pc, #148]	; (8004eb8 <SUBGHZSPI_Receive+0xa4>)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4613      	mov	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	0cdb      	lsrs	r3, r3, #19
 8004e30:	2264      	movs	r2, #100	; 0x64
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d105      	bne.n	8004e4a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	609a      	str	r2, [r3, #8]
      break;
 8004e48:	e008      	b.n	8004e5c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004e50:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <SUBGHZSPI_Receive+0xa8>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d1ed      	bne.n	8004e38 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004e5c:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <SUBGHZSPI_Receive+0xac>)
 8004e5e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	22ff      	movs	r2, #255	; 0xff
 8004e64:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004e66:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <SUBGHZSPI_Receive+0xa4>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	0cdb      	lsrs	r3, r3, #19
 8004e74:	2264      	movs	r2, #100	; 0x64
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d105      	bne.n	8004e8e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	609a      	str	r2, [r3, #8]
      break;
 8004e8c:	e008      	b.n	8004ea0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004e94:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <SUBGHZSPI_Receive+0xa8>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d1ed      	bne.n	8004e7c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <SUBGHZSPI_Receive+0xa8>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	701a      	strb	r2, [r3, #0]

  return status;
 8004eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	20000004 	.word	0x20000004
 8004ebc:	58010000 	.word	0x58010000
 8004ec0:	5801000c 	.word	0x5801000c

08004ec4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	791b      	ldrb	r3, [r3, #4]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d111      	bne.n	8004ef8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <SUBGHZ_CheckDeviceReady+0x44>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	4413      	add	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004ee4:	f7ff fbaa 	bl	800463c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f9      	bne.n	8004ee8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004ef4:	f7ff fb92 	bl	800461c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f807 	bl	8004f0c <SUBGHZ_WaitOnBusy>
 8004efe:	4603      	mov	r3, r0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20000004 	.word	0x20000004

08004f0c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004f18:	4b12      	ldr	r3, [pc, #72]	; (8004f64 <SUBGHZ_WaitOnBusy+0x58>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4413      	add	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	0d1b      	lsrs	r3, r3, #20
 8004f26:	2264      	movs	r2, #100	; 0x64
 8004f28:	fb02 f303 	mul.w	r3, r2, r3
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004f2e:	f7ff fbb3 	bl	8004698 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004f32:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d105      	bne.n	8004f46 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2202      	movs	r2, #2
 8004f42:	609a      	str	r2, [r3, #8]
      break;
 8004f44:	e009      	b.n	8004f5a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004f4c:	f7ff fb92 	bl	8004674 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d0e9      	beq.n	8004f2e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000004 	.word	0x20000004

08004f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e049      	b.n	800500e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fc ff02 	bl	8001d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	f000 fa90 	bl	80054cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	d001      	beq.n	8005030 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e02e      	b.n	800508e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a16      	ldr	r2, [pc, #88]	; (8005098 <HAL_TIM_Base_Start+0x80>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <HAL_TIM_Base_Start+0x34>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504a:	d115      	bne.n	8005078 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	4b12      	ldr	r3, [pc, #72]	; (800509c <HAL_TIM_Base_Start+0x84>)
 8005054:	4013      	ands	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b06      	cmp	r3, #6
 800505c:	d015      	beq.n	800508a <HAL_TIM_Base_Start+0x72>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005064:	d011      	beq.n	800508a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0201 	orr.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005076:	e008      	b.n	800508a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e000      	b.n	800508c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr
 8005098:	40012c00 	.word	0x40012c00
 800509c:	00010007 	.word	0x00010007

080050a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d122      	bne.n	80050fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d11b      	bne.n	80050fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0202 	mvn.w	r2, #2
 80050cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f9d6 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 80050e8:	e005      	b.n	80050f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f9c9 	bl	8005482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f9d8 	bl	80054a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b04      	cmp	r3, #4
 8005108:	d122      	bne.n	8005150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b04      	cmp	r3, #4
 8005116:	d11b      	bne.n	8005150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0204 	mvn.w	r2, #4
 8005120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f9ac 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 800513c:	e005      	b.n	800514a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f99f 	bl	8005482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f9ae 	bl	80054a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b08      	cmp	r3, #8
 800515c:	d122      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b08      	cmp	r3, #8
 800516a:	d11b      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0208 	mvn.w	r2, #8
 8005174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2204      	movs	r2, #4
 800517a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f982 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 8005190:	e005      	b.n	800519e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f975 	bl	8005482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f984 	bl	80054a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d122      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d11b      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0210 	mvn.w	r2, #16
 80051c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2208      	movs	r2, #8
 80051ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f958 	bl	8005494 <HAL_TIM_IC_CaptureCallback>
 80051e4:	e005      	b.n	80051f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f94b 	bl	8005482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f95a 	bl	80054a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b01      	cmp	r3, #1
 8005204:	d10e      	bne.n	8005224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b01      	cmp	r3, #1
 8005212:	d107      	bne.n	8005224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0201 	mvn.w	r2, #1
 800521c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f926 	bl	8005470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522e:	2b80      	cmp	r3, #128	; 0x80
 8005230:	d10e      	bne.n	8005250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523c:	2b80      	cmp	r3, #128	; 0x80
 800523e:	d107      	bne.n	8005250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fa9f 	bl	800578e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800525e:	d10e      	bne.n	800527e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526a:	2b80      	cmp	r3, #128	; 0x80
 800526c:	d107      	bne.n	800527e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fa91 	bl	80057a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005288:	2b40      	cmp	r3, #64	; 0x40
 800528a:	d10e      	bne.n	80052aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005296:	2b40      	cmp	r3, #64	; 0x40
 8005298:	d107      	bne.n	80052aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f907 	bl	80054b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d10e      	bne.n	80052d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d107      	bne.n	80052d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f06f 0220 	mvn.w	r2, #32
 80052ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fa53 	bl	800577c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052d6:	bf00      	nop
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_TIM_ConfigClockSource+0x1c>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e0b6      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x18a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2202      	movs	r2, #2
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005318:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800531c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005324:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005336:	d03e      	beq.n	80053b6 <HAL_TIM_ConfigClockSource+0xd8>
 8005338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533c:	f200 8087 	bhi.w	800544e <HAL_TIM_ConfigClockSource+0x170>
 8005340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005344:	f000 8086 	beq.w	8005454 <HAL_TIM_ConfigClockSource+0x176>
 8005348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534c:	d87f      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x170>
 800534e:	2b70      	cmp	r3, #112	; 0x70
 8005350:	d01a      	beq.n	8005388 <HAL_TIM_ConfigClockSource+0xaa>
 8005352:	2b70      	cmp	r3, #112	; 0x70
 8005354:	d87b      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x170>
 8005356:	2b60      	cmp	r3, #96	; 0x60
 8005358:	d050      	beq.n	80053fc <HAL_TIM_ConfigClockSource+0x11e>
 800535a:	2b60      	cmp	r3, #96	; 0x60
 800535c:	d877      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x170>
 800535e:	2b50      	cmp	r3, #80	; 0x50
 8005360:	d03c      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0xfe>
 8005362:	2b50      	cmp	r3, #80	; 0x50
 8005364:	d873      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x170>
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d058      	beq.n	800541c <HAL_TIM_ConfigClockSource+0x13e>
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d86f      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x170>
 800536e:	2b30      	cmp	r3, #48	; 0x30
 8005370:	d064      	beq.n	800543c <HAL_TIM_ConfigClockSource+0x15e>
 8005372:	2b30      	cmp	r3, #48	; 0x30
 8005374:	d86b      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x170>
 8005376:	2b20      	cmp	r3, #32
 8005378:	d060      	beq.n	800543c <HAL_TIM_ConfigClockSource+0x15e>
 800537a:	2b20      	cmp	r3, #32
 800537c:	d867      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x170>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d05c      	beq.n	800543c <HAL_TIM_ConfigClockSource+0x15e>
 8005382:	2b10      	cmp	r3, #16
 8005384:	d05a      	beq.n	800543c <HAL_TIM_ConfigClockSource+0x15e>
 8005386:	e062      	b.n	800544e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005398:	f000 f973 	bl	8005682 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	609a      	str	r2, [r3, #8]
      break;
 80053b4:	e04f      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053c6:	f000 f95c 	bl	8005682 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053d8:	609a      	str	r2, [r3, #8]
      break;
 80053da:	e03c      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e8:	461a      	mov	r2, r3
 80053ea:	f000 f8d1 	bl	8005590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2150      	movs	r1, #80	; 0x50
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 f928 	bl	800564a <TIM_ITRx_SetConfig>
      break;
 80053fa:	e02c      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005408:	461a      	mov	r2, r3
 800540a:	f000 f8ef 	bl	80055ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2160      	movs	r1, #96	; 0x60
 8005414:	4618      	mov	r0, r3
 8005416:	f000 f918 	bl	800564a <TIM_ITRx_SetConfig>
      break;
 800541a:	e01c      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005428:	461a      	mov	r2, r3
 800542a:	f000 f8b1 	bl	8005590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2140      	movs	r1, #64	; 0x40
 8005434:	4618      	mov	r0, r3
 8005436:	f000 f908 	bl	800564a <TIM_ITRx_SetConfig>
      break;
 800543a:	e00c      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4619      	mov	r1, r3
 8005446:	4610      	mov	r0, r2
 8005448:	f000 f8ff 	bl	800564a <TIM_ITRx_SetConfig>
      break;
 800544c:	e003      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	73fb      	strb	r3, [r7, #15]
      break;
 8005452:	e000      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005454:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr

08005482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr

08005494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr

080054a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr
	...

080054cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a29      	ldr	r2, [pc, #164]	; (8005584 <TIM_Base_SetConfig+0xb8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <TIM_Base_SetConfig+0x20>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ea:	d108      	bne.n	80054fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a20      	ldr	r2, [pc, #128]	; (8005584 <TIM_Base_SetConfig+0xb8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00b      	beq.n	800551e <TIM_Base_SetConfig+0x52>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550c:	d007      	beq.n	800551e <TIM_Base_SetConfig+0x52>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a1d      	ldr	r2, [pc, #116]	; (8005588 <TIM_Base_SetConfig+0xbc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d003      	beq.n	800551e <TIM_Base_SetConfig+0x52>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a1c      	ldr	r2, [pc, #112]	; (800558c <TIM_Base_SetConfig+0xc0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d108      	bne.n	8005530 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a0b      	ldr	r2, [pc, #44]	; (8005584 <TIM_Base_SetConfig+0xb8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d007      	beq.n	800556c <TIM_Base_SetConfig+0xa0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a0a      	ldr	r2, [pc, #40]	; (8005588 <TIM_Base_SetConfig+0xbc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_Base_SetConfig+0xa0>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a09      	ldr	r2, [pc, #36]	; (800558c <TIM_Base_SetConfig+0xc0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d103      	bne.n	8005574 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	615a      	str	r2, [r3, #20]
}
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40014400 	.word	0x40014400
 800558c:	40014800 	.word	0x40014800

08005590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f023 0201 	bic.w	r2, r3, #1
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f023 030a 	bic.w	r3, r3, #10
 80055cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	621a      	str	r2, [r3, #32]
}
 80055e2:	bf00      	nop
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr

080055ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	f023 0210 	bic.w	r2, r3, #16
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005616:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	031b      	lsls	r3, r3, #12
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005628:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	621a      	str	r2, [r3, #32]
}
 8005640:	bf00      	nop
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr

0800564a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800564a:	b480      	push	{r7}
 800564c:	b085      	sub	sp, #20
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	f043 0307 	orr.w	r3, r3, #7
 8005670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	609a      	str	r2, [r3, #8]
}
 8005678:	bf00      	nop
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	bc80      	pop	{r7}
 8005680:	4770      	bx	lr

08005682 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005682:	b480      	push	{r7}
 8005684:	b087      	sub	sp, #28
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800569c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	021a      	lsls	r2, r3, #8
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	431a      	orrs	r2, r3
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	609a      	str	r2, [r3, #8]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr

080056c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e04a      	b.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1e      	ldr	r2, [pc, #120]	; (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d108      	bne.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005708:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4313      	orrs	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a11      	ldr	r2, [pc, #68]	; (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005740:	d10c      	bne.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	4313      	orrs	r3, r2
 8005752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr
 8005778:	40012c00 	.word	0x40012c00

0800577c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr

080057a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr

080057b2 <LL_RCC_GetUSARTClockSource>:
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80057ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	401a      	ands	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	041b      	lsls	r3, r3, #16
 80057ca:	4313      	orrs	r3, r2
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr

080057d6 <LL_RCC_GetLPUARTClockSource>:
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80057de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4013      	ands	r3, r2
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr

080057f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e042      	b.n	800588c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580c:	2b00      	cmp	r3, #0
 800580e:	d106      	bne.n	800581e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7fc fc2d 	bl	8002078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2224      	movs	r2, #36	; 0x24
 8005822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0201 	bic.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fc48 	bl	80060cc <UART_SetConfig>
 800583c:	4603      	mov	r3, r0
 800583e:	2b01      	cmp	r3, #1
 8005840:	d101      	bne.n	8005846 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e022      	b.n	800588c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 feb0 	bl	80065b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005872:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 ff36 	bl	80066f6 <UART_CheckIdleState>
 800588a:	4603      	mov	r3, r0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08a      	sub	sp, #40	; 0x28
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	4613      	mov	r3, r2
 80058a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d173      	bne.n	8005996 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <HAL_UART_Transmit+0x26>
 80058b4:	88fb      	ldrh	r3, [r7, #6]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e06c      	b.n	8005998 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2221      	movs	r2, #33	; 0x21
 80058ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ce:	f7fc f9a1 	bl	8001c14 <HAL_GetTick>
 80058d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	88fa      	ldrh	r2, [r7, #6]
 80058d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	88fa      	ldrh	r2, [r7, #6]
 80058e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ec:	d108      	bne.n	8005900 <HAL_UART_Transmit+0x6c>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d104      	bne.n	8005900 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	e003      	b.n	8005908 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005904:	2300      	movs	r3, #0
 8005906:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005908:	e02c      	b.n	8005964 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	2180      	movs	r1, #128	; 0x80
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 ff3c 	bl	8006792 <UART_WaitOnFlagUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e039      	b.n	8005998 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10b      	bne.n	8005942 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005938:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	3302      	adds	r3, #2
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	e007      	b.n	8005952 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	781a      	ldrb	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	3301      	adds	r3, #1
 8005950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1cc      	bne.n	800590a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2200      	movs	r2, #0
 8005978:	2140      	movs	r1, #64	; 0x40
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 ff09 	bl	8006792 <UART_WaitOnFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e006      	b.n	8005998 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	e000      	b.n	8005998 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005996:	2302      	movs	r3, #2
  }
}
 8005998:	4618      	mov	r0, r3
 800599a:	3720      	adds	r7, #32
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	; 0x28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	4613      	mov	r3, r2
 80059ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d137      	bne.n	8005a28 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <HAL_UART_Receive_DMA+0x24>
 80059be:	88fb      	ldrh	r3, [r7, #6]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e030      	b.n	8005a2a <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a18      	ldr	r2, [pc, #96]	; (8005a34 <HAL_UART_Receive_DMA+0x94>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d01f      	beq.n	8005a18 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d018      	beq.n	8005a18 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	e853 3f00 	ldrex	r3, [r3]
 80059f2:	613b      	str	r3, [r7, #16]
   return(result);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	623b      	str	r3, [r7, #32]
 8005a06:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	69f9      	ldr	r1, [r7, #28]
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e6      	bne.n	80059e6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 ff80 	bl	8006924 <UART_Start_Receive_DMA>
 8005a24:	4603      	mov	r3, r0
 8005a26:	e000      	b.n	8005a2a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a28:	2302      	movs	r3, #2
  }
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3728      	adds	r7, #40	; 0x28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	40008000 	.word	0x40008000

08005a38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b0ba      	sub	sp, #232	; 0xe8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005a62:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a66:	4013      	ands	r3, r2
 8005a68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d11b      	bne.n	8005aac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d015      	beq.n	8005aac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a84:	f003 0320 	and.w	r3, r3, #32
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d105      	bne.n	8005a98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d009      	beq.n	8005aac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 82e3 	beq.w	8006068 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	4798      	blx	r3
      }
      return;
 8005aaa:	e2dd      	b.n	8006068 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8123 	beq.w	8005cfc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ab6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005aba:	4b8d      	ldr	r3, [pc, #564]	; (8005cf0 <HAL_UART_IRQHandler+0x2b8>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005ac2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ac6:	4b8b      	ldr	r3, [pc, #556]	; (8005cf4 <HAL_UART_IRQHandler+0x2bc>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 8116 	beq.w	8005cfc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d011      	beq.n	8005b00 <HAL_UART_IRQHandler+0xc8>
 8005adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2201      	movs	r2, #1
 8005aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af6:	f043 0201 	orr.w	r2, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d011      	beq.n	8005b30 <HAL_UART_IRQHandler+0xf8>
 8005b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00b      	beq.n	8005b30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b26:	f043 0204 	orr.w	r2, r3, #4
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d011      	beq.n	8005b60 <HAL_UART_IRQHandler+0x128>
 8005b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00b      	beq.n	8005b60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b56:	f043 0202 	orr.w	r2, r3, #2
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d017      	beq.n	8005b9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d105      	bne.n	8005b84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b7c:	4b5c      	ldr	r3, [pc, #368]	; (8005cf0 <HAL_UART_IRQHandler+0x2b8>)
 8005b7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00b      	beq.n	8005b9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2208      	movs	r2, #8
 8005b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b92:	f043 0208 	orr.w	r2, r3, #8
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d012      	beq.n	8005bce <HAL_UART_IRQHandler+0x196>
 8005ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00c      	beq.n	8005bce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc4:	f043 0220 	orr.w	r2, r3, #32
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 8249 	beq.w	800606c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d013      	beq.n	8005c0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d105      	bne.n	8005bfe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	d005      	beq.n	8005c32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d054      	beq.n	8005cdc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 ff5c 	bl	8006af0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c42:	2b40      	cmp	r3, #64	; 0x40
 8005c44:	d146      	bne.n	8005cd4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1d9      	bne.n	8005c46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d017      	beq.n	8005ccc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ca2:	4a15      	ldr	r2, [pc, #84]	; (8005cf8 <HAL_UART_IRQHandler+0x2c0>)
 8005ca4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fc fdfd 	bl	80028ac <HAL_DMA_Abort_IT>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d019      	beq.n	8005cec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cca:	e00f      	b.n	8005cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f9e9 	bl	80060a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd2:	e00b      	b.n	8005cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f9e5 	bl	80060a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cda:	e007      	b.n	8005cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f9e1 	bl	80060a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005cea:	e1bf      	b.n	800606c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cec:	bf00      	nop
    return;
 8005cee:	e1bd      	b.n	800606c <HAL_UART_IRQHandler+0x634>
 8005cf0:	10000001 	.word	0x10000001
 8005cf4:	04000120 	.word	0x04000120
 8005cf8:	08006da5 	.word	0x08006da5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	f040 8153 	bne.w	8005fac <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 814c 	beq.w	8005fac <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8145 	beq.w	8005fac <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2210      	movs	r2, #16
 8005d28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d34:	2b40      	cmp	r3, #64	; 0x40
 8005d36:	f040 80bb 	bne.w	8005eb0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 818f 	beq.w	8006070 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	f080 8187 	bcs.w	8006070 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f040 8087 	bne.w	8005e8e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005daa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005db6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1da      	bne.n	8005d80 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3308      	adds	r3, #8
 8005dd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ddc:	f023 0301 	bic.w	r3, r3, #1
 8005de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005dee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005df2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005df6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e1      	bne.n	8005dca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1e3      	bne.n	8005e06 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e5c:	f023 0310 	bic.w	r3, r3, #16
 8005e60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e70:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e4      	bne.n	8005e4c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fc fcb1 	bl	80027f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f904 	bl	80060b6 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005eae:	e0df      	b.n	8006070 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 80d1 	beq.w	8006074 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 80cc 	beq.w	8006074 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005efe:	647b      	str	r3, [r7, #68]	; 0x44
 8005f00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e4      	bne.n	8005edc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	623b      	str	r3, [r7, #32]
   return(result);
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f28:	f023 0301 	bic.w	r3, r3, #1
 8005f2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3308      	adds	r3, #8
 8005f36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f3a:	633a      	str	r2, [r7, #48]	; 0x30
 8005f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e1      	bne.n	8005f12 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0310 	bic.w	r3, r3, #16
 8005f76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f84:	61fb      	str	r3, [r7, #28]
 8005f86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f88:	69b9      	ldr	r1, [r7, #24]
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	e841 2300 	strex	r3, r2, [r1]
 8005f90:	617b      	str	r3, [r7, #20]
   return(result);
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e4      	bne.n	8005f62 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f886 	bl	80060b6 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005faa:	e063      	b.n	8006074 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00e      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x59e>
 8005fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d008      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005fcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 ff29 	bl	8006e26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fd4:	e051      	b.n	800607a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d014      	beq.n	800600c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d105      	bne.n	8005ffa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d008      	beq.n	800600c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d03a      	beq.n	8006078 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
    }
    return;
 800600a:	e035      	b.n	8006078 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800600c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d009      	beq.n	800602c <HAL_UART_IRQHandler+0x5f4>
 8006018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fed3 	bl	8006dd0 <UART_EndTransmit_IT>
    return;
 800602a:	e026      	b.n	800607a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800602c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d009      	beq.n	800604c <HAL_UART_IRQHandler+0x614>
 8006038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800603c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 ff00 	bl	8006e4a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800604a:	e016      	b.n	800607a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800604c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d010      	beq.n	800607a <HAL_UART_IRQHandler+0x642>
 8006058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800605c:	2b00      	cmp	r3, #0
 800605e:	da0c      	bge.n	800607a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fee9 	bl	8006e38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006066:	e008      	b.n	800607a <HAL_UART_IRQHandler+0x642>
      return;
 8006068:	bf00      	nop
 800606a:	e006      	b.n	800607a <HAL_UART_IRQHandler+0x642>
    return;
 800606c:	bf00      	nop
 800606e:	e004      	b.n	800607a <HAL_UART_IRQHandler+0x642>
      return;
 8006070:	bf00      	nop
 8006072:	e002      	b.n	800607a <HAL_UART_IRQHandler+0x642>
      return;
 8006074:	bf00      	nop
 8006076:	e000      	b.n	800607a <HAL_UART_IRQHandler+0x642>
    return;
 8006078:	bf00      	nop
  }
}
 800607a:	37e8      	adds	r7, #232	; 0xe8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr

08006092 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr

080060a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr

080060b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	460b      	mov	r3, r1
 80060c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr

080060cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060d0:	b08c      	sub	sp, #48	; 0x30
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	431a      	orrs	r2, r3
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	4b94      	ldr	r3, [pc, #592]	; (800634c <UART_SetConfig+0x280>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006104:	430b      	orrs	r3, r1
 8006106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a89      	ldr	r2, [pc, #548]	; (8006350 <UART_SetConfig+0x284>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d004      	beq.n	8006138 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006134:	4313      	orrs	r3, r2
 8006136:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006142:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	6812      	ldr	r2, [r2, #0]
 800614a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800614c:	430b      	orrs	r3, r1
 800614e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	f023 010f 	bic.w	r1, r3, #15
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a7a      	ldr	r2, [pc, #488]	; (8006354 <UART_SetConfig+0x288>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d127      	bne.n	80061c0 <UART_SetConfig+0xf4>
 8006170:	2003      	movs	r0, #3
 8006172:	f7ff fb1e 	bl	80057b2 <LL_RCC_GetUSARTClockSource>
 8006176:	4603      	mov	r3, r0
 8006178:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800617c:	2b03      	cmp	r3, #3
 800617e:	d81b      	bhi.n	80061b8 <UART_SetConfig+0xec>
 8006180:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <UART_SetConfig+0xbc>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	08006199 	.word	0x08006199
 800618c:	080061a9 	.word	0x080061a9
 8006190:	080061a1 	.word	0x080061a1
 8006194:	080061b1 	.word	0x080061b1
 8006198:	2301      	movs	r3, #1
 800619a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800619e:	e080      	b.n	80062a2 <UART_SetConfig+0x1d6>
 80061a0:	2302      	movs	r3, #2
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061a6:	e07c      	b.n	80062a2 <UART_SetConfig+0x1d6>
 80061a8:	2304      	movs	r3, #4
 80061aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ae:	e078      	b.n	80062a2 <UART_SetConfig+0x1d6>
 80061b0:	2308      	movs	r3, #8
 80061b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b6:	e074      	b.n	80062a2 <UART_SetConfig+0x1d6>
 80061b8:	2310      	movs	r3, #16
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061be:	e070      	b.n	80062a2 <UART_SetConfig+0x1d6>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a64      	ldr	r2, [pc, #400]	; (8006358 <UART_SetConfig+0x28c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d138      	bne.n	800623c <UART_SetConfig+0x170>
 80061ca:	200c      	movs	r0, #12
 80061cc:	f7ff faf1 	bl	80057b2 <LL_RCC_GetUSARTClockSource>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80061d6:	2b0c      	cmp	r3, #12
 80061d8:	d82c      	bhi.n	8006234 <UART_SetConfig+0x168>
 80061da:	a201      	add	r2, pc, #4	; (adr r2, 80061e0 <UART_SetConfig+0x114>)
 80061dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e0:	08006215 	.word	0x08006215
 80061e4:	08006235 	.word	0x08006235
 80061e8:	08006235 	.word	0x08006235
 80061ec:	08006235 	.word	0x08006235
 80061f0:	08006225 	.word	0x08006225
 80061f4:	08006235 	.word	0x08006235
 80061f8:	08006235 	.word	0x08006235
 80061fc:	08006235 	.word	0x08006235
 8006200:	0800621d 	.word	0x0800621d
 8006204:	08006235 	.word	0x08006235
 8006208:	08006235 	.word	0x08006235
 800620c:	08006235 	.word	0x08006235
 8006210:	0800622d 	.word	0x0800622d
 8006214:	2300      	movs	r3, #0
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800621a:	e042      	b.n	80062a2 <UART_SetConfig+0x1d6>
 800621c:	2302      	movs	r3, #2
 800621e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006222:	e03e      	b.n	80062a2 <UART_SetConfig+0x1d6>
 8006224:	2304      	movs	r3, #4
 8006226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800622a:	e03a      	b.n	80062a2 <UART_SetConfig+0x1d6>
 800622c:	2308      	movs	r3, #8
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006232:	e036      	b.n	80062a2 <UART_SetConfig+0x1d6>
 8006234:	2310      	movs	r3, #16
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800623a:	e032      	b.n	80062a2 <UART_SetConfig+0x1d6>
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a43      	ldr	r2, [pc, #268]	; (8006350 <UART_SetConfig+0x284>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d12a      	bne.n	800629c <UART_SetConfig+0x1d0>
 8006246:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800624a:	f7ff fac4 	bl	80057d6 <LL_RCC_GetLPUARTClockSource>
 800624e:	4603      	mov	r3, r0
 8006250:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006254:	d01a      	beq.n	800628c <UART_SetConfig+0x1c0>
 8006256:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800625a:	d81b      	bhi.n	8006294 <UART_SetConfig+0x1c8>
 800625c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006260:	d00c      	beq.n	800627c <UART_SetConfig+0x1b0>
 8006262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006266:	d815      	bhi.n	8006294 <UART_SetConfig+0x1c8>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <UART_SetConfig+0x1a8>
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006270:	d008      	beq.n	8006284 <UART_SetConfig+0x1b8>
 8006272:	e00f      	b.n	8006294 <UART_SetConfig+0x1c8>
 8006274:	2300      	movs	r3, #0
 8006276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800627a:	e012      	b.n	80062a2 <UART_SetConfig+0x1d6>
 800627c:	2302      	movs	r3, #2
 800627e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006282:	e00e      	b.n	80062a2 <UART_SetConfig+0x1d6>
 8006284:	2304      	movs	r3, #4
 8006286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800628a:	e00a      	b.n	80062a2 <UART_SetConfig+0x1d6>
 800628c:	2308      	movs	r3, #8
 800628e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006292:	e006      	b.n	80062a2 <UART_SetConfig+0x1d6>
 8006294:	2310      	movs	r3, #16
 8006296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800629a:	e002      	b.n	80062a2 <UART_SetConfig+0x1d6>
 800629c:	2310      	movs	r3, #16
 800629e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a2a      	ldr	r2, [pc, #168]	; (8006350 <UART_SetConfig+0x284>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	f040 80a4 	bne.w	80063f6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062b2:	2b08      	cmp	r3, #8
 80062b4:	d823      	bhi.n	80062fe <UART_SetConfig+0x232>
 80062b6:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <UART_SetConfig+0x1f0>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062ff 	.word	0x080062ff
 80062c4:	080062e9 	.word	0x080062e9
 80062c8:	080062ff 	.word	0x080062ff
 80062cc:	080062ef 	.word	0x080062ef
 80062d0:	080062ff 	.word	0x080062ff
 80062d4:	080062ff 	.word	0x080062ff
 80062d8:	080062ff 	.word	0x080062ff
 80062dc:	080062f7 	.word	0x080062f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e0:	f7fd fea4 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 80062e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062e6:	e010      	b.n	800630a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062e8:	4b1c      	ldr	r3, [pc, #112]	; (800635c <UART_SetConfig+0x290>)
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062ec:	e00d      	b.n	800630a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ee:	f7fd fde9 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 80062f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062f4:	e009      	b.n	800630a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062fc:	e005      	b.n	800630a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006308:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8137 	beq.w	8006580 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	4a12      	ldr	r2, [pc, #72]	; (8006360 <UART_SetConfig+0x294>)
 8006318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800631c:	461a      	mov	r2, r3
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	fbb3 f3f2 	udiv	r3, r3, r2
 8006324:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	4613      	mov	r3, r2
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	4413      	add	r3, r2
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	429a      	cmp	r2, r3
 8006334:	d305      	bcc.n	8006342 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	429a      	cmp	r2, r3
 8006340:	d910      	bls.n	8006364 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006348:	e11a      	b.n	8006580 <UART_SetConfig+0x4b4>
 800634a:	bf00      	nop
 800634c:	cfff69f3 	.word	0xcfff69f3
 8006350:	40008000 	.word	0x40008000
 8006354:	40013800 	.word	0x40013800
 8006358:	40004400 	.word	0x40004400
 800635c:	00f42400 	.word	0x00f42400
 8006360:	0800ba54 	.word	0x0800ba54
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	2200      	movs	r2, #0
 8006368:	60bb      	str	r3, [r7, #8]
 800636a:	60fa      	str	r2, [r7, #12]
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	4a8e      	ldr	r2, [pc, #568]	; (80065ac <UART_SetConfig+0x4e0>)
 8006372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006376:	b29b      	uxth	r3, r3
 8006378:	2200      	movs	r2, #0
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	607a      	str	r2, [r7, #4]
 800637e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006382:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006386:	f7f9 ff4b 	bl	8000220 <__aeabi_uldivmod>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4610      	mov	r0, r2
 8006390:	4619      	mov	r1, r3
 8006392:	f04f 0200 	mov.w	r2, #0
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	020b      	lsls	r3, r1, #8
 800639c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063a0:	0202      	lsls	r2, r0, #8
 80063a2:	6979      	ldr	r1, [r7, #20]
 80063a4:	6849      	ldr	r1, [r1, #4]
 80063a6:	0849      	lsrs	r1, r1, #1
 80063a8:	2000      	movs	r0, #0
 80063aa:	460c      	mov	r4, r1
 80063ac:	4605      	mov	r5, r0
 80063ae:	eb12 0804 	adds.w	r8, r2, r4
 80063b2:	eb43 0905 	adc.w	r9, r3, r5
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	469a      	mov	sl, r3
 80063be:	4693      	mov	fp, r2
 80063c0:	4652      	mov	r2, sl
 80063c2:	465b      	mov	r3, fp
 80063c4:	4640      	mov	r0, r8
 80063c6:	4649      	mov	r1, r9
 80063c8:	f7f9 ff2a 	bl	8000220 <__aeabi_uldivmod>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4613      	mov	r3, r2
 80063d2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063da:	d308      	bcc.n	80063ee <UART_SetConfig+0x322>
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e2:	d204      	bcs.n	80063ee <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6a3a      	ldr	r2, [r7, #32]
 80063ea:	60da      	str	r2, [r3, #12]
 80063ec:	e0c8      	b.n	8006580 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063f4:	e0c4      	b.n	8006580 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063fe:	d167      	bne.n	80064d0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006400:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006404:	2b08      	cmp	r3, #8
 8006406:	d828      	bhi.n	800645a <UART_SetConfig+0x38e>
 8006408:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <UART_SetConfig+0x344>)
 800640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640e:	bf00      	nop
 8006410:	08006435 	.word	0x08006435
 8006414:	0800643d 	.word	0x0800643d
 8006418:	08006445 	.word	0x08006445
 800641c:	0800645b 	.word	0x0800645b
 8006420:	0800644b 	.word	0x0800644b
 8006424:	0800645b 	.word	0x0800645b
 8006428:	0800645b 	.word	0x0800645b
 800642c:	0800645b 	.word	0x0800645b
 8006430:	08006453 	.word	0x08006453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006434:	f7fd fdfa 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8006438:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800643a:	e014      	b.n	8006466 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800643c:	f7fd fe08 	bl	8004050 <HAL_RCC_GetPCLK2Freq>
 8006440:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006442:	e010      	b.n	8006466 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006444:	4b5a      	ldr	r3, [pc, #360]	; (80065b0 <UART_SetConfig+0x4e4>)
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006448:	e00d      	b.n	8006466 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800644a:	f7fd fd3b 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 800644e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006450:	e009      	b.n	8006466 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006458:	e005      	b.n	8006466 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006464:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 8089 	beq.w	8006580 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	4a4e      	ldr	r2, [pc, #312]	; (80065ac <UART_SetConfig+0x4e0>)
 8006474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006478:	461a      	mov	r2, r3
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006480:	005a      	lsls	r2, r3, #1
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	085b      	lsrs	r3, r3, #1
 8006488:	441a      	add	r2, r3
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006492:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	2b0f      	cmp	r3, #15
 8006498:	d916      	bls.n	80064c8 <UART_SetConfig+0x3fc>
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a0:	d212      	bcs.n	80064c8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f023 030f 	bic.w	r3, r3, #15
 80064aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	085b      	lsrs	r3, r3, #1
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	8bfb      	ldrh	r3, [r7, #30]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	8bfa      	ldrh	r2, [r7, #30]
 80064c4:	60da      	str	r2, [r3, #12]
 80064c6:	e05b      	b.n	8006580 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80064ce:	e057      	b.n	8006580 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d828      	bhi.n	800652a <UART_SetConfig+0x45e>
 80064d8:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <UART_SetConfig+0x414>)
 80064da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064de:	bf00      	nop
 80064e0:	08006505 	.word	0x08006505
 80064e4:	0800650d 	.word	0x0800650d
 80064e8:	08006515 	.word	0x08006515
 80064ec:	0800652b 	.word	0x0800652b
 80064f0:	0800651b 	.word	0x0800651b
 80064f4:	0800652b 	.word	0x0800652b
 80064f8:	0800652b 	.word	0x0800652b
 80064fc:	0800652b 	.word	0x0800652b
 8006500:	08006523 	.word	0x08006523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006504:	f7fd fd92 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8006508:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800650a:	e014      	b.n	8006536 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800650c:	f7fd fda0 	bl	8004050 <HAL_RCC_GetPCLK2Freq>
 8006510:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006512:	e010      	b.n	8006536 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006514:	4b26      	ldr	r3, [pc, #152]	; (80065b0 <UART_SetConfig+0x4e4>)
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006518:	e00d      	b.n	8006536 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800651a:	f7fd fcd3 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 800651e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006520:	e009      	b.n	8006536 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006528:	e005      	b.n	8006536 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006534:	bf00      	nop
    }

    if (pclk != 0U)
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	2b00      	cmp	r3, #0
 800653a:	d021      	beq.n	8006580 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	4a1a      	ldr	r2, [pc, #104]	; (80065ac <UART_SetConfig+0x4e0>)
 8006542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006546:	461a      	mov	r2, r3
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	fbb3 f2f2 	udiv	r2, r3, r2
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	441a      	add	r2, r3
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	fbb2 f3f3 	udiv	r3, r2, r3
 800655e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	2b0f      	cmp	r3, #15
 8006564:	d909      	bls.n	800657a <UART_SetConfig+0x4ae>
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656c:	d205      	bcs.n	800657a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	b29a      	uxth	r2, r3
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60da      	str	r2, [r3, #12]
 8006578:	e002      	b.n	8006580 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2201      	movs	r2, #1
 8006584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2201      	movs	r2, #1
 800658c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2200      	movs	r2, #0
 8006594:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2200      	movs	r2, #0
 800659a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800659c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3730      	adds	r7, #48	; 0x30
 80065a4:	46bd      	mov	sp, r7
 80065a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065aa:	bf00      	nop
 80065ac:	0800ba54 	.word	0x0800ba54
 80065b0:	00f42400 	.word	0x00f42400

080065b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	f003 0310 	and.w	r3, r3, #16
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666a:	f003 0320 	and.w	r3, r3, #32
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	d01a      	beq.n	80066ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066b2:	d10a      	bne.n	80066ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	605a      	str	r2, [r3, #4]
  }
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc80      	pop	{r7}
 80066f4:	4770      	bx	lr

080066f6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b086      	sub	sp, #24
 80066fa:	af02      	add	r7, sp, #8
 80066fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006706:	f7fb fa85 	bl	8001c14 <HAL_GetTick>
 800670a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0308 	and.w	r3, r3, #8
 8006716:	2b08      	cmp	r3, #8
 8006718:	d10e      	bne.n	8006738 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800671a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f832 	bl	8006792 <UART_WaitOnFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e028      	b.n	800678a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b04      	cmp	r3, #4
 8006744:	d10e      	bne.n	8006764 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006746:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f81c 	bl	8006792 <UART_WaitOnFlagUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e012      	b.n	800678a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2220      	movs	r2, #32
 8006768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b09c      	sub	sp, #112	; 0x70
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	4613      	mov	r3, r2
 80067a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a2:	e0a9      	b.n	80068f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067aa:	f000 80a5 	beq.w	80068f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ae:	f7fb fa31 	bl	8001c14 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d302      	bcc.n	80067c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80067be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d140      	bne.n	8006846 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067d8:	667b      	str	r3, [r7, #100]	; 0x64
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e6      	bne.n	80067c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	663b      	str	r3, [r7, #96]	; 0x60
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3308      	adds	r3, #8
 8006814:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006816:	64ba      	str	r2, [r7, #72]	; 0x48
 8006818:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800681c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e5      	bne.n	80067f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e069      	b.n	800691a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d051      	beq.n	80068f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800685e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006862:	d149      	bne.n	80068f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800686c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	e853 3f00 	ldrex	r3, [r3]
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006882:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688c:	637b      	str	r3, [r7, #52]	; 0x34
 800688e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006890:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006894:	e841 2300 	strex	r3, r2, [r1]
 8006898:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1e6      	bne.n	800686e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3308      	adds	r3, #8
 80068a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	613b      	str	r3, [r7, #16]
   return(result);
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f023 0301 	bic.w	r3, r3, #1
 80068b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3308      	adds	r3, #8
 80068be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068c0:	623a      	str	r2, [r7, #32]
 80068c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	69f9      	ldr	r1, [r7, #28]
 80068c6:	6a3a      	ldr	r2, [r7, #32]
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e5      	bne.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e010      	b.n	800691a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69da      	ldr	r2, [r3, #28]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	4013      	ands	r3, r2
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	429a      	cmp	r2, r3
 8006906:	bf0c      	ite	eq
 8006908:	2301      	moveq	r3, #1
 800690a:	2300      	movne	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	461a      	mov	r2, r3
 8006910:	79fb      	ldrb	r3, [r7, #7]
 8006912:	429a      	cmp	r2, r3
 8006914:	f43f af46 	beq.w	80067a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3770      	adds	r7, #112	; 0x70
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b096      	sub	sp, #88	; 0x58
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	88fa      	ldrh	r2, [r7, #6]
 800693c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2222      	movs	r2, #34	; 0x22
 800694c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006956:	2b00      	cmp	r3, #0
 8006958:	d02d      	beq.n	80069b6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006960:	4a40      	ldr	r2, [pc, #256]	; (8006a64 <UART_Start_Receive_DMA+0x140>)
 8006962:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800696a:	4a3f      	ldr	r2, [pc, #252]	; (8006a68 <UART_Start_Receive_DMA+0x144>)
 800696c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006974:	4a3d      	ldr	r2, [pc, #244]	; (8006a6c <UART_Start_Receive_DMA+0x148>)
 8006976:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800697e:	2200      	movs	r2, #0
 8006980:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3324      	adds	r3, #36	; 0x24
 800698e:	4619      	mov	r1, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006994:	461a      	mov	r2, r3
 8006996:	88fb      	ldrh	r3, [r7, #6]
 8006998:	f7fb feac 	bl	80026f4 <HAL_DMA_Start_IT>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2210      	movs	r2, #16
 80069a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e051      	b.n	8006a5a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d018      	beq.n	80069f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c6:	e853 3f00 	ldrex	r3, [r3]
 80069ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d2:	657b      	str	r3, [r7, #84]	; 0x54
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	461a      	mov	r2, r3
 80069da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80069de:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069e4:	e841 2300 	strex	r3, r2, [r1]
 80069e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e6      	bne.n	80069be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3308      	adds	r3, #8
 80069f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	f043 0301 	orr.w	r3, r3, #1
 8006a06:	653b      	str	r3, [r7, #80]	; 0x50
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a10:	637a      	str	r2, [r7, #52]	; 0x34
 8006a12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e5      	bne.n	80069f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3308      	adds	r3, #8
 8006a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	613b      	str	r3, [r7, #16]
   return(result);
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3308      	adds	r3, #8
 8006a42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a44:	623a      	str	r2, [r7, #32]
 8006a46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	69f9      	ldr	r1, [r7, #28]
 8006a4a:	6a3a      	ldr	r2, [r7, #32]
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e5      	bne.n	8006a24 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3758      	adds	r7, #88	; 0x58
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	08006bbb 	.word	0x08006bbb
 8006a68:	08006ce7 	.word	0x08006ce7
 8006a6c:	08006d25 	.word	0x08006d25

08006a70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b08f      	sub	sp, #60	; 0x3c
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a98:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e6      	bne.n	8006a78 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aca:	61ba      	str	r2, [r7, #24]
 8006acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6979      	ldr	r1, [r7, #20]
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e5      	bne.n	8006aaa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006ae6:	bf00      	nop
 8006ae8:	373c      	adds	r7, #60	; 0x3c
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr

08006af0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b095      	sub	sp, #84	; 0x54
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b00:	e853 3f00 	ldrex	r3, [r3]
 8006b04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b16:	643b      	str	r3, [r7, #64]	; 0x40
 8006b18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1e6      	bne.n	8006af8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3308      	adds	r3, #8
 8006b30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	e853 3f00 	ldrex	r3, [r3]
 8006b38:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b40:	f023 0301 	bic.w	r3, r3, #1
 8006b44:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e3      	bne.n	8006b2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d118      	bne.n	8006b9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f023 0310 	bic.w	r3, r3, #16
 8006b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b88:	61bb      	str	r3, [r7, #24]
 8006b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	6979      	ldr	r1, [r7, #20]
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	e841 2300 	strex	r3, r2, [r1]
 8006b94:	613b      	str	r3, [r7, #16]
   return(result);
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e6      	bne.n	8006b6a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006bb0:	bf00      	nop
 8006bb2:	3754      	adds	r7, #84	; 0x54
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc80      	pop	{r7}
 8006bb8:	4770      	bx	lr

08006bba <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b09c      	sub	sp, #112	; 0x70
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d171      	bne.n	8006cba <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bf2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bfe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e6      	bne.n	8006bde <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3308      	adds	r3, #8
 8006c16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c22:	f023 0301 	bic.w	r3, r3, #1
 8006c26:	667b      	str	r3, [r7, #100]	; 0x64
 8006c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c30:	647a      	str	r2, [r7, #68]	; 0x44
 8006c32:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e5      	bne.n	8006c10 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	623b      	str	r3, [r7, #32]
   return(result);
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c5a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3308      	adds	r3, #8
 8006c62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c64:	633a      	str	r2, [r7, #48]	; 0x30
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e5      	bne.n	8006c44 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d118      	bne.n	8006cba <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f023 0310 	bic.w	r3, r3, #16
 8006c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	69b9      	ldr	r1, [r7, #24]
 8006cac:	69fa      	ldr	r2, [r7, #28]
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	617b      	str	r3, [r7, #20]
   return(result);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e6      	bne.n	8006c88 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d107      	bne.n	8006cd8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006cd2:	f7ff f9f0 	bl	80060b6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cd6:	e002      	b.n	8006cde <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006cd8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006cda:	f7fa f835 	bl	8000d48 <HAL_UART_RxCpltCallback>
}
 8006cde:	bf00      	nop
 8006ce0:	3770      	adds	r7, #112	; 0x70
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d109      	bne.n	8006d16 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f7ff f9d1 	bl	80060b6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d14:	e002      	b.n	8006d1c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f7ff f9bb 	bl	8006092 <HAL_UART_RxHalfCpltCallback>
}
 8006d1c:	bf00      	nop
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d38:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4c:	2b80      	cmp	r3, #128	; 0x80
 8006d4e:	d109      	bne.n	8006d64 <UART_DMAError+0x40>
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	2b21      	cmp	r3, #33	; 0x21
 8006d54:	d106      	bne.n	8006d64 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006d5e:	6978      	ldr	r0, [r7, #20]
 8006d60:	f7ff fe86 	bl	8006a70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6e:	2b40      	cmp	r3, #64	; 0x40
 8006d70:	d109      	bne.n	8006d86 <UART_DMAError+0x62>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b22      	cmp	r3, #34	; 0x22
 8006d76:	d106      	bne.n	8006d86 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006d80:	6978      	ldr	r0, [r7, #20]
 8006d82:	f7ff feb5 	bl	8006af0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d8c:	f043 0210 	orr.w	r2, r3, #16
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d96:	6978      	ldr	r0, [r7, #20]
 8006d98:	f7ff f984 	bl	80060a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d9c:	bf00      	nop
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7ff f96e 	bl	80060a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	61bb      	str	r3, [r7, #24]
 8006df8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	6979      	ldr	r1, [r7, #20]
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	613b      	str	r3, [r7, #16]
   return(result);
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e6      	bne.n	8006dd8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff f931 	bl	8006080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e1e:	bf00      	nop
 8006e20:	3720      	adds	r7, #32
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e2e:	bf00      	nop
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bc80      	pop	{r7}
 8006e36:	4770      	bx	lr

08006e38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr

08006e4a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d101      	bne.n	8006e72 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e6e:	2302      	movs	r3, #2
 8006e70:	e027      	b.n	8006ec2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2224      	movs	r2, #36	; 0x24
 8006e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0201 	bic.w	r2, r2, #1
 8006e98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ea0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr

08006ecc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e02d      	b.n	8006f40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2224      	movs	r2, #36	; 0x24
 8006ef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0201 	bic.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f84f 	bl	8006fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e02d      	b.n	8006fbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2224      	movs	r2, #36	; 0x24
 8006f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0201 	bic.w	r2, r2, #1
 8006f86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f811 	bl	8006fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d108      	bne.n	8006fe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fe4:	e031      	b.n	800704a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006fea:	2308      	movs	r3, #8
 8006fec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	0e5b      	lsrs	r3, r3, #25
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	0f5b      	lsrs	r3, r3, #29
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800700e:	7bbb      	ldrb	r3, [r7, #14]
 8007010:	7b3a      	ldrb	r2, [r7, #12]
 8007012:	4910      	ldr	r1, [pc, #64]	; (8007054 <UARTEx_SetNbDataToProcess+0x90>)
 8007014:	5c8a      	ldrb	r2, [r1, r2]
 8007016:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800701a:	7b3a      	ldrb	r2, [r7, #12]
 800701c:	490e      	ldr	r1, [pc, #56]	; (8007058 <UARTEx_SetNbDataToProcess+0x94>)
 800701e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007020:	fb93 f3f2 	sdiv	r3, r3, r2
 8007024:	b29a      	uxth	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	7b7a      	ldrb	r2, [r7, #13]
 8007030:	4908      	ldr	r1, [pc, #32]	; (8007054 <UARTEx_SetNbDataToProcess+0x90>)
 8007032:	5c8a      	ldrb	r2, [r1, r2]
 8007034:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007038:	7b7a      	ldrb	r2, [r7, #13]
 800703a:	4907      	ldr	r1, [pc, #28]	; (8007058 <UARTEx_SetNbDataToProcess+0x94>)
 800703c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800703e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007042:	b29a      	uxth	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800704a:	bf00      	nop
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr
 8007054:	0800ba6c 	.word	0x0800ba6c
 8007058:	0800ba74 	.word	0x0800ba74

0800705c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af02      	add	r7, sp, #8
 8007062:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007064:	4a24      	ldr	r2, [pc, #144]	; (80070f8 <RadioInit+0x9c>)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800706a:	4b24      	ldr	r3, [pc, #144]	; (80070fc <RadioInit+0xa0>)
 800706c:	2200      	movs	r2, #0
 800706e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007070:	4b22      	ldr	r3, [pc, #136]	; (80070fc <RadioInit+0xa0>)
 8007072:	2200      	movs	r2, #0
 8007074:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007076:	4b21      	ldr	r3, [pc, #132]	; (80070fc <RadioInit+0xa0>)
 8007078:	2200      	movs	r2, #0
 800707a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800707c:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <RadioInit+0xa0>)
 800707e:	2200      	movs	r2, #0
 8007080:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8007082:	481f      	ldr	r0, [pc, #124]	; (8007100 <RadioInit+0xa4>)
 8007084:	f001 ff88 	bl	8008f98 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007088:	4b1c      	ldr	r3, [pc, #112]	; (80070fc <RadioInit+0xa0>)
 800708a:	2200      	movs	r2, #0
 800708c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800708e:	4b1b      	ldr	r3, [pc, #108]	; (80070fc <RadioInit+0xa0>)
 8007090:	2200      	movs	r2, #0
 8007092:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007094:	f002 fa1c 	bl	80094d0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007098:	2100      	movs	r1, #0
 800709a:	2000      	movs	r0, #0
 800709c:	f002 fde8 	bl	8009c70 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80070a0:	2204      	movs	r2, #4
 80070a2:	2100      	movs	r1, #0
 80070a4:	2001      	movs	r0, #1
 80070a6:	f002 fba5 	bl	80097f4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80070aa:	2300      	movs	r3, #0
 80070ac:	2200      	movs	r2, #0
 80070ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80070b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80070b6:	f002 fad5 	bl	8009664 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80070ba:	f000 fe91 	bl	8007de0 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80070be:	2300      	movs	r3, #0
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	4b10      	ldr	r3, [pc, #64]	; (8007104 <RadioInit+0xa8>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070ca:	480f      	ldr	r0, [pc, #60]	; (8007108 <RadioInit+0xac>)
 80070cc:	f003 fb32 	bl	800a734 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80070d0:	2300      	movs	r3, #0
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	4b0d      	ldr	r3, [pc, #52]	; (800710c <RadioInit+0xb0>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070dc:	480c      	ldr	r0, [pc, #48]	; (8007110 <RadioInit+0xb4>)
 80070de:	f003 fb29 	bl	800a734 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80070e2:	4809      	ldr	r0, [pc, #36]	; (8007108 <RadioInit+0xac>)
 80070e4:	f003 fbca 	bl	800a87c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80070e8:	4809      	ldr	r0, [pc, #36]	; (8007110 <RadioInit+0xb4>)
 80070ea:	f003 fbc7 	bl	800a87c <UTIL_TIMER_Stop>
}
 80070ee:	bf00      	nop
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	200006cc 	.word	0x200006cc
 80070fc:	200006d0 	.word	0x200006d0
 8007100:	080081d9 	.word	0x080081d9
 8007104:	08008161 	.word	0x08008161
 8007108:	2000072c 	.word	0x2000072c
 800710c:	08008175 	.word	0x08008175
 8007110:	20000744 	.word	0x20000744

08007114 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007118:	f001 ff86 	bl	8009028 <SUBGRF_GetOperatingMode>
 800711c:	4603      	mov	r3, r0
 800711e:	2b07      	cmp	r3, #7
 8007120:	d00a      	beq.n	8007138 <RadioGetStatus+0x24>
 8007122:	2b07      	cmp	r3, #7
 8007124:	dc0a      	bgt.n	800713c <RadioGetStatus+0x28>
 8007126:	2b04      	cmp	r3, #4
 8007128:	d002      	beq.n	8007130 <RadioGetStatus+0x1c>
 800712a:	2b05      	cmp	r3, #5
 800712c:	d002      	beq.n	8007134 <RadioGetStatus+0x20>
 800712e:	e005      	b.n	800713c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007130:	2302      	movs	r3, #2
 8007132:	e004      	b.n	800713e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007134:	2301      	movs	r3, #1
 8007136:	e002      	b.n	800713e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007138:	2303      	movs	r3, #3
 800713a:	e000      	b.n	800713e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800713c:	2300      	movs	r3, #0
    }
}
 800713e:	4618      	mov	r0, r3
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800714e:	4a2a      	ldr	r2, [pc, #168]	; (80071f8 <RadioSetModem+0xb4>)
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	4618      	mov	r0, r3
 8007158:	f003 f95d 	bl	800a416 <RFW_SetRadioModem>
    switch( modem )
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	2b05      	cmp	r3, #5
 8007160:	d80e      	bhi.n	8007180 <RadioSetModem+0x3c>
 8007162:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <RadioSetModem+0x24>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	0800718f 	.word	0x0800718f
 800716c:	0800719d 	.word	0x0800719d
 8007170:	08007181 	.word	0x08007181
 8007174:	080071c3 	.word	0x080071c3
 8007178:	080071d1 	.word	0x080071d1
 800717c:	080071df 	.word	0x080071df
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8007180:	2003      	movs	r0, #3
 8007182:	f002 fb11 	bl	80097a8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007186:	4b1c      	ldr	r3, [pc, #112]	; (80071f8 <RadioSetModem+0xb4>)
 8007188:	2200      	movs	r2, #0
 800718a:	735a      	strb	r2, [r3, #13]
        break;
 800718c:	e02f      	b.n	80071ee <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800718e:	2000      	movs	r0, #0
 8007190:	f002 fb0a 	bl	80097a8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007194:	4b18      	ldr	r3, [pc, #96]	; (80071f8 <RadioSetModem+0xb4>)
 8007196:	2200      	movs	r2, #0
 8007198:	735a      	strb	r2, [r3, #13]
        break;
 800719a:	e028      	b.n	80071ee <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800719c:	2001      	movs	r0, #1
 800719e:	f002 fb03 	bl	80097a8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80071a2:	4b15      	ldr	r3, [pc, #84]	; (80071f8 <RadioSetModem+0xb4>)
 80071a4:	7b5a      	ldrb	r2, [r3, #13]
 80071a6:	4b14      	ldr	r3, [pc, #80]	; (80071f8 <RadioSetModem+0xb4>)
 80071a8:	7b1b      	ldrb	r3, [r3, #12]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d01e      	beq.n	80071ec <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80071ae:	4b12      	ldr	r3, [pc, #72]	; (80071f8 <RadioSetModem+0xb4>)
 80071b0:	7b1a      	ldrb	r2, [r3, #12]
 80071b2:	4b11      	ldr	r3, [pc, #68]	; (80071f8 <RadioSetModem+0xb4>)
 80071b4:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80071b6:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <RadioSetModem+0xb4>)
 80071b8:	7b5b      	ldrb	r3, [r3, #13]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 ff9a 	bl	80080f4 <RadioSetPublicNetwork>
        }
        break;
 80071c0:	e014      	b.n	80071ec <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80071c2:	2002      	movs	r0, #2
 80071c4:	f002 faf0 	bl	80097a8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80071c8:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <RadioSetModem+0xb4>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	735a      	strb	r2, [r3, #13]
        break;
 80071ce:	e00e      	b.n	80071ee <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80071d0:	2002      	movs	r0, #2
 80071d2:	f002 fae9 	bl	80097a8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80071d6:	4b08      	ldr	r3, [pc, #32]	; (80071f8 <RadioSetModem+0xb4>)
 80071d8:	2200      	movs	r2, #0
 80071da:	735a      	strb	r2, [r3, #13]
        break;
 80071dc:	e007      	b.n	80071ee <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80071de:	2000      	movs	r0, #0
 80071e0:	f002 fae2 	bl	80097a8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80071e4:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <RadioSetModem+0xb4>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	735a      	strb	r2, [r3, #13]
        break;
 80071ea:	e000      	b.n	80071ee <RadioSetModem+0xaa>
        break;
 80071ec:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200006d0 	.word	0x200006d0

080071fc <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f002 fa89 	bl	800971c <SUBGRF_SetRfFrequency>
}
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b090      	sub	sp, #64	; 0x40
 8007216:	af0a      	add	r7, sp, #40	; 0x28
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	603b      	str	r3, [r7, #0]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8007222:	2301      	movs	r3, #1
 8007224:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8007226:	2300      	movs	r3, #0
 8007228:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800722e:	f000 fdea 	bl	8007e06 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8007232:	2000      	movs	r0, #0
 8007234:	f7ff ff86 	bl	8007144 <RadioSetModem>

    RadioSetChannel( freq );
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff ffdf 	bl	80071fc <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800723e:	2301      	movs	r3, #1
 8007240:	9309      	str	r3, [sp, #36]	; 0x24
 8007242:	2300      	movs	r3, #0
 8007244:	9308      	str	r3, [sp, #32]
 8007246:	2300      	movs	r3, #0
 8007248:	9307      	str	r3, [sp, #28]
 800724a:	2300      	movs	r3, #0
 800724c:	9306      	str	r3, [sp, #24]
 800724e:	2300      	movs	r3, #0
 8007250:	9305      	str	r3, [sp, #20]
 8007252:	2300      	movs	r3, #0
 8007254:	9304      	str	r3, [sp, #16]
 8007256:	2300      	movs	r3, #0
 8007258:	9303      	str	r3, [sp, #12]
 800725a:	2300      	movs	r3, #0
 800725c:	9302      	str	r3, [sp, #8]
 800725e:	2303      	movs	r3, #3
 8007260:	9301      	str	r3, [sp, #4]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	2300      	movs	r3, #0
 8007268:	f44f 7216 	mov.w	r2, #600	; 0x258
 800726c:	68b9      	ldr	r1, [r7, #8]
 800726e:	2000      	movs	r0, #0
 8007270:	f000 f83c 	bl	80072ec <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007274:	2000      	movs	r0, #0
 8007276:	f000 fdcd 	bl	8007e14 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800727a:	f000 ff69 	bl	8008150 <RadioGetWakeupTime>
 800727e:	4603      	mov	r3, r0
 8007280:	4618      	mov	r0, r3
 8007282:	f7fa fcdb 	bl	8001c3c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8007286:	f003 fb93 	bl	800a9b0 <UTIL_TIMER_GetCurrentTime>
 800728a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800728c:	e00d      	b.n	80072aa <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800728e:	2000      	movs	r0, #0
 8007290:	f000 feae 	bl	8007ff0 <RadioRssi>
 8007294:	4603      	mov	r3, r0
 8007296:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8007298:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800729c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	dd02      	ble.n	80072aa <RadioIsChannelFree+0x98>
        {
            status = false;
 80072a4:	2300      	movs	r3, #0
 80072a6:	75fb      	strb	r3, [r7, #23]
            break;
 80072a8:	e006      	b.n	80072b8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80072aa:	6938      	ldr	r0, [r7, #16]
 80072ac:	f003 fb92 	bl	800a9d4 <UTIL_TIMER_GetElapsedTime>
 80072b0:	4602      	mov	r2, r0
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d8ea      	bhi.n	800728e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80072b8:	f000 fda5 	bl	8007e06 <RadioStandby>

    return status;
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b082      	sub	sp, #8
 80072ca:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80072d0:	2300      	movs	r3, #0
 80072d2:	2200      	movs	r2, #0
 80072d4:	2100      	movs	r1, #0
 80072d6:	2000      	movs	r0, #0
 80072d8:	f002 f9c4 	bl	8009664 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80072dc:	f001 ff75 	bl	80091ca <SUBGRF_GetRandom>
 80072e0:	6078      	str	r0, [r7, #4]

    return rnd;
 80072e2:	687b      	ldr	r3, [r7, #4]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	; 0x28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	607a      	str	r2, [r7, #4]
 80072f6:	461a      	mov	r2, r3
 80072f8:	4603      	mov	r3, r0
 80072fa:	73fb      	strb	r3, [r7, #15]
 80072fc:	4613      	mov	r3, r2
 80072fe:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8007300:	4ab9      	ldr	r2, [pc, #740]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 8007302:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007306:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8007308:	f003 f843 	bl	800a392 <RFW_DeInit>
    if( rxContinuous == true )
 800730c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8007318:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d004      	beq.n	800732a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8007320:	4ab2      	ldr	r2, [pc, #712]	; (80075ec <RadioSetRxConfig+0x300>)
 8007322:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007326:	7013      	strb	r3, [r2, #0]
 8007328:	e002      	b.n	8007330 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800732a:	4bb0      	ldr	r3, [pc, #704]	; (80075ec <RadioSetRxConfig+0x300>)
 800732c:	22ff      	movs	r2, #255	; 0xff
 800732e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	2b05      	cmp	r3, #5
 8007334:	d009      	beq.n	800734a <RadioSetRxConfig+0x5e>
 8007336:	2b05      	cmp	r3, #5
 8007338:	f300 81d7 	bgt.w	80076ea <RadioSetRxConfig+0x3fe>
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 80bf 	beq.w	80074c0 <RadioSetRxConfig+0x1d4>
 8007342:	2b01      	cmp	r3, #1
 8007344:	f000 8124 	beq.w	8007590 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007348:	e1cf      	b.n	80076ea <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800734a:	2001      	movs	r0, #1
 800734c:	f002 f882 	bl	8009454 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007350:	4ba5      	ldr	r3, [pc, #660]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007358:	4aa3      	ldr	r2, [pc, #652]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800735e:	4ba2      	ldr	r3, [pc, #648]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 8007360:	2209      	movs	r2, #9
 8007362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8007366:	4ba0      	ldr	r3, [pc, #640]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 8007368:	f44f 7248 	mov.w	r2, #800	; 0x320
 800736c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800736e:	68b8      	ldr	r0, [r7, #8]
 8007370:	f002 ff42 	bl	800a1f8 <SUBGRF_GetFskBandwidthRegValue>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	4b9b      	ldr	r3, [pc, #620]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 800737a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800737e:	4b9a      	ldr	r3, [pc, #616]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 8007380:	2200      	movs	r2, #0
 8007382:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007384:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	b29a      	uxth	r2, r3
 800738a:	4b97      	ldr	r3, [pc, #604]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 800738c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800738e:	4b96      	ldr	r3, [pc, #600]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 8007390:	2200      	movs	r2, #0
 8007392:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007394:	4b94      	ldr	r3, [pc, #592]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 8007396:	2210      	movs	r2, #16
 8007398:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800739a:	4b93      	ldr	r3, [pc, #588]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 800739c:	2200      	movs	r2, #0
 800739e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80073a0:	4b91      	ldr	r3, [pc, #580]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80073a6:	4b91      	ldr	r3, [pc, #580]	; (80075ec <RadioSetRxConfig+0x300>)
 80073a8:	781a      	ldrb	r2, [r3, #0]
 80073aa:	4b8f      	ldr	r3, [pc, #572]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80073ac:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80073ae:	4b8e      	ldr	r3, [pc, #568]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80073b0:	2201      	movs	r2, #1
 80073b2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80073b4:	4b8c      	ldr	r3, [pc, #560]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80073ba:	2005      	movs	r0, #5
 80073bc:	f7ff fec2 	bl	8007144 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80073c0:	488b      	ldr	r0, [pc, #556]	; (80075f0 <RadioSetRxConfig+0x304>)
 80073c2:	f002 fae5 	bl	8009990 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80073c6:	488b      	ldr	r0, [pc, #556]	; (80075f4 <RadioSetRxConfig+0x308>)
 80073c8:	f002 fbb4 	bl	8009b34 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80073cc:	4a8a      	ldr	r2, [pc, #552]	; (80075f8 <RadioSetRxConfig+0x30c>)
 80073ce:	f107 031c 	add.w	r3, r7, #28
 80073d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80073d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80073da:	f107 031c 	add.w	r3, r7, #28
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 fe71 	bl	80090c6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80073e4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80073e8:	f001 febc 	bl	8009164 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80073ec:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80073f0:	f000 fe1d 	bl	800802e <RadioRead>
 80073f4:	4603      	mov	r3, r0
 80073f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80073fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073fe:	f023 0310 	bic.w	r3, r3, #16
 8007402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8007406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800740a:	4619      	mov	r1, r3
 800740c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007410:	f000 fdfb 	bl	800800a <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8007414:	2104      	movs	r1, #4
 8007416:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800741a:	f000 fdf6 	bl	800800a <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800741e:	f640 009b 	movw	r0, #2203	; 0x89b
 8007422:	f000 fe04 	bl	800802e <RadioRead>
 8007426:	4603      	mov	r3, r0
 8007428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800742c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007430:	f023 031c 	bic.w	r3, r3, #28
 8007434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800743c:	f043 0308 	orr.w	r3, r3, #8
 8007440:	b2db      	uxtb	r3, r3
 8007442:	4619      	mov	r1, r3
 8007444:	f640 009b 	movw	r0, #2203	; 0x89b
 8007448:	f000 fddf 	bl	800800a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800744c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007450:	f000 fded 	bl	800802e <RadioRead>
 8007454:	4603      	mov	r3, r0
 8007456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800745a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800745e:	f023 0318 	bic.w	r3, r3, #24
 8007462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8007466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800746a:	f043 0318 	orr.w	r3, r3, #24
 800746e:	b2db      	uxtb	r3, r3
 8007470:	4619      	mov	r1, r3
 8007472:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007476:	f000 fdc8 	bl	800800a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800747a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800747e:	f000 fdd6 	bl	800802e <RadioRead>
 8007482:	4603      	mov	r3, r0
 8007484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8007488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800748c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8007494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007498:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800749c:	b2db      	uxtb	r3, r3
 800749e:	4619      	mov	r1, r3
 80074a0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80074a4:	f000 fdb1 	bl	800800a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80074a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80074aa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80074ae:	fb02 f303 	mul.w	r3, r2, r3
 80074b2:	461a      	mov	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ba:	4a4b      	ldr	r2, [pc, #300]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80074bc:	6093      	str	r3, [r2, #8]
            break;
 80074be:	e115      	b.n	80076ec <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80074c0:	2000      	movs	r0, #0
 80074c2:	f001 ffc7 	bl	8009454 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80074c6:	4b48      	ldr	r3, [pc, #288]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80074ce:	4a46      	ldr	r2, [pc, #280]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80074d4:	4b44      	ldr	r3, [pc, #272]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80074d6:	220b      	movs	r2, #11
 80074d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80074dc:	68b8      	ldr	r0, [r7, #8]
 80074de:	f002 fe8b 	bl	800a1f8 <SUBGRF_GetFskBandwidthRegValue>
 80074e2:	4603      	mov	r3, r0
 80074e4:	461a      	mov	r2, r3
 80074e6:	4b40      	ldr	r3, [pc, #256]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80074e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80074ec:	4b3e      	ldr	r3, [pc, #248]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80074f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	4b3b      	ldr	r3, [pc, #236]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80074fa:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80074fc:	4b3a      	ldr	r3, [pc, #232]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80074fe:	2204      	movs	r2, #4
 8007500:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8007502:	4b39      	ldr	r3, [pc, #228]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 8007504:	2218      	movs	r2, #24
 8007506:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007508:	4b37      	ldr	r3, [pc, #220]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 800750a:	2200      	movs	r2, #0
 800750c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800750e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007512:	f083 0301 	eor.w	r3, r3, #1
 8007516:	b2db      	uxtb	r3, r3
 8007518:	461a      	mov	r2, r3
 800751a:	4b33      	ldr	r3, [pc, #204]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 800751c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800751e:	4b33      	ldr	r3, [pc, #204]	; (80075ec <RadioSetRxConfig+0x300>)
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	4b31      	ldr	r3, [pc, #196]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 8007524:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8007526:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800752e:	4b2e      	ldr	r3, [pc, #184]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 8007530:	22f2      	movs	r2, #242	; 0xf2
 8007532:	75da      	strb	r2, [r3, #23]
 8007534:	e002      	b.n	800753c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007536:	4b2c      	ldr	r3, [pc, #176]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 8007538:	2201      	movs	r2, #1
 800753a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800753c:	4b2a      	ldr	r3, [pc, #168]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 800753e:	2201      	movs	r2, #1
 8007540:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007542:	f000 fc60 	bl	8007e06 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8007546:	2000      	movs	r0, #0
 8007548:	f7ff fdfc 	bl	8007144 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800754c:	4828      	ldr	r0, [pc, #160]	; (80075f0 <RadioSetRxConfig+0x304>)
 800754e:	f002 fa1f 	bl	8009990 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007552:	4828      	ldr	r0, [pc, #160]	; (80075f4 <RadioSetRxConfig+0x308>)
 8007554:	f002 faee 	bl	8009b34 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007558:	4a28      	ldr	r2, [pc, #160]	; (80075fc <RadioSetRxConfig+0x310>)
 800755a:	f107 0314 	add.w	r3, r7, #20
 800755e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007562:	e883 0003 	stmia.w	r3, {r0, r1}
 8007566:	f107 0314 	add.w	r3, r7, #20
 800756a:	4618      	mov	r0, r3
 800756c:	f001 fdab 	bl	80090c6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007570:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007574:	f001 fdf6 	bl	8009164 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007578:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800757a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800757e:	fb02 f303 	mul.w	r3, r2, r3
 8007582:	461a      	mov	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	fbb2 f3f3 	udiv	r3, r2, r3
 800758a:	4a17      	ldr	r2, [pc, #92]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 800758c:	6093      	str	r3, [r2, #8]
            break;
 800758e:	e0ad      	b.n	80076ec <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007590:	2000      	movs	r0, #0
 8007592:	f001 ff5f 	bl	8009454 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007596:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	4b11      	ldr	r3, [pc, #68]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80075a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80075a8:	4a15      	ldr	r2, [pc, #84]	; (8007600 <RadioSetRxConfig+0x314>)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	4413      	add	r3, r2
 80075ae:	781a      	ldrb	r2, [r3, #0]
 80075b0:	4b0d      	ldr	r3, [pc, #52]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80075b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80075b6:	4a0c      	ldr	r2, [pc, #48]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d105      	bne.n	80075d0 <RadioSetRxConfig+0x2e4>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b0b      	cmp	r3, #11
 80075c8:	d008      	beq.n	80075dc <RadioSetRxConfig+0x2f0>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b0c      	cmp	r3, #12
 80075ce:	d005      	beq.n	80075dc <RadioSetRxConfig+0x2f0>
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d116      	bne.n	8007604 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b0c      	cmp	r3, #12
 80075da:	d113      	bne.n	8007604 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80075dc:	4b02      	ldr	r3, [pc, #8]	; (80075e8 <RadioSetRxConfig+0x2fc>)
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80075e4:	e012      	b.n	800760c <RadioSetRxConfig+0x320>
 80075e6:	bf00      	nop
 80075e8:	200006d0 	.word	0x200006d0
 80075ec:	2000000d 	.word	0x2000000d
 80075f0:	20000708 	.word	0x20000708
 80075f4:	200006de 	.word	0x200006de
 80075f8:	0800b964 	.word	0x0800b964
 80075fc:	0800b96c 	.word	0x0800b96c
 8007600:	0800bb08 	.word	0x0800bb08
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007604:	4b3b      	ldr	r3, [pc, #236]	; (80076f4 <RadioSetRxConfig+0x408>)
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800760c:	4b39      	ldr	r3, [pc, #228]	; (80076f4 <RadioSetRxConfig+0x408>)
 800760e:	2201      	movs	r2, #1
 8007610:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007612:	4b38      	ldr	r3, [pc, #224]	; (80076f4 <RadioSetRxConfig+0x408>)
 8007614:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007618:	2b05      	cmp	r3, #5
 800761a:	d004      	beq.n	8007626 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800761c:	4b35      	ldr	r3, [pc, #212]	; (80076f4 <RadioSetRxConfig+0x408>)
 800761e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007622:	2b06      	cmp	r3, #6
 8007624:	d10a      	bne.n	800763c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8007626:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007628:	2b0b      	cmp	r3, #11
 800762a:	d803      	bhi.n	8007634 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800762c:	4b31      	ldr	r3, [pc, #196]	; (80076f4 <RadioSetRxConfig+0x408>)
 800762e:	220c      	movs	r2, #12
 8007630:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007632:	e006      	b.n	8007642 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007634:	4a2f      	ldr	r2, [pc, #188]	; (80076f4 <RadioSetRxConfig+0x408>)
 8007636:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007638:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800763a:	e002      	b.n	8007642 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800763c:	4a2d      	ldr	r2, [pc, #180]	; (80076f4 <RadioSetRxConfig+0x408>)
 800763e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007640:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007642:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007646:	4b2b      	ldr	r3, [pc, #172]	; (80076f4 <RadioSetRxConfig+0x408>)
 8007648:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800764a:	4b2b      	ldr	r3, [pc, #172]	; (80076f8 <RadioSetRxConfig+0x40c>)
 800764c:	781a      	ldrb	r2, [r3, #0]
 800764e:	4b29      	ldr	r3, [pc, #164]	; (80076f4 <RadioSetRxConfig+0x408>)
 8007650:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007652:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007656:	4b27      	ldr	r3, [pc, #156]	; (80076f4 <RadioSetRxConfig+0x408>)
 8007658:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800765c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8007660:	4b24      	ldr	r3, [pc, #144]	; (80076f4 <RadioSetRxConfig+0x408>)
 8007662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007666:	f000 fbce 	bl	8007e06 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800766a:	2001      	movs	r0, #1
 800766c:	f7ff fd6a 	bl	8007144 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007670:	4822      	ldr	r0, [pc, #136]	; (80076fc <RadioSetRxConfig+0x410>)
 8007672:	f002 f98d 	bl	8009990 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007676:	4822      	ldr	r0, [pc, #136]	; (8007700 <RadioSetRxConfig+0x414>)
 8007678:	f002 fa5c 	bl	8009b34 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800767c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800767e:	b2db      	uxtb	r3, r3
 8007680:	4618      	mov	r0, r3
 8007682:	f001 fef6 	bl	8009472 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8007686:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800768a:	f002 fbaf 	bl	8009dec <SUBGRF_ReadRegister>
 800768e:	4603      	mov	r3, r0
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	b2db      	uxtb	r3, r3
 8007696:	4619      	mov	r1, r3
 8007698:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800769c:	f002 fb92 	bl	8009dc4 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80076a0:	4b14      	ldr	r3, [pc, #80]	; (80076f4 <RadioSetRxConfig+0x408>)
 80076a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d10d      	bne.n	80076c6 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80076aa:	f240 7036 	movw	r0, #1846	; 0x736
 80076ae:	f002 fb9d 	bl	8009dec <SUBGRF_ReadRegister>
 80076b2:	4603      	mov	r3, r0
 80076b4:	f023 0304 	bic.w	r3, r3, #4
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	4619      	mov	r1, r3
 80076bc:	f240 7036 	movw	r0, #1846	; 0x736
 80076c0:	f002 fb80 	bl	8009dc4 <SUBGRF_WriteRegister>
 80076c4:	e00c      	b.n	80076e0 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80076c6:	f240 7036 	movw	r0, #1846	; 0x736
 80076ca:	f002 fb8f 	bl	8009dec <SUBGRF_ReadRegister>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f043 0304 	orr.w	r3, r3, #4
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	4619      	mov	r1, r3
 80076d8:	f240 7036 	movw	r0, #1846	; 0x736
 80076dc:	f002 fb72 	bl	8009dc4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80076e0:	4b04      	ldr	r3, [pc, #16]	; (80076f4 <RadioSetRxConfig+0x408>)
 80076e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076e6:	609a      	str	r2, [r3, #8]
            break;
 80076e8:	e000      	b.n	80076ec <RadioSetRxConfig+0x400>
            break;
 80076ea:	bf00      	nop
    }
}
 80076ec:	bf00      	nop
 80076ee:	3728      	adds	r7, #40	; 0x28
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	200006d0 	.word	0x200006d0
 80076f8:	2000000d 	.word	0x2000000d
 80076fc:	20000708 	.word	0x20000708
 8007700:	200006de 	.word	0x200006de

08007704 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	60ba      	str	r2, [r7, #8]
 800770c:	607b      	str	r3, [r7, #4]
 800770e:	4603      	mov	r3, r0
 8007710:	73fb      	strb	r3, [r7, #15]
 8007712:	460b      	mov	r3, r1
 8007714:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8007716:	f002 fe3c 	bl	800a392 <RFW_DeInit>
    switch( modem )
 800771a:	7bfb      	ldrb	r3, [r7, #15]
 800771c:	2b04      	cmp	r3, #4
 800771e:	f000 80c7 	beq.w	80078b0 <RadioSetTxConfig+0x1ac>
 8007722:	2b04      	cmp	r3, #4
 8007724:	f300 80d6 	bgt.w	80078d4 <RadioSetTxConfig+0x1d0>
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <RadioSetTxConfig+0x2e>
 800772c:	2b01      	cmp	r3, #1
 800772e:	d059      	beq.n	80077e4 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007730:	e0d0      	b.n	80078d4 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007732:	4b77      	ldr	r3, [pc, #476]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800773a:	4a75      	ldr	r2, [pc, #468]	; (8007910 <RadioSetTxConfig+0x20c>)
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007740:	4b73      	ldr	r3, [pc, #460]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007742:	220b      	movs	r2, #11
 8007744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f002 fd55 	bl	800a1f8 <SUBGRF_GetFskBandwidthRegValue>
 800774e:	4603      	mov	r3, r0
 8007750:	461a      	mov	r2, r3
 8007752:	4b6f      	ldr	r3, [pc, #444]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8007758:	4a6d      	ldr	r2, [pc, #436]	; (8007910 <RadioSetTxConfig+0x20c>)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800775e:	4b6c      	ldr	r3, [pc, #432]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007760:	2200      	movs	r2, #0
 8007762:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007764:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	b29a      	uxth	r2, r3
 800776a:	4b69      	ldr	r3, [pc, #420]	; (8007910 <RadioSetTxConfig+0x20c>)
 800776c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800776e:	4b68      	ldr	r3, [pc, #416]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007770:	2204      	movs	r2, #4
 8007772:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007774:	4b66      	ldr	r3, [pc, #408]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007776:	2218      	movs	r2, #24
 8007778:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800777a:	4b65      	ldr	r3, [pc, #404]	; (8007910 <RadioSetTxConfig+0x20c>)
 800777c:	2200      	movs	r2, #0
 800777e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007780:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007784:	f083 0301 	eor.w	r3, r3, #1
 8007788:	b2db      	uxtb	r3, r3
 800778a:	461a      	mov	r2, r3
 800778c:	4b60      	ldr	r3, [pc, #384]	; (8007910 <RadioSetTxConfig+0x20c>)
 800778e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007790:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007798:	4b5d      	ldr	r3, [pc, #372]	; (8007910 <RadioSetTxConfig+0x20c>)
 800779a:	22f2      	movs	r2, #242	; 0xf2
 800779c:	75da      	strb	r2, [r3, #23]
 800779e:	e002      	b.n	80077a6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80077a0:	4b5b      	ldr	r3, [pc, #364]	; (8007910 <RadioSetTxConfig+0x20c>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80077a6:	4b5a      	ldr	r3, [pc, #360]	; (8007910 <RadioSetTxConfig+0x20c>)
 80077a8:	2201      	movs	r2, #1
 80077aa:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80077ac:	f000 fb2b 	bl	8007e06 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80077b0:	2000      	movs	r0, #0
 80077b2:	f7ff fcc7 	bl	8007144 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80077b6:	4857      	ldr	r0, [pc, #348]	; (8007914 <RadioSetTxConfig+0x210>)
 80077b8:	f002 f8ea 	bl	8009990 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80077bc:	4856      	ldr	r0, [pc, #344]	; (8007918 <RadioSetTxConfig+0x214>)
 80077be:	f002 f9b9 	bl	8009b34 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80077c2:	4a56      	ldr	r2, [pc, #344]	; (800791c <RadioSetTxConfig+0x218>)
 80077c4:	f107 0310 	add.w	r3, r7, #16
 80077c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80077cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80077d0:	f107 0310 	add.w	r3, r7, #16
 80077d4:	4618      	mov	r0, r3
 80077d6:	f001 fc76 	bl	80090c6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80077da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80077de:	f001 fcc1 	bl	8009164 <SUBGRF_SetWhiteningSeed>
            break;
 80077e2:	e078      	b.n	80078d6 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80077e4:	4b4a      	ldr	r3, [pc, #296]	; (8007910 <RadioSetTxConfig+0x20c>)
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	4b47      	ldr	r3, [pc, #284]	; (8007910 <RadioSetTxConfig+0x20c>)
 80077f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80077f6:	4a4a      	ldr	r2, [pc, #296]	; (8007920 <RadioSetTxConfig+0x21c>)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4413      	add	r3, r2
 80077fc:	781a      	ldrb	r2, [r3, #0]
 80077fe:	4b44      	ldr	r3, [pc, #272]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007804:	4a42      	ldr	r2, [pc, #264]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007806:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800780a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d105      	bne.n	8007820 <RadioSetTxConfig+0x11c>
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	2b0b      	cmp	r3, #11
 8007818:	d008      	beq.n	800782c <RadioSetTxConfig+0x128>
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	2b0c      	cmp	r3, #12
 800781e:	d005      	beq.n	800782c <RadioSetTxConfig+0x128>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d107      	bne.n	8007836 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	2b0c      	cmp	r3, #12
 800782a:	d104      	bne.n	8007836 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800782c:	4b38      	ldr	r3, [pc, #224]	; (8007910 <RadioSetTxConfig+0x20c>)
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007834:	e003      	b.n	800783e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007836:	4b36      	ldr	r3, [pc, #216]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800783e:	4b34      	ldr	r3, [pc, #208]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007840:	2201      	movs	r2, #1
 8007842:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007844:	4b32      	ldr	r3, [pc, #200]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007846:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800784a:	2b05      	cmp	r3, #5
 800784c:	d004      	beq.n	8007858 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800784e:	4b30      	ldr	r3, [pc, #192]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007850:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007854:	2b06      	cmp	r3, #6
 8007856:	d10a      	bne.n	800786e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8007858:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800785a:	2b0b      	cmp	r3, #11
 800785c:	d803      	bhi.n	8007866 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800785e:	4b2c      	ldr	r3, [pc, #176]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007860:	220c      	movs	r2, #12
 8007862:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007864:	e006      	b.n	8007874 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007866:	4a2a      	ldr	r2, [pc, #168]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007868:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800786a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800786c:	e002      	b.n	8007874 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800786e:	4a28      	ldr	r2, [pc, #160]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007870:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007872:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007874:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007878:	4b25      	ldr	r3, [pc, #148]	; (8007910 <RadioSetTxConfig+0x20c>)
 800787a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800787c:	4b29      	ldr	r3, [pc, #164]	; (8007924 <RadioSetTxConfig+0x220>)
 800787e:	781a      	ldrb	r2, [r3, #0]
 8007880:	4b23      	ldr	r3, [pc, #140]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007882:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007884:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007888:	4b21      	ldr	r3, [pc, #132]	; (8007910 <RadioSetTxConfig+0x20c>)
 800788a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800788e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007892:	4b1f      	ldr	r3, [pc, #124]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007894:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007898:	f000 fab5 	bl	8007e06 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800789c:	2001      	movs	r0, #1
 800789e:	f7ff fc51 	bl	8007144 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80078a2:	481c      	ldr	r0, [pc, #112]	; (8007914 <RadioSetTxConfig+0x210>)
 80078a4:	f002 f874 	bl	8009990 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80078a8:	481b      	ldr	r0, [pc, #108]	; (8007918 <RadioSetTxConfig+0x214>)
 80078aa:	f002 f943 	bl	8009b34 <SUBGRF_SetPacketParams>
            break;
 80078ae:	e012      	b.n	80078d6 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80078b0:	2004      	movs	r0, #4
 80078b2:	f7ff fc47 	bl	8007144 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80078b6:	4b16      	ldr	r3, [pc, #88]	; (8007910 <RadioSetTxConfig+0x20c>)
 80078b8:	2202      	movs	r2, #2
 80078ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80078be:	4a14      	ldr	r2, [pc, #80]	; (8007910 <RadioSetTxConfig+0x20c>)
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80078c4:	4b12      	ldr	r3, [pc, #72]	; (8007910 <RadioSetTxConfig+0x20c>)
 80078c6:	2216      	movs	r2, #22
 80078c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80078cc:	4811      	ldr	r0, [pc, #68]	; (8007914 <RadioSetTxConfig+0x210>)
 80078ce:	f002 f85f 	bl	8009990 <SUBGRF_SetModulationParams>
            break;
 80078d2:	e000      	b.n	80078d6 <RadioSetTxConfig+0x1d2>
            break;
 80078d4:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80078d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078da:	4618      	mov	r0, r3
 80078dc:	f002 fb8e 	bl	8009ffc <SUBGRF_SetRfTxPower>
 80078e0:	4603      	mov	r3, r0
 80078e2:	461a      	mov	r2, r3
 80078e4:	4b0a      	ldr	r3, [pc, #40]	; (8007910 <RadioSetTxConfig+0x20c>)
 80078e6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80078ea:	210e      	movs	r1, #14
 80078ec:	f640 101f 	movw	r0, #2335	; 0x91f
 80078f0:	f002 fa68 	bl	8009dc4 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80078f4:	4b06      	ldr	r3, [pc, #24]	; (8007910 <RadioSetTxConfig+0x20c>)
 80078f6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80078fa:	4618      	mov	r0, r3
 80078fc:	f002 fd5d 	bl	800a3ba <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007900:	4a03      	ldr	r2, [pc, #12]	; (8007910 <RadioSetTxConfig+0x20c>)
 8007902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007904:	6053      	str	r3, [r2, #4]
}
 8007906:	bf00      	nop
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	200006d0 	.word	0x200006d0
 8007914:	20000708 	.word	0x20000708
 8007918:	200006de 	.word	0x200006de
 800791c:	0800b96c 	.word	0x0800b96c
 8007920:	0800bb08 	.word	0x0800bb08
 8007924:	2000000d 	.word	0x2000000d

08007928 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
    return true;
 8007930:	2301      	movs	r3, #1
}
 8007932:	4618      	mov	r0, r3
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	bc80      	pop	{r7}
 800793a:	4770      	bx	lr

0800793c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	2b0a      	cmp	r3, #10
 800794e:	d83e      	bhi.n	80079ce <RadioGetLoRaBandwidthInHz+0x92>
 8007950:	a201      	add	r2, pc, #4	; (adr r2, 8007958 <RadioGetLoRaBandwidthInHz+0x1c>)
 8007952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007956:	bf00      	nop
 8007958:	08007985 	.word	0x08007985
 800795c:	08007995 	.word	0x08007995
 8007960:	080079a5 	.word	0x080079a5
 8007964:	080079b5 	.word	0x080079b5
 8007968:	080079bd 	.word	0x080079bd
 800796c:	080079c3 	.word	0x080079c3
 8007970:	080079c9 	.word	0x080079c9
 8007974:	080079cf 	.word	0x080079cf
 8007978:	0800798d 	.word	0x0800798d
 800797c:	0800799d 	.word	0x0800799d
 8007980:	080079ad 	.word	0x080079ad
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007984:	f641 6384 	movw	r3, #7812	; 0x1e84
 8007988:	60fb      	str	r3, [r7, #12]
        break;
 800798a:	e020      	b.n	80079ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800798c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8007990:	60fb      	str	r3, [r7, #12]
        break;
 8007992:	e01c      	b.n	80079ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007994:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007998:	60fb      	str	r3, [r7, #12]
        break;
 800799a:	e018      	b.n	80079ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800799c:	f245 1361 	movw	r3, #20833	; 0x5161
 80079a0:	60fb      	str	r3, [r7, #12]
        break;
 80079a2:	e014      	b.n	80079ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80079a4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80079a8:	60fb      	str	r3, [r7, #12]
        break;
 80079aa:	e010      	b.n	80079ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80079ac:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80079b0:	60fb      	str	r3, [r7, #12]
        break;
 80079b2:	e00c      	b.n	80079ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80079b4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80079b8:	60fb      	str	r3, [r7, #12]
        break;
 80079ba:	e008      	b.n	80079ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80079bc:	4b07      	ldr	r3, [pc, #28]	; (80079dc <RadioGetLoRaBandwidthInHz+0xa0>)
 80079be:	60fb      	str	r3, [r7, #12]
        break;
 80079c0:	e005      	b.n	80079ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80079c2:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <RadioGetLoRaBandwidthInHz+0xa4>)
 80079c4:	60fb      	str	r3, [r7, #12]
        break;
 80079c6:	e002      	b.n	80079ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80079c8:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <RadioGetLoRaBandwidthInHz+0xa8>)
 80079ca:	60fb      	str	r3, [r7, #12]
        break;
 80079cc:	bf00      	nop
    }

    return bandwidthInHz;
 80079ce:	68fb      	ldr	r3, [r7, #12]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bc80      	pop	{r7}
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	0001e848 	.word	0x0001e848
 80079e0:	0003d090 	.word	0x0003d090
 80079e4:	0007a120 	.word	0x0007a120

080079e8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	4608      	mov	r0, r1
 80079f2:	4611      	mov	r1, r2
 80079f4:	461a      	mov	r2, r3
 80079f6:	4603      	mov	r3, r0
 80079f8:	70fb      	strb	r3, [r7, #3]
 80079fa:	460b      	mov	r3, r1
 80079fc:	803b      	strh	r3, [r7, #0]
 80079fe:	4613      	mov	r3, r2
 8007a00:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8007a02:	883b      	ldrh	r3, [r7, #0]
 8007a04:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007a06:	78ba      	ldrb	r2, [r7, #2]
 8007a08:	f082 0201 	eor.w	r2, r2, #1
 8007a0c:	b2d2      	uxtb	r2, r2
 8007a0e:	2a00      	cmp	r2, #0
 8007a10:	d001      	beq.n	8007a16 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8007a12:	2208      	movs	r2, #8
 8007a14:	e000      	b.n	8007a18 <RadioGetGfskTimeOnAirNumerator+0x30>
 8007a16:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007a18:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007a1a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8007a1e:	7c3b      	ldrb	r3, [r7, #16]
 8007a20:	7d39      	ldrb	r1, [r7, #20]
 8007a22:	2900      	cmp	r1, #0
 8007a24:	d001      	beq.n	8007a2a <RadioGetGfskTimeOnAirNumerator+0x42>
 8007a26:	2102      	movs	r1, #2
 8007a28:	e000      	b.n	8007a2c <RadioGetGfskTimeOnAirNumerator+0x44>
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	440b      	add	r3, r1
 8007a2e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007a30:	4413      	add	r3, r2
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr

08007a3c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b08b      	sub	sp, #44	; 0x2c
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4611      	mov	r1, r2
 8007a48:	461a      	mov	r2, r3
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	71fb      	strb	r3, [r7, #7]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	3304      	adds	r3, #4
 8007a56:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2b05      	cmp	r3, #5
 8007a62:	d002      	beq.n	8007a6a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b06      	cmp	r3, #6
 8007a68:	d104      	bne.n	8007a74 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007a6a:	88bb      	ldrh	r3, [r7, #4]
 8007a6c:	2b0b      	cmp	r3, #11
 8007a6e:	d801      	bhi.n	8007a74 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007a70:	230c      	movs	r3, #12
 8007a72:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d105      	bne.n	8007a86 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b0b      	cmp	r3, #11
 8007a7e:	d008      	beq.n	8007a92 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b0c      	cmp	r3, #12
 8007a84:	d005      	beq.n	8007a92 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d105      	bne.n	8007a98 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2b0c      	cmp	r3, #12
 8007a90:	d102      	bne.n	8007a98 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007a92:	2301      	movs	r3, #1
 8007a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007a98:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007a9c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007a9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007aa2:	2a00      	cmp	r2, #0
 8007aa4:	d001      	beq.n	8007aaa <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007aa6:	2210      	movs	r2, #16
 8007aa8:	e000      	b.n	8007aac <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007aaa:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007aac:	4413      	add	r3, r2
 8007aae:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007ab4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007ab6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	d001      	beq.n	8007ac2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007abe:	2200      	movs	r2, #0
 8007ac0:	e000      	b.n	8007ac4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007ac2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007ac4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007ac6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2b06      	cmp	r3, #6
 8007acc:	d803      	bhi.n	8007ad6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	623b      	str	r3, [r7, #32]
 8007ad4:	e00e      	b.n	8007af4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	3308      	adds	r3, #8
 8007ada:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	3b02      	subs	r3, #2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	623b      	str	r3, [r7, #32]
 8007aec:	e002      	b.n	8007af4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	da01      	bge.n	8007afe <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	4413      	add	r3, r2
 8007b04:	1e5a      	subs	r2, r3, #1
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	fb92 f3f3 	sdiv	r3, r2, r3
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	fb03 f202 	mul.w	r2, r3, r2
 8007b12:	88bb      	ldrh	r3, [r7, #4]
 8007b14:	4413      	add	r3, r2
    int32_t intermediate =
 8007b16:	330c      	adds	r3, #12
 8007b18:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b06      	cmp	r3, #6
 8007b1e:	d802      	bhi.n	8007b26 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	3302      	adds	r3, #2
 8007b24:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	3b02      	subs	r3, #2
 8007b30:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	372c      	adds	r7, #44	; 0x2c
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr
	...

08007b40 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08a      	sub	sp, #40	; 0x28
 8007b44:	af04      	add	r7, sp, #16
 8007b46:	60b9      	str	r1, [r7, #8]
 8007b48:	607a      	str	r2, [r7, #4]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]
 8007b50:	4613      	mov	r3, r2
 8007b52:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007b54:	2300      	movs	r3, #0
 8007b56:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <RadioTimeOnAir+0x28>
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d017      	beq.n	8007b96 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007b66:	e035      	b.n	8007bd4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007b68:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007b6c:	8c3a      	ldrh	r2, [r7, #32]
 8007b6e:	7bb9      	ldrb	r1, [r7, #14]
 8007b70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b74:	9301      	str	r3, [sp, #4]
 8007b76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7ff ff32 	bl	80079e8 <RadioGetGfskTimeOnAirNumerator>
 8007b84:	4603      	mov	r3, r0
 8007b86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b8a:	fb02 f303 	mul.w	r3, r2, r3
 8007b8e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	613b      	str	r3, [r7, #16]
        break;
 8007b94:	e01e      	b.n	8007bd4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007b96:	8c39      	ldrh	r1, [r7, #32]
 8007b98:	7bba      	ldrb	r2, [r7, #14]
 8007b9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b9e:	9302      	str	r3, [sp, #8]
 8007ba0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	460b      	mov	r3, r1
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	68b8      	ldr	r0, [r7, #8]
 8007bb2:	f7ff ff43 	bl	8007a3c <RadioGetLoRaTimeOnAirNumerator>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bbc:	fb02 f303 	mul.w	r3, r2, r3
 8007bc0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007bc2:	4a0a      	ldr	r2, [pc, #40]	; (8007bec <RadioTimeOnAir+0xac>)
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7ff feb6 	bl	800793c <RadioGetLoRaBandwidthInHz>
 8007bd0:	6138      	str	r0, [r7, #16]
        break;
 8007bd2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	4413      	add	r3, r2
 8007bda:	1e5a      	subs	r2, r3, #1
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	0800bb08 	.word	0x0800bb08

08007bf0 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f240 2101 	movw	r1, #513	; 0x201
 8007c04:	f240 2001 	movw	r0, #513	; 0x201
 8007c08:	f001 fd2c 	bl	8009664 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007c0c:	4b70      	ldr	r3, [pc, #448]	; (8007dd0 <RadioSend+0x1e0>)
 8007c0e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007c12:	2101      	movs	r1, #1
 8007c14:	4618      	mov	r0, r3
 8007c16:	f002 f9c9 	bl	8009fac <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007c1a:	4b6d      	ldr	r3, [pc, #436]	; (8007dd0 <RadioSend+0x1e0>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d112      	bne.n	8007c48 <RadioSend+0x58>
 8007c22:	4b6b      	ldr	r3, [pc, #428]	; (8007dd0 <RadioSend+0x1e0>)
 8007c24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c28:	2b06      	cmp	r3, #6
 8007c2a:	d10d      	bne.n	8007c48 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007c2c:	f640 0089 	movw	r0, #2185	; 0x889
 8007c30:	f002 f8dc 	bl	8009dec <SUBGRF_ReadRegister>
 8007c34:	4603      	mov	r3, r0
 8007c36:	f023 0304 	bic.w	r3, r3, #4
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	f640 0089 	movw	r0, #2185	; 0x889
 8007c42:	f002 f8bf 	bl	8009dc4 <SUBGRF_WriteRegister>
 8007c46:	e00c      	b.n	8007c62 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007c48:	f640 0089 	movw	r0, #2185	; 0x889
 8007c4c:	f002 f8ce 	bl	8009dec <SUBGRF_ReadRegister>
 8007c50:	4603      	mov	r3, r0
 8007c52:	f043 0304 	orr.w	r3, r3, #4
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	4619      	mov	r1, r3
 8007c5a:	f640 0089 	movw	r0, #2185	; 0x889
 8007c5e:	f002 f8b1 	bl	8009dc4 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8007c62:	4b5b      	ldr	r3, [pc, #364]	; (8007dd0 <RadioSend+0x1e0>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	f200 80a2 	bhi.w	8007db0 <RadioSend+0x1c0>
 8007c6c:	a201      	add	r2, pc, #4	; (adr r2, 8007c74 <RadioSend+0x84>)
 8007c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c72:	bf00      	nop
 8007c74:	08007ca3 	.word	0x08007ca3
 8007c78:	08007c89 	.word	0x08007c89
 8007c7c:	08007ca3 	.word	0x08007ca3
 8007c80:	08007cf9 	.word	0x08007cf9
 8007c84:	08007d19 	.word	0x08007d19
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007c88:	4a51      	ldr	r2, [pc, #324]	; (8007dd0 <RadioSend+0x1e0>)
 8007c8a:	78fb      	ldrb	r3, [r7, #3]
 8007c8c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007c8e:	4851      	ldr	r0, [pc, #324]	; (8007dd4 <RadioSend+0x1e4>)
 8007c90:	f001 ff50 	bl	8009b34 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	2200      	movs	r2, #0
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 fa00 	bl	80090a0 <SUBGRF_SendPayload>
            break;
 8007ca0:	e087      	b.n	8007db2 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007ca2:	f002 fb7c 	bl	800a39e <RFW_Is_Init>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d118      	bne.n	8007cde <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007cac:	f107 020d 	add.w	r2, r7, #13
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f002 fb8a 	bl	800a3ce <RFW_TransmitInit>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10c      	bne.n	8007cda <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007cc0:	7b7a      	ldrb	r2, [r7, #13]
 8007cc2:	4b43      	ldr	r3, [pc, #268]	; (8007dd0 <RadioSend+0x1e0>)
 8007cc4:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007cc6:	4843      	ldr	r0, [pc, #268]	; (8007dd4 <RadioSend+0x1e4>)
 8007cc8:	f001 ff34 	bl	8009b34 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8007ccc:	7b7b      	ldrb	r3, [r7, #13]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 f9e4 	bl	80090a0 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8007cd8:	e06b      	b.n	8007db2 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e073      	b.n	8007dc6 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8007cde:	4a3c      	ldr	r2, [pc, #240]	; (8007dd0 <RadioSend+0x1e0>)
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ce4:	483b      	ldr	r0, [pc, #236]	; (8007dd4 <RadioSend+0x1e4>)
 8007ce6:	f001 ff25 	bl	8009b34 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8007cea:	78fb      	ldrb	r3, [r7, #3]
 8007cec:	2200      	movs	r2, #0
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 f9d5 	bl	80090a0 <SUBGRF_SendPayload>
            break;
 8007cf6:	e05c      	b.n	8007db2 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007cf8:	4b35      	ldr	r3, [pc, #212]	; (8007dd0 <RadioSend+0x1e0>)
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8007cfe:	4a34      	ldr	r2, [pc, #208]	; (8007dd0 <RadioSend+0x1e0>)
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007d04:	4833      	ldr	r0, [pc, #204]	; (8007dd4 <RadioSend+0x1e4>)
 8007d06:	f001 ff15 	bl	8009b34 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 f9c5 	bl	80090a0 <SUBGRF_SendPayload>
            break;
 8007d16:	e04c      	b.n	8007db2 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8007d18:	78fb      	ldrb	r3, [r7, #3]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	482e      	ldr	r0, [pc, #184]	; (8007dd8 <RadioSend+0x1e8>)
 8007d20:	f000 fc98 	bl	8008654 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007d24:	4b2a      	ldr	r3, [pc, #168]	; (8007dd0 <RadioSend+0x1e0>)
 8007d26:	2202      	movs	r2, #2
 8007d28:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	4b27      	ldr	r3, [pc, #156]	; (8007dd0 <RadioSend+0x1e0>)
 8007d32:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007d34:	4827      	ldr	r0, [pc, #156]	; (8007dd4 <RadioSend+0x1e4>)
 8007d36:	f001 fefd 	bl	8009b34 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	20f1      	movs	r0, #241	; 0xf1
 8007d3e:	f000 f964 	bl	800800a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8007d42:	2100      	movs	r1, #0
 8007d44:	20f0      	movs	r0, #240	; 0xf0
 8007d46:	f000 f960 	bl	800800a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8007d4a:	4b21      	ldr	r3, [pc, #132]	; (8007dd0 <RadioSend+0x1e0>)
 8007d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d4e:	2b64      	cmp	r3, #100	; 0x64
 8007d50:	d108      	bne.n	8007d64 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8007d52:	2170      	movs	r1, #112	; 0x70
 8007d54:	20f3      	movs	r0, #243	; 0xf3
 8007d56:	f000 f958 	bl	800800a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8007d5a:	211d      	movs	r1, #29
 8007d5c:	20f2      	movs	r0, #242	; 0xf2
 8007d5e:	f000 f954 	bl	800800a <RadioWrite>
 8007d62:	e007      	b.n	8007d74 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007d64:	21e1      	movs	r1, #225	; 0xe1
 8007d66:	20f3      	movs	r0, #243	; 0xf3
 8007d68:	f000 f94f 	bl	800800a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007d6c:	2104      	movs	r1, #4
 8007d6e:	20f2      	movs	r0, #242	; 0xf2
 8007d70:	f000 f94b 	bl	800800a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	00db      	lsls	r3, r3, #3
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	3302      	adds	r3, #2
 8007d7e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007d80:	89fb      	ldrh	r3, [r7, #14]
 8007d82:	0a1b      	lsrs	r3, r3, #8
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	4619      	mov	r1, r3
 8007d8a:	20f4      	movs	r0, #244	; 0xf4
 8007d8c:	f000 f93d 	bl	800800a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8007d90:	89fb      	ldrh	r3, [r7, #14]
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	4619      	mov	r1, r3
 8007d96:	20f5      	movs	r0, #245	; 0xf5
 8007d98:	f000 f937 	bl	800800a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8007d9c:	78fb      	ldrb	r3, [r7, #3]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007da6:	4619      	mov	r1, r3
 8007da8:	480b      	ldr	r0, [pc, #44]	; (8007dd8 <RadioSend+0x1e8>)
 8007daa:	f001 f979 	bl	80090a0 <SUBGRF_SendPayload>
            break;
 8007dae:	e000      	b.n	8007db2 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007db0:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8007db2:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <RadioSend+0x1e0>)
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	4619      	mov	r1, r3
 8007db8:	4808      	ldr	r0, [pc, #32]	; (8007ddc <RadioSend+0x1ec>)
 8007dba:	f002 fdcf 	bl	800a95c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8007dbe:	4807      	ldr	r0, [pc, #28]	; (8007ddc <RadioSend+0x1ec>)
 8007dc0:	f002 fcee 	bl	800a7a0 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	200006d0 	.word	0x200006d0
 8007dd4:	200006de 	.word	0x200006de
 8007dd8:	200005cc 	.word	0x200005cc
 8007ddc:	2000072c 	.word	0x2000072c

08007de0 <RadioSleep>:

static void RadioSleep( void )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8007de6:	2300      	movs	r3, #0
 8007de8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8007dea:	793b      	ldrb	r3, [r7, #4]
 8007dec:	f043 0304 	orr.w	r3, r3, #4
 8007df0:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8007df2:	7938      	ldrb	r0, [r7, #4]
 8007df4:	f001 fa30 	bl	8009258 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8007df8:	2002      	movs	r0, #2
 8007dfa:	f7f9 ff1f 	bl	8001c3c <HAL_Delay>
}
 8007dfe:	bf00      	nop
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <RadioStandby>:

static void RadioStandby( void )
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	f001 fa56 	bl	80092bc <SUBGRF_SetStandby>
}
 8007e10:	bf00      	nop
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8007e1c:	f002 fabf 	bl	800a39e <RFW_Is_Init>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d102      	bne.n	8007e2c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8007e26:	f002 fae2 	bl	800a3ee <RFW_ReceiveInit>
 8007e2a:	e007      	b.n	8007e3c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f240 2162 	movw	r1, #610	; 0x262
 8007e34:	f240 2062 	movw	r0, #610	; 0x262
 8007e38:	f001 fc14 	bl	8009664 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d006      	beq.n	8007e50 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	4811      	ldr	r0, [pc, #68]	; (8007e8c <RadioRx+0x78>)
 8007e46:	f002 fd89 	bl	800a95c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007e4a:	4810      	ldr	r0, [pc, #64]	; (8007e8c <RadioRx+0x78>)
 8007e4c:	f002 fca8 	bl	800a7a0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007e50:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <RadioRx+0x7c>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007e56:	4b0e      	ldr	r3, [pc, #56]	; (8007e90 <RadioRx+0x7c>)
 8007e58:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f002 f8a4 	bl	8009fac <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007e64:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <RadioRx+0x7c>)
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d004      	beq.n	8007e76 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007e6c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007e70:	f001 fa60 	bl	8009334 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8007e74:	e005      	b.n	8007e82 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8007e76:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <RadioRx+0x7c>)
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	019b      	lsls	r3, r3, #6
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 fa59 	bl	8009334 <SUBGRF_SetRx>
}
 8007e82:	bf00      	nop
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000744 	.word	0x20000744
 8007e90:	200006d0 	.word	0x200006d0

08007e94 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8007e9c:	f002 fa7f 	bl	800a39e <RFW_Is_Init>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d102      	bne.n	8007eac <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8007ea6:	f002 faa2 	bl	800a3ee <RFW_ReceiveInit>
 8007eaa:	e007      	b.n	8007ebc <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007eac:	2300      	movs	r3, #0
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f240 2162 	movw	r1, #610	; 0x262
 8007eb4:	f240 2062 	movw	r0, #610	; 0x262
 8007eb8:	f001 fbd4 	bl	8009664 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d006      	beq.n	8007ed0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	4811      	ldr	r0, [pc, #68]	; (8007f0c <RadioRxBoosted+0x78>)
 8007ec6:	f002 fd49 	bl	800a95c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007eca:	4810      	ldr	r0, [pc, #64]	; (8007f0c <RadioRxBoosted+0x78>)
 8007ecc:	f002 fc68 	bl	800a7a0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007ed0:	4b0f      	ldr	r3, [pc, #60]	; (8007f10 <RadioRxBoosted+0x7c>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007ed6:	4b0e      	ldr	r3, [pc, #56]	; (8007f10 <RadioRxBoosted+0x7c>)
 8007ed8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007edc:	2100      	movs	r1, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f002 f864 	bl	8009fac <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007ee4:	4b0a      	ldr	r3, [pc, #40]	; (8007f10 <RadioRxBoosted+0x7c>)
 8007ee6:	785b      	ldrb	r3, [r3, #1]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d004      	beq.n	8007ef6 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8007eec:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007ef0:	f001 fa40 	bl	8009374 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8007ef4:	e005      	b.n	8007f02 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8007ef6:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <RadioRxBoosted+0x7c>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	019b      	lsls	r3, r3, #6
 8007efc:	4618      	mov	r0, r3
 8007efe:	f001 fa39 	bl	8009374 <SUBGRF_SetRxBoosted>
}
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000744 	.word	0x20000744
 8007f10:	200006d0 	.word	0x200006d0

08007f14 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	005a      	lsls	r2, r3, #1
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	4413      	add	r3, r2
 8007f26:	4a0c      	ldr	r2, [pc, #48]	; (8007f58 <RadioSetRxDutyCycle+0x44>)
 8007f28:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007f32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007f36:	f001 fb95 	bl	8009664 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007f3a:	4b07      	ldr	r3, [pc, #28]	; (8007f58 <RadioSetRxDutyCycle+0x44>)
 8007f3c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007f40:	2100      	movs	r1, #0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f002 f832 	bl	8009fac <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 fa36 	bl	80093bc <SUBGRF_SetRxDutyCycle>
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	200006d0 	.word	0x200006d0

08007f5c <RadioStartCad>:

static void RadioStartCad( void )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007f60:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <RadioStartCad+0x2c>)
 8007f62:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007f66:	2100      	movs	r1, #0
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f002 f81f 	bl	8009fac <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2200      	movs	r2, #0
 8007f72:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8007f76:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8007f7a:	f001 fb73 	bl	8009664 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8007f7e:	f001 fa49 	bl	8009414 <SUBGRF_SetCad>
}
 8007f82:	bf00      	nop
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	200006d0 	.word	0x200006d0

08007f8c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8007f9c:	883b      	ldrh	r3, [r7, #0]
 8007f9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fa2:	fb02 f303 	mul.w	r3, r2, r3
 8007fa6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 fbb7 	bl	800971c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8007fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f002 f822 	bl	8009ffc <SUBGRF_SetRfTxPower>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007fbc:	210e      	movs	r1, #14
 8007fbe:	f640 101f 	movw	r0, #2335	; 0x91f
 8007fc2:	f001 feff 	bl	8009dc4 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8007fc6:	7afb      	ldrb	r3, [r7, #11]
 8007fc8:	2101      	movs	r1, #1
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f001 ffee 	bl	8009fac <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8007fd0:	f001 fa2e 	bl	8009430 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8007fd4:	68f9      	ldr	r1, [r7, #12]
 8007fd6:	4805      	ldr	r0, [pc, #20]	; (8007fec <RadioSetTxContinuousWave+0x60>)
 8007fd8:	f002 fcc0 	bl	800a95c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8007fdc:	4803      	ldr	r0, [pc, #12]	; (8007fec <RadioSetTxContinuousWave+0x60>)
 8007fde:	f002 fbdf 	bl	800a7a0 <UTIL_TIMER_Start>
}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	2000072c 	.word	0x2000072c

08007ff0 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8007ffa:	f001 fe50 	bl	8009c9e <SUBGRF_GetRssiInst>
 8007ffe:	4603      	mov	r3, r0
 8008000:	b21b      	sxth	r3, r3
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	4603      	mov	r3, r0
 8008012:	460a      	mov	r2, r1
 8008014:	80fb      	strh	r3, [r7, #6]
 8008016:	4613      	mov	r3, r2
 8008018:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800801a:	797a      	ldrb	r2, [r7, #5]
 800801c:	88fb      	ldrh	r3, [r7, #6]
 800801e:	4611      	mov	r1, r2
 8008020:	4618      	mov	r0, r3
 8008022:	f001 fecf 	bl	8009dc4 <SUBGRF_WriteRegister>
}
 8008026:	bf00      	nop
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	4603      	mov	r3, r0
 8008036:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008038:	88fb      	ldrh	r3, [r7, #6]
 800803a:	4618      	mov	r0, r3
 800803c:	f001 fed6 	bl	8009dec <SUBGRF_ReadRegister>
 8008040:	4603      	mov	r3, r0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	4603      	mov	r3, r0
 8008052:	6039      	str	r1, [r7, #0]
 8008054:	80fb      	strh	r3, [r7, #6]
 8008056:	4613      	mov	r3, r2
 8008058:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800805a:	797b      	ldrb	r3, [r7, #5]
 800805c:	b29a      	uxth	r2, r3
 800805e:	88fb      	ldrh	r3, [r7, #6]
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	4618      	mov	r0, r3
 8008064:	f001 fed6 	bl	8009e14 <SUBGRF_WriteRegisters>
}
 8008068:	bf00      	nop
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	6039      	str	r1, [r7, #0]
 800807a:	80fb      	strh	r3, [r7, #6]
 800807c:	4613      	mov	r3, r2
 800807e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008080:	797b      	ldrb	r3, [r7, #5]
 8008082:	b29a      	uxth	r2, r3
 8008084:	88fb      	ldrh	r3, [r7, #6]
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	4618      	mov	r0, r3
 800808a:	f001 fee5 	bl	8009e58 <SUBGRF_ReadRegisters>
}
 800808e:	bf00      	nop
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	460a      	mov	r2, r1
 80080a2:	71fb      	strb	r3, [r7, #7]
 80080a4:	4613      	mov	r3, r2
 80080a6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d10a      	bne.n	80080c4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80080ae:	4a0e      	ldr	r2, [pc, #56]	; (80080e8 <RadioSetMaxPayloadLength+0x50>)
 80080b0:	79bb      	ldrb	r3, [r7, #6]
 80080b2:	7013      	strb	r3, [r2, #0]
 80080b4:	4b0c      	ldr	r3, [pc, #48]	; (80080e8 <RadioSetMaxPayloadLength+0x50>)
 80080b6:	781a      	ldrb	r2, [r3, #0]
 80080b8:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <RadioSetMaxPayloadLength+0x54>)
 80080ba:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80080bc:	480c      	ldr	r0, [pc, #48]	; (80080f0 <RadioSetMaxPayloadLength+0x58>)
 80080be:	f001 fd39 	bl	8009b34 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80080c2:	e00d      	b.n	80080e0 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80080c4:	4b09      	ldr	r3, [pc, #36]	; (80080ec <RadioSetMaxPayloadLength+0x54>)
 80080c6:	7d5b      	ldrb	r3, [r3, #21]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d109      	bne.n	80080e0 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80080cc:	4a06      	ldr	r2, [pc, #24]	; (80080e8 <RadioSetMaxPayloadLength+0x50>)
 80080ce:	79bb      	ldrb	r3, [r7, #6]
 80080d0:	7013      	strb	r3, [r2, #0]
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <RadioSetMaxPayloadLength+0x50>)
 80080d4:	781a      	ldrb	r2, [r3, #0]
 80080d6:	4b05      	ldr	r3, [pc, #20]	; (80080ec <RadioSetMaxPayloadLength+0x54>)
 80080d8:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80080da:	4805      	ldr	r0, [pc, #20]	; (80080f0 <RadioSetMaxPayloadLength+0x58>)
 80080dc:	f001 fd2a 	bl	8009b34 <SUBGRF_SetPacketParams>
}
 80080e0:	bf00      	nop
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	2000000d 	.word	0x2000000d
 80080ec:	200006d0 	.word	0x200006d0
 80080f0:	200006de 	.word	0x200006de

080080f4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80080fe:	4a13      	ldr	r2, [pc, #76]	; (800814c <RadioSetPublicNetwork+0x58>)
 8008100:	79fb      	ldrb	r3, [r7, #7]
 8008102:	7313      	strb	r3, [r2, #12]
 8008104:	4b11      	ldr	r3, [pc, #68]	; (800814c <RadioSetPublicNetwork+0x58>)
 8008106:	7b1a      	ldrb	r2, [r3, #12]
 8008108:	4b10      	ldr	r3, [pc, #64]	; (800814c <RadioSetPublicNetwork+0x58>)
 800810a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800810c:	2001      	movs	r0, #1
 800810e:	f7ff f819 	bl	8007144 <RadioSetModem>
    if( enable == true )
 8008112:	79fb      	ldrb	r3, [r7, #7]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008118:	2134      	movs	r1, #52	; 0x34
 800811a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800811e:	f001 fe51 	bl	8009dc4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8008122:	2144      	movs	r1, #68	; 0x44
 8008124:	f240 7041 	movw	r0, #1857	; 0x741
 8008128:	f001 fe4c 	bl	8009dc4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800812c:	e009      	b.n	8008142 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800812e:	2114      	movs	r1, #20
 8008130:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008134:	f001 fe46 	bl	8009dc4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008138:	2124      	movs	r1, #36	; 0x24
 800813a:	f240 7041 	movw	r0, #1857	; 0x741
 800813e:	f001 fe41 	bl	8009dc4 <SUBGRF_WriteRegister>
}
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	200006d0 	.word	0x200006d0

08008150 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8008154:	f001 ff86 	bl	800a064 <SUBGRF_GetRadioWakeUpTime>
 8008158:	4603      	mov	r3, r0
 800815a:	3303      	adds	r3, #3
}
 800815c:	4618      	mov	r0, r3
 800815e:	bd80      	pop	{r7, pc}

08008160 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8008168:	f000 f80e 	bl	8008188 <RadioOnTxTimeoutProcess>
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800817c:	f000 f818 	bl	80081b0 <RadioOnRxTimeoutProcess>
}
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800818c:	4b07      	ldr	r3, [pc, #28]	; (80081ac <RadioOnTxTimeoutProcess+0x24>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d008      	beq.n	80081a6 <RadioOnTxTimeoutProcess+0x1e>
 8008194:	4b05      	ldr	r3, [pc, #20]	; (80081ac <RadioOnTxTimeoutProcess+0x24>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800819e:	4b03      	ldr	r3, [pc, #12]	; (80081ac <RadioOnTxTimeoutProcess+0x24>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	4798      	blx	r3
    }
}
 80081a6:	bf00      	nop
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	200006cc 	.word	0x200006cc

080081b0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80081b4:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <RadioOnRxTimeoutProcess+0x24>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d008      	beq.n	80081ce <RadioOnRxTimeoutProcess+0x1e>
 80081bc:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <RadioOnRxTimeoutProcess+0x24>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80081c6:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <RadioOnRxTimeoutProcess+0x24>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	4798      	blx	r3
    }
}
 80081ce:	bf00      	nop
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	200006cc 	.word	0x200006cc

080081d8 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80081e2:	4a05      	ldr	r2, [pc, #20]	; (80081f8 <RadioOnDioIrq+0x20>)
 80081e4:	88fb      	ldrh	r3, [r7, #6]
 80081e6:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80081ea:	f000 f807 	bl	80081fc <RadioIrqProcess>
}
 80081ee:	bf00      	nop
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	200006d0 	.word	0x200006d0

080081fc <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80081fc:	b5b0      	push	{r4, r5, r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8008202:	2300      	movs	r3, #0
 8008204:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8008206:	2300      	movs	r3, #0
 8008208:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800820a:	4ba5      	ldr	r3, [pc, #660]	; (80084a0 <RadioIrqProcess+0x2a4>)
 800820c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008214:	f000 810d 	beq.w	8008432 <RadioIrqProcess+0x236>
 8008218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800821c:	f300 81c0 	bgt.w	80085a0 <RadioIrqProcess+0x3a4>
 8008220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008224:	f000 80f1 	beq.w	800840a <RadioIrqProcess+0x20e>
 8008228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800822c:	f300 81b8 	bgt.w	80085a0 <RadioIrqProcess+0x3a4>
 8008230:	2b80      	cmp	r3, #128	; 0x80
 8008232:	f000 80d6 	beq.w	80083e2 <RadioIrqProcess+0x1e6>
 8008236:	2b80      	cmp	r3, #128	; 0x80
 8008238:	f300 81b2 	bgt.w	80085a0 <RadioIrqProcess+0x3a4>
 800823c:	2b20      	cmp	r3, #32
 800823e:	dc49      	bgt.n	80082d4 <RadioIrqProcess+0xd8>
 8008240:	2b00      	cmp	r3, #0
 8008242:	f340 81ad 	ble.w	80085a0 <RadioIrqProcess+0x3a4>
 8008246:	3b01      	subs	r3, #1
 8008248:	2b1f      	cmp	r3, #31
 800824a:	f200 81a9 	bhi.w	80085a0 <RadioIrqProcess+0x3a4>
 800824e:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <RadioIrqProcess+0x58>)
 8008250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008254:	080082dd 	.word	0x080082dd
 8008258:	08008317 	.word	0x08008317
 800825c:	080085a1 	.word	0x080085a1
 8008260:	080084bd 	.word	0x080084bd
 8008264:	080085a1 	.word	0x080085a1
 8008268:	080085a1 	.word	0x080085a1
 800826c:	080085a1 	.word	0x080085a1
 8008270:	0800852b 	.word	0x0800852b
 8008274:	080085a1 	.word	0x080085a1
 8008278:	080085a1 	.word	0x080085a1
 800827c:	080085a1 	.word	0x080085a1
 8008280:	080085a1 	.word	0x080085a1
 8008284:	080085a1 	.word	0x080085a1
 8008288:	080085a1 	.word	0x080085a1
 800828c:	080085a1 	.word	0x080085a1
 8008290:	080085a1 	.word	0x080085a1
 8008294:	080085a1 	.word	0x080085a1
 8008298:	080085a1 	.word	0x080085a1
 800829c:	080085a1 	.word	0x080085a1
 80082a0:	080085a1 	.word	0x080085a1
 80082a4:	080085a1 	.word	0x080085a1
 80082a8:	080085a1 	.word	0x080085a1
 80082ac:	080085a1 	.word	0x080085a1
 80082b0:	080085a1 	.word	0x080085a1
 80082b4:	080085a1 	.word	0x080085a1
 80082b8:	080085a1 	.word	0x080085a1
 80082bc:	080085a1 	.word	0x080085a1
 80082c0:	080085a1 	.word	0x080085a1
 80082c4:	080085a1 	.word	0x080085a1
 80082c8:	080085a1 	.word	0x080085a1
 80082cc:	080085a1 	.word	0x080085a1
 80082d0:	0800853b 	.word	0x0800853b
 80082d4:	2b40      	cmp	r3, #64	; 0x40
 80082d6:	f000 814b 	beq.w	8008570 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80082da:	e161      	b.n	80085a0 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 80082dc:	4871      	ldr	r0, [pc, #452]	; (80084a4 <RadioIrqProcess+0x2a8>)
 80082de:	f002 facd 	bl	800a87c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80082e2:	2000      	movs	r0, #0
 80082e4:	f000 ffea 	bl	80092bc <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80082e8:	f002 f860 	bl	800a3ac <RFW_Is_LongPacketModeEnabled>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d101      	bne.n	80082f6 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80082f2:	f002 f884 	bl	800a3fe <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80082f6:	4b6c      	ldr	r3, [pc, #432]	; (80084a8 <RadioIrqProcess+0x2ac>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f000 8152 	beq.w	80085a4 <RadioIrqProcess+0x3a8>
 8008300:	4b69      	ldr	r3, [pc, #420]	; (80084a8 <RadioIrqProcess+0x2ac>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 814c 	beq.w	80085a4 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 800830c:	4b66      	ldr	r3, [pc, #408]	; (80084a8 <RadioIrqProcess+0x2ac>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4798      	blx	r3
        break;
 8008314:	e146      	b.n	80085a4 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8008316:	4865      	ldr	r0, [pc, #404]	; (80084ac <RadioIrqProcess+0x2b0>)
 8008318:	f002 fab0 	bl	800a87c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800831c:	4b60      	ldr	r3, [pc, #384]	; (80084a0 <RadioIrqProcess+0x2a4>)
 800831e:	785b      	ldrb	r3, [r3, #1]
 8008320:	f083 0301 	eor.w	r3, r3, #1
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d014      	beq.n	8008354 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800832a:	2000      	movs	r0, #0
 800832c:	f000 ffc6 	bl	80092bc <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8008330:	2100      	movs	r1, #0
 8008332:	f640 1002 	movw	r0, #2306	; 0x902
 8008336:	f001 fd45 	bl	8009dc4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800833a:	f640 1044 	movw	r0, #2372	; 0x944
 800833e:	f001 fd55 	bl	8009dec <SUBGRF_ReadRegister>
 8008342:	4603      	mov	r3, r0
 8008344:	f043 0302 	orr.w	r3, r3, #2
 8008348:	b2db      	uxtb	r3, r3
 800834a:	4619      	mov	r1, r3
 800834c:	f640 1044 	movw	r0, #2372	; 0x944
 8008350:	f001 fd38 	bl	8009dc4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8008354:	1dfb      	adds	r3, r7, #7
 8008356:	22ff      	movs	r2, #255	; 0xff
 8008358:	4619      	mov	r1, r3
 800835a:	4855      	ldr	r0, [pc, #340]	; (80084b0 <RadioIrqProcess+0x2b4>)
 800835c:	f000 fe7e 	bl	800905c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008360:	4854      	ldr	r0, [pc, #336]	; (80084b4 <RadioIrqProcess+0x2b8>)
 8008362:	f001 fcdd 	bl	8009d20 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008366:	4b50      	ldr	r3, [pc, #320]	; (80084a8 <RadioIrqProcess+0x2ac>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 811c 	beq.w	80085a8 <RadioIrqProcess+0x3ac>
 8008370:	4b4d      	ldr	r3, [pc, #308]	; (80084a8 <RadioIrqProcess+0x2ac>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	f000 8116 	beq.w	80085a8 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 800837c:	4b48      	ldr	r3, [pc, #288]	; (80084a0 <RadioIrqProcess+0x2a4>)
 800837e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008382:	2b01      	cmp	r3, #1
 8008384:	d10e      	bne.n	80083a4 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8008386:	4b48      	ldr	r3, [pc, #288]	; (80084a8 <RadioIrqProcess+0x2ac>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689c      	ldr	r4, [r3, #8]
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	b299      	uxth	r1, r3
 8008390:	4b43      	ldr	r3, [pc, #268]	; (80084a0 <RadioIrqProcess+0x2a4>)
 8008392:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8008396:	b21a      	sxth	r2, r3
 8008398:	4b41      	ldr	r3, [pc, #260]	; (80084a0 <RadioIrqProcess+0x2a4>)
 800839a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800839e:	4844      	ldr	r0, [pc, #272]	; (80084b0 <RadioIrqProcess+0x2b4>)
 80083a0:	47a0      	blx	r4
                break;
 80083a2:	e01d      	b.n	80083e0 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80083a4:	4b3e      	ldr	r3, [pc, #248]	; (80084a0 <RadioIrqProcess+0x2a4>)
 80083a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a8:	463a      	mov	r2, r7
 80083aa:	4611      	mov	r1, r2
 80083ac:	4618      	mov	r0, r3
 80083ae:	f001 ff4b 	bl	800a248 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80083b2:	4b3d      	ldr	r3, [pc, #244]	; (80084a8 <RadioIrqProcess+0x2ac>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689c      	ldr	r4, [r3, #8]
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	b299      	uxth	r1, r3
 80083bc:	4b38      	ldr	r3, [pc, #224]	; (80084a0 <RadioIrqProcess+0x2a4>)
 80083be:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80083c2:	b218      	sxth	r0, r3
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80083ca:	4a3b      	ldr	r2, [pc, #236]	; (80084b8 <RadioIrqProcess+0x2bc>)
 80083cc:	fb82 5203 	smull	r5, r2, r2, r3
 80083d0:	1192      	asrs	r2, r2, #6
 80083d2:	17db      	asrs	r3, r3, #31
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	b25b      	sxtb	r3, r3
 80083d8:	4602      	mov	r2, r0
 80083da:	4835      	ldr	r0, [pc, #212]	; (80084b0 <RadioIrqProcess+0x2b4>)
 80083dc:	47a0      	blx	r4
                break;
 80083de:	bf00      	nop
        break;
 80083e0:	e0e2      	b.n	80085a8 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 80083e2:	2000      	movs	r0, #0
 80083e4:	f000 ff6a 	bl	80092bc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80083e8:	4b2f      	ldr	r3, [pc, #188]	; (80084a8 <RadioIrqProcess+0x2ac>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 80dd 	beq.w	80085ac <RadioIrqProcess+0x3b0>
 80083f2:	4b2d      	ldr	r3, [pc, #180]	; (80084a8 <RadioIrqProcess+0x2ac>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 80d7 	beq.w	80085ac <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 80083fe:	4b2a      	ldr	r3, [pc, #168]	; (80084a8 <RadioIrqProcess+0x2ac>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	2000      	movs	r0, #0
 8008406:	4798      	blx	r3
        break;
 8008408:	e0d0      	b.n	80085ac <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 800840a:	2000      	movs	r0, #0
 800840c:	f000 ff56 	bl	80092bc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008410:	4b25      	ldr	r3, [pc, #148]	; (80084a8 <RadioIrqProcess+0x2ac>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 80cb 	beq.w	80085b0 <RadioIrqProcess+0x3b4>
 800841a:	4b23      	ldr	r3, [pc, #140]	; (80084a8 <RadioIrqProcess+0x2ac>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 80c5 	beq.w	80085b0 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8008426:	4b20      	ldr	r3, [pc, #128]	; (80084a8 <RadioIrqProcess+0x2ac>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	2001      	movs	r0, #1
 800842e:	4798      	blx	r3
        break;
 8008430:	e0be      	b.n	80085b0 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8008432:	f000 fdf9 	bl	8009028 <SUBGRF_GetOperatingMode>
 8008436:	4603      	mov	r3, r0
 8008438:	2b04      	cmp	r3, #4
 800843a:	d115      	bne.n	8008468 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 800843c:	4819      	ldr	r0, [pc, #100]	; (80084a4 <RadioIrqProcess+0x2a8>)
 800843e:	f002 fa1d 	bl	800a87c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008442:	2000      	movs	r0, #0
 8008444:	f000 ff3a 	bl	80092bc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008448:	4b17      	ldr	r3, [pc, #92]	; (80084a8 <RadioIrqProcess+0x2ac>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 80b1 	beq.w	80085b4 <RadioIrqProcess+0x3b8>
 8008452:	4b15      	ldr	r3, [pc, #84]	; (80084a8 <RadioIrqProcess+0x2ac>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 80ab 	beq.w	80085b4 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 800845e:	4b12      	ldr	r3, [pc, #72]	; (80084a8 <RadioIrqProcess+0x2ac>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	4798      	blx	r3
        break;
 8008466:	e0a5      	b.n	80085b4 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8008468:	f000 fdde 	bl	8009028 <SUBGRF_GetOperatingMode>
 800846c:	4603      	mov	r3, r0
 800846e:	2b05      	cmp	r3, #5
 8008470:	f040 80a0 	bne.w	80085b4 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8008474:	480d      	ldr	r0, [pc, #52]	; (80084ac <RadioIrqProcess+0x2b0>)
 8008476:	f002 fa01 	bl	800a87c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800847a:	2000      	movs	r0, #0
 800847c:	f000 ff1e 	bl	80092bc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008480:	4b09      	ldr	r3, [pc, #36]	; (80084a8 <RadioIrqProcess+0x2ac>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 8095 	beq.w	80085b4 <RadioIrqProcess+0x3b8>
 800848a:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <RadioIrqProcess+0x2ac>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 808f 	beq.w	80085b4 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 8008496:	4b04      	ldr	r3, [pc, #16]	; (80084a8 <RadioIrqProcess+0x2ac>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	4798      	blx	r3
        break;
 800849e:	e089      	b.n	80085b4 <RadioIrqProcess+0x3b8>
 80084a0:	200006d0 	.word	0x200006d0
 80084a4:	2000072c 	.word	0x2000072c
 80084a8:	200006cc 	.word	0x200006cc
 80084ac:	20000744 	.word	0x20000744
 80084b0:	200005cc 	.word	0x200005cc
 80084b4:	200006f4 	.word	0x200006f4
 80084b8:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80084bc:	4b44      	ldr	r3, [pc, #272]	; (80085d0 <RadioIrqProcess+0x3d4>)
 80084be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d079      	beq.n	80085b8 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80084c4:	4a43      	ldr	r2, [pc, #268]	; (80085d4 <RadioIrqProcess+0x3d8>)
 80084c6:	4b42      	ldr	r3, [pc, #264]	; (80085d0 <RadioIrqProcess+0x3d4>)
 80084c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ca:	0c1b      	lsrs	r3, r3, #16
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	4619      	mov	r1, r3
 80084d0:	f640 1003 	movw	r0, #2307	; 0x903
 80084d4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80084d6:	4a3f      	ldr	r2, [pc, #252]	; (80085d4 <RadioIrqProcess+0x3d8>)
 80084d8:	4b3d      	ldr	r3, [pc, #244]	; (80085d0 <RadioIrqProcess+0x3d4>)
 80084da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084dc:	0a1b      	lsrs	r3, r3, #8
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	4619      	mov	r1, r3
 80084e2:	f640 1004 	movw	r0, #2308	; 0x904
 80084e6:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80084e8:	4a3a      	ldr	r2, [pc, #232]	; (80085d4 <RadioIrqProcess+0x3d8>)
 80084ea:	4b39      	ldr	r3, [pc, #228]	; (80085d0 <RadioIrqProcess+0x3d4>)
 80084ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	4619      	mov	r1, r3
 80084f2:	f640 1005 	movw	r0, #2309	; 0x905
 80084f6:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80084f8:	4c36      	ldr	r4, [pc, #216]	; (80085d4 <RadioIrqProcess+0x3d8>)
 80084fa:	4b37      	ldr	r3, [pc, #220]	; (80085d8 <RadioIrqProcess+0x3dc>)
 80084fc:	f640 1002 	movw	r0, #2306	; 0x902
 8008500:	4798      	blx	r3
 8008502:	4603      	mov	r3, r0
 8008504:	f043 0301 	orr.w	r3, r3, #1
 8008508:	b2db      	uxtb	r3, r3
 800850a:	4619      	mov	r1, r3
 800850c:	f640 1002 	movw	r0, #2306	; 0x902
 8008510:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8008512:	4b2f      	ldr	r3, [pc, #188]	; (80085d0 <RadioIrqProcess+0x3d4>)
 8008514:	2200      	movs	r2, #0
 8008516:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008518:	2300      	movs	r3, #0
 800851a:	2200      	movs	r2, #0
 800851c:	f240 2162 	movw	r1, #610	; 0x262
 8008520:	f240 2062 	movw	r0, #610	; 0x262
 8008524:	f001 f89e 	bl	8009664 <SUBGRF_SetDioIrqParams>
        break;
 8008528:	e046      	b.n	80085b8 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 800852a:	f001 ff38 	bl	800a39e <RFW_Is_Init>
 800852e:	4603      	mov	r3, r0
 8008530:	2b01      	cmp	r3, #1
 8008532:	d143      	bne.n	80085bc <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8008534:	f001 ff69 	bl	800a40a <RFW_ReceivePayload>
        break;
 8008538:	e040      	b.n	80085bc <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 800853a:	4828      	ldr	r0, [pc, #160]	; (80085dc <RadioIrqProcess+0x3e0>)
 800853c:	f002 f99e 	bl	800a87c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008540:	4b23      	ldr	r3, [pc, #140]	; (80085d0 <RadioIrqProcess+0x3d4>)
 8008542:	785b      	ldrb	r3, [r3, #1]
 8008544:	f083 0301 	eor.w	r3, r3, #1
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800854e:	2000      	movs	r0, #0
 8008550:	f000 feb4 	bl	80092bc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008554:	4b22      	ldr	r3, [pc, #136]	; (80085e0 <RadioIrqProcess+0x3e4>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d031      	beq.n	80085c0 <RadioIrqProcess+0x3c4>
 800855c:	4b20      	ldr	r3, [pc, #128]	; (80085e0 <RadioIrqProcess+0x3e4>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d02c      	beq.n	80085c0 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 8008566:	4b1e      	ldr	r3, [pc, #120]	; (80085e0 <RadioIrqProcess+0x3e4>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	4798      	blx	r3
        break;
 800856e:	e027      	b.n	80085c0 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8008570:	4b17      	ldr	r3, [pc, #92]	; (80085d0 <RadioIrqProcess+0x3d4>)
 8008572:	785b      	ldrb	r3, [r3, #1]
 8008574:	f083 0301 	eor.w	r3, r3, #1
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800857e:	2000      	movs	r0, #0
 8008580:	f000 fe9c 	bl	80092bc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008584:	4b16      	ldr	r3, [pc, #88]	; (80085e0 <RadioIrqProcess+0x3e4>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d01b      	beq.n	80085c4 <RadioIrqProcess+0x3c8>
 800858c:	4b14      	ldr	r3, [pc, #80]	; (80085e0 <RadioIrqProcess+0x3e4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d016      	beq.n	80085c4 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 8008596:	4b12      	ldr	r3, [pc, #72]	; (80085e0 <RadioIrqProcess+0x3e4>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	4798      	blx	r3
        break;
 800859e:	e011      	b.n	80085c4 <RadioIrqProcess+0x3c8>
        break;
 80085a0:	bf00      	nop
 80085a2:	e010      	b.n	80085c6 <RadioIrqProcess+0x3ca>
        break;
 80085a4:	bf00      	nop
 80085a6:	e00e      	b.n	80085c6 <RadioIrqProcess+0x3ca>
        break;
 80085a8:	bf00      	nop
 80085aa:	e00c      	b.n	80085c6 <RadioIrqProcess+0x3ca>
        break;
 80085ac:	bf00      	nop
 80085ae:	e00a      	b.n	80085c6 <RadioIrqProcess+0x3ca>
        break;
 80085b0:	bf00      	nop
 80085b2:	e008      	b.n	80085c6 <RadioIrqProcess+0x3ca>
        break;
 80085b4:	bf00      	nop
 80085b6:	e006      	b.n	80085c6 <RadioIrqProcess+0x3ca>
        break;
 80085b8:	bf00      	nop
 80085ba:	e004      	b.n	80085c6 <RadioIrqProcess+0x3ca>
        break;
 80085bc:	bf00      	nop
 80085be:	e002      	b.n	80085c6 <RadioIrqProcess+0x3ca>
        break;
 80085c0:	bf00      	nop
 80085c2:	e000      	b.n	80085c6 <RadioIrqProcess+0x3ca>
        break;
 80085c4:	bf00      	nop
    }
}
 80085c6:	bf00      	nop
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bdb0      	pop	{r4, r5, r7, pc}
 80085ce:	bf00      	nop
 80085d0:	200006d0 	.word	0x200006d0
 80085d4:	0800800b 	.word	0x0800800b
 80085d8:	0800802f 	.word	0x0800802f
 80085dc:	20000744 	.word	0x20000744
 80085e0:	200006cc 	.word	0x200006cc

080085e4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80085e8:	4b09      	ldr	r3, [pc, #36]	; (8008610 <RadioTxPrbs+0x2c>)
 80085ea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80085ee:	2101      	movs	r1, #1
 80085f0:	4618      	mov	r0, r3
 80085f2:	f001 fcdb 	bl	8009fac <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80085f6:	4b07      	ldr	r3, [pc, #28]	; (8008614 <RadioTxPrbs+0x30>)
 80085f8:	212d      	movs	r1, #45	; 0x2d
 80085fa:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80085fe:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8008600:	f000 ff1f 	bl	8009442 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8008604:	4804      	ldr	r0, [pc, #16]	; (8008618 <RadioTxPrbs+0x34>)
 8008606:	f000 fe75 	bl	80092f4 <SUBGRF_SetTx>
}
 800860a:	bf00      	nop
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	200006d0 	.word	0x200006d0
 8008614:	0800800b 	.word	0x0800800b
 8008618:	000fffff 	.word	0x000fffff

0800861c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8008626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800862a:	4618      	mov	r0, r3
 800862c:	f001 fce6 	bl	8009ffc <SUBGRF_SetRfTxPower>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008634:	210e      	movs	r1, #14
 8008636:	f640 101f 	movw	r0, #2335	; 0x91f
 800863a:	f001 fbc3 	bl	8009dc4 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800863e:	7bfb      	ldrb	r3, [r7, #15]
 8008640:	2101      	movs	r1, #1
 8008642:	4618      	mov	r0, r3
 8008644:	f001 fcb2 	bl	8009fac <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8008648:	f000 fef2 	bl	8009430 <SUBGRF_SetTxContinuousWave>
}
 800864c:	bf00      	nop
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8008654:	b480      	push	{r7}
 8008656:	b089      	sub	sp, #36	; 0x24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	4613      	mov	r3, r2
 8008660:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800866a:	2300      	movs	r3, #0
 800866c:	61bb      	str	r3, [r7, #24]
 800866e:	e011      	b.n	8008694 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	4413      	add	r3, r2
 8008676:	781a      	ldrb	r2, [r3, #0]
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	68b9      	ldr	r1, [r7, #8]
 800867c:	440b      	add	r3, r1
 800867e:	43d2      	mvns	r2, r2
 8008680:	b2d2      	uxtb	r2, r2
 8008682:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	4413      	add	r3, r2
 800868a:	2200      	movs	r2, #0
 800868c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	3301      	adds	r3, #1
 8008692:	61bb      	str	r3, [r7, #24]
 8008694:	79fb      	ldrb	r3, [r7, #7]
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	429a      	cmp	r2, r3
 800869a:	dbe9      	blt.n	8008670 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800869c:	2300      	movs	r3, #0
 800869e:	61bb      	str	r3, [r7, #24]
 80086a0:	e049      	b.n	8008736 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	425a      	negs	r2, r3
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	f002 0207 	and.w	r2, r2, #7
 80086ae:	bf58      	it	pl
 80086b0:	4253      	negpl	r3, r2
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	f1c3 0307 	rsb	r3, r3, #7
 80086b8:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	da00      	bge.n	80086c2 <payload_integration+0x6e>
 80086c0:	3307      	adds	r3, #7
 80086c2:	10db      	asrs	r3, r3, #3
 80086c4:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	3301      	adds	r3, #1
 80086ca:	425a      	negs	r2, r3
 80086cc:	f003 0307 	and.w	r3, r3, #7
 80086d0:	f002 0207 	and.w	r2, r2, #7
 80086d4:	bf58      	it	pl
 80086d6:	4253      	negpl	r3, r2
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	f1c3 0307 	rsb	r3, r3, #7
 80086de:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	3301      	adds	r3, #1
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	da00      	bge.n	80086ea <payload_integration+0x96>
 80086e8:	3307      	adds	r3, #7
 80086ea:	10db      	asrs	r3, r3, #3
 80086ec:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80086ee:	7dbb      	ldrb	r3, [r7, #22]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	4413      	add	r3, r2
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
 80086fa:	fa42 f303 	asr.w	r3, r2, r3
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8008706:	7ffa      	ldrb	r2, [r7, #31]
 8008708:	7cfb      	ldrb	r3, [r7, #19]
 800870a:	4053      	eors	r3, r2
 800870c:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800870e:	7d3b      	ldrb	r3, [r7, #20]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4413      	add	r3, r2
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	b25a      	sxtb	r2, r3
 8008718:	7ff9      	ldrb	r1, [r7, #31]
 800871a:	7d7b      	ldrb	r3, [r7, #21]
 800871c:	fa01 f303 	lsl.w	r3, r1, r3
 8008720:	b25b      	sxtb	r3, r3
 8008722:	4313      	orrs	r3, r2
 8008724:	b259      	sxtb	r1, r3
 8008726:	7d3b      	ldrb	r3, [r7, #20]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4413      	add	r3, r2
 800872c:	b2ca      	uxtb	r2, r1
 800872e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	3301      	adds	r3, #1
 8008734:	61bb      	str	r3, [r7, #24]
 8008736:	79fb      	ldrb	r3, [r7, #7]
 8008738:	00db      	lsls	r3, r3, #3
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	429a      	cmp	r2, r3
 800873e:	dbb0      	blt.n	80086a2 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008740:	7ffb      	ldrb	r3, [r7, #31]
 8008742:	01db      	lsls	r3, r3, #7
 8008744:	b25a      	sxtb	r2, r3
 8008746:	7ffb      	ldrb	r3, [r7, #31]
 8008748:	019b      	lsls	r3, r3, #6
 800874a:	b25b      	sxtb	r3, r3
 800874c:	4313      	orrs	r3, r2
 800874e:	b25b      	sxtb	r3, r3
 8008750:	7ffa      	ldrb	r2, [r7, #31]
 8008752:	2a00      	cmp	r2, #0
 8008754:	d101      	bne.n	800875a <payload_integration+0x106>
 8008756:	2220      	movs	r2, #32
 8008758:	e000      	b.n	800875c <payload_integration+0x108>
 800875a:	2200      	movs	r2, #0
 800875c:	4313      	orrs	r3, r2
 800875e:	b259      	sxtb	r1, r3
 8008760:	79fb      	ldrb	r3, [r7, #7]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	4413      	add	r3, r2
 8008766:	b2ca      	uxtb	r2, r1
 8008768:	701a      	strb	r2, [r3, #0]
}
 800876a:	bf00      	nop
 800876c:	3724      	adds	r7, #36	; 0x24
 800876e:	46bd      	mov	sp, r7
 8008770:	bc80      	pop	{r7}
 8008772:	4770      	bx	lr

08008774 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08c      	sub	sp, #48	; 0x30
 8008778:	af00      	add	r7, sp, #0
 800877a:	60b9      	str	r1, [r7, #8]
 800877c:	607a      	str	r2, [r7, #4]
 800877e:	603b      	str	r3, [r7, #0]
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008784:	2300      	movs	r3, #0
 8008786:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8008788:	2300      	movs	r3, #0
 800878a:	623b      	str	r3, [r7, #32]
 800878c:	2300      	movs	r3, #0
 800878e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008790:	f001 fdff 	bl	800a392 <RFW_DeInit>

    if( rxContinuous != 0 )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	bf14      	ite	ne
 80087a4:	2301      	movne	r3, #1
 80087a6:	2300      	moveq	r3, #0
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	4ba3      	ldr	r3, [pc, #652]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 80087ac:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d003      	beq.n	80087bc <RadioSetRxGenericConfig+0x48>
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	f000 80dc 	beq.w	8008972 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80087ba:	e194      	b.n	8008ae6 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d003      	beq.n	80087cc <RadioSetRxGenericConfig+0x58>
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 80087cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087d0:	e18a      	b.n	8008ae8 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	7f9b      	ldrb	r3, [r3, #30]
 80087d6:	2b08      	cmp	r3, #8
 80087d8:	d902      	bls.n	80087e0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80087da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087de:	e183      	b.n	8008ae8 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	6919      	ldr	r1, [r3, #16]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	7f9b      	ldrb	r3, [r3, #30]
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	f107 0320 	add.w	r3, r7, #32
 80087ee:	4618      	mov	r0, r3
 80087f0:	f001 ff66 	bl	800a6c0 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	bf14      	ite	ne
 80087fc:	2301      	movne	r3, #1
 80087fe:	2300      	moveq	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fe26 	bl	8009454 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008808:	4b8b      	ldr	r3, [pc, #556]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	4a88      	ldr	r2, [pc, #544]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 8008816:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800881e:	4b86      	ldr	r3, [pc, #536]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 8008820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	4618      	mov	r0, r3
 800882a:	f001 fce5 	bl	800a1f8 <SUBGRF_GetFskBandwidthRegValue>
 800882e:	4603      	mov	r3, r0
 8008830:	461a      	mov	r2, r3
 8008832:	4b81      	ldr	r3, [pc, #516]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 8008834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008838:	4b7f      	ldr	r3, [pc, #508]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 800883a:	2200      	movs	r2, #0
 800883c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	b29b      	uxth	r3, r3
 8008844:	00db      	lsls	r3, r3, #3
 8008846:	b29a      	uxth	r2, r3
 8008848:	4b7b      	ldr	r3, [pc, #492]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 800884a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	7fda      	ldrb	r2, [r3, #31]
 8008850:	4b79      	ldr	r3, [pc, #484]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 8008852:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	7f9b      	ldrb	r3, [r3, #30]
 8008858:	00db      	lsls	r3, r3, #3
 800885a:	b2da      	uxtb	r2, r3
 800885c:	4b76      	ldr	r3, [pc, #472]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 800885e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008866:	4b74      	ldr	r3, [pc, #464]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 8008868:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008870:	2b00      	cmp	r3, #0
 8008872:	d105      	bne.n	8008880 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	b2da      	uxtb	r2, r3
 800887a:	4b6f      	ldr	r3, [pc, #444]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 800887c:	759a      	strb	r2, [r3, #22]
 800887e:	e00b      	b.n	8008898 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008886:	2b02      	cmp	r3, #2
 8008888:	d103      	bne.n	8008892 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800888a:	4b6b      	ldr	r3, [pc, #428]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 800888c:	22ff      	movs	r2, #255	; 0xff
 800888e:	759a      	strb	r2, [r3, #22]
 8008890:	e002      	b.n	8008898 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008892:	4b69      	ldr	r3, [pc, #420]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 8008894:	22ff      	movs	r2, #255	; 0xff
 8008896:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d004      	beq.n	80088ac <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d12d      	bne.n	8008908 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80088b2:	2bf1      	cmp	r3, #241	; 0xf1
 80088b4:	d00c      	beq.n	80088d0 <RadioSetRxGenericConfig+0x15c>
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80088bc:	2bf2      	cmp	r3, #242	; 0xf2
 80088be:	d007      	beq.n	80088d0 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d002      	beq.n	80088d0 <RadioSetRxGenericConfig+0x15c>
                return -1;
 80088ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088ce:	e10b      	b.n	8008ae8 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 80088d0:	2300      	movs	r3, #0
 80088d2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80088d8:	4b58      	ldr	r3, [pc, #352]	; (8008a3c <RadioSetRxGenericConfig+0x2c8>)
 80088da:	6819      	ldr	r1, [r3, #0]
 80088dc:	f107 0314 	add.w	r3, r7, #20
 80088e0:	4a57      	ldr	r2, [pc, #348]	; (8008a40 <RadioSetRxGenericConfig+0x2cc>)
 80088e2:	4618      	mov	r0, r3
 80088e4:	f001 fd48 	bl	800a378 <RFW_Init>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <RadioSetRxGenericConfig+0x180>
                return -1;
 80088ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088f2:	e0f9      	b.n	8008ae8 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80088f4:	4b50      	ldr	r3, [pc, #320]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80088fa:	4b4f      	ldr	r3, [pc, #316]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 80088fc:	2201      	movs	r2, #1
 80088fe:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008900:	4b4d      	ldr	r3, [pc, #308]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 8008902:	2200      	movs	r2, #0
 8008904:	755a      	strb	r2, [r3, #21]
        {
 8008906:	e00e      	b.n	8008926 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800890e:	4b4a      	ldr	r3, [pc, #296]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 8008910:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008918:	4b47      	ldr	r3, [pc, #284]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 800891a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8008922:	4b45      	ldr	r3, [pc, #276]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 8008924:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008926:	f7ff fa6e 	bl	8007e06 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800892a:	2000      	movs	r0, #0
 800892c:	f7fe fc0a 	bl	8007144 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008930:	4844      	ldr	r0, [pc, #272]	; (8008a44 <RadioSetRxGenericConfig+0x2d0>)
 8008932:	f001 f82d 	bl	8009990 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008936:	4844      	ldr	r0, [pc, #272]	; (8008a48 <RadioSetRxGenericConfig+0x2d4>)
 8008938:	f001 f8fc 	bl	8009b34 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800893c:	f107 0320 	add.w	r3, r7, #32
 8008940:	4618      	mov	r0, r3
 8008942:	f000 fbc0 	bl	80090c6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	8b9b      	ldrh	r3, [r3, #28]
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fc0a 	bl	8009164 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	8b1b      	ldrh	r3, [r3, #24]
 8008954:	4618      	mov	r0, r3
 8008956:	f000 fbe5 	bl	8009124 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008960:	fb03 f202 	mul.w	r2, r3, r2
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	fbb2 f3f3 	udiv	r3, r2, r3
 800896c:	4a32      	ldr	r2, [pc, #200]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 800896e:	6093      	str	r3, [r2, #8]
        break;
 8008970:	e0b9      	b.n	8008ae6 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008976:	2b00      	cmp	r3, #0
 8008978:	d102      	bne.n	8008980 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800897a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800897e:	e0b3      	b.n	8008ae8 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008986:	2b01      	cmp	r3, #1
 8008988:	d104      	bne.n	8008994 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008992:	e002      	b.n	800899a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008994:	23ff      	movs	r3, #255	; 0xff
 8008996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bf14      	ite	ne
 80089a2:	2301      	movne	r3, #1
 80089a4:	2300      	moveq	r3, #0
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 fd53 	bl	8009454 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fd5d 	bl	8009472 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80089b8:	4b1f      	ldr	r3, [pc, #124]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80089c6:	4b1c      	ldr	r3, [pc, #112]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 80089c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80089d2:	4b19      	ldr	r3, [pc, #100]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 80089d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80089de:	4b16      	ldr	r3, [pc, #88]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 80089e0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d010      	beq.n	8008a10 <RadioSetRxGenericConfig+0x29c>
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	dc2c      	bgt.n	8008a4c <RadioSetRxGenericConfig+0x2d8>
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d002      	beq.n	80089fc <RadioSetRxGenericConfig+0x288>
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d005      	beq.n	8008a06 <RadioSetRxGenericConfig+0x292>
            break;
 80089fa:	e027      	b.n	8008a4c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80089fc:	4b0e      	ldr	r3, [pc, #56]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008a04:	e023      	b.n	8008a4e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008a06:	4b0c      	ldr	r3, [pc, #48]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008a0e:	e01e      	b.n	8008a4e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a16:	2b0b      	cmp	r3, #11
 8008a18:	d004      	beq.n	8008a24 <RadioSetRxGenericConfig+0x2b0>
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a20:	2b0c      	cmp	r3, #12
 8008a22:	d104      	bne.n	8008a2e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008a24:	4b04      	ldr	r3, [pc, #16]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008a2c:	e00f      	b.n	8008a4e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008a2e:	4b02      	ldr	r3, [pc, #8]	; (8008a38 <RadioSetRxGenericConfig+0x2c4>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008a36:	e00a      	b.n	8008a4e <RadioSetRxGenericConfig+0x2da>
 8008a38:	200006d0 	.word	0x200006d0
 8008a3c:	200006cc 	.word	0x200006cc
 8008a40:	20000744 	.word	0x20000744
 8008a44:	20000708 	.word	0x20000708
 8008a48:	200006de 	.word	0x200006de
            break;
 8008a4c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008a4e:	4b28      	ldr	r3, [pc, #160]	; (8008af0 <RadioSetRxGenericConfig+0x37c>)
 8008a50:	2201      	movs	r2, #1
 8008a52:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8008a58:	4b25      	ldr	r3, [pc, #148]	; (8008af0 <RadioSetRxGenericConfig+0x37c>)
 8008a5a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8008a62:	4b23      	ldr	r3, [pc, #140]	; (8008af0 <RadioSetRxGenericConfig+0x37c>)
 8008a64:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008a66:	4a22      	ldr	r2, [pc, #136]	; (8008af0 <RadioSetRxGenericConfig+0x37c>)
 8008a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a6c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008a74:	4b1e      	ldr	r3, [pc, #120]	; (8008af0 <RadioSetRxGenericConfig+0x37c>)
 8008a76:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008a80:	4b1b      	ldr	r3, [pc, #108]	; (8008af0 <RadioSetRxGenericConfig+0x37c>)
 8008a82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8008a86:	f7ff f9be 	bl	8007e06 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	f7fe fb5a 	bl	8007144 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008a90:	4818      	ldr	r0, [pc, #96]	; (8008af4 <RadioSetRxGenericConfig+0x380>)
 8008a92:	f000 ff7d 	bl	8009990 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008a96:	4818      	ldr	r0, [pc, #96]	; (8008af8 <RadioSetRxGenericConfig+0x384>)
 8008a98:	f001 f84c 	bl	8009b34 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008a9c:	4b14      	ldr	r3, [pc, #80]	; (8008af0 <RadioSetRxGenericConfig+0x37c>)
 8008a9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d10d      	bne.n	8008ac2 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008aa6:	f240 7036 	movw	r0, #1846	; 0x736
 8008aaa:	f001 f99f 	bl	8009dec <SUBGRF_ReadRegister>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	f023 0304 	bic.w	r3, r3, #4
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	f240 7036 	movw	r0, #1846	; 0x736
 8008abc:	f001 f982 	bl	8009dc4 <SUBGRF_WriteRegister>
 8008ac0:	e00c      	b.n	8008adc <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008ac2:	f240 7036 	movw	r0, #1846	; 0x736
 8008ac6:	f001 f991 	bl	8009dec <SUBGRF_ReadRegister>
 8008aca:	4603      	mov	r3, r0
 8008acc:	f043 0304 	orr.w	r3, r3, #4
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	f240 7036 	movw	r0, #1846	; 0x736
 8008ad8:	f001 f974 	bl	8009dc4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8008adc:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <RadioSetRxGenericConfig+0x37c>)
 8008ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ae2:	609a      	str	r2, [r3, #8]
        break;
 8008ae4:	bf00      	nop
    }
    return status;
 8008ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3730      	adds	r7, #48	; 0x30
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	200006d0 	.word	0x200006d0
 8008af4:	20000708 	.word	0x20000708
 8008af8:	200006de 	.word	0x200006de

08008afc <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b08e      	sub	sp, #56	; 0x38
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	607b      	str	r3, [r7, #4]
 8008b06:	4603      	mov	r3, r0
 8008b08:	73fb      	strb	r3, [r7, #15]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8008b0e:	2300      	movs	r3, #0
 8008b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b12:	2300      	movs	r3, #0
 8008b14:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008b16:	f001 fc3c 	bl	800a392 <RFW_DeInit>
    switch( modem )
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	f200 8204 	bhi.w	8008f2a <RadioSetTxGenericConfig+0x42e>
 8008b22:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <RadioSetTxGenericConfig+0x2c>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008cad 	.word	0x08008cad
 8008b2c:	08008df5 	.word	0x08008df5
 8008b30:	08008eed 	.word	0x08008eed
 8008b34:	08008b39 	.word	0x08008b39
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	7c9b      	ldrb	r3, [r3, #18]
 8008b3c:	2b08      	cmp	r3, #8
 8008b3e:	d902      	bls.n	8008b46 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8008b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b44:	e206      	b.n	8008f54 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	6899      	ldr	r1, [r3, #8]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	7c9b      	ldrb	r3, [r3, #18]
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b54:	4618      	mov	r0, r3
 8008b56:	f001 fdb3 	bl	800a6c0 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d102      	bne.n	8008b68 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8008b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b66:	e1f5      	b.n	8008f54 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d813      	bhi.n	8008b9c <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008b74:	2302      	movs	r3, #2
 8008b76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008b7a:	4b99      	ldr	r3, [pc, #612]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008b7c:	2203      	movs	r2, #3
 8008b7e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008b80:	4b97      	ldr	r3, [pc, #604]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008b82:	2203      	movs	r2, #3
 8008b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a94      	ldr	r2, [pc, #592]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008b8e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	7cda      	ldrb	r2, [r3, #19]
 8008b94:	4b92      	ldr	r3, [pc, #584]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b9a:	e017      	b.n	8008bcc <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008ba2:	4b8f      	ldr	r3, [pc, #572]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008ba8:	4b8d      	ldr	r3, [pc, #564]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a8a      	ldr	r2, [pc, #552]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008bb6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	7cda      	ldrb	r2, [r3, #19]
 8008bbc:	4b88      	ldr	r3, [pc, #544]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	089b      	lsrs	r3, r3, #2
 8008bc8:	4a85      	ldr	r2, [pc, #532]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008bca:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	4b82      	ldr	r3, [pc, #520]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008bd8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008bda:	4b81      	ldr	r3, [pc, #516]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008bdc:	2204      	movs	r2, #4
 8008bde:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	7c9b      	ldrb	r3, [r3, #18]
 8008be4:	00db      	lsls	r3, r3, #3
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	4b7d      	ldr	r3, [pc, #500]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008bea:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008bec:	4b7c      	ldr	r3, [pc, #496]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	7d9b      	ldrb	r3, [r3, #22]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d003      	beq.n	8008c02 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	7d1b      	ldrb	r3, [r3, #20]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d12b      	bne.n	8008c5a <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	7d5b      	ldrb	r3, [r3, #21]
 8008c06:	2bf1      	cmp	r3, #241	; 0xf1
 8008c08:	d00a      	beq.n	8008c20 <RadioSetTxGenericConfig+0x124>
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	7d5b      	ldrb	r3, [r3, #21]
 8008c0e:	2bf2      	cmp	r3, #242	; 0xf2
 8008c10:	d006      	beq.n	8008c20 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	7d5b      	ldrb	r3, [r3, #21]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d002      	beq.n	8008c20 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8008c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c1e:	e199      	b.n	8008f54 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8008c24:	2301      	movs	r3, #1
 8008c26:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008c2a:	4b6e      	ldr	r3, [pc, #440]	; (8008de4 <RadioSetTxGenericConfig+0x2e8>)
 8008c2c:	6819      	ldr	r1, [r3, #0]
 8008c2e:	f107 0320 	add.w	r3, r7, #32
 8008c32:	4a6d      	ldr	r2, [pc, #436]	; (8008de8 <RadioSetTxGenericConfig+0x2ec>)
 8008c34:	4618      	mov	r0, r3
 8008c36:	f001 fb9f 	bl	800a378 <RFW_Init>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8008c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c44:	e186      	b.n	8008f54 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008c46:	4b66      	ldr	r3, [pc, #408]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008c4c:	4b64      	ldr	r3, [pc, #400]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008c4e:	2201      	movs	r2, #1
 8008c50:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008c52:	4b63      	ldr	r3, [pc, #396]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	755a      	strb	r2, [r3, #21]
        {
 8008c58:	e00b      	b.n	8008c72 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	7d5a      	ldrb	r2, [r3, #21]
 8008c5e:	4b60      	ldr	r3, [pc, #384]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008c60:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	7d9a      	ldrb	r2, [r3, #22]
 8008c66:	4b5e      	ldr	r3, [pc, #376]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008c68:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	7d1a      	ldrb	r2, [r3, #20]
 8008c6e:	4b5c      	ldr	r3, [pc, #368]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008c70:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008c72:	f7ff f8c8 	bl	8007e06 <RadioStandby>
        RadioSetModem( radio_modem );
 8008c76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe fa62 	bl	8007144 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008c80:	485a      	ldr	r0, [pc, #360]	; (8008dec <RadioSetTxGenericConfig+0x2f0>)
 8008c82:	f000 fe85 	bl	8009990 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c86:	485a      	ldr	r0, [pc, #360]	; (8008df0 <RadioSetTxGenericConfig+0x2f4>)
 8008c88:	f000 ff54 	bl	8009b34 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fa18 	bl	80090c6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	8a1b      	ldrh	r3, [r3, #16]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fa62 	bl	8009164 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	899b      	ldrh	r3, [r3, #12]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 fa3d 	bl	8009124 <SUBGRF_SetCrcPolynomial>
        break;
 8008caa:	e13f      	b.n	8008f2c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d102      	bne.n	8008cba <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8008cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cb8:	e14c      	b.n	8008f54 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	7c9b      	ldrb	r3, [r3, #18]
 8008cbe:	2b08      	cmp	r3, #8
 8008cc0:	d902      	bls.n	8008cc8 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8008cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cc6:	e145      	b.n	8008f54 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	6899      	ldr	r1, [r3, #8]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	7c9b      	ldrb	r3, [r3, #18]
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f001 fcf2 	bl	800a6c0 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008cdc:	4b40      	ldr	r3, [pc, #256]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a3d      	ldr	r2, [pc, #244]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008cea:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	7cda      	ldrb	r2, [r3, #19]
 8008cf0:	4b3b      	ldr	r3, [pc, #236]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	4a39      	ldr	r2, [pc, #228]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008cfc:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008cfe:	4b38      	ldr	r3, [pc, #224]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	00db      	lsls	r3, r3, #3
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	4b34      	ldr	r3, [pc, #208]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008d10:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008d12:	4b33      	ldr	r3, [pc, #204]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008d14:	2204      	movs	r2, #4
 8008d16:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	7c9b      	ldrb	r3, [r3, #18]
 8008d1c:	00db      	lsls	r3, r3, #3
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	4b2f      	ldr	r3, [pc, #188]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008d22:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008d24:	4b2e      	ldr	r3, [pc, #184]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	7d9b      	ldrb	r3, [r3, #22]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d003      	beq.n	8008d3a <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	7d1b      	ldrb	r3, [r3, #20]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d12a      	bne.n	8008d90 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	7d5b      	ldrb	r3, [r3, #21]
 8008d3e:	2bf1      	cmp	r3, #241	; 0xf1
 8008d40:	d00a      	beq.n	8008d58 <RadioSetTxGenericConfig+0x25c>
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	7d5b      	ldrb	r3, [r3, #21]
 8008d46:	2bf2      	cmp	r3, #242	; 0xf2
 8008d48:	d006      	beq.n	8008d58 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	7d5b      	ldrb	r3, [r3, #21]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d002      	beq.n	8008d58 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8008d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d56:	e0fd      	b.n	8008f54 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008d60:	4b20      	ldr	r3, [pc, #128]	; (8008de4 <RadioSetTxGenericConfig+0x2e8>)
 8008d62:	6819      	ldr	r1, [r3, #0]
 8008d64:	f107 0314 	add.w	r3, r7, #20
 8008d68:	4a1f      	ldr	r2, [pc, #124]	; (8008de8 <RadioSetTxGenericConfig+0x2ec>)
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f001 fb04 	bl	800a378 <RFW_Init>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8008d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d7a:	e0eb      	b.n	8008f54 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008d7c:	4b18      	ldr	r3, [pc, #96]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008d82:	4b17      	ldr	r3, [pc, #92]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008d84:	2201      	movs	r2, #1
 8008d86:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008d88:	4b15      	ldr	r3, [pc, #84]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	755a      	strb	r2, [r3, #21]
        {
 8008d8e:	e00b      	b.n	8008da8 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	7d5a      	ldrb	r2, [r3, #21]
 8008d94:	4b12      	ldr	r3, [pc, #72]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008d96:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	7d9a      	ldrb	r2, [r3, #22]
 8008d9c:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008d9e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	7d1a      	ldrb	r2, [r3, #20]
 8008da4:	4b0e      	ldr	r3, [pc, #56]	; (8008de0 <RadioSetTxGenericConfig+0x2e4>)
 8008da6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008da8:	f7ff f82d 	bl	8007e06 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008dac:	2000      	movs	r0, #0
 8008dae:	f7fe f9c9 	bl	8007144 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008db2:	480e      	ldr	r0, [pc, #56]	; (8008dec <RadioSetTxGenericConfig+0x2f0>)
 8008db4:	f000 fdec 	bl	8009990 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008db8:	480d      	ldr	r0, [pc, #52]	; (8008df0 <RadioSetTxGenericConfig+0x2f4>)
 8008dba:	f000 febb 	bl	8009b34 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 f97f 	bl	80090c6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	8a1b      	ldrh	r3, [r3, #16]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 f9c9 	bl	8009164 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	899b      	ldrh	r3, [r3, #12]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 f9a4 	bl	8009124 <SUBGRF_SetCrcPolynomial>
        break;
 8008ddc:	e0a6      	b.n	8008f2c <RadioSetTxGenericConfig+0x430>
 8008dde:	bf00      	nop
 8008de0:	200006d0 	.word	0x200006d0
 8008de4:	200006cc 	.word	0x200006cc
 8008de8:	2000072c 	.word	0x2000072c
 8008dec:	20000708 	.word	0x20000708
 8008df0:	200006de 	.word	0x200006de
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008df4:	4b59      	ldr	r3, [pc, #356]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	781a      	ldrb	r2, [r3, #0]
 8008e00:	4b56      	ldr	r3, [pc, #344]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	785a      	ldrb	r2, [r3, #1]
 8008e0a:	4b54      	ldr	r3, [pc, #336]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	789a      	ldrb	r2, [r3, #2]
 8008e14:	4b51      	ldr	r3, [pc, #324]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008e16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	78db      	ldrb	r3, [r3, #3]
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d010      	beq.n	8008e44 <RadioSetTxGenericConfig+0x348>
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	dc20      	bgt.n	8008e68 <RadioSetTxGenericConfig+0x36c>
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <RadioSetTxGenericConfig+0x334>
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d005      	beq.n	8008e3a <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8008e2e:	e01b      	b.n	8008e68 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008e30:	4b4a      	ldr	r3, [pc, #296]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008e38:	e017      	b.n	8008e6a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008e3a:	4b48      	ldr	r3, [pc, #288]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008e42:	e012      	b.n	8008e6a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	2b0b      	cmp	r3, #11
 8008e4a:	d003      	beq.n	8008e54 <RadioSetTxGenericConfig+0x358>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	2b0c      	cmp	r3, #12
 8008e52:	d104      	bne.n	8008e5e <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008e54:	4b41      	ldr	r3, [pc, #260]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008e5c:	e005      	b.n	8008e6a <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008e5e:	4b3f      	ldr	r3, [pc, #252]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008e66:	e000      	b.n	8008e6a <RadioSetTxGenericConfig+0x36e>
            break;
 8008e68:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008e6a:	4b3c      	ldr	r3, [pc, #240]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	889a      	ldrh	r2, [r3, #4]
 8008e74:	4b39      	ldr	r3, [pc, #228]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008e76:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	799a      	ldrb	r2, [r3, #6]
 8008e7c:	4b37      	ldr	r3, [pc, #220]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008e7e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	79da      	ldrb	r2, [r3, #7]
 8008e84:	4b35      	ldr	r3, [pc, #212]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008e86:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	7a1a      	ldrb	r2, [r3, #8]
 8008e8e:	4b33      	ldr	r3, [pc, #204]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008e90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8008e94:	f7fe ffb7 	bl	8007e06 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008e98:	2001      	movs	r0, #1
 8008e9a:	f7fe f953 	bl	8007144 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008e9e:	4830      	ldr	r0, [pc, #192]	; (8008f60 <RadioSetTxGenericConfig+0x464>)
 8008ea0:	f000 fd76 	bl	8009990 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008ea4:	482f      	ldr	r0, [pc, #188]	; (8008f64 <RadioSetTxGenericConfig+0x468>)
 8008ea6:	f000 fe45 	bl	8009b34 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8008eaa:	4b2c      	ldr	r3, [pc, #176]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008eb0:	2b06      	cmp	r3, #6
 8008eb2:	d10d      	bne.n	8008ed0 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008eb4:	f640 0089 	movw	r0, #2185	; 0x889
 8008eb8:	f000 ff98 	bl	8009dec <SUBGRF_ReadRegister>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	f023 0304 	bic.w	r3, r3, #4
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	f640 0089 	movw	r0, #2185	; 0x889
 8008eca:	f000 ff7b 	bl	8009dc4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8008ece:	e02d      	b.n	8008f2c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008ed0:	f640 0089 	movw	r0, #2185	; 0x889
 8008ed4:	f000 ff8a 	bl	8009dec <SUBGRF_ReadRegister>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	f043 0304 	orr.w	r3, r3, #4
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	f640 0089 	movw	r0, #2185	; 0x889
 8008ee6:	f000 ff6d 	bl	8009dc4 <SUBGRF_WriteRegister>
        break;
 8008eea:	e01f      	b.n	8008f2c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d004      	beq.n	8008efe <RadioSetTxGenericConfig+0x402>
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008efc:	d902      	bls.n	8008f04 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8008efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f02:	e027      	b.n	8008f54 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8008f04:	2003      	movs	r0, #3
 8008f06:	f7fe f91d 	bl	8007144 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008f0a:	4b14      	ldr	r3, [pc, #80]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a11      	ldr	r2, [pc, #68]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008f18:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008f1a:	4b10      	ldr	r3, [pc, #64]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008f1c:	2216      	movs	r2, #22
 8008f1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008f22:	480f      	ldr	r0, [pc, #60]	; (8008f60 <RadioSetTxGenericConfig+0x464>)
 8008f24:	f000 fd34 	bl	8009990 <SUBGRF_SetModulationParams>
        break;
 8008f28:	e000      	b.n	8008f2c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8008f2a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f001 f863 	bl	8009ffc <SUBGRF_SetRfTxPower>
 8008f36:	4603      	mov	r3, r0
 8008f38:	461a      	mov	r2, r3
 8008f3a:	4b08      	ldr	r3, [pc, #32]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008f3c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008f40:	4b06      	ldr	r3, [pc, #24]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008f42:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008f46:	4618      	mov	r0, r3
 8008f48:	f001 fa37 	bl	800a3ba <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008f4c:	4a03      	ldr	r2, [pc, #12]	; (8008f5c <RadioSetTxGenericConfig+0x460>)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6053      	str	r3, [r2, #4]
    return 0;
 8008f52:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3738      	adds	r7, #56	; 0x38
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	200006d0 	.word	0x200006d0
 8008f60:	20000708 	.word	0x20000708
 8008f64:	200006de 	.word	0x200006de

08008f68 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008f70:	2301      	movs	r3, #1
 8008f72:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bc80      	pop	{r7}
 8008f7e:	4770      	bx	lr

08008f80 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008f8a:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc80      	pop	{r7}
 8008f94:	4770      	bx	lr
	...

08008f98 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8008fa6:	4a1d      	ldr	r2, [pc, #116]	; (800901c <SUBGRF_Init+0x84>)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8008fac:	f7f8 fe06 	bl	8001bbc <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008fb0:	2002      	movs	r0, #2
 8008fb2:	f001 f8ff 	bl	800a1b4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8008fb6:	4b1a      	ldr	r3, [pc, #104]	; (8009020 <SUBGRF_Init+0x88>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	f000 f97d 	bl	80092bc <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8008fc2:	f001 fb52 	bl	800a66a <RBI_IsTCXO>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d10e      	bne.n	8008fea <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8008fcc:	2140      	movs	r1, #64	; 0x40
 8008fce:	2001      	movs	r0, #1
 8008fd0:	f000 fb82 	bl	80096d8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	f640 1011 	movw	r0, #2321	; 0x911
 8008fda:	f000 fef3 	bl	8009dc4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8008fde:	237f      	movs	r3, #127	; 0x7f
 8008fe0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8008fe2:	7b38      	ldrb	r0, [r7, #12]
 8008fe4:	f000 fa8b 	bl	80094fe <SUBGRF_Calibrate>
 8008fe8:	e009      	b.n	8008ffe <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008fea:	2120      	movs	r1, #32
 8008fec:	f640 1011 	movw	r0, #2321	; 0x911
 8008ff0:	f000 fee8 	bl	8009dc4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008ff4:	2120      	movs	r1, #32
 8008ff6:	f640 1012 	movw	r0, #2322	; 0x912
 8008ffa:	f000 fee3 	bl	8009dc4 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008ffe:	210e      	movs	r1, #14
 8009000:	f640 101f 	movw	r0, #2335	; 0x91f
 8009004:	f000 fede 	bl	8009dc4 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8009008:	f001 fa86 	bl	800a518 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800900c:	4b05      	ldr	r3, [pc, #20]	; (8009024 <SUBGRF_Init+0x8c>)
 800900e:	2201      	movs	r2, #1
 8009010:	701a      	strb	r2, [r3, #0]
}
 8009012:	bf00      	nop
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20000768 	.word	0x20000768
 8009020:	20000764 	.word	0x20000764
 8009024:	2000075c 	.word	0x2000075c

08009028 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009028:	b480      	push	{r7}
 800902a:	af00      	add	r7, sp, #0
    return OperatingMode;
 800902c:	4b02      	ldr	r3, [pc, #8]	; (8009038 <SUBGRF_GetOperatingMode+0x10>)
 800902e:	781b      	ldrb	r3, [r3, #0]
}
 8009030:	4618      	mov	r0, r3
 8009032:	46bd      	mov	sp, r7
 8009034:	bc80      	pop	{r7}
 8009036:	4770      	bx	lr
 8009038:	2000075c 	.word	0x2000075c

0800903c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	461a      	mov	r2, r3
 800904c:	6879      	ldr	r1, [r7, #4]
 800904e:	2000      	movs	r0, #0
 8009050:	f000 ff24 	bl	8009e9c <SUBGRF_WriteBuffer>
}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	4613      	mov	r3, r2
 8009068:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800906e:	f107 0317 	add.w	r3, r7, #23
 8009072:	4619      	mov	r1, r3
 8009074:	68b8      	ldr	r0, [r7, #8]
 8009076:	f000 fe27 	bl	8009cc8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	79fa      	ldrb	r2, [r7, #7]
 8009080:	429a      	cmp	r2, r3
 8009082:	d201      	bcs.n	8009088 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009084:	2301      	movs	r3, #1
 8009086:	e007      	b.n	8009098 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009088:	7df8      	ldrb	r0, [r7, #23]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	68f9      	ldr	r1, [r7, #12]
 8009092:	f000 ff25 	bl	8009ee0 <SUBGRF_ReadBuffer>

    return 0;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	460b      	mov	r3, r1
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80090ae:	7afb      	ldrb	r3, [r7, #11]
 80090b0:	4619      	mov	r1, r3
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f7ff ffc2 	bl	800903c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f91b 	bl	80092f4 <SUBGRF_SetTx>
}
 80090be:	bf00      	nop
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80090ce:	2208      	movs	r2, #8
 80090d0:	6879      	ldr	r1, [r7, #4]
 80090d2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80090d6:	f000 fe9d 	bl	8009e14 <SUBGRF_WriteRegisters>
    return 0;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	4603      	mov	r3, r0
 80090ec:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80090ee:	88fb      	ldrh	r3, [r7, #6]
 80090f0:	0a1b      	lsrs	r3, r3, #8
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80090f8:	88fb      	ldrh	r3, [r7, #6]
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80090fe:	f000 fb6f 	bl	80097e0 <SUBGRF_GetPacketType>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d108      	bne.n	800911a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8009108:	f107 030c 	add.w	r3, r7, #12
 800910c:	2202      	movs	r2, #2
 800910e:	4619      	mov	r1, r3
 8009110:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8009114:	f000 fe7e 	bl	8009e14 <SUBGRF_WriteRegisters>
            break;
 8009118:	e000      	b.n	800911c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800911a:	bf00      	nop
    }
}
 800911c:	bf00      	nop
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	4603      	mov	r3, r0
 800912c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	0a1b      	lsrs	r3, r3, #8
 8009132:	b29b      	uxth	r3, r3
 8009134:	b2db      	uxtb	r3, r3
 8009136:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009138:	88fb      	ldrh	r3, [r7, #6]
 800913a:	b2db      	uxtb	r3, r3
 800913c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800913e:	f000 fb4f 	bl	80097e0 <SUBGRF_GetPacketType>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d108      	bne.n	800915a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009148:	f107 030c 	add.w	r3, r7, #12
 800914c:	2202      	movs	r2, #2
 800914e:	4619      	mov	r1, r3
 8009150:	f240 60be 	movw	r0, #1726	; 0x6be
 8009154:	f000 fe5e 	bl	8009e14 <SUBGRF_WriteRegisters>
            break;
 8009158:	e000      	b.n	800915c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800915a:	bf00      	nop
    }
}
 800915c:	bf00      	nop
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009172:	f000 fb35 	bl	80097e0 <SUBGRF_GetPacketType>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d121      	bne.n	80091c0 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800917c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009180:	f000 fe34 	bl	8009dec <SUBGRF_ReadRegister>
 8009184:	4603      	mov	r3, r0
 8009186:	f023 0301 	bic.w	r3, r3, #1
 800918a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800918c:	88fb      	ldrh	r3, [r7, #6]
 800918e:	0a1b      	lsrs	r3, r3, #8
 8009190:	b29b      	uxth	r3, r3
 8009192:	b25b      	sxtb	r3, r3
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	b25a      	sxtb	r2, r3
 800919a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800919e:	4313      	orrs	r3, r2
 80091a0:	b25b      	sxtb	r3, r3
 80091a2:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	4619      	mov	r1, r3
 80091a8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80091ac:	f000 fe0a 	bl	8009dc4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80091b0:	88fb      	ldrh	r3, [r7, #6]
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	4619      	mov	r1, r3
 80091b6:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80091ba:	f000 fe03 	bl	8009dc4 <SUBGRF_WriteRegister>
            break;
 80091be:	e000      	b.n	80091c2 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80091c0:	bf00      	nop
    }
}
 80091c2:	bf00      	nop
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b082      	sub	sp, #8
 80091ce:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80091d0:	2300      	movs	r3, #0
 80091d2:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80091dc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80091e0:	f000 fe04 	bl	8009dec <SUBGRF_ReadRegister>
 80091e4:	4603      	mov	r3, r0
 80091e6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	f023 0301 	bic.w	r3, r3, #1
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	4619      	mov	r1, r3
 80091f2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80091f6:	f000 fde5 	bl	8009dc4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80091fa:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80091fe:	f000 fdf5 	bl	8009dec <SUBGRF_ReadRegister>
 8009202:	4603      	mov	r3, r0
 8009204:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8009206:	79bb      	ldrb	r3, [r7, #6]
 8009208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800920c:	b2db      	uxtb	r3, r3
 800920e:	4619      	mov	r1, r3
 8009210:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009214:	f000 fdd6 	bl	8009dc4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009218:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800921c:	f000 f88a 	bl	8009334 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009220:	463b      	mov	r3, r7
 8009222:	2204      	movs	r2, #4
 8009224:	4619      	mov	r1, r3
 8009226:	f640 0019 	movw	r0, #2073	; 0x819
 800922a:	f000 fe15 	bl	8009e58 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800922e:	2000      	movs	r0, #0
 8009230:	f000 f844 	bl	80092bc <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	4619      	mov	r1, r3
 8009238:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800923c:	f000 fdc2 	bl	8009dc4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009240:	79bb      	ldrb	r3, [r7, #6]
 8009242:	4619      	mov	r1, r3
 8009244:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009248:	f000 fdbc 	bl	8009dc4 <SUBGRF_WriteRegister>

    return number;
 800924c:	683b      	ldr	r3, [r7, #0]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009260:	2000      	movs	r0, #0
 8009262:	f001 f999 	bl	800a598 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009266:	2002      	movs	r0, #2
 8009268:	f000 ffa4 	bl	800a1b4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800926c:	793b      	ldrb	r3, [r7, #4]
 800926e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009272:	b2db      	uxtb	r3, r3
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009278:	793b      	ldrb	r3, [r7, #4]
 800927a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800927e:	b2db      	uxtb	r3, r3
 8009280:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009282:	b25b      	sxtb	r3, r3
 8009284:	4313      	orrs	r3, r2
 8009286:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009288:	793b      	ldrb	r3, [r7, #4]
 800928a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800928e:	b2db      	uxtb	r3, r3
 8009290:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009292:	4313      	orrs	r3, r2
 8009294:	b25b      	sxtb	r3, r3
 8009296:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009298:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800929a:	f107 030f 	add.w	r3, r7, #15
 800929e:	2201      	movs	r2, #1
 80092a0:	4619      	mov	r1, r3
 80092a2:	2084      	movs	r0, #132	; 0x84
 80092a4:	f000 fe3e 	bl	8009f24 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80092a8:	4b03      	ldr	r3, [pc, #12]	; (80092b8 <SUBGRF_SetSleep+0x60>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	701a      	strb	r2, [r3, #0]
}
 80092ae:	bf00      	nop
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	2000075c 	.word	0x2000075c

080092bc <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80092c6:	1dfb      	adds	r3, r7, #7
 80092c8:	2201      	movs	r2, #1
 80092ca:	4619      	mov	r1, r3
 80092cc:	2080      	movs	r0, #128	; 0x80
 80092ce:	f000 fe29 	bl	8009f24 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80092d2:	79fb      	ldrb	r3, [r7, #7]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d103      	bne.n	80092e0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80092d8:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <SUBGRF_SetStandby+0x34>)
 80092da:	2201      	movs	r2, #1
 80092dc:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80092de:	e002      	b.n	80092e6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80092e0:	4b03      	ldr	r3, [pc, #12]	; (80092f0 <SUBGRF_SetStandby+0x34>)
 80092e2:	2202      	movs	r2, #2
 80092e4:	701a      	strb	r2, [r3, #0]
}
 80092e6:	bf00      	nop
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	2000075c 	.word	0x2000075c

080092f4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80092fc:	4b0c      	ldr	r3, [pc, #48]	; (8009330 <SUBGRF_SetTx+0x3c>)
 80092fe:	2204      	movs	r2, #4
 8009300:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	0c1b      	lsrs	r3, r3, #16
 8009306:	b2db      	uxtb	r3, r3
 8009308:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	0a1b      	lsrs	r3, r3, #8
 800930e:	b2db      	uxtb	r3, r3
 8009310:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8009318:	f107 030c 	add.w	r3, r7, #12
 800931c:	2203      	movs	r2, #3
 800931e:	4619      	mov	r1, r3
 8009320:	2083      	movs	r0, #131	; 0x83
 8009322:	f000 fdff 	bl	8009f24 <SUBGRF_WriteCommand>
}
 8009326:	bf00      	nop
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	2000075c 	.word	0x2000075c

08009334 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800933c:	4b0c      	ldr	r3, [pc, #48]	; (8009370 <SUBGRF_SetRx+0x3c>)
 800933e:	2205      	movs	r2, #5
 8009340:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	0c1b      	lsrs	r3, r3, #16
 8009346:	b2db      	uxtb	r3, r3
 8009348:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	0a1b      	lsrs	r3, r3, #8
 800934e:	b2db      	uxtb	r3, r3
 8009350:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	b2db      	uxtb	r3, r3
 8009356:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009358:	f107 030c 	add.w	r3, r7, #12
 800935c:	2203      	movs	r2, #3
 800935e:	4619      	mov	r1, r3
 8009360:	2082      	movs	r0, #130	; 0x82
 8009362:	f000 fddf 	bl	8009f24 <SUBGRF_WriteCommand>
}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	2000075c 	.word	0x2000075c

08009374 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800937c:	4b0e      	ldr	r3, [pc, #56]	; (80093b8 <SUBGRF_SetRxBoosted+0x44>)
 800937e:	2205      	movs	r2, #5
 8009380:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009382:	2197      	movs	r1, #151	; 0x97
 8009384:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8009388:	f000 fd1c 	bl	8009dc4 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	0c1b      	lsrs	r3, r3, #16
 8009390:	b2db      	uxtb	r3, r3
 8009392:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	0a1b      	lsrs	r3, r3, #8
 8009398:	b2db      	uxtb	r3, r3
 800939a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80093a2:	f107 030c 	add.w	r3, r7, #12
 80093a6:	2203      	movs	r2, #3
 80093a8:	4619      	mov	r1, r3
 80093aa:	2082      	movs	r0, #130	; 0x82
 80093ac:	f000 fdba 	bl	8009f24 <SUBGRF_WriteCommand>
}
 80093b0:	bf00      	nop
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	2000075c 	.word	0x2000075c

080093bc <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	0c1b      	lsrs	r3, r3, #16
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	0a1b      	lsrs	r3, r3, #8
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	0c1b      	lsrs	r3, r3, #16
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	0a1b      	lsrs	r3, r3, #8
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80093f2:	f107 0308 	add.w	r3, r7, #8
 80093f6:	2206      	movs	r2, #6
 80093f8:	4619      	mov	r1, r3
 80093fa:	2094      	movs	r0, #148	; 0x94
 80093fc:	f000 fd92 	bl	8009f24 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8009400:	4b03      	ldr	r3, [pc, #12]	; (8009410 <SUBGRF_SetRxDutyCycle+0x54>)
 8009402:	2206      	movs	r2, #6
 8009404:	701a      	strb	r2, [r3, #0]
}
 8009406:	bf00      	nop
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	2000075c 	.word	0x2000075c

08009414 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8009418:	2200      	movs	r2, #0
 800941a:	2100      	movs	r1, #0
 800941c:	20c5      	movs	r0, #197	; 0xc5
 800941e:	f000 fd81 	bl	8009f24 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8009422:	4b02      	ldr	r3, [pc, #8]	; (800942c <SUBGRF_SetCad+0x18>)
 8009424:	2207      	movs	r2, #7
 8009426:	701a      	strb	r2, [r3, #0]
}
 8009428:	bf00      	nop
 800942a:	bd80      	pop	{r7, pc}
 800942c:	2000075c 	.word	0x2000075c

08009430 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009434:	2200      	movs	r2, #0
 8009436:	2100      	movs	r1, #0
 8009438:	20d1      	movs	r0, #209	; 0xd1
 800943a:	f000 fd73 	bl	8009f24 <SUBGRF_WriteCommand>
}
 800943e:	bf00      	nop
 8009440:	bd80      	pop	{r7, pc}

08009442 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8009442:	b580      	push	{r7, lr}
 8009444:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8009446:	2200      	movs	r2, #0
 8009448:	2100      	movs	r1, #0
 800944a:	20d2      	movs	r0, #210	; 0xd2
 800944c:	f000 fd6a 	bl	8009f24 <SUBGRF_WriteCommand>
}
 8009450:	bf00      	nop
 8009452:	bd80      	pop	{r7, pc}

08009454 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	4603      	mov	r3, r0
 800945c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800945e:	1dfb      	adds	r3, r7, #7
 8009460:	2201      	movs	r2, #1
 8009462:	4619      	mov	r1, r3
 8009464:	209f      	movs	r0, #159	; 0x9f
 8009466:	f000 fd5d 	bl	8009f24 <SUBGRF_WriteCommand>
}
 800946a:	bf00      	nop
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	4603      	mov	r3, r0
 800947a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800947c:	1dfb      	adds	r3, r7, #7
 800947e:	2201      	movs	r2, #1
 8009480:	4619      	mov	r1, r3
 8009482:	20a0      	movs	r0, #160	; 0xa0
 8009484:	f000 fd4e 	bl	8009f24 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8009488:	79fb      	ldrb	r3, [r7, #7]
 800948a:	2b3f      	cmp	r3, #63	; 0x3f
 800948c:	d91c      	bls.n	80094c8 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800948e:	79fb      	ldrb	r3, [r7, #7]
 8009490:	085b      	lsrs	r3, r3, #1
 8009492:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800949c:	e005      	b.n	80094aa <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800949e:	7bfb      	ldrb	r3, [r7, #15]
 80094a0:	089b      	lsrs	r3, r3, #2
 80094a2:	73fb      	strb	r3, [r7, #15]
            exp++;
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
 80094a6:	3301      	adds	r3, #1
 80094a8:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80094aa:	7bfb      	ldrb	r3, [r7, #15]
 80094ac:	2b1f      	cmp	r3, #31
 80094ae:	d8f6      	bhi.n	800949e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	00db      	lsls	r3, r3, #3
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	4413      	add	r3, r2
 80094ba:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80094bc:	7b7b      	ldrb	r3, [r7, #13]
 80094be:	4619      	mov	r1, r3
 80094c0:	f240 7006 	movw	r0, #1798	; 0x706
 80094c4:	f000 fc7e 	bl	8009dc4 <SUBGRF_WriteRegister>
    }
}
 80094c8:	bf00      	nop
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80094d6:	f001 f8d3 	bl	800a680 <RBI_IsDCDC>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d102      	bne.n	80094e6 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80094e0:	2301      	movs	r3, #1
 80094e2:	71fb      	strb	r3, [r7, #7]
 80094e4:	e001      	b.n	80094ea <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80094e6:	2300      	movs	r3, #0
 80094e8:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80094ea:	1dfb      	adds	r3, r7, #7
 80094ec:	2201      	movs	r2, #1
 80094ee:	4619      	mov	r1, r3
 80094f0:	2096      	movs	r0, #150	; 0x96
 80094f2:	f000 fd17 	bl	8009f24 <SUBGRF_WriteCommand>
}
 80094f6:	bf00      	nop
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009506:	793b      	ldrb	r3, [r7, #4]
 8009508:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800950c:	b2db      	uxtb	r3, r3
 800950e:	019b      	lsls	r3, r3, #6
 8009510:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009512:	793b      	ldrb	r3, [r7, #4]
 8009514:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009518:	b2db      	uxtb	r3, r3
 800951a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800951c:	b25b      	sxtb	r3, r3
 800951e:	4313      	orrs	r3, r2
 8009520:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009522:	793b      	ldrb	r3, [r7, #4]
 8009524:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009528:	b2db      	uxtb	r3, r3
 800952a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800952c:	b25b      	sxtb	r3, r3
 800952e:	4313      	orrs	r3, r2
 8009530:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009532:	793b      	ldrb	r3, [r7, #4]
 8009534:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009538:	b2db      	uxtb	r3, r3
 800953a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800953c:	b25b      	sxtb	r3, r3
 800953e:	4313      	orrs	r3, r2
 8009540:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009542:	793b      	ldrb	r3, [r7, #4]
 8009544:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009548:	b2db      	uxtb	r3, r3
 800954a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800954c:	b25b      	sxtb	r3, r3
 800954e:	4313      	orrs	r3, r2
 8009550:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009552:	793b      	ldrb	r3, [r7, #4]
 8009554:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009558:	b2db      	uxtb	r3, r3
 800955a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800955c:	b25b      	sxtb	r3, r3
 800955e:	4313      	orrs	r3, r2
 8009560:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8009562:	793b      	ldrb	r3, [r7, #4]
 8009564:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009568:	b2db      	uxtb	r3, r3
 800956a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800956c:	4313      	orrs	r3, r2
 800956e:	b25b      	sxtb	r3, r3
 8009570:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009572:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009574:	f107 030f 	add.w	r3, r7, #15
 8009578:	2201      	movs	r2, #1
 800957a:	4619      	mov	r1, r3
 800957c:	2089      	movs	r0, #137	; 0x89
 800957e:	f000 fcd1 	bl	8009f24 <SUBGRF_WriteCommand>
}
 8009582:	bf00      	nop
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
	...

0800958c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a1d      	ldr	r2, [pc, #116]	; (800960c <SUBGRF_CalibrateImage+0x80>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d904      	bls.n	80095a6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800959c:	23e1      	movs	r3, #225	; 0xe1
 800959e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80095a0:	23e9      	movs	r3, #233	; 0xe9
 80095a2:	737b      	strb	r3, [r7, #13]
 80095a4:	e027      	b.n	80095f6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a19      	ldr	r2, [pc, #100]	; (8009610 <SUBGRF_CalibrateImage+0x84>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d904      	bls.n	80095b8 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80095ae:	23d7      	movs	r3, #215	; 0xd7
 80095b0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80095b2:	23db      	movs	r3, #219	; 0xdb
 80095b4:	737b      	strb	r3, [r7, #13]
 80095b6:	e01e      	b.n	80095f6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a16      	ldr	r2, [pc, #88]	; (8009614 <SUBGRF_CalibrateImage+0x88>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d904      	bls.n	80095ca <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80095c0:	23c1      	movs	r3, #193	; 0xc1
 80095c2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80095c4:	23c5      	movs	r3, #197	; 0xc5
 80095c6:	737b      	strb	r3, [r7, #13]
 80095c8:	e015      	b.n	80095f6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a12      	ldr	r2, [pc, #72]	; (8009618 <SUBGRF_CalibrateImage+0x8c>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d904      	bls.n	80095dc <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80095d2:	2375      	movs	r3, #117	; 0x75
 80095d4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80095d6:	2381      	movs	r3, #129	; 0x81
 80095d8:	737b      	strb	r3, [r7, #13]
 80095da:	e00c      	b.n	80095f6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a0f      	ldr	r2, [pc, #60]	; (800961c <SUBGRF_CalibrateImage+0x90>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d904      	bls.n	80095ee <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80095e4:	236b      	movs	r3, #107	; 0x6b
 80095e6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80095e8:	236f      	movs	r3, #111	; 0x6f
 80095ea:	737b      	strb	r3, [r7, #13]
 80095ec:	e003      	b.n	80095f6 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80095ee:	2329      	movs	r3, #41	; 0x29
 80095f0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80095f2:	232b      	movs	r3, #43	; 0x2b
 80095f4:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80095f6:	f107 030c 	add.w	r3, r7, #12
 80095fa:	2202      	movs	r2, #2
 80095fc:	4619      	mov	r1, r3
 80095fe:	2098      	movs	r0, #152	; 0x98
 8009600:	f000 fc90 	bl	8009f24 <SUBGRF_WriteCommand>
}
 8009604:	bf00      	nop
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	35a4e900 	.word	0x35a4e900
 8009610:	32a9f880 	.word	0x32a9f880
 8009614:	2de54480 	.word	0x2de54480
 8009618:	1b6b0b00 	.word	0x1b6b0b00
 800961c:	1954fc40 	.word	0x1954fc40

08009620 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8009620:	b590      	push	{r4, r7, lr}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	4604      	mov	r4, r0
 8009628:	4608      	mov	r0, r1
 800962a:	4611      	mov	r1, r2
 800962c:	461a      	mov	r2, r3
 800962e:	4623      	mov	r3, r4
 8009630:	71fb      	strb	r3, [r7, #7]
 8009632:	4603      	mov	r3, r0
 8009634:	71bb      	strb	r3, [r7, #6]
 8009636:	460b      	mov	r3, r1
 8009638:	717b      	strb	r3, [r7, #5]
 800963a:	4613      	mov	r3, r2
 800963c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800963e:	79fb      	ldrb	r3, [r7, #7]
 8009640:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8009642:	79bb      	ldrb	r3, [r7, #6]
 8009644:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8009646:	797b      	ldrb	r3, [r7, #5]
 8009648:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800964a:	793b      	ldrb	r3, [r7, #4]
 800964c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800964e:	f107 030c 	add.w	r3, r7, #12
 8009652:	2204      	movs	r2, #4
 8009654:	4619      	mov	r1, r3
 8009656:	2095      	movs	r0, #149	; 0x95
 8009658:	f000 fc64 	bl	8009f24 <SUBGRF_WriteCommand>
}
 800965c:	bf00      	nop
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	bd90      	pop	{r4, r7, pc}

08009664 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8009664:	b590      	push	{r4, r7, lr}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	4604      	mov	r4, r0
 800966c:	4608      	mov	r0, r1
 800966e:	4611      	mov	r1, r2
 8009670:	461a      	mov	r2, r3
 8009672:	4623      	mov	r3, r4
 8009674:	80fb      	strh	r3, [r7, #6]
 8009676:	4603      	mov	r3, r0
 8009678:	80bb      	strh	r3, [r7, #4]
 800967a:	460b      	mov	r3, r1
 800967c:	807b      	strh	r3, [r7, #2]
 800967e:	4613      	mov	r3, r2
 8009680:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8009682:	88fb      	ldrh	r3, [r7, #6]
 8009684:	0a1b      	lsrs	r3, r3, #8
 8009686:	b29b      	uxth	r3, r3
 8009688:	b2db      	uxtb	r3, r3
 800968a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800968c:	88fb      	ldrh	r3, [r7, #6]
 800968e:	b2db      	uxtb	r3, r3
 8009690:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8009692:	88bb      	ldrh	r3, [r7, #4]
 8009694:	0a1b      	lsrs	r3, r3, #8
 8009696:	b29b      	uxth	r3, r3
 8009698:	b2db      	uxtb	r3, r3
 800969a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800969c:	88bb      	ldrh	r3, [r7, #4]
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80096a2:	887b      	ldrh	r3, [r7, #2]
 80096a4:	0a1b      	lsrs	r3, r3, #8
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80096ac:	887b      	ldrh	r3, [r7, #2]
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80096b2:	883b      	ldrh	r3, [r7, #0]
 80096b4:	0a1b      	lsrs	r3, r3, #8
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80096bc:	883b      	ldrh	r3, [r7, #0]
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80096c2:	f107 0308 	add.w	r3, r7, #8
 80096c6:	2208      	movs	r2, #8
 80096c8:	4619      	mov	r1, r3
 80096ca:	2008      	movs	r0, #8
 80096cc:	f000 fc2a 	bl	8009f24 <SUBGRF_WriteCommand>
}
 80096d0:	bf00      	nop
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd90      	pop	{r4, r7, pc}

080096d8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	6039      	str	r1, [r7, #0]
 80096e2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80096e4:	79fb      	ldrb	r3, [r7, #7]
 80096e6:	f003 0307 	and.w	r3, r3, #7
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	0c1b      	lsrs	r3, r3, #16
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	0a1b      	lsrs	r3, r3, #8
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8009704:	f107 030c 	add.w	r3, r7, #12
 8009708:	2204      	movs	r2, #4
 800970a:	4619      	mov	r1, r3
 800970c:	2097      	movs	r0, #151	; 0x97
 800970e:	f000 fc09 	bl	8009f24 <SUBGRF_WriteCommand>
}
 8009712:	bf00      	nop
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
	...

0800971c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800971c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800972a:	4b1d      	ldr	r3, [pc, #116]	; (80097a0 <SUBGRF_SetRfFrequency+0x84>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	f083 0301 	eor.w	r3, r3, #1
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b00      	cmp	r3, #0
 8009736:	d005      	beq.n	8009744 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7ff ff27 	bl	800958c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800973e:	4b18      	ldr	r3, [pc, #96]	; (80097a0 <SUBGRF_SetRfFrequency+0x84>)
 8009740:	2201      	movs	r2, #1
 8009742:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	461c      	mov	r4, r3
 800974a:	4615      	mov	r5, r2
 800974c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009750:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009754:	4a13      	ldr	r2, [pc, #76]	; (80097a4 <SUBGRF_SetRfFrequency+0x88>)
 8009756:	f04f 0300 	mov.w	r3, #0
 800975a:	4640      	mov	r0, r8
 800975c:	4649      	mov	r1, r9
 800975e:	f7f6 fd5f 	bl	8000220 <__aeabi_uldivmod>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	4613      	mov	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	0e1b      	lsrs	r3, r3, #24
 800976e:	b2db      	uxtb	r3, r3
 8009770:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	0c1b      	lsrs	r3, r3, #16
 8009776:	b2db      	uxtb	r3, r3
 8009778:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	0a1b      	lsrs	r3, r3, #8
 800977e:	b2db      	uxtb	r3, r3
 8009780:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	b2db      	uxtb	r3, r3
 8009786:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8009788:	f107 0308 	add.w	r3, r7, #8
 800978c:	2204      	movs	r2, #4
 800978e:	4619      	mov	r1, r3
 8009790:	2086      	movs	r0, #134	; 0x86
 8009792:	f000 fbc7 	bl	8009f24 <SUBGRF_WriteCommand>
}
 8009796:	bf00      	nop
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80097a0:	20000764 	.word	0x20000764
 80097a4:	01e84800 	.word	0x01e84800

080097a8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80097b2:	79fa      	ldrb	r2, [r7, #7]
 80097b4:	4b09      	ldr	r3, [pc, #36]	; (80097dc <SUBGRF_SetPacketType+0x34>)
 80097b6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80097b8:	79fb      	ldrb	r3, [r7, #7]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d104      	bne.n	80097c8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80097be:	2100      	movs	r1, #0
 80097c0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80097c4:	f000 fafe 	bl	8009dc4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80097c8:	1dfb      	adds	r3, r7, #7
 80097ca:	2201      	movs	r2, #1
 80097cc:	4619      	mov	r1, r3
 80097ce:	208a      	movs	r0, #138	; 0x8a
 80097d0:	f000 fba8 	bl	8009f24 <SUBGRF_WriteCommand>
}
 80097d4:	bf00      	nop
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	2000075d 	.word	0x2000075d

080097e0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80097e0:	b480      	push	{r7}
 80097e2:	af00      	add	r7, sp, #0
    return PacketType;
 80097e4:	4b02      	ldr	r3, [pc, #8]	; (80097f0 <SUBGRF_GetPacketType+0x10>)
 80097e6:	781b      	ldrb	r3, [r3, #0]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bc80      	pop	{r7}
 80097ee:	4770      	bx	lr
 80097f0:	2000075d 	.word	0x2000075d

080097f4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	71fb      	strb	r3, [r7, #7]
 80097fe:	460b      	mov	r3, r1
 8009800:	71bb      	strb	r3, [r7, #6]
 8009802:	4613      	mov	r3, r2
 8009804:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8009806:	79fb      	ldrb	r3, [r7, #7]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d149      	bne.n	80098a0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800980c:	2000      	movs	r0, #0
 800980e:	f000 ff42 	bl	800a696 <RBI_GetRFOMaxPowerConfig>
 8009812:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8009814:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	429a      	cmp	r2, r3
 800981c:	da01      	bge.n	8009822 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b0e      	cmp	r3, #14
 8009826:	d10e      	bne.n	8009846 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8009828:	2301      	movs	r3, #1
 800982a:	2201      	movs	r2, #1
 800982c:	2100      	movs	r1, #0
 800982e:	2004      	movs	r0, #4
 8009830:	f7ff fef6 	bl	8009620 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009834:	79ba      	ldrb	r2, [r7, #6]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	b2db      	uxtb	r3, r3
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	b2db      	uxtb	r3, r3
 800983e:	330e      	adds	r3, #14
 8009840:	b2db      	uxtb	r3, r3
 8009842:	71bb      	strb	r3, [r7, #6]
 8009844:	e01f      	b.n	8009886 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2b0a      	cmp	r3, #10
 800984a:	d10e      	bne.n	800986a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800984c:	2301      	movs	r3, #1
 800984e:	2201      	movs	r2, #1
 8009850:	2100      	movs	r1, #0
 8009852:	2001      	movs	r0, #1
 8009854:	f7ff fee4 	bl	8009620 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009858:	79ba      	ldrb	r2, [r7, #6]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	b2db      	uxtb	r3, r3
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	b2db      	uxtb	r3, r3
 8009862:	330d      	adds	r3, #13
 8009864:	b2db      	uxtb	r3, r3
 8009866:	71bb      	strb	r3, [r7, #6]
 8009868:	e00d      	b.n	8009886 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800986a:	2301      	movs	r3, #1
 800986c:	2201      	movs	r2, #1
 800986e:	2100      	movs	r1, #0
 8009870:	2007      	movs	r0, #7
 8009872:	f7ff fed5 	bl	8009620 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009876:	79ba      	ldrb	r2, [r7, #6]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	b2db      	uxtb	r3, r3
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	b2db      	uxtb	r3, r3
 8009880:	330e      	adds	r3, #14
 8009882:	b2db      	uxtb	r3, r3
 8009884:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8009886:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800988a:	f113 0f11 	cmn.w	r3, #17
 800988e:	da01      	bge.n	8009894 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009890:	23ef      	movs	r3, #239	; 0xef
 8009892:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009894:	2118      	movs	r1, #24
 8009896:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800989a:	f000 fa93 	bl	8009dc4 <SUBGRF_WriteRegister>
 800989e:	e067      	b.n	8009970 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80098a0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80098a4:	f000 faa2 	bl	8009dec <SUBGRF_ReadRegister>
 80098a8:	4603      	mov	r3, r0
 80098aa:	f043 031e 	orr.w	r3, r3, #30
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	4619      	mov	r1, r3
 80098b2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80098b6:	f000 fa85 	bl	8009dc4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80098ba:	2001      	movs	r0, #1
 80098bc:	f000 feeb 	bl	800a696 <RBI_GetRFOMaxPowerConfig>
 80098c0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80098c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	da01      	bge.n	80098d0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b14      	cmp	r3, #20
 80098d4:	d10e      	bne.n	80098f4 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80098d6:	2301      	movs	r3, #1
 80098d8:	2200      	movs	r2, #0
 80098da:	2105      	movs	r1, #5
 80098dc:	2003      	movs	r0, #3
 80098de:	f7ff fe9f 	bl	8009620 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80098e2:	79ba      	ldrb	r2, [r7, #6]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	3316      	adds	r3, #22
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	71bb      	strb	r3, [r7, #6]
 80098f2:	e031      	b.n	8009958 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2b11      	cmp	r3, #17
 80098f8:	d10e      	bne.n	8009918 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80098fa:	2301      	movs	r3, #1
 80098fc:	2200      	movs	r2, #0
 80098fe:	2103      	movs	r1, #3
 8009900:	2002      	movs	r0, #2
 8009902:	f7ff fe8d 	bl	8009620 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009906:	79ba      	ldrb	r2, [r7, #6]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	b2db      	uxtb	r3, r3
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	b2db      	uxtb	r3, r3
 8009910:	3316      	adds	r3, #22
 8009912:	b2db      	uxtb	r3, r3
 8009914:	71bb      	strb	r3, [r7, #6]
 8009916:	e01f      	b.n	8009958 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b0e      	cmp	r3, #14
 800991c:	d10e      	bne.n	800993c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800991e:	2301      	movs	r3, #1
 8009920:	2200      	movs	r2, #0
 8009922:	2102      	movs	r1, #2
 8009924:	2002      	movs	r0, #2
 8009926:	f7ff fe7b 	bl	8009620 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800992a:	79ba      	ldrb	r2, [r7, #6]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	b2db      	uxtb	r3, r3
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	b2db      	uxtb	r3, r3
 8009934:	330e      	adds	r3, #14
 8009936:	b2db      	uxtb	r3, r3
 8009938:	71bb      	strb	r3, [r7, #6]
 800993a:	e00d      	b.n	8009958 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800993c:	2301      	movs	r3, #1
 800993e:	2200      	movs	r2, #0
 8009940:	2107      	movs	r1, #7
 8009942:	2004      	movs	r0, #4
 8009944:	f7ff fe6c 	bl	8009620 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009948:	79ba      	ldrb	r2, [r7, #6]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	b2db      	uxtb	r3, r3
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	b2db      	uxtb	r3, r3
 8009952:	3316      	adds	r3, #22
 8009954:	b2db      	uxtb	r3, r3
 8009956:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009958:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800995c:	f113 0f09 	cmn.w	r3, #9
 8009960:	da01      	bge.n	8009966 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009962:	23f7      	movs	r3, #247	; 0xf7
 8009964:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009966:	2138      	movs	r1, #56	; 0x38
 8009968:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800996c:	f000 fa2a 	bl	8009dc4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009970:	79bb      	ldrb	r3, [r7, #6]
 8009972:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009974:	797b      	ldrb	r3, [r7, #5]
 8009976:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009978:	f107 0308 	add.w	r3, r7, #8
 800997c:	2202      	movs	r2, #2
 800997e:	4619      	mov	r1, r3
 8009980:	208e      	movs	r0, #142	; 0x8e
 8009982:	f000 facf 	bl	8009f24 <SUBGRF_WriteCommand>
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009994:	b086      	sub	sp, #24
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800999e:	4a61      	ldr	r2, [pc, #388]	; (8009b24 <SUBGRF_SetModulationParams+0x194>)
 80099a0:	f107 0308 	add.w	r3, r7, #8
 80099a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099a8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	781a      	ldrb	r2, [r3, #0]
 80099b0:	4b5d      	ldr	r3, [pc, #372]	; (8009b28 <SUBGRF_SetModulationParams+0x198>)
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d004      	beq.n	80099c2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff fef3 	bl	80097a8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	2b03      	cmp	r3, #3
 80099c8:	f200 80a5 	bhi.w	8009b16 <SUBGRF_SetModulationParams+0x186>
 80099cc:	a201      	add	r2, pc, #4	; (adr r2, 80099d4 <SUBGRF_SetModulationParams+0x44>)
 80099ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d2:	bf00      	nop
 80099d4:	080099e5 	.word	0x080099e5
 80099d8:	08009aa5 	.word	0x08009aa5
 80099dc:	08009a67 	.word	0x08009a67
 80099e0:	08009ad3 	.word	0x08009ad3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80099e4:	2308      	movs	r3, #8
 80099e6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	4a4f      	ldr	r2, [pc, #316]	; (8009b2c <SUBGRF_SetModulationParams+0x19c>)
 80099ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	0c1b      	lsrs	r3, r3, #16
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	0a1b      	lsrs	r3, r3, #8
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	7b1b      	ldrb	r3, [r3, #12]
 8009a0e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	7b5b      	ldrb	r3, [r3, #13]
 8009a14:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	461c      	mov	r4, r3
 8009a1e:	4615      	mov	r5, r2
 8009a20:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009a24:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009a28:	4a41      	ldr	r2, [pc, #260]	; (8009b30 <SUBGRF_SetModulationParams+0x1a0>)
 8009a2a:	f04f 0300 	mov.w	r3, #0
 8009a2e:	4640      	mov	r0, r8
 8009a30:	4649      	mov	r1, r9
 8009a32:	f7f6 fbf5 	bl	8000220 <__aeabi_uldivmod>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	0c1b      	lsrs	r3, r3, #16
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	0a1b      	lsrs	r3, r3, #8
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009a54:	7cfb      	ldrb	r3, [r7, #19]
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	f107 0308 	add.w	r3, r7, #8
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	208b      	movs	r0, #139	; 0x8b
 8009a60:	f000 fa60 	bl	8009f24 <SUBGRF_WriteCommand>
        break;
 8009a64:	e058      	b.n	8009b18 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009a66:	2304      	movs	r3, #4
 8009a68:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	4a2f      	ldr	r2, [pc, #188]	; (8009b2c <SUBGRF_SetModulationParams+0x19c>)
 8009a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a74:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	0c1b      	lsrs	r3, r3, #16
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	0a1b      	lsrs	r3, r3, #8
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	7d1b      	ldrb	r3, [r3, #20]
 8009a90:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009a92:	7cfb      	ldrb	r3, [r7, #19]
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	f107 0308 	add.w	r3, r7, #8
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	208b      	movs	r0, #139	; 0x8b
 8009a9e:	f000 fa41 	bl	8009f24 <SUBGRF_WriteCommand>
        break;
 8009aa2:	e039      	b.n	8009b18 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009aa4:	2304      	movs	r3, #4
 8009aa6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	7e1b      	ldrb	r3, [r3, #24]
 8009aac:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	7e5b      	ldrb	r3, [r3, #25]
 8009ab2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	7e9b      	ldrb	r3, [r3, #26]
 8009ab8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	7edb      	ldrb	r3, [r3, #27]
 8009abe:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009ac0:	7cfb      	ldrb	r3, [r7, #19]
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	f107 0308 	add.w	r3, r7, #8
 8009ac8:	4619      	mov	r1, r3
 8009aca:	208b      	movs	r0, #139	; 0x8b
 8009acc:	f000 fa2a 	bl	8009f24 <SUBGRF_WriteCommand>

        break;
 8009ad0:	e022      	b.n	8009b18 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009ad2:	2305      	movs	r3, #5
 8009ad4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	4a14      	ldr	r2, [pc, #80]	; (8009b2c <SUBGRF_SetModulationParams+0x19c>)
 8009adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ae0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	0c1b      	lsrs	r3, r3, #16
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	0a1b      	lsrs	r3, r3, #8
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	7b1b      	ldrb	r3, [r3, #12]
 8009afc:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	7b5b      	ldrb	r3, [r3, #13]
 8009b02:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009b04:	7cfb      	ldrb	r3, [r7, #19]
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	f107 0308 	add.w	r3, r7, #8
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	208b      	movs	r0, #139	; 0x8b
 8009b10:	f000 fa08 	bl	8009f24 <SUBGRF_WriteCommand>
        break;
 8009b14:	e000      	b.n	8009b18 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8009b16:	bf00      	nop
    }
}
 8009b18:	bf00      	nop
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009b22:	bf00      	nop
 8009b24:	0800b974 	.word	0x0800b974
 8009b28:	2000075d 	.word	0x2000075d
 8009b2c:	3d090000 	.word	0x3d090000
 8009b30:	01e84800 	.word	0x01e84800

08009b34 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009b40:	4a48      	ldr	r2, [pc, #288]	; (8009c64 <SUBGRF_SetPacketParams+0x130>)
 8009b42:	f107 030c 	add.w	r3, r7, #12
 8009b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b48:	c303      	stmia	r3!, {r0, r1}
 8009b4a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	781a      	ldrb	r2, [r3, #0]
 8009b50:	4b45      	ldr	r3, [pc, #276]	; (8009c68 <SUBGRF_SetPacketParams+0x134>)
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d004      	beq.n	8009b62 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7ff fe23 	bl	80097a8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d878      	bhi.n	8009c5c <SUBGRF_SetPacketParams+0x128>
 8009b6a:	a201      	add	r2, pc, #4	; (adr r2, 8009b70 <SUBGRF_SetPacketParams+0x3c>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009b81 	.word	0x08009b81
 8009b74:	08009c11 	.word	0x08009c11
 8009b78:	08009c05 	.word	0x08009c05
 8009b7c:	08009b81 	.word	0x08009b81
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	7a5b      	ldrb	r3, [r3, #9]
 8009b84:	2bf1      	cmp	r3, #241	; 0xf1
 8009b86:	d10a      	bne.n	8009b9e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009b88:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009b8c:	f7ff faaa 	bl	80090e4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009b90:	f248 0005 	movw	r0, #32773	; 0x8005
 8009b94:	f7ff fac6 	bl	8009124 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009b98:	2302      	movs	r3, #2
 8009b9a:	75bb      	strb	r3, [r7, #22]
 8009b9c:	e011      	b.n	8009bc2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	7a5b      	ldrb	r3, [r3, #9]
 8009ba2:	2bf2      	cmp	r3, #242	; 0xf2
 8009ba4:	d10a      	bne.n	8009bbc <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009ba6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8009baa:	f7ff fa9b 	bl	80090e4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009bae:	f241 0021 	movw	r0, #4129	; 0x1021
 8009bb2:	f7ff fab7 	bl	8009124 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009bb6:	2306      	movs	r3, #6
 8009bb8:	75bb      	strb	r3, [r7, #22]
 8009bba:	e002      	b.n	8009bc2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	7a5b      	ldrb	r3, [r3, #9]
 8009bc0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009bc2:	2309      	movs	r3, #9
 8009bc4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	885b      	ldrh	r3, [r3, #2]
 8009bca:	0a1b      	lsrs	r3, r3, #8
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	885b      	ldrh	r3, [r3, #2]
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	791b      	ldrb	r3, [r3, #4]
 8009bde:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	795b      	ldrb	r3, [r3, #5]
 8009be4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	799b      	ldrb	r3, [r3, #6]
 8009bea:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	79db      	ldrb	r3, [r3, #7]
 8009bf0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	7a1b      	ldrb	r3, [r3, #8]
 8009bf6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8009bf8:	7dbb      	ldrb	r3, [r7, #22]
 8009bfa:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	7a9b      	ldrb	r3, [r3, #10]
 8009c00:	753b      	strb	r3, [r7, #20]
        break;
 8009c02:	e022      	b.n	8009c4a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8009c04:	2301      	movs	r3, #1
 8009c06:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	7b1b      	ldrb	r3, [r3, #12]
 8009c0c:	733b      	strb	r3, [r7, #12]
        break;
 8009c0e:	e01c      	b.n	8009c4a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8009c10:	2306      	movs	r3, #6
 8009c12:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	89db      	ldrh	r3, [r3, #14]
 8009c18:	0a1b      	lsrs	r3, r3, #8
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	89db      	ldrh	r3, [r3, #14]
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	7c1a      	ldrb	r2, [r3, #16]
 8009c2c:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <SUBGRF_SetPacketParams+0x138>)
 8009c2e:	4611      	mov	r1, r2
 8009c30:	7019      	strb	r1, [r3, #0]
 8009c32:	4613      	mov	r3, r2
 8009c34:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	7c5b      	ldrb	r3, [r3, #17]
 8009c3a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	7c9b      	ldrb	r3, [r3, #18]
 8009c40:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	7cdb      	ldrb	r3, [r3, #19]
 8009c46:	747b      	strb	r3, [r7, #17]
        break;
 8009c48:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	f107 030c 	add.w	r3, r7, #12
 8009c52:	4619      	mov	r1, r3
 8009c54:	208c      	movs	r0, #140	; 0x8c
 8009c56:	f000 f965 	bl	8009f24 <SUBGRF_WriteCommand>
 8009c5a:	e000      	b.n	8009c5e <SUBGRF_SetPacketParams+0x12a>
        return;
 8009c5c:	bf00      	nop
}
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	0800b97c 	.word	0x0800b97c
 8009c68:	2000075d 	.word	0x2000075d
 8009c6c:	2000075e 	.word	0x2000075e

08009c70 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	460a      	mov	r2, r1
 8009c7a:	71fb      	strb	r3, [r7, #7]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8009c80:	79fb      	ldrb	r3, [r7, #7]
 8009c82:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009c84:	79bb      	ldrb	r3, [r7, #6]
 8009c86:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009c88:	f107 030c 	add.w	r3, r7, #12
 8009c8c:	2202      	movs	r2, #2
 8009c8e:	4619      	mov	r1, r3
 8009c90:	208f      	movs	r0, #143	; 0x8f
 8009c92:	f000 f947 	bl	8009f24 <SUBGRF_WriteCommand>
}
 8009c96:	bf00      	nop
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009ca8:	1d3b      	adds	r3, r7, #4
 8009caa:	2201      	movs	r2, #1
 8009cac:	4619      	mov	r1, r3
 8009cae:	2015      	movs	r0, #21
 8009cb0:	f000 f95a 	bl	8009f68 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009cb4:	793b      	ldrb	r3, [r7, #4]
 8009cb6:	425b      	negs	r3, r3
 8009cb8:	105b      	asrs	r3, r3, #1
 8009cba:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8009cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8009cd2:	f107 030c 	add.w	r3, r7, #12
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	4619      	mov	r1, r3
 8009cda:	2013      	movs	r0, #19
 8009cdc:	f000 f944 	bl	8009f68 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8009ce0:	f7ff fd7e 	bl	80097e0 <SUBGRF_GetPacketType>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d10d      	bne.n	8009d06 <SUBGRF_GetRxBufferStatus+0x3e>
 8009cea:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <SUBGRF_GetRxBufferStatus+0x54>)
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d108      	bne.n	8009d06 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8009cf4:	f240 7002 	movw	r0, #1794	; 0x702
 8009cf8:	f000 f878 	bl	8009dec <SUBGRF_ReadRegister>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	461a      	mov	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	701a      	strb	r2, [r3, #0]
 8009d04:	e002      	b.n	8009d0c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8009d06:	7b3a      	ldrb	r2, [r7, #12]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8009d0c:	7b7a      	ldrb	r2, [r7, #13]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	701a      	strb	r2, [r3, #0]
}
 8009d12:	bf00      	nop
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	2000075e 	.word	0x2000075e

08009d20 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8009d28:	f107 030c 	add.w	r3, r7, #12
 8009d2c:	2203      	movs	r2, #3
 8009d2e:	4619      	mov	r1, r3
 8009d30:	2014      	movs	r0, #20
 8009d32:	f000 f919 	bl	8009f68 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8009d36:	f7ff fd53 	bl	80097e0 <SUBGRF_GetPacketType>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d002      	beq.n	8009d50 <SUBGRF_GetPacketStatus+0x30>
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d013      	beq.n	8009d76 <SUBGRF_GetPacketStatus+0x56>
 8009d4e:	e02a      	b.n	8009da6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8009d50:	7b3a      	ldrb	r2, [r7, #12]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8009d56:	7b7b      	ldrb	r3, [r7, #13]
 8009d58:	425b      	negs	r3, r3
 8009d5a:	105b      	asrs	r3, r3, #1
 8009d5c:	b25a      	sxtb	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	425b      	negs	r3, r3
 8009d66:	105b      	asrs	r3, r3, #1
 8009d68:	b25a      	sxtb	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	609a      	str	r2, [r3, #8]
            break;
 8009d74:	e020      	b.n	8009db8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8009d76:	7b3b      	ldrb	r3, [r7, #12]
 8009d78:	425b      	negs	r3, r3
 8009d7a:	105b      	asrs	r3, r3, #1
 8009d7c:	b25a      	sxtb	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8009d82:	7b7b      	ldrb	r3, [r7, #13]
 8009d84:	b25b      	sxtb	r3, r3
 8009d86:	3302      	adds	r3, #2
 8009d88:	109b      	asrs	r3, r3, #2
 8009d8a:	b25a      	sxtb	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	425b      	negs	r3, r3
 8009d94:	105b      	asrs	r3, r3, #1
 8009d96:	b25a      	sxtb	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8009d9c:	4b08      	ldr	r3, [pc, #32]	; (8009dc0 <SUBGRF_GetPacketStatus+0xa0>)
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	611a      	str	r2, [r3, #16]
            break;
 8009da4:	e008      	b.n	8009db8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8009da6:	2214      	movs	r2, #20
 8009da8:	2100      	movs	r1, #0
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fca7 	bl	800a6fe <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	220f      	movs	r2, #15
 8009db4:	701a      	strb	r2, [r3, #0]
            break;
 8009db6:	bf00      	nop
    }
}
 8009db8:	bf00      	nop
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20000760 	.word	0x20000760

08009dc4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	4603      	mov	r3, r0
 8009dcc:	460a      	mov	r2, r1
 8009dce:	80fb      	strh	r3, [r7, #6]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8009dd4:	1d7a      	adds	r2, r7, #5
 8009dd6:	88f9      	ldrh	r1, [r7, #6]
 8009dd8:	2301      	movs	r3, #1
 8009dda:	4803      	ldr	r0, [pc, #12]	; (8009de8 <SUBGRF_WriteRegister+0x24>)
 8009ddc:	f7fa fd08 	bl	80047f0 <HAL_SUBGHZ_WriteRegisters>
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	2000037c 	.word	0x2000037c

08009dec <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8009df6:	f107 020f 	add.w	r2, r7, #15
 8009dfa:	88f9      	ldrh	r1, [r7, #6]
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	4804      	ldr	r0, [pc, #16]	; (8009e10 <SUBGRF_ReadRegister+0x24>)
 8009e00:	f7fa fd55 	bl	80048ae <HAL_SUBGHZ_ReadRegisters>
    return data;
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	2000037c 	.word	0x2000037c

08009e14 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	6039      	str	r1, [r7, #0]
 8009e1e:	80fb      	strh	r3, [r7, #6]
 8009e20:	4613      	mov	r3, r2
 8009e22:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e24:	f3ef 8310 	mrs	r3, PRIMASK
 8009e28:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009e2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e2e:	b672      	cpsid	i
}
 8009e30:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8009e32:	88bb      	ldrh	r3, [r7, #4]
 8009e34:	88f9      	ldrh	r1, [r7, #6]
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	4806      	ldr	r0, [pc, #24]	; (8009e54 <SUBGRF_WriteRegisters+0x40>)
 8009e3a:	f7fa fcd9 	bl	80047f0 <HAL_SUBGHZ_WriteRegisters>
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	f383 8810 	msr	PRIMASK, r3
}
 8009e48:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009e4a:	bf00      	nop
 8009e4c:	3718      	adds	r7, #24
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	2000037c 	.word	0x2000037c

08009e58 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	6039      	str	r1, [r7, #0]
 8009e62:	80fb      	strh	r3, [r7, #6]
 8009e64:	4613      	mov	r3, r2
 8009e66:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e68:	f3ef 8310 	mrs	r3, PRIMASK
 8009e6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009e70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e72:	b672      	cpsid	i
}
 8009e74:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8009e76:	88bb      	ldrh	r3, [r7, #4]
 8009e78:	88f9      	ldrh	r1, [r7, #6]
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	4806      	ldr	r0, [pc, #24]	; (8009e98 <SUBGRF_ReadRegisters+0x40>)
 8009e7e:	f7fa fd16 	bl	80048ae <HAL_SUBGHZ_ReadRegisters>
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	f383 8810 	msr	PRIMASK, r3
}
 8009e8c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009e8e:	bf00      	nop
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	2000037c 	.word	0x2000037c

08009e9c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	6039      	str	r1, [r7, #0]
 8009ea6:	71fb      	strb	r3, [r7, #7]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eac:	f3ef 8310 	mrs	r3, PRIMASK
 8009eb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009eb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009eb6:	b672      	cpsid	i
}
 8009eb8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8009eba:	79bb      	ldrb	r3, [r7, #6]
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	79f9      	ldrb	r1, [r7, #7]
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	4806      	ldr	r0, [pc, #24]	; (8009edc <SUBGRF_WriteBuffer+0x40>)
 8009ec4:	f7fa fe07 	bl	8004ad6 <HAL_SUBGHZ_WriteBuffer>
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	f383 8810 	msr	PRIMASK, r3
}
 8009ed2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009ed4:	bf00      	nop
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	2000037c 	.word	0x2000037c

08009ee0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	6039      	str	r1, [r7, #0]
 8009eea:	71fb      	strb	r3, [r7, #7]
 8009eec:	4613      	mov	r3, r2
 8009eee:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ef4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009ef8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009efa:	b672      	cpsid	i
}
 8009efc:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8009efe:	79bb      	ldrb	r3, [r7, #6]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	79f9      	ldrb	r1, [r7, #7]
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	4806      	ldr	r0, [pc, #24]	; (8009f20 <SUBGRF_ReadBuffer+0x40>)
 8009f08:	f7fa fe38 	bl	8004b7c <HAL_SUBGHZ_ReadBuffer>
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	f383 8810 	msr	PRIMASK, r3
}
 8009f16:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009f18:	bf00      	nop
 8009f1a:	3718      	adds	r7, #24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	2000037c 	.word	0x2000037c

08009f24 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	6039      	str	r1, [r7, #0]
 8009f2e:	71fb      	strb	r3, [r7, #7]
 8009f30:	4613      	mov	r3, r2
 8009f32:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f34:	f3ef 8310 	mrs	r3, PRIMASK
 8009f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009f3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f3e:	b672      	cpsid	i
}
 8009f40:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8009f42:	88bb      	ldrh	r3, [r7, #4]
 8009f44:	79f9      	ldrb	r1, [r7, #7]
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	4806      	ldr	r0, [pc, #24]	; (8009f64 <SUBGRF_WriteCommand+0x40>)
 8009f4a:	f7fa fd11 	bl	8004970 <HAL_SUBGHZ_ExecSetCmd>
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f383 8810 	msr	PRIMASK, r3
}
 8009f58:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009f5a:	bf00      	nop
 8009f5c:	3718      	adds	r7, #24
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	2000037c 	.word	0x2000037c

08009f68 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	6039      	str	r1, [r7, #0]
 8009f72:	71fb      	strb	r3, [r7, #7]
 8009f74:	4613      	mov	r3, r2
 8009f76:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f78:	f3ef 8310 	mrs	r3, PRIMASK
 8009f7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009f80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f82:	b672      	cpsid	i
}
 8009f84:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8009f86:	88bb      	ldrh	r3, [r7, #4]
 8009f88:	79f9      	ldrb	r1, [r7, #7]
 8009f8a:	683a      	ldr	r2, [r7, #0]
 8009f8c:	4806      	ldr	r0, [pc, #24]	; (8009fa8 <SUBGRF_ReadCommand+0x40>)
 8009f8e:	f7fa fd4e 	bl	8004a2e <HAL_SUBGHZ_ExecGetCmd>
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	f383 8810 	msr	PRIMASK, r3
}
 8009f9c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009f9e:	bf00      	nop
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	2000037c 	.word	0x2000037c

08009fac <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	460a      	mov	r2, r1
 8009fb6:	71fb      	strb	r3, [r7, #7]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8009fc0:	79bb      	ldrb	r3, [r7, #6]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d10d      	bne.n	8009fe2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8009fc6:	79fb      	ldrb	r3, [r7, #7]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d104      	bne.n	8009fd6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8009fcc:	2302      	movs	r3, #2
 8009fce:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8009fd0:	2004      	movs	r0, #4
 8009fd2:	f000 f8ef 	bl	800a1b4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8009fd6:	79fb      	ldrb	r3, [r7, #7]
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d107      	bne.n	8009fec <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	73fb      	strb	r3, [r7, #15]
 8009fe0:	e004      	b.n	8009fec <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8009fe2:	79bb      	ldrb	r3, [r7, #6]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d101      	bne.n	8009fec <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 fad2 	bl	800a598 <RBI_ConfigRFSwitch>
}
 8009ff4:	bf00      	nop
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a006:	2301      	movs	r3, #1
 800a008:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a00a:	f000 fb23 	bl	800a654 <RBI_GetTxConfig>
 800a00e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d016      	beq.n	800a044 <SUBGRF_SetRfTxPower+0x48>
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	dc16      	bgt.n	800a04a <SUBGRF_SetRfTxPower+0x4e>
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d003      	beq.n	800a02a <SUBGRF_SetRfTxPower+0x2e>
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d00a      	beq.n	800a03e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800a028:	e00f      	b.n	800a04a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800a02a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a02e:	2b0f      	cmp	r3, #15
 800a030:	dd02      	ble.n	800a038 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800a032:	2302      	movs	r3, #2
 800a034:	73fb      	strb	r3, [r7, #15]
            break;
 800a036:	e009      	b.n	800a04c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800a038:	2301      	movs	r3, #1
 800a03a:	73fb      	strb	r3, [r7, #15]
            break;
 800a03c:	e006      	b.n	800a04c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800a03e:	2301      	movs	r3, #1
 800a040:	73fb      	strb	r3, [r7, #15]
            break;
 800a042:	e003      	b.n	800a04c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800a044:	2302      	movs	r3, #2
 800a046:	73fb      	strb	r3, [r7, #15]
            break;
 800a048:	e000      	b.n	800a04c <SUBGRF_SetRfTxPower+0x50>
            break;
 800a04a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a04c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a050:	7bfb      	ldrb	r3, [r7, #15]
 800a052:	2202      	movs	r2, #2
 800a054:	4618      	mov	r0, r3
 800a056:	f7ff fbcd 	bl	80097f4 <SUBGRF_SetTxParams>

    return paSelect;
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800a064:	b480      	push	{r7}
 800a066:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800a068:	2301      	movs	r3, #1
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bc80      	pop	{r7}
 800a070:	4770      	bx	lr
	...

0800a074 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a07c:	4b03      	ldr	r3, [pc, #12]	; (800a08c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2001      	movs	r0, #1
 800a082:	4798      	blx	r3
}
 800a084:	bf00      	nop
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20000768 	.word	0x20000768

0800a090 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a098:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2002      	movs	r0, #2
 800a09e:	4798      	blx	r3
}
 800a0a0:	bf00      	nop
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	20000768 	.word	0x20000768

0800a0ac <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a0b4:	4b03      	ldr	r3, [pc, #12]	; (800a0c4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2040      	movs	r0, #64	; 0x40
 800a0ba:	4798      	blx	r3
}
 800a0bc:	bf00      	nop
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	20000768 	.word	0x20000768

0800a0c8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d005      	beq.n	800a0ea <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800a0de:	e00a      	b.n	800a0f6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a0e0:	4b07      	ldr	r3, [pc, #28]	; (800a100 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2080      	movs	r0, #128	; 0x80
 800a0e6:	4798      	blx	r3
            break;
 800a0e8:	e005      	b.n	800a0f6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a0ea:	4b05      	ldr	r3, [pc, #20]	; (800a100 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a0f2:	4798      	blx	r3
            break;
 800a0f4:	bf00      	nop
    }
}
 800a0f6:	bf00      	nop
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	20000768 	.word	0x20000768

0800a104 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a10c:	4b04      	ldr	r3, [pc, #16]	; (800a120 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a114:	4798      	blx	r3
}
 800a116:	bf00      	nop
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	20000768 	.word	0x20000768

0800a124 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a12c:	4b03      	ldr	r3, [pc, #12]	; (800a13c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2020      	movs	r0, #32
 800a132:	4798      	blx	r3
}
 800a134:	bf00      	nop
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	20000768 	.word	0x20000768

0800a140 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a148:	4b03      	ldr	r3, [pc, #12]	; (800a158 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2004      	movs	r0, #4
 800a14e:	4798      	blx	r3
}
 800a150:	bf00      	nop
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	20000768 	.word	0x20000768

0800a15c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a164:	4b03      	ldr	r3, [pc, #12]	; (800a174 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2008      	movs	r0, #8
 800a16a:	4798      	blx	r3
}
 800a16c:	bf00      	nop
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	20000768 	.word	0x20000768

0800a178 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a180:	4b03      	ldr	r3, [pc, #12]	; (800a190 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2010      	movs	r0, #16
 800a186:	4798      	blx	r3
}
 800a188:	bf00      	nop
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	20000768 	.word	0x20000768

0800a194 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800a19c:	4b04      	ldr	r3, [pc, #16]	; (800a1b0 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a1a4:	4798      	blx	r3
}
 800a1a6:	bf00      	nop
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20000768 	.word	0x20000768

0800a1b4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800a1be:	f000 fa5f 	bl	800a680 <RBI_IsDCDC>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d112      	bne.n	800a1ee <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a1c8:	f640 1023 	movw	r0, #2339	; 0x923
 800a1cc:	f7ff fe0e 	bl	8009dec <SUBGRF_ReadRegister>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	f023 0306 	bic.w	r3, r3, #6
 800a1da:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a1dc:	7bfa      	ldrb	r2, [r7, #15]
 800a1de:	79fb      	ldrb	r3, [r7, #7]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	f640 1023 	movw	r0, #2339	; 0x923
 800a1ea:	f7ff fdeb 	bl	8009dc4 <SUBGRF_WriteRegister>
  }
}
 800a1ee:	bf00      	nop
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
	...

0800a1f8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d101      	bne.n	800a20a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800a206:	231f      	movs	r3, #31
 800a208:	e016      	b.n	800a238 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a20a:	2300      	movs	r3, #0
 800a20c:	73fb      	strb	r3, [r7, #15]
 800a20e:	e00f      	b.n	800a230 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a210:	7bfb      	ldrb	r3, [r7, #15]
 800a212:	4a0c      	ldr	r2, [pc, #48]	; (800a244 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a214:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d205      	bcs.n	800a22a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
 800a220:	4a08      	ldr	r2, [pc, #32]	; (800a244 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a222:	00db      	lsls	r3, r3, #3
 800a224:	4413      	add	r3, r2
 800a226:	791b      	ldrb	r3, [r3, #4]
 800a228:	e006      	b.n	800a238 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a22a:	7bfb      	ldrb	r3, [r7, #15]
 800a22c:	3301      	adds	r3, #1
 800a22e:	73fb      	strb	r3, [r7, #15]
 800a230:	7bfb      	ldrb	r3, [r7, #15]
 800a232:	2b15      	cmp	r3, #21
 800a234:	d9ec      	bls.n	800a210 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800a236:	e7fe      	b.n	800a236 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bc80      	pop	{r7}
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	0800bb0c 	.word	0x0800bb0c

0800a248 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b08a      	sub	sp, #40	; 0x28
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a252:	4b35      	ldr	r3, [pc, #212]	; (800a328 <SUBGRF_GetCFO+0xe0>)
 800a254:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a256:	f640 0007 	movw	r0, #2055	; 0x807
 800a25a:	f7ff fdc7 	bl	8009dec <SUBGRF_ReadRegister>
 800a25e:	4603      	mov	r3, r0
 800a260:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a262:	7ffb      	ldrb	r3, [r7, #31]
 800a264:	08db      	lsrs	r3, r3, #3
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f003 0303 	and.w	r3, r3, #3
 800a26c:	3328      	adds	r3, #40	; 0x28
 800a26e:	443b      	add	r3, r7
 800a270:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a274:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800a276:	7ffb      	ldrb	r3, [r7, #31]
 800a278:	f003 0307 	and.w	r3, r3, #7
 800a27c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800a27e:	7fba      	ldrb	r2, [r7, #30]
 800a280:	7f7b      	ldrb	r3, [r7, #29]
 800a282:	3301      	adds	r3, #1
 800a284:	fa02 f303 	lsl.w	r3, r2, r3
 800a288:	461a      	mov	r2, r3
 800a28a:	4b28      	ldr	r3, [pc, #160]	; (800a32c <SUBGRF_GetCFO+0xe4>)
 800a28c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a290:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800a292:	69ba      	ldr	r2, [r7, #24]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800a29c:	2301      	movs	r3, #1
 800a29e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a2a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	fb02 f303 	mul.w	r3, r2, r3
 800a2ac:	2b07      	cmp	r3, #7
 800a2ae:	d802      	bhi.n	800a2b6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800a2b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	fb02 f303 	mul.w	r3, r2, r3
 800a2c0:	2b03      	cmp	r3, #3
 800a2c2:	d802      	bhi.n	800a2ca <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800a2c4:	2304      	movs	r3, #4
 800a2c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a2ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	fb02 f303 	mul.w	r3, r2, r3
 800a2d4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a2d6:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800a2da:	f7ff fd87 	bl	8009dec <SUBGRF_ReadRegister>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	021b      	lsls	r3, r3, #8
 800a2e2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a2e6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a2e8:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800a2ec:	f7ff fd7e 	bl	8009dec <SUBGRF_ReadRegister>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	6a3b      	ldr	r3, [r7, #32]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a300:	2b00      	cmp	r3, #0
 800a302:	d005      	beq.n	800a310 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800a304:	6a3b      	ldr	r3, [r7, #32]
 800a306:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a30a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a30e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	095b      	lsrs	r3, r3, #5
 800a314:	6a3a      	ldr	r2, [r7, #32]
 800a316:	fb02 f303 	mul.w	r3, r2, r3
 800a31a:	11da      	asrs	r2, r3, #7
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	601a      	str	r2, [r3, #0]
}
 800a320:	bf00      	nop
 800a322:	3728      	adds	r7, #40	; 0x28
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	0c0a0804 	.word	0x0c0a0804
 800a32c:	01e84800 	.word	0x01e84800

0800a330 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	4603      	mov	r3, r0
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800a342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a346:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a348:	697b      	ldr	r3, [r7, #20]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	371c      	adds	r7, #28
 800a34e:	46bd      	mov	sp, r7
 800a350:	bc80      	pop	{r7}
 800a352:	4770      	bx	lr

0800a354 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800a354:	b480      	push	{r7}
 800a356:	b087      	sub	sp, #28
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
 800a360:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800a366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a36a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a36c:	697b      	ldr	r3, [r7, #20]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	371c      	adds	r7, #28
 800a372:	46bd      	mov	sp, r7
 800a374:	bc80      	pop	{r7}
 800a376:	4770      	bx	lr

0800a378 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800a384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bc80      	pop	{r7}
 800a390:	4770      	bx	lr

0800a392 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800a392:	b480      	push	{r7}
 800a394:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800a396:	bf00      	nop
 800a398:	46bd      	mov	sp, r7
 800a39a:	bc80      	pop	{r7}
 800a39c:	4770      	bx	lr

0800a39e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800a39e:	b480      	push	{r7}
 800a3a0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800a3a2:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bc80      	pop	{r7}
 800a3aa:	4770      	bx	lr

0800a3ac <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800a3b0:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bc80      	pop	{r7}
 800a3b8:	4770      	bx	lr

0800a3ba <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b083      	sub	sp, #12
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bc80      	pop	{r7}
 800a3cc:	4770      	bx	lr

0800a3ce <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b087      	sub	sp, #28
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	60f8      	str	r0, [r7, #12]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	607a      	str	r2, [r7, #4]
 800a3da:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800a3dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3e0:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800a3e2:	697b      	ldr	r3, [r7, #20]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	371c      	adds	r7, #28
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bc80      	pop	{r7}
 800a3ec:	4770      	bx	lr

0800a3ee <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800a3f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bc80      	pop	{r7}
 800a3fc:	4770      	bx	lr

0800a3fe <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800a3fe:	b480      	push	{r7}
 800a400:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800a402:	bf00      	nop
 800a404:	46bd      	mov	sp, r7
 800a406:	bc80      	pop	{r7}
 800a408:	4770      	bx	lr

0800a40a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800a40a:	b480      	push	{r7}
 800a40c:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800a40e:	bf00      	nop
 800a410:	46bd      	mov	sp, r7
 800a412:	bc80      	pop	{r7}
 800a414:	4770      	bx	lr

0800a416 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	4603      	mov	r3, r0
 800a41e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	bc80      	pop	{r7}
 800a428:	4770      	bx	lr

0800a42a <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800a42e:	f7f7 fbea 	bl	8001c06 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800a432:	f000 f809 	bl	800a448 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800a436:	bf00      	nop
 800a438:	bd80      	pop	{r7, pc}

0800a43a <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800a43a:	b480      	push	{r7}
 800a43c:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800a43e:	bf00      	nop
 800a440:	46bd      	mov	sp, r7
 800a442:	bc80      	pop	{r7}
 800a444:	4770      	bx	lr
	...

0800a448 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800a44c:	4b0a      	ldr	r3, [pc, #40]	; (800a478 <SubghzApp_Init+0x30>)
 800a44e:	4a0b      	ldr	r2, [pc, #44]	; (800a47c <SubghzApp_Init+0x34>)
 800a450:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800a452:	4b09      	ldr	r3, [pc, #36]	; (800a478 <SubghzApp_Init+0x30>)
 800a454:	4a0a      	ldr	r2, [pc, #40]	; (800a480 <SubghzApp_Init+0x38>)
 800a456:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a458:	4b07      	ldr	r3, [pc, #28]	; (800a478 <SubghzApp_Init+0x30>)
 800a45a:	4a0a      	ldr	r2, [pc, #40]	; (800a484 <SubghzApp_Init+0x3c>)
 800a45c:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a45e:	4b06      	ldr	r3, [pc, #24]	; (800a478 <SubghzApp_Init+0x30>)
 800a460:	4a09      	ldr	r2, [pc, #36]	; (800a488 <SubghzApp_Init+0x40>)
 800a462:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a464:	4b04      	ldr	r3, [pc, #16]	; (800a478 <SubghzApp_Init+0x30>)
 800a466:	4a09      	ldr	r2, [pc, #36]	; (800a48c <SubghzApp_Init+0x44>)
 800a468:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a46a:	4b09      	ldr	r3, [pc, #36]	; (800a490 <SubghzApp_Init+0x48>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4802      	ldr	r0, [pc, #8]	; (800a478 <SubghzApp_Init+0x30>)
 800a470:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800a472:	bf00      	nop
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	2000076c 	.word	0x2000076c
 800a47c:	0800a495 	.word	0x0800a495
 800a480:	0800a4a1 	.word	0x0800a4a1
 800a484:	0800a4c5 	.word	0x0800a4c5
 800a488:	0800a4d1 	.word	0x0800a4d1
 800a48c:	0800a4dd 	.word	0x0800a4dd
 800a490:	0800ba7c 	.word	0x0800ba7c

0800a494 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800a494:	b480      	push	{r7}
 800a496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800a498:	bf00      	nop
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bc80      	pop	{r7}
 800a49e:	4770      	bx	lr

0800a4a0 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	817b      	strh	r3, [r7, #10]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	813b      	strh	r3, [r7, #8]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800a4ba:	bf00      	nop
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bc80      	pop	{r7}
 800a4c2:	4770      	bx	lr

0800a4c4 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800a4c8:	bf00      	nop
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bc80      	pop	{r7}
 800a4ce:	4770      	bx	lr

0800a4d0 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800a4d4:	bf00      	nop
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bc80      	pop	{r7}
 800a4da:	4770      	bx	lr

0800a4dc <OnRxError>:

static void OnRxError(void)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800a4e0:	bf00      	nop
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bc80      	pop	{r7}
 800a4e6:	4770      	bx	lr

0800a4e8 <LL_AHB2_GRP1_EnableClock>:
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a4f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a504:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4013      	ands	r3, r2
 800a50a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a50c:	68fb      	ldr	r3, [r7, #12]
}
 800a50e:	bf00      	nop
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	bc80      	pop	{r7}
 800a516:	4770      	bx	lr

0800a518 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800a51e:	2300      	movs	r3, #0
 800a520:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800a522:	463b      	mov	r3, r7
 800a524:	2200      	movs	r2, #0
 800a526:	601a      	str	r2, [r3, #0]
 800a528:	605a      	str	r2, [r3, #4]
 800a52a:	609a      	str	r2, [r3, #8]
 800a52c:	60da      	str	r2, [r3, #12]
 800a52e:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800a530:	2004      	movs	r0, #4
 800a532:	f7ff ffd9 	bl	800a4e8 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800a536:	2310      	movs	r3, #16
 800a538:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800a53a:	2301      	movs	r3, #1
 800a53c:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a542:	2303      	movs	r3, #3
 800a544:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800a546:	463b      	mov	r3, r7
 800a548:	4619      	mov	r1, r3
 800a54a:	4812      	ldr	r0, [pc, #72]	; (800a594 <RBI_Init+0x7c>)
 800a54c:	f7f8 fbac 	bl	8002ca8 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800a550:	2320      	movs	r3, #32
 800a552:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800a554:	463b      	mov	r3, r7
 800a556:	4619      	mov	r1, r3
 800a558:	480e      	ldr	r0, [pc, #56]	; (800a594 <RBI_Init+0x7c>)
 800a55a:	f7f8 fba5 	bl	8002ca8 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800a55e:	2308      	movs	r3, #8
 800a560:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800a562:	463b      	mov	r3, r7
 800a564:	4619      	mov	r1, r3
 800a566:	480b      	ldr	r0, [pc, #44]	; (800a594 <RBI_Init+0x7c>)
 800a568:	f7f8 fb9e 	bl	8002ca8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800a56c:	2200      	movs	r2, #0
 800a56e:	2120      	movs	r1, #32
 800a570:	4808      	ldr	r0, [pc, #32]	; (800a594 <RBI_Init+0x7c>)
 800a572:	f7f8 fcf9 	bl	8002f68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800a576:	2200      	movs	r2, #0
 800a578:	2110      	movs	r1, #16
 800a57a:	4806      	ldr	r0, [pc, #24]	; (800a594 <RBI_Init+0x7c>)
 800a57c:	f7f8 fcf4 	bl	8002f68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800a580:	2200      	movs	r2, #0
 800a582:	2108      	movs	r1, #8
 800a584:	4803      	ldr	r0, [pc, #12]	; (800a594 <RBI_Init+0x7c>)
 800a586:	f7f8 fcef 	bl	8002f68 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800a58a:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3718      	adds	r7, #24
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	48000800 	.word	0x48000800

0800a598 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	4603      	mov	r3, r0
 800a5a0:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 800a5a6:	79fb      	ldrb	r3, [r7, #7]
 800a5a8:	2b03      	cmp	r3, #3
 800a5aa:	d84b      	bhi.n	800a644 <RBI_ConfigRFSwitch+0xac>
 800a5ac:	a201      	add	r2, pc, #4	; (adr r2, 800a5b4 <RBI_ConfigRFSwitch+0x1c>)
 800a5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b2:	bf00      	nop
 800a5b4:	0800a5c5 	.word	0x0800a5c5
 800a5b8:	0800a5e5 	.word	0x0800a5e5
 800a5bc:	0800a605 	.word	0x0800a605
 800a5c0:	0800a625 	.word	0x0800a625
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2108      	movs	r1, #8
 800a5c8:	4821      	ldr	r0, [pc, #132]	; (800a650 <RBI_ConfigRFSwitch+0xb8>)
 800a5ca:	f7f8 fccd 	bl	8002f68 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	2110      	movs	r1, #16
 800a5d2:	481f      	ldr	r0, [pc, #124]	; (800a650 <RBI_ConfigRFSwitch+0xb8>)
 800a5d4:	f7f8 fcc8 	bl	8002f68 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800a5d8:	2200      	movs	r2, #0
 800a5da:	2120      	movs	r1, #32
 800a5dc:	481c      	ldr	r0, [pc, #112]	; (800a650 <RBI_ConfigRFSwitch+0xb8>)
 800a5de:	f7f8 fcc3 	bl	8002f68 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800a5e2:	e030      	b.n	800a646 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	2108      	movs	r1, #8
 800a5e8:	4819      	ldr	r0, [pc, #100]	; (800a650 <RBI_ConfigRFSwitch+0xb8>)
 800a5ea:	f7f8 fcbd 	bl	8002f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	2110      	movs	r1, #16
 800a5f2:	4817      	ldr	r0, [pc, #92]	; (800a650 <RBI_ConfigRFSwitch+0xb8>)
 800a5f4:	f7f8 fcb8 	bl	8002f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	2120      	movs	r1, #32
 800a5fc:	4814      	ldr	r0, [pc, #80]	; (800a650 <RBI_ConfigRFSwitch+0xb8>)
 800a5fe:	f7f8 fcb3 	bl	8002f68 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800a602:	e020      	b.n	800a646 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a604:	2201      	movs	r2, #1
 800a606:	2108      	movs	r1, #8
 800a608:	4811      	ldr	r0, [pc, #68]	; (800a650 <RBI_ConfigRFSwitch+0xb8>)
 800a60a:	f7f8 fcad 	bl	8002f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800a60e:	2201      	movs	r2, #1
 800a610:	2110      	movs	r1, #16
 800a612:	480f      	ldr	r0, [pc, #60]	; (800a650 <RBI_ConfigRFSwitch+0xb8>)
 800a614:	f7f8 fca8 	bl	8002f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800a618:	2201      	movs	r2, #1
 800a61a:	2120      	movs	r1, #32
 800a61c:	480c      	ldr	r0, [pc, #48]	; (800a650 <RBI_ConfigRFSwitch+0xb8>)
 800a61e:	f7f8 fca3 	bl	8002f68 <HAL_GPIO_WritePin>
		break;
 800a622:	e010      	b.n	800a646 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a624:	2201      	movs	r2, #1
 800a626:	2108      	movs	r1, #8
 800a628:	4809      	ldr	r0, [pc, #36]	; (800a650 <RBI_ConfigRFSwitch+0xb8>)
 800a62a:	f7f8 fc9d 	bl	8002f68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800a62e:	2200      	movs	r2, #0
 800a630:	2110      	movs	r1, #16
 800a632:	4807      	ldr	r0, [pc, #28]	; (800a650 <RBI_ConfigRFSwitch+0xb8>)
 800a634:	f7f8 fc98 	bl	8002f68 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800a638:	2201      	movs	r2, #1
 800a63a:	2120      	movs	r1, #32
 800a63c:	4804      	ldr	r0, [pc, #16]	; (800a650 <RBI_ConfigRFSwitch+0xb8>)
 800a63e:	f7f8 fc93 	bl	8002f68 <HAL_GPIO_WritePin>
		break;
 800a642:	e000      	b.n	800a646 <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 800a644:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800a646:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	48000800 	.word	0x48000800

0800a654 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800a65a:	2300      	movs	r3, #0
 800a65c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800a65e:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	bc80      	pop	{r7}
 800a668:	4770      	bx	lr

0800a66a <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a66a:	b480      	push	{r7}
 800a66c:	b083      	sub	sp, #12
 800a66e:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800a670:	2301      	movs	r3, #1
 800a672:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800a674:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a676:	4618      	mov	r0, r3
 800a678:	370c      	adds	r7, #12
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bc80      	pop	{r7}
 800a67e:	4770      	bx	lr

0800a680 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800a686:	2301      	movs	r3, #1
 800a688:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800a68a:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	bc80      	pop	{r7}
 800a694:	4770      	bx	lr

0800a696 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a696:	b480      	push	{r7}
 800a698:	b085      	sub	sp, #20
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	4603      	mov	r3, r0
 800a69e:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d102      	bne.n	800a6b0 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800a6aa:	230f      	movs	r3, #15
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	e001      	b.n	800a6b4 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800a6b0:	2316      	movs	r3, #22
 800a6b2:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bc80      	pop	{r7}
 800a6be:	4770      	bx	lr

0800a6c0 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	613b      	str	r3, [r7, #16]

  while( size-- )
 800a6d6:	e007      	b.n	800a6e8 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	1c53      	adds	r3, r2, #1
 800a6dc:	613b      	str	r3, [r7, #16]
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	1c59      	adds	r1, r3, #1
 800a6e2:	6179      	str	r1, [r7, #20]
 800a6e4:	7812      	ldrb	r2, [r2, #0]
 800a6e6:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a6e8:	88fb      	ldrh	r3, [r7, #6]
 800a6ea:	1e5a      	subs	r2, r3, #1
 800a6ec:	80fa      	strh	r2, [r7, #6]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1f2      	bne.n	800a6d8 <UTIL_MEM_cpy_8+0x18>
    }
}
 800a6f2:	bf00      	nop
 800a6f4:	bf00      	nop
 800a6f6:	371c      	adds	r7, #28
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bc80      	pop	{r7}
 800a6fc:	4770      	bx	lr

0800a6fe <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800a6fe:	b480      	push	{r7}
 800a700:	b085      	sub	sp, #20
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	460b      	mov	r3, r1
 800a708:	70fb      	strb	r3, [r7, #3]
 800a70a:	4613      	mov	r3, r2
 800a70c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800a712:	e004      	b.n	800a71e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	60fa      	str	r2, [r7, #12]
 800a71a:	78fa      	ldrb	r2, [r7, #3]
 800a71c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a71e:	883b      	ldrh	r3, [r7, #0]
 800a720:	1e5a      	subs	r2, r3, #1
 800a722:	803a      	strh	r2, [r7, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1f5      	bne.n	800a714 <UTIL_MEM_set_8+0x16>
  }
}
 800a728:	bf00      	nop
 800a72a:	bf00      	nop
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	bc80      	pop	{r7}
 800a732:	4770      	bx	lr

0800a734 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	603b      	str	r3, [r7, #0]
 800a740:	4613      	mov	r3, r2
 800a742:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d023      	beq.n	800a792 <UTIL_TIMER_Create+0x5e>
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d020      	beq.n	800a792 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800a756:	4b11      	ldr	r3, [pc, #68]	; (800a79c <UTIL_TIMER_Create+0x68>)
 800a758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75a:	68b8      	ldr	r0, [r7, #8]
 800a75c:	4798      	blx	r3
 800a75e:	4602      	mov	r2, r0
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	79fa      	ldrb	r2, [r7, #7]
 800a786:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	e000      	b.n	800a794 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800a792:	2301      	movs	r3, #1
  }
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	0800ba28 	.word	0x0800ba28

0800a7a0 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b08a      	sub	sp, #40	; 0x28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d056      	beq.n	800a862 <UTIL_TIMER_Start+0xc2>
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f929 	bl	800aa0c <TimerExists>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	f083 0301 	eor.w	r3, r3, #1
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d04d      	beq.n	800a862 <UTIL_TIMER_Start+0xc2>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	7a5b      	ldrb	r3, [r3, #9]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d149      	bne.n	800a862 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a7d2:	613b      	str	r3, [r7, #16]
  return(result);
 800a7d4:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800a7d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7d8:	b672      	cpsid	i
}
 800a7da:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800a7e2:	4b24      	ldr	r3, [pc, #144]	; (800a874 <UTIL_TIMER_Start+0xd4>)
 800a7e4:	6a1b      	ldr	r3, [r3, #32]
 800a7e6:	4798      	blx	r3
 800a7e8:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800a7ea:	6a3a      	ldr	r2, [r7, #32]
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d201      	bcs.n	800a7f6 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a3a      	ldr	r2, [r7, #32]
 800a7fa:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800a80e:	4b1a      	ldr	r3, [pc, #104]	; (800a878 <UTIL_TIMER_Start+0xd8>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d106      	bne.n	800a824 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800a816:	4b17      	ldr	r3, [pc, #92]	; (800a874 <UTIL_TIMER_Start+0xd4>)
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 f96b 	bl	800aaf8 <TimerInsertNewHeadTimer>
 800a822:	e017      	b.n	800a854 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800a824:	4b13      	ldr	r3, [pc, #76]	; (800a874 <UTIL_TIMER_Start+0xd4>)
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	4798      	blx	r3
 800a82a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	441a      	add	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	4b0e      	ldr	r3, [pc, #56]	; (800a878 <UTIL_TIMER_Start+0xd8>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	429a      	cmp	r2, r3
 800a844:	d203      	bcs.n	800a84e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f956 	bl	800aaf8 <TimerInsertNewHeadTimer>
 800a84c:	e002      	b.n	800a854 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f922 	bl	800aa98 <TimerInsertTimer>
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f383 8810 	msr	PRIMASK, r3
}
 800a85e:	bf00      	nop
  {
 800a860:	e002      	b.n	800a868 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800a862:	2301      	movs	r3, #1
 800a864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800a868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3728      	adds	r7, #40	; 0x28
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	0800ba28 	.word	0x0800ba28
 800a878:	20000788 	.word	0x20000788

0800a87c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b088      	sub	sp, #32
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d05b      	beq.n	800a946 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a88e:	f3ef 8310 	mrs	r3, PRIMASK
 800a892:	60fb      	str	r3, [r7, #12]
  return(result);
 800a894:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800a896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a898:	b672      	cpsid	i
}
 800a89a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800a89c:	4b2d      	ldr	r3, [pc, #180]	; (800a954 <UTIL_TIMER_Stop+0xd8>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800a8a2:	4b2c      	ldr	r3, [pc, #176]	; (800a954 <UTIL_TIMER_Stop+0xd8>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800a8ae:	4b29      	ldr	r3, [pc, #164]	; (800a954 <UTIL_TIMER_Stop+0xd8>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d041      	beq.n	800a93a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800a8bc:	4b25      	ldr	r3, [pc, #148]	; (800a954 <UTIL_TIMER_Stop+0xd8>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d134      	bne.n	800a930 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800a8c6:	4b23      	ldr	r3, [pc, #140]	; (800a954 <UTIL_TIMER_Stop+0xd8>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800a8ce:	4b21      	ldr	r3, [pc, #132]	; (800a954 <UTIL_TIMER_Stop+0xd8>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00a      	beq.n	800a8ee <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800a8d8:	4b1e      	ldr	r3, [pc, #120]	; (800a954 <UTIL_TIMER_Stop+0xd8>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	695b      	ldr	r3, [r3, #20]
 800a8de:	4a1d      	ldr	r2, [pc, #116]	; (800a954 <UTIL_TIMER_Stop+0xd8>)
 800a8e0:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800a8e2:	4b1c      	ldr	r3, [pc, #112]	; (800a954 <UTIL_TIMER_Stop+0xd8>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 f8ac 	bl	800aa44 <TimerSetTimeout>
 800a8ec:	e023      	b.n	800a936 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800a8ee:	4b1a      	ldr	r3, [pc, #104]	; (800a958 <UTIL_TIMER_Stop+0xdc>)
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	4798      	blx	r3
            TimerListHead = NULL;
 800a8f4:	4b17      	ldr	r3, [pc, #92]	; (800a954 <UTIL_TIMER_Stop+0xd8>)
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	e01c      	b.n	800a936 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	429a      	cmp	r2, r3
 800a902:	d110      	bne.n	800a926 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	695b      	ldr	r3, [r3, #20]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d006      	beq.n	800a91a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	695b      	ldr	r3, [r3, #20]
 800a910:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800a918:	e00d      	b.n	800a936 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	615a      	str	r2, [r3, #20]
            break;
 800a924:	e007      	b.n	800a936 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	695b      	ldr	r3, [r3, #20]
 800a92e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1e2      	bne.n	800a8fc <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	77fb      	strb	r3, [r7, #31]
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	f383 8810 	msr	PRIMASK, r3
}
 800a944:	e001      	b.n	800a94a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800a946:	2301      	movs	r3, #1
 800a948:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800a94a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3720      	adds	r7, #32
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	20000788 	.word	0x20000788
 800a958:	0800ba28 	.word	0x0800ba28

0800a95c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a966:	2300      	movs	r3, #0
 800a968:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d102      	bne.n	800a976 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800a970:	2301      	movs	r3, #1
 800a972:	73fb      	strb	r3, [r7, #15]
 800a974:	e014      	b.n	800a9a0 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800a976:	4b0d      	ldr	r3, [pc, #52]	; (800a9ac <UTIL_TIMER_SetPeriod+0x50>)
 800a978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97a:	6838      	ldr	r0, [r7, #0]
 800a97c:	4798      	blx	r3
 800a97e:	4602      	mov	r2, r0
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 f841 	bl	800aa0c <TimerExists>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d007      	beq.n	800a9a0 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff ff73 	bl	800a87c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7ff ff02 	bl	800a7a0 <UTIL_TIMER_Start>
 800a99c:	4603      	mov	r3, r0
 800a99e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	0800ba28 	.word	0x0800ba28

0800a9b0 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800a9b6:	4b06      	ldr	r3, [pc, #24]	; (800a9d0 <UTIL_TIMER_GetCurrentTime+0x20>)
 800a9b8:	69db      	ldr	r3, [r3, #28]
 800a9ba:	4798      	blx	r3
 800a9bc:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800a9be:	4b04      	ldr	r3, [pc, #16]	; (800a9d0 <UTIL_TIMER_GetCurrentTime+0x20>)
 800a9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	4798      	blx	r3
 800a9c6:	4603      	mov	r3, r0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	0800ba28 	.word	0x0800ba28

0800a9d4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800a9dc:	4b0a      	ldr	r3, [pc, #40]	; (800aa08 <UTIL_TIMER_GetElapsedTime+0x34>)
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	4798      	blx	r3
 800a9e2:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800a9e4:	4b08      	ldr	r3, [pc, #32]	; (800aa08 <UTIL_TIMER_GetElapsedTime+0x34>)
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	4798      	blx	r3
 800a9ec:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800a9ee:	4b06      	ldr	r3, [pc, #24]	; (800aa08 <UTIL_TIMER_GetElapsedTime+0x34>)
 800a9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f2:	68f9      	ldr	r1, [r7, #12]
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	1a8a      	subs	r2, r1, r2
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	4798      	blx	r3
 800a9fc:	4603      	mov	r3, r0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	0800ba28 	.word	0x0800ba28

0800aa0c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800aa14:	4b0a      	ldr	r3, [pc, #40]	; (800aa40 <TimerExists+0x34>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800aa1a:	e008      	b.n	800aa2e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d101      	bne.n	800aa28 <TimerExists+0x1c>
    {
      return true;
 800aa24:	2301      	movs	r3, #1
 800aa26:	e006      	b.n	800aa36 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1f3      	bne.n	800aa1c <TimerExists+0x10>
  }
  return false;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bc80      	pop	{r7}
 800aa3e:	4770      	bx	lr
 800aa40:	20000788 	.word	0x20000788

0800aa44 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800aa44:	b590      	push	{r4, r7, lr}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800aa4c:	4b11      	ldr	r3, [pc, #68]	; (800aa94 <TimerSetTimeout+0x50>)
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	4798      	blx	r3
 800aa52:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681c      	ldr	r4, [r3, #0]
 800aa5e:	4b0d      	ldr	r3, [pc, #52]	; (800aa94 <TimerSetTimeout+0x50>)
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	4798      	blx	r3
 800aa64:	4602      	mov	r2, r0
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	4413      	add	r3, r2
 800aa6a:	429c      	cmp	r4, r3
 800aa6c:	d207      	bcs.n	800aa7e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800aa6e:	4b09      	ldr	r3, [pc, #36]	; (800aa94 <TimerSetTimeout+0x50>)
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	4798      	blx	r3
 800aa74:	4602      	mov	r2, r0
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	441a      	add	r2, r3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800aa7e:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <TimerSetTimeout+0x50>)
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	6812      	ldr	r2, [r2, #0]
 800aa86:	4610      	mov	r0, r2
 800aa88:	4798      	blx	r3
}
 800aa8a:	bf00      	nop
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd90      	pop	{r4, r7, pc}
 800aa92:	bf00      	nop
 800aa94:	0800ba28 	.word	0x0800ba28

0800aa98 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800aaa0:	4b14      	ldr	r3, [pc, #80]	; (800aaf4 <TimerInsertTimer+0x5c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800aaa6:	4b13      	ldr	r3, [pc, #76]	; (800aaf4 <TimerInsertTimer+0x5c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	695b      	ldr	r3, [r3, #20]
 800aaac:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800aaae:	e012      	b.n	800aad6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d905      	bls.n	800aac8 <TimerInsertTimer+0x30>
    {
        cur = next;
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	60bb      	str	r3, [r7, #8]
 800aac6:	e006      	b.n	800aad6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	615a      	str	r2, [r3, #20]
        return;
 800aad4:	e009      	b.n	800aaea <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1e8      	bne.n	800aab0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	615a      	str	r2, [r3, #20]
}
 800aaea:	3714      	adds	r7, #20
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bc80      	pop	{r7}
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	20000788 	.word	0x20000788

0800aaf8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ab00:	4b0b      	ldr	r3, [pc, #44]	; (800ab30 <TimerInsertNewHeadTimer+0x38>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800ab18:	4a05      	ldr	r2, [pc, #20]	; (800ab30 <TimerInsertNewHeadTimer+0x38>)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800ab1e:	4b04      	ldr	r3, [pc, #16]	; (800ab30 <TimerInsertNewHeadTimer+0x38>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7ff ff8e 	bl	800aa44 <TimerSetTimeout>
}
 800ab28:	bf00      	nop
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	20000788 	.word	0x20000788

0800ab34 <_vsniprintf_r>:
 800ab34:	b530      	push	{r4, r5, lr}
 800ab36:	4614      	mov	r4, r2
 800ab38:	2c00      	cmp	r4, #0
 800ab3a:	b09b      	sub	sp, #108	; 0x6c
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	461a      	mov	r2, r3
 800ab40:	da05      	bge.n	800ab4e <_vsniprintf_r+0x1a>
 800ab42:	238b      	movs	r3, #139	; 0x8b
 800ab44:	6003      	str	r3, [r0, #0]
 800ab46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab4a:	b01b      	add	sp, #108	; 0x6c
 800ab4c:	bd30      	pop	{r4, r5, pc}
 800ab4e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ab52:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ab56:	bf14      	ite	ne
 800ab58:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ab5c:	4623      	moveq	r3, r4
 800ab5e:	9302      	str	r3, [sp, #8]
 800ab60:	9305      	str	r3, [sp, #20]
 800ab62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab66:	9100      	str	r1, [sp, #0]
 800ab68:	9104      	str	r1, [sp, #16]
 800ab6a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ab6e:	4669      	mov	r1, sp
 800ab70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ab72:	f000 f8b5 	bl	800ace0 <_svfiprintf_r>
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	bfbc      	itt	lt
 800ab7a:	238b      	movlt	r3, #139	; 0x8b
 800ab7c:	602b      	strlt	r3, [r5, #0]
 800ab7e:	2c00      	cmp	r4, #0
 800ab80:	d0e3      	beq.n	800ab4a <_vsniprintf_r+0x16>
 800ab82:	9b00      	ldr	r3, [sp, #0]
 800ab84:	2200      	movs	r2, #0
 800ab86:	701a      	strb	r2, [r3, #0]
 800ab88:	e7df      	b.n	800ab4a <_vsniprintf_r+0x16>
	...

0800ab8c <vsniprintf>:
 800ab8c:	b507      	push	{r0, r1, r2, lr}
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	4613      	mov	r3, r2
 800ab92:	460a      	mov	r2, r1
 800ab94:	4601      	mov	r1, r0
 800ab96:	4803      	ldr	r0, [pc, #12]	; (800aba4 <vsniprintf+0x18>)
 800ab98:	6800      	ldr	r0, [r0, #0]
 800ab9a:	f7ff ffcb 	bl	800ab34 <_vsniprintf_r>
 800ab9e:	b003      	add	sp, #12
 800aba0:	f85d fb04 	ldr.w	pc, [sp], #4
 800aba4:	2000005c 	.word	0x2000005c

0800aba8 <memset>:
 800aba8:	4402      	add	r2, r0
 800abaa:	4603      	mov	r3, r0
 800abac:	4293      	cmp	r3, r2
 800abae:	d100      	bne.n	800abb2 <memset+0xa>
 800abb0:	4770      	bx	lr
 800abb2:	f803 1b01 	strb.w	r1, [r3], #1
 800abb6:	e7f9      	b.n	800abac <memset+0x4>

0800abb8 <__errno>:
 800abb8:	4b01      	ldr	r3, [pc, #4]	; (800abc0 <__errno+0x8>)
 800abba:	6818      	ldr	r0, [r3, #0]
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	2000005c 	.word	0x2000005c

0800abc4 <__libc_init_array>:
 800abc4:	b570      	push	{r4, r5, r6, lr}
 800abc6:	4d0d      	ldr	r5, [pc, #52]	; (800abfc <__libc_init_array+0x38>)
 800abc8:	4c0d      	ldr	r4, [pc, #52]	; (800ac00 <__libc_init_array+0x3c>)
 800abca:	1b64      	subs	r4, r4, r5
 800abcc:	10a4      	asrs	r4, r4, #2
 800abce:	2600      	movs	r6, #0
 800abd0:	42a6      	cmp	r6, r4
 800abd2:	d109      	bne.n	800abe8 <__libc_init_array+0x24>
 800abd4:	4d0b      	ldr	r5, [pc, #44]	; (800ac04 <__libc_init_array+0x40>)
 800abd6:	4c0c      	ldr	r4, [pc, #48]	; (800ac08 <__libc_init_array+0x44>)
 800abd8:	f000 fc68 	bl	800b4ac <_init>
 800abdc:	1b64      	subs	r4, r4, r5
 800abde:	10a4      	asrs	r4, r4, #2
 800abe0:	2600      	movs	r6, #0
 800abe2:	42a6      	cmp	r6, r4
 800abe4:	d105      	bne.n	800abf2 <__libc_init_array+0x2e>
 800abe6:	bd70      	pop	{r4, r5, r6, pc}
 800abe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abec:	4798      	blx	r3
 800abee:	3601      	adds	r6, #1
 800abf0:	e7ee      	b.n	800abd0 <__libc_init_array+0xc>
 800abf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf6:	4798      	blx	r3
 800abf8:	3601      	adds	r6, #1
 800abfa:	e7f2      	b.n	800abe2 <__libc_init_array+0x1e>
 800abfc:	0800bbf8 	.word	0x0800bbf8
 800ac00:	0800bbf8 	.word	0x0800bbf8
 800ac04:	0800bbf8 	.word	0x0800bbf8
 800ac08:	0800bbfc 	.word	0x0800bbfc

0800ac0c <__retarget_lock_acquire_recursive>:
 800ac0c:	4770      	bx	lr

0800ac0e <__retarget_lock_release_recursive>:
 800ac0e:	4770      	bx	lr

0800ac10 <memcpy>:
 800ac10:	440a      	add	r2, r1
 800ac12:	4291      	cmp	r1, r2
 800ac14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac18:	d100      	bne.n	800ac1c <memcpy+0xc>
 800ac1a:	4770      	bx	lr
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac26:	4291      	cmp	r1, r2
 800ac28:	d1f9      	bne.n	800ac1e <memcpy+0xe>
 800ac2a:	bd10      	pop	{r4, pc}

0800ac2c <__ssputs_r>:
 800ac2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac30:	688e      	ldr	r6, [r1, #8]
 800ac32:	461f      	mov	r7, r3
 800ac34:	42be      	cmp	r6, r7
 800ac36:	680b      	ldr	r3, [r1, #0]
 800ac38:	4682      	mov	sl, r0
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	4690      	mov	r8, r2
 800ac3e:	d82c      	bhi.n	800ac9a <__ssputs_r+0x6e>
 800ac40:	898a      	ldrh	r2, [r1, #12]
 800ac42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac46:	d026      	beq.n	800ac96 <__ssputs_r+0x6a>
 800ac48:	6965      	ldr	r5, [r4, #20]
 800ac4a:	6909      	ldr	r1, [r1, #16]
 800ac4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac50:	eba3 0901 	sub.w	r9, r3, r1
 800ac54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac58:	1c7b      	adds	r3, r7, #1
 800ac5a:	444b      	add	r3, r9
 800ac5c:	106d      	asrs	r5, r5, #1
 800ac5e:	429d      	cmp	r5, r3
 800ac60:	bf38      	it	cc
 800ac62:	461d      	movcc	r5, r3
 800ac64:	0553      	lsls	r3, r2, #21
 800ac66:	d527      	bpl.n	800acb8 <__ssputs_r+0x8c>
 800ac68:	4629      	mov	r1, r5
 800ac6a:	f000 f957 	bl	800af1c <_malloc_r>
 800ac6e:	4606      	mov	r6, r0
 800ac70:	b360      	cbz	r0, 800accc <__ssputs_r+0xa0>
 800ac72:	6921      	ldr	r1, [r4, #16]
 800ac74:	464a      	mov	r2, r9
 800ac76:	f7ff ffcb 	bl	800ac10 <memcpy>
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac84:	81a3      	strh	r3, [r4, #12]
 800ac86:	6126      	str	r6, [r4, #16]
 800ac88:	6165      	str	r5, [r4, #20]
 800ac8a:	444e      	add	r6, r9
 800ac8c:	eba5 0509 	sub.w	r5, r5, r9
 800ac90:	6026      	str	r6, [r4, #0]
 800ac92:	60a5      	str	r5, [r4, #8]
 800ac94:	463e      	mov	r6, r7
 800ac96:	42be      	cmp	r6, r7
 800ac98:	d900      	bls.n	800ac9c <__ssputs_r+0x70>
 800ac9a:	463e      	mov	r6, r7
 800ac9c:	6820      	ldr	r0, [r4, #0]
 800ac9e:	4632      	mov	r2, r6
 800aca0:	4641      	mov	r1, r8
 800aca2:	f000 fb86 	bl	800b3b2 <memmove>
 800aca6:	68a3      	ldr	r3, [r4, #8]
 800aca8:	1b9b      	subs	r3, r3, r6
 800acaa:	60a3      	str	r3, [r4, #8]
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	4433      	add	r3, r6
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	2000      	movs	r0, #0
 800acb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb8:	462a      	mov	r2, r5
 800acba:	f000 fb4b 	bl	800b354 <_realloc_r>
 800acbe:	4606      	mov	r6, r0
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d1e0      	bne.n	800ac86 <__ssputs_r+0x5a>
 800acc4:	6921      	ldr	r1, [r4, #16]
 800acc6:	4650      	mov	r0, sl
 800acc8:	f000 fb9e 	bl	800b408 <_free_r>
 800accc:	230c      	movs	r3, #12
 800acce:	f8ca 3000 	str.w	r3, [sl]
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acd8:	81a3      	strh	r3, [r4, #12]
 800acda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acde:	e7e9      	b.n	800acb4 <__ssputs_r+0x88>

0800ace0 <_svfiprintf_r>:
 800ace0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace4:	4698      	mov	r8, r3
 800ace6:	898b      	ldrh	r3, [r1, #12]
 800ace8:	061b      	lsls	r3, r3, #24
 800acea:	b09d      	sub	sp, #116	; 0x74
 800acec:	4607      	mov	r7, r0
 800acee:	460d      	mov	r5, r1
 800acf0:	4614      	mov	r4, r2
 800acf2:	d50e      	bpl.n	800ad12 <_svfiprintf_r+0x32>
 800acf4:	690b      	ldr	r3, [r1, #16]
 800acf6:	b963      	cbnz	r3, 800ad12 <_svfiprintf_r+0x32>
 800acf8:	2140      	movs	r1, #64	; 0x40
 800acfa:	f000 f90f 	bl	800af1c <_malloc_r>
 800acfe:	6028      	str	r0, [r5, #0]
 800ad00:	6128      	str	r0, [r5, #16]
 800ad02:	b920      	cbnz	r0, 800ad0e <_svfiprintf_r+0x2e>
 800ad04:	230c      	movs	r3, #12
 800ad06:	603b      	str	r3, [r7, #0]
 800ad08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad0c:	e0d0      	b.n	800aeb0 <_svfiprintf_r+0x1d0>
 800ad0e:	2340      	movs	r3, #64	; 0x40
 800ad10:	616b      	str	r3, [r5, #20]
 800ad12:	2300      	movs	r3, #0
 800ad14:	9309      	str	r3, [sp, #36]	; 0x24
 800ad16:	2320      	movs	r3, #32
 800ad18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad20:	2330      	movs	r3, #48	; 0x30
 800ad22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aec8 <_svfiprintf_r+0x1e8>
 800ad26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad2a:	f04f 0901 	mov.w	r9, #1
 800ad2e:	4623      	mov	r3, r4
 800ad30:	469a      	mov	sl, r3
 800ad32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad36:	b10a      	cbz	r2, 800ad3c <_svfiprintf_r+0x5c>
 800ad38:	2a25      	cmp	r2, #37	; 0x25
 800ad3a:	d1f9      	bne.n	800ad30 <_svfiprintf_r+0x50>
 800ad3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ad40:	d00b      	beq.n	800ad5a <_svfiprintf_r+0x7a>
 800ad42:	465b      	mov	r3, fp
 800ad44:	4622      	mov	r2, r4
 800ad46:	4629      	mov	r1, r5
 800ad48:	4638      	mov	r0, r7
 800ad4a:	f7ff ff6f 	bl	800ac2c <__ssputs_r>
 800ad4e:	3001      	adds	r0, #1
 800ad50:	f000 80a9 	beq.w	800aea6 <_svfiprintf_r+0x1c6>
 800ad54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad56:	445a      	add	r2, fp
 800ad58:	9209      	str	r2, [sp, #36]	; 0x24
 800ad5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 80a1 	beq.w	800aea6 <_svfiprintf_r+0x1c6>
 800ad64:	2300      	movs	r3, #0
 800ad66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad6e:	f10a 0a01 	add.w	sl, sl, #1
 800ad72:	9304      	str	r3, [sp, #16]
 800ad74:	9307      	str	r3, [sp, #28]
 800ad76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad7a:	931a      	str	r3, [sp, #104]	; 0x68
 800ad7c:	4654      	mov	r4, sl
 800ad7e:	2205      	movs	r2, #5
 800ad80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad84:	4850      	ldr	r0, [pc, #320]	; (800aec8 <_svfiprintf_r+0x1e8>)
 800ad86:	f7f5 f9fb 	bl	8000180 <memchr>
 800ad8a:	9a04      	ldr	r2, [sp, #16]
 800ad8c:	b9d8      	cbnz	r0, 800adc6 <_svfiprintf_r+0xe6>
 800ad8e:	06d0      	lsls	r0, r2, #27
 800ad90:	bf44      	itt	mi
 800ad92:	2320      	movmi	r3, #32
 800ad94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad98:	0711      	lsls	r1, r2, #28
 800ad9a:	bf44      	itt	mi
 800ad9c:	232b      	movmi	r3, #43	; 0x2b
 800ad9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ada2:	f89a 3000 	ldrb.w	r3, [sl]
 800ada6:	2b2a      	cmp	r3, #42	; 0x2a
 800ada8:	d015      	beq.n	800add6 <_svfiprintf_r+0xf6>
 800adaa:	9a07      	ldr	r2, [sp, #28]
 800adac:	4654      	mov	r4, sl
 800adae:	2000      	movs	r0, #0
 800adb0:	f04f 0c0a 	mov.w	ip, #10
 800adb4:	4621      	mov	r1, r4
 800adb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adba:	3b30      	subs	r3, #48	; 0x30
 800adbc:	2b09      	cmp	r3, #9
 800adbe:	d94d      	bls.n	800ae5c <_svfiprintf_r+0x17c>
 800adc0:	b1b0      	cbz	r0, 800adf0 <_svfiprintf_r+0x110>
 800adc2:	9207      	str	r2, [sp, #28]
 800adc4:	e014      	b.n	800adf0 <_svfiprintf_r+0x110>
 800adc6:	eba0 0308 	sub.w	r3, r0, r8
 800adca:	fa09 f303 	lsl.w	r3, r9, r3
 800adce:	4313      	orrs	r3, r2
 800add0:	9304      	str	r3, [sp, #16]
 800add2:	46a2      	mov	sl, r4
 800add4:	e7d2      	b.n	800ad7c <_svfiprintf_r+0x9c>
 800add6:	9b03      	ldr	r3, [sp, #12]
 800add8:	1d19      	adds	r1, r3, #4
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	9103      	str	r1, [sp, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	bfbb      	ittet	lt
 800ade2:	425b      	neglt	r3, r3
 800ade4:	f042 0202 	orrlt.w	r2, r2, #2
 800ade8:	9307      	strge	r3, [sp, #28]
 800adea:	9307      	strlt	r3, [sp, #28]
 800adec:	bfb8      	it	lt
 800adee:	9204      	strlt	r2, [sp, #16]
 800adf0:	7823      	ldrb	r3, [r4, #0]
 800adf2:	2b2e      	cmp	r3, #46	; 0x2e
 800adf4:	d10c      	bne.n	800ae10 <_svfiprintf_r+0x130>
 800adf6:	7863      	ldrb	r3, [r4, #1]
 800adf8:	2b2a      	cmp	r3, #42	; 0x2a
 800adfa:	d134      	bne.n	800ae66 <_svfiprintf_r+0x186>
 800adfc:	9b03      	ldr	r3, [sp, #12]
 800adfe:	1d1a      	adds	r2, r3, #4
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	9203      	str	r2, [sp, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	bfb8      	it	lt
 800ae08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ae0c:	3402      	adds	r4, #2
 800ae0e:	9305      	str	r3, [sp, #20]
 800ae10:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800aecc <_svfiprintf_r+0x1ec>
 800ae14:	7821      	ldrb	r1, [r4, #0]
 800ae16:	2203      	movs	r2, #3
 800ae18:	4650      	mov	r0, sl
 800ae1a:	f7f5 f9b1 	bl	8000180 <memchr>
 800ae1e:	b138      	cbz	r0, 800ae30 <_svfiprintf_r+0x150>
 800ae20:	9b04      	ldr	r3, [sp, #16]
 800ae22:	eba0 000a 	sub.w	r0, r0, sl
 800ae26:	2240      	movs	r2, #64	; 0x40
 800ae28:	4082      	lsls	r2, r0
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	3401      	adds	r4, #1
 800ae2e:	9304      	str	r3, [sp, #16]
 800ae30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae34:	4826      	ldr	r0, [pc, #152]	; (800aed0 <_svfiprintf_r+0x1f0>)
 800ae36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae3a:	2206      	movs	r2, #6
 800ae3c:	f7f5 f9a0 	bl	8000180 <memchr>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d038      	beq.n	800aeb6 <_svfiprintf_r+0x1d6>
 800ae44:	4b23      	ldr	r3, [pc, #140]	; (800aed4 <_svfiprintf_r+0x1f4>)
 800ae46:	bb1b      	cbnz	r3, 800ae90 <_svfiprintf_r+0x1b0>
 800ae48:	9b03      	ldr	r3, [sp, #12]
 800ae4a:	3307      	adds	r3, #7
 800ae4c:	f023 0307 	bic.w	r3, r3, #7
 800ae50:	3308      	adds	r3, #8
 800ae52:	9303      	str	r3, [sp, #12]
 800ae54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae56:	4433      	add	r3, r6
 800ae58:	9309      	str	r3, [sp, #36]	; 0x24
 800ae5a:	e768      	b.n	800ad2e <_svfiprintf_r+0x4e>
 800ae5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae60:	460c      	mov	r4, r1
 800ae62:	2001      	movs	r0, #1
 800ae64:	e7a6      	b.n	800adb4 <_svfiprintf_r+0xd4>
 800ae66:	2300      	movs	r3, #0
 800ae68:	3401      	adds	r4, #1
 800ae6a:	9305      	str	r3, [sp, #20]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	f04f 0c0a 	mov.w	ip, #10
 800ae72:	4620      	mov	r0, r4
 800ae74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae78:	3a30      	subs	r2, #48	; 0x30
 800ae7a:	2a09      	cmp	r2, #9
 800ae7c:	d903      	bls.n	800ae86 <_svfiprintf_r+0x1a6>
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d0c6      	beq.n	800ae10 <_svfiprintf_r+0x130>
 800ae82:	9105      	str	r1, [sp, #20]
 800ae84:	e7c4      	b.n	800ae10 <_svfiprintf_r+0x130>
 800ae86:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e7f0      	b.n	800ae72 <_svfiprintf_r+0x192>
 800ae90:	ab03      	add	r3, sp, #12
 800ae92:	9300      	str	r3, [sp, #0]
 800ae94:	462a      	mov	r2, r5
 800ae96:	4b10      	ldr	r3, [pc, #64]	; (800aed8 <_svfiprintf_r+0x1f8>)
 800ae98:	a904      	add	r1, sp, #16
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	f3af 8000 	nop.w
 800aea0:	1c42      	adds	r2, r0, #1
 800aea2:	4606      	mov	r6, r0
 800aea4:	d1d6      	bne.n	800ae54 <_svfiprintf_r+0x174>
 800aea6:	89ab      	ldrh	r3, [r5, #12]
 800aea8:	065b      	lsls	r3, r3, #25
 800aeaa:	f53f af2d 	bmi.w	800ad08 <_svfiprintf_r+0x28>
 800aeae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeb0:	b01d      	add	sp, #116	; 0x74
 800aeb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb6:	ab03      	add	r3, sp, #12
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	462a      	mov	r2, r5
 800aebc:	4b06      	ldr	r3, [pc, #24]	; (800aed8 <_svfiprintf_r+0x1f8>)
 800aebe:	a904      	add	r1, sp, #16
 800aec0:	4638      	mov	r0, r7
 800aec2:	f000 f919 	bl	800b0f8 <_printf_i>
 800aec6:	e7eb      	b.n	800aea0 <_svfiprintf_r+0x1c0>
 800aec8:	0800bbbc 	.word	0x0800bbbc
 800aecc:	0800bbc2 	.word	0x0800bbc2
 800aed0:	0800bbc6 	.word	0x0800bbc6
 800aed4:	00000000 	.word	0x00000000
 800aed8:	0800ac2d 	.word	0x0800ac2d

0800aedc <sbrk_aligned>:
 800aedc:	b570      	push	{r4, r5, r6, lr}
 800aede:	4e0e      	ldr	r6, [pc, #56]	; (800af18 <sbrk_aligned+0x3c>)
 800aee0:	460c      	mov	r4, r1
 800aee2:	6831      	ldr	r1, [r6, #0]
 800aee4:	4605      	mov	r5, r0
 800aee6:	b911      	cbnz	r1, 800aeee <sbrk_aligned+0x12>
 800aee8:	f000 fa7e 	bl	800b3e8 <_sbrk_r>
 800aeec:	6030      	str	r0, [r6, #0]
 800aeee:	4621      	mov	r1, r4
 800aef0:	4628      	mov	r0, r5
 800aef2:	f000 fa79 	bl	800b3e8 <_sbrk_r>
 800aef6:	1c43      	adds	r3, r0, #1
 800aef8:	d00a      	beq.n	800af10 <sbrk_aligned+0x34>
 800aefa:	1cc4      	adds	r4, r0, #3
 800aefc:	f024 0403 	bic.w	r4, r4, #3
 800af00:	42a0      	cmp	r0, r4
 800af02:	d007      	beq.n	800af14 <sbrk_aligned+0x38>
 800af04:	1a21      	subs	r1, r4, r0
 800af06:	4628      	mov	r0, r5
 800af08:	f000 fa6e 	bl	800b3e8 <_sbrk_r>
 800af0c:	3001      	adds	r0, #1
 800af0e:	d101      	bne.n	800af14 <sbrk_aligned+0x38>
 800af10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800af14:	4620      	mov	r0, r4
 800af16:	bd70      	pop	{r4, r5, r6, pc}
 800af18:	200008cc 	.word	0x200008cc

0800af1c <_malloc_r>:
 800af1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af20:	1ccd      	adds	r5, r1, #3
 800af22:	f025 0503 	bic.w	r5, r5, #3
 800af26:	3508      	adds	r5, #8
 800af28:	2d0c      	cmp	r5, #12
 800af2a:	bf38      	it	cc
 800af2c:	250c      	movcc	r5, #12
 800af2e:	2d00      	cmp	r5, #0
 800af30:	4607      	mov	r7, r0
 800af32:	db01      	blt.n	800af38 <_malloc_r+0x1c>
 800af34:	42a9      	cmp	r1, r5
 800af36:	d905      	bls.n	800af44 <_malloc_r+0x28>
 800af38:	230c      	movs	r3, #12
 800af3a:	603b      	str	r3, [r7, #0]
 800af3c:	2600      	movs	r6, #0
 800af3e:	4630      	mov	r0, r6
 800af40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b018 <_malloc_r+0xfc>
 800af48:	f000 f9f8 	bl	800b33c <__malloc_lock>
 800af4c:	f8d8 3000 	ldr.w	r3, [r8]
 800af50:	461c      	mov	r4, r3
 800af52:	bb5c      	cbnz	r4, 800afac <_malloc_r+0x90>
 800af54:	4629      	mov	r1, r5
 800af56:	4638      	mov	r0, r7
 800af58:	f7ff ffc0 	bl	800aedc <sbrk_aligned>
 800af5c:	1c43      	adds	r3, r0, #1
 800af5e:	4604      	mov	r4, r0
 800af60:	d155      	bne.n	800b00e <_malloc_r+0xf2>
 800af62:	f8d8 4000 	ldr.w	r4, [r8]
 800af66:	4626      	mov	r6, r4
 800af68:	2e00      	cmp	r6, #0
 800af6a:	d145      	bne.n	800aff8 <_malloc_r+0xdc>
 800af6c:	2c00      	cmp	r4, #0
 800af6e:	d048      	beq.n	800b002 <_malloc_r+0xe6>
 800af70:	6823      	ldr	r3, [r4, #0]
 800af72:	4631      	mov	r1, r6
 800af74:	4638      	mov	r0, r7
 800af76:	eb04 0903 	add.w	r9, r4, r3
 800af7a:	f000 fa35 	bl	800b3e8 <_sbrk_r>
 800af7e:	4581      	cmp	r9, r0
 800af80:	d13f      	bne.n	800b002 <_malloc_r+0xe6>
 800af82:	6821      	ldr	r1, [r4, #0]
 800af84:	1a6d      	subs	r5, r5, r1
 800af86:	4629      	mov	r1, r5
 800af88:	4638      	mov	r0, r7
 800af8a:	f7ff ffa7 	bl	800aedc <sbrk_aligned>
 800af8e:	3001      	adds	r0, #1
 800af90:	d037      	beq.n	800b002 <_malloc_r+0xe6>
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	442b      	add	r3, r5
 800af96:	6023      	str	r3, [r4, #0]
 800af98:	f8d8 3000 	ldr.w	r3, [r8]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d038      	beq.n	800b012 <_malloc_r+0xf6>
 800afa0:	685a      	ldr	r2, [r3, #4]
 800afa2:	42a2      	cmp	r2, r4
 800afa4:	d12b      	bne.n	800affe <_malloc_r+0xe2>
 800afa6:	2200      	movs	r2, #0
 800afa8:	605a      	str	r2, [r3, #4]
 800afaa:	e00f      	b.n	800afcc <_malloc_r+0xb0>
 800afac:	6822      	ldr	r2, [r4, #0]
 800afae:	1b52      	subs	r2, r2, r5
 800afb0:	d41f      	bmi.n	800aff2 <_malloc_r+0xd6>
 800afb2:	2a0b      	cmp	r2, #11
 800afb4:	d917      	bls.n	800afe6 <_malloc_r+0xca>
 800afb6:	1961      	adds	r1, r4, r5
 800afb8:	42a3      	cmp	r3, r4
 800afba:	6025      	str	r5, [r4, #0]
 800afbc:	bf18      	it	ne
 800afbe:	6059      	strne	r1, [r3, #4]
 800afc0:	6863      	ldr	r3, [r4, #4]
 800afc2:	bf08      	it	eq
 800afc4:	f8c8 1000 	streq.w	r1, [r8]
 800afc8:	5162      	str	r2, [r4, r5]
 800afca:	604b      	str	r3, [r1, #4]
 800afcc:	4638      	mov	r0, r7
 800afce:	f104 060b 	add.w	r6, r4, #11
 800afd2:	f000 f9b9 	bl	800b348 <__malloc_unlock>
 800afd6:	f026 0607 	bic.w	r6, r6, #7
 800afda:	1d23      	adds	r3, r4, #4
 800afdc:	1af2      	subs	r2, r6, r3
 800afde:	d0ae      	beq.n	800af3e <_malloc_r+0x22>
 800afe0:	1b9b      	subs	r3, r3, r6
 800afe2:	50a3      	str	r3, [r4, r2]
 800afe4:	e7ab      	b.n	800af3e <_malloc_r+0x22>
 800afe6:	42a3      	cmp	r3, r4
 800afe8:	6862      	ldr	r2, [r4, #4]
 800afea:	d1dd      	bne.n	800afa8 <_malloc_r+0x8c>
 800afec:	f8c8 2000 	str.w	r2, [r8]
 800aff0:	e7ec      	b.n	800afcc <_malloc_r+0xb0>
 800aff2:	4623      	mov	r3, r4
 800aff4:	6864      	ldr	r4, [r4, #4]
 800aff6:	e7ac      	b.n	800af52 <_malloc_r+0x36>
 800aff8:	4634      	mov	r4, r6
 800affa:	6876      	ldr	r6, [r6, #4]
 800affc:	e7b4      	b.n	800af68 <_malloc_r+0x4c>
 800affe:	4613      	mov	r3, r2
 800b000:	e7cc      	b.n	800af9c <_malloc_r+0x80>
 800b002:	230c      	movs	r3, #12
 800b004:	603b      	str	r3, [r7, #0]
 800b006:	4638      	mov	r0, r7
 800b008:	f000 f99e 	bl	800b348 <__malloc_unlock>
 800b00c:	e797      	b.n	800af3e <_malloc_r+0x22>
 800b00e:	6025      	str	r5, [r4, #0]
 800b010:	e7dc      	b.n	800afcc <_malloc_r+0xb0>
 800b012:	605b      	str	r3, [r3, #4]
 800b014:	deff      	udf	#255	; 0xff
 800b016:	bf00      	nop
 800b018:	200008c8 	.word	0x200008c8

0800b01c <_printf_common>:
 800b01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b020:	4616      	mov	r6, r2
 800b022:	4699      	mov	r9, r3
 800b024:	688a      	ldr	r2, [r1, #8]
 800b026:	690b      	ldr	r3, [r1, #16]
 800b028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b02c:	4293      	cmp	r3, r2
 800b02e:	bfb8      	it	lt
 800b030:	4613      	movlt	r3, r2
 800b032:	6033      	str	r3, [r6, #0]
 800b034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b038:	4607      	mov	r7, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	b10a      	cbz	r2, 800b042 <_printf_common+0x26>
 800b03e:	3301      	adds	r3, #1
 800b040:	6033      	str	r3, [r6, #0]
 800b042:	6823      	ldr	r3, [r4, #0]
 800b044:	0699      	lsls	r1, r3, #26
 800b046:	bf42      	ittt	mi
 800b048:	6833      	ldrmi	r3, [r6, #0]
 800b04a:	3302      	addmi	r3, #2
 800b04c:	6033      	strmi	r3, [r6, #0]
 800b04e:	6825      	ldr	r5, [r4, #0]
 800b050:	f015 0506 	ands.w	r5, r5, #6
 800b054:	d106      	bne.n	800b064 <_printf_common+0x48>
 800b056:	f104 0a19 	add.w	sl, r4, #25
 800b05a:	68e3      	ldr	r3, [r4, #12]
 800b05c:	6832      	ldr	r2, [r6, #0]
 800b05e:	1a9b      	subs	r3, r3, r2
 800b060:	42ab      	cmp	r3, r5
 800b062:	dc26      	bgt.n	800b0b2 <_printf_common+0x96>
 800b064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b068:	1e13      	subs	r3, r2, #0
 800b06a:	6822      	ldr	r2, [r4, #0]
 800b06c:	bf18      	it	ne
 800b06e:	2301      	movne	r3, #1
 800b070:	0692      	lsls	r2, r2, #26
 800b072:	d42b      	bmi.n	800b0cc <_printf_common+0xb0>
 800b074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b078:	4649      	mov	r1, r9
 800b07a:	4638      	mov	r0, r7
 800b07c:	47c0      	blx	r8
 800b07e:	3001      	adds	r0, #1
 800b080:	d01e      	beq.n	800b0c0 <_printf_common+0xa4>
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	6922      	ldr	r2, [r4, #16]
 800b086:	f003 0306 	and.w	r3, r3, #6
 800b08a:	2b04      	cmp	r3, #4
 800b08c:	bf02      	ittt	eq
 800b08e:	68e5      	ldreq	r5, [r4, #12]
 800b090:	6833      	ldreq	r3, [r6, #0]
 800b092:	1aed      	subeq	r5, r5, r3
 800b094:	68a3      	ldr	r3, [r4, #8]
 800b096:	bf0c      	ite	eq
 800b098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b09c:	2500      	movne	r5, #0
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	bfc4      	itt	gt
 800b0a2:	1a9b      	subgt	r3, r3, r2
 800b0a4:	18ed      	addgt	r5, r5, r3
 800b0a6:	2600      	movs	r6, #0
 800b0a8:	341a      	adds	r4, #26
 800b0aa:	42b5      	cmp	r5, r6
 800b0ac:	d11a      	bne.n	800b0e4 <_printf_common+0xc8>
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	e008      	b.n	800b0c4 <_printf_common+0xa8>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	4652      	mov	r2, sl
 800b0b6:	4649      	mov	r1, r9
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	47c0      	blx	r8
 800b0bc:	3001      	adds	r0, #1
 800b0be:	d103      	bne.n	800b0c8 <_printf_common+0xac>
 800b0c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0c8:	3501      	adds	r5, #1
 800b0ca:	e7c6      	b.n	800b05a <_printf_common+0x3e>
 800b0cc:	18e1      	adds	r1, r4, r3
 800b0ce:	1c5a      	adds	r2, r3, #1
 800b0d0:	2030      	movs	r0, #48	; 0x30
 800b0d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0d6:	4422      	add	r2, r4
 800b0d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0e0:	3302      	adds	r3, #2
 800b0e2:	e7c7      	b.n	800b074 <_printf_common+0x58>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	4622      	mov	r2, r4
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	47c0      	blx	r8
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	d0e6      	beq.n	800b0c0 <_printf_common+0xa4>
 800b0f2:	3601      	adds	r6, #1
 800b0f4:	e7d9      	b.n	800b0aa <_printf_common+0x8e>
	...

0800b0f8 <_printf_i>:
 800b0f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0fc:	7e0f      	ldrb	r7, [r1, #24]
 800b0fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b100:	2f78      	cmp	r7, #120	; 0x78
 800b102:	4691      	mov	r9, r2
 800b104:	4680      	mov	r8, r0
 800b106:	460c      	mov	r4, r1
 800b108:	469a      	mov	sl, r3
 800b10a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b10e:	d807      	bhi.n	800b120 <_printf_i+0x28>
 800b110:	2f62      	cmp	r7, #98	; 0x62
 800b112:	d80a      	bhi.n	800b12a <_printf_i+0x32>
 800b114:	2f00      	cmp	r7, #0
 800b116:	f000 80d4 	beq.w	800b2c2 <_printf_i+0x1ca>
 800b11a:	2f58      	cmp	r7, #88	; 0x58
 800b11c:	f000 80c0 	beq.w	800b2a0 <_printf_i+0x1a8>
 800b120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b128:	e03a      	b.n	800b1a0 <_printf_i+0xa8>
 800b12a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b12e:	2b15      	cmp	r3, #21
 800b130:	d8f6      	bhi.n	800b120 <_printf_i+0x28>
 800b132:	a101      	add	r1, pc, #4	; (adr r1, 800b138 <_printf_i+0x40>)
 800b134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b138:	0800b191 	.word	0x0800b191
 800b13c:	0800b1a5 	.word	0x0800b1a5
 800b140:	0800b121 	.word	0x0800b121
 800b144:	0800b121 	.word	0x0800b121
 800b148:	0800b121 	.word	0x0800b121
 800b14c:	0800b121 	.word	0x0800b121
 800b150:	0800b1a5 	.word	0x0800b1a5
 800b154:	0800b121 	.word	0x0800b121
 800b158:	0800b121 	.word	0x0800b121
 800b15c:	0800b121 	.word	0x0800b121
 800b160:	0800b121 	.word	0x0800b121
 800b164:	0800b2a9 	.word	0x0800b2a9
 800b168:	0800b1d1 	.word	0x0800b1d1
 800b16c:	0800b263 	.word	0x0800b263
 800b170:	0800b121 	.word	0x0800b121
 800b174:	0800b121 	.word	0x0800b121
 800b178:	0800b2cb 	.word	0x0800b2cb
 800b17c:	0800b121 	.word	0x0800b121
 800b180:	0800b1d1 	.word	0x0800b1d1
 800b184:	0800b121 	.word	0x0800b121
 800b188:	0800b121 	.word	0x0800b121
 800b18c:	0800b26b 	.word	0x0800b26b
 800b190:	682b      	ldr	r3, [r5, #0]
 800b192:	1d1a      	adds	r2, r3, #4
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	602a      	str	r2, [r5, #0]
 800b198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b19c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e09f      	b.n	800b2e4 <_printf_i+0x1ec>
 800b1a4:	6820      	ldr	r0, [r4, #0]
 800b1a6:	682b      	ldr	r3, [r5, #0]
 800b1a8:	0607      	lsls	r7, r0, #24
 800b1aa:	f103 0104 	add.w	r1, r3, #4
 800b1ae:	6029      	str	r1, [r5, #0]
 800b1b0:	d501      	bpl.n	800b1b6 <_printf_i+0xbe>
 800b1b2:	681e      	ldr	r6, [r3, #0]
 800b1b4:	e003      	b.n	800b1be <_printf_i+0xc6>
 800b1b6:	0646      	lsls	r6, r0, #25
 800b1b8:	d5fb      	bpl.n	800b1b2 <_printf_i+0xba>
 800b1ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b1be:	2e00      	cmp	r6, #0
 800b1c0:	da03      	bge.n	800b1ca <_printf_i+0xd2>
 800b1c2:	232d      	movs	r3, #45	; 0x2d
 800b1c4:	4276      	negs	r6, r6
 800b1c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1ca:	485a      	ldr	r0, [pc, #360]	; (800b334 <_printf_i+0x23c>)
 800b1cc:	230a      	movs	r3, #10
 800b1ce:	e012      	b.n	800b1f6 <_printf_i+0xfe>
 800b1d0:	682b      	ldr	r3, [r5, #0]
 800b1d2:	6820      	ldr	r0, [r4, #0]
 800b1d4:	1d19      	adds	r1, r3, #4
 800b1d6:	6029      	str	r1, [r5, #0]
 800b1d8:	0605      	lsls	r5, r0, #24
 800b1da:	d501      	bpl.n	800b1e0 <_printf_i+0xe8>
 800b1dc:	681e      	ldr	r6, [r3, #0]
 800b1de:	e002      	b.n	800b1e6 <_printf_i+0xee>
 800b1e0:	0641      	lsls	r1, r0, #25
 800b1e2:	d5fb      	bpl.n	800b1dc <_printf_i+0xe4>
 800b1e4:	881e      	ldrh	r6, [r3, #0]
 800b1e6:	4853      	ldr	r0, [pc, #332]	; (800b334 <_printf_i+0x23c>)
 800b1e8:	2f6f      	cmp	r7, #111	; 0x6f
 800b1ea:	bf0c      	ite	eq
 800b1ec:	2308      	moveq	r3, #8
 800b1ee:	230a      	movne	r3, #10
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1f6:	6865      	ldr	r5, [r4, #4]
 800b1f8:	60a5      	str	r5, [r4, #8]
 800b1fa:	2d00      	cmp	r5, #0
 800b1fc:	bfa2      	ittt	ge
 800b1fe:	6821      	ldrge	r1, [r4, #0]
 800b200:	f021 0104 	bicge.w	r1, r1, #4
 800b204:	6021      	strge	r1, [r4, #0]
 800b206:	b90e      	cbnz	r6, 800b20c <_printf_i+0x114>
 800b208:	2d00      	cmp	r5, #0
 800b20a:	d04b      	beq.n	800b2a4 <_printf_i+0x1ac>
 800b20c:	4615      	mov	r5, r2
 800b20e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b212:	fb03 6711 	mls	r7, r3, r1, r6
 800b216:	5dc7      	ldrb	r7, [r0, r7]
 800b218:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b21c:	4637      	mov	r7, r6
 800b21e:	42bb      	cmp	r3, r7
 800b220:	460e      	mov	r6, r1
 800b222:	d9f4      	bls.n	800b20e <_printf_i+0x116>
 800b224:	2b08      	cmp	r3, #8
 800b226:	d10b      	bne.n	800b240 <_printf_i+0x148>
 800b228:	6823      	ldr	r3, [r4, #0]
 800b22a:	07de      	lsls	r6, r3, #31
 800b22c:	d508      	bpl.n	800b240 <_printf_i+0x148>
 800b22e:	6923      	ldr	r3, [r4, #16]
 800b230:	6861      	ldr	r1, [r4, #4]
 800b232:	4299      	cmp	r1, r3
 800b234:	bfde      	ittt	le
 800b236:	2330      	movle	r3, #48	; 0x30
 800b238:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b23c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b240:	1b52      	subs	r2, r2, r5
 800b242:	6122      	str	r2, [r4, #16]
 800b244:	f8cd a000 	str.w	sl, [sp]
 800b248:	464b      	mov	r3, r9
 800b24a:	aa03      	add	r2, sp, #12
 800b24c:	4621      	mov	r1, r4
 800b24e:	4640      	mov	r0, r8
 800b250:	f7ff fee4 	bl	800b01c <_printf_common>
 800b254:	3001      	adds	r0, #1
 800b256:	d14a      	bne.n	800b2ee <_printf_i+0x1f6>
 800b258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b25c:	b004      	add	sp, #16
 800b25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b262:	6823      	ldr	r3, [r4, #0]
 800b264:	f043 0320 	orr.w	r3, r3, #32
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	4833      	ldr	r0, [pc, #204]	; (800b338 <_printf_i+0x240>)
 800b26c:	2778      	movs	r7, #120	; 0x78
 800b26e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b272:	6823      	ldr	r3, [r4, #0]
 800b274:	6829      	ldr	r1, [r5, #0]
 800b276:	061f      	lsls	r7, r3, #24
 800b278:	f851 6b04 	ldr.w	r6, [r1], #4
 800b27c:	d402      	bmi.n	800b284 <_printf_i+0x18c>
 800b27e:	065f      	lsls	r7, r3, #25
 800b280:	bf48      	it	mi
 800b282:	b2b6      	uxthmi	r6, r6
 800b284:	07df      	lsls	r7, r3, #31
 800b286:	bf48      	it	mi
 800b288:	f043 0320 	orrmi.w	r3, r3, #32
 800b28c:	6029      	str	r1, [r5, #0]
 800b28e:	bf48      	it	mi
 800b290:	6023      	strmi	r3, [r4, #0]
 800b292:	b91e      	cbnz	r6, 800b29c <_printf_i+0x1a4>
 800b294:	6823      	ldr	r3, [r4, #0]
 800b296:	f023 0320 	bic.w	r3, r3, #32
 800b29a:	6023      	str	r3, [r4, #0]
 800b29c:	2310      	movs	r3, #16
 800b29e:	e7a7      	b.n	800b1f0 <_printf_i+0xf8>
 800b2a0:	4824      	ldr	r0, [pc, #144]	; (800b334 <_printf_i+0x23c>)
 800b2a2:	e7e4      	b.n	800b26e <_printf_i+0x176>
 800b2a4:	4615      	mov	r5, r2
 800b2a6:	e7bd      	b.n	800b224 <_printf_i+0x12c>
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	6826      	ldr	r6, [r4, #0]
 800b2ac:	6961      	ldr	r1, [r4, #20]
 800b2ae:	1d18      	adds	r0, r3, #4
 800b2b0:	6028      	str	r0, [r5, #0]
 800b2b2:	0635      	lsls	r5, r6, #24
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	d501      	bpl.n	800b2bc <_printf_i+0x1c4>
 800b2b8:	6019      	str	r1, [r3, #0]
 800b2ba:	e002      	b.n	800b2c2 <_printf_i+0x1ca>
 800b2bc:	0670      	lsls	r0, r6, #25
 800b2be:	d5fb      	bpl.n	800b2b8 <_printf_i+0x1c0>
 800b2c0:	8019      	strh	r1, [r3, #0]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	6123      	str	r3, [r4, #16]
 800b2c6:	4615      	mov	r5, r2
 800b2c8:	e7bc      	b.n	800b244 <_printf_i+0x14c>
 800b2ca:	682b      	ldr	r3, [r5, #0]
 800b2cc:	1d1a      	adds	r2, r3, #4
 800b2ce:	602a      	str	r2, [r5, #0]
 800b2d0:	681d      	ldr	r5, [r3, #0]
 800b2d2:	6862      	ldr	r2, [r4, #4]
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f7f4 ff52 	bl	8000180 <memchr>
 800b2dc:	b108      	cbz	r0, 800b2e2 <_printf_i+0x1ea>
 800b2de:	1b40      	subs	r0, r0, r5
 800b2e0:	6060      	str	r0, [r4, #4]
 800b2e2:	6863      	ldr	r3, [r4, #4]
 800b2e4:	6123      	str	r3, [r4, #16]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2ec:	e7aa      	b.n	800b244 <_printf_i+0x14c>
 800b2ee:	6923      	ldr	r3, [r4, #16]
 800b2f0:	462a      	mov	r2, r5
 800b2f2:	4649      	mov	r1, r9
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	47d0      	blx	sl
 800b2f8:	3001      	adds	r0, #1
 800b2fa:	d0ad      	beq.n	800b258 <_printf_i+0x160>
 800b2fc:	6823      	ldr	r3, [r4, #0]
 800b2fe:	079b      	lsls	r3, r3, #30
 800b300:	d413      	bmi.n	800b32a <_printf_i+0x232>
 800b302:	68e0      	ldr	r0, [r4, #12]
 800b304:	9b03      	ldr	r3, [sp, #12]
 800b306:	4298      	cmp	r0, r3
 800b308:	bfb8      	it	lt
 800b30a:	4618      	movlt	r0, r3
 800b30c:	e7a6      	b.n	800b25c <_printf_i+0x164>
 800b30e:	2301      	movs	r3, #1
 800b310:	4632      	mov	r2, r6
 800b312:	4649      	mov	r1, r9
 800b314:	4640      	mov	r0, r8
 800b316:	47d0      	blx	sl
 800b318:	3001      	adds	r0, #1
 800b31a:	d09d      	beq.n	800b258 <_printf_i+0x160>
 800b31c:	3501      	adds	r5, #1
 800b31e:	68e3      	ldr	r3, [r4, #12]
 800b320:	9903      	ldr	r1, [sp, #12]
 800b322:	1a5b      	subs	r3, r3, r1
 800b324:	42ab      	cmp	r3, r5
 800b326:	dcf2      	bgt.n	800b30e <_printf_i+0x216>
 800b328:	e7eb      	b.n	800b302 <_printf_i+0x20a>
 800b32a:	2500      	movs	r5, #0
 800b32c:	f104 0619 	add.w	r6, r4, #25
 800b330:	e7f5      	b.n	800b31e <_printf_i+0x226>
 800b332:	bf00      	nop
 800b334:	0800bbcd 	.word	0x0800bbcd
 800b338:	0800bbde 	.word	0x0800bbde

0800b33c <__malloc_lock>:
 800b33c:	4801      	ldr	r0, [pc, #4]	; (800b344 <__malloc_lock+0x8>)
 800b33e:	f7ff bc65 	b.w	800ac0c <__retarget_lock_acquire_recursive>
 800b342:	bf00      	nop
 800b344:	200008c4 	.word	0x200008c4

0800b348 <__malloc_unlock>:
 800b348:	4801      	ldr	r0, [pc, #4]	; (800b350 <__malloc_unlock+0x8>)
 800b34a:	f7ff bc60 	b.w	800ac0e <__retarget_lock_release_recursive>
 800b34e:	bf00      	nop
 800b350:	200008c4 	.word	0x200008c4

0800b354 <_realloc_r>:
 800b354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b358:	4680      	mov	r8, r0
 800b35a:	4614      	mov	r4, r2
 800b35c:	460e      	mov	r6, r1
 800b35e:	b921      	cbnz	r1, 800b36a <_realloc_r+0x16>
 800b360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b364:	4611      	mov	r1, r2
 800b366:	f7ff bdd9 	b.w	800af1c <_malloc_r>
 800b36a:	b92a      	cbnz	r2, 800b378 <_realloc_r+0x24>
 800b36c:	f000 f84c 	bl	800b408 <_free_r>
 800b370:	4625      	mov	r5, r4
 800b372:	4628      	mov	r0, r5
 800b374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b378:	f000 f890 	bl	800b49c <_malloc_usable_size_r>
 800b37c:	4284      	cmp	r4, r0
 800b37e:	4607      	mov	r7, r0
 800b380:	d802      	bhi.n	800b388 <_realloc_r+0x34>
 800b382:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b386:	d812      	bhi.n	800b3ae <_realloc_r+0x5a>
 800b388:	4621      	mov	r1, r4
 800b38a:	4640      	mov	r0, r8
 800b38c:	f7ff fdc6 	bl	800af1c <_malloc_r>
 800b390:	4605      	mov	r5, r0
 800b392:	2800      	cmp	r0, #0
 800b394:	d0ed      	beq.n	800b372 <_realloc_r+0x1e>
 800b396:	42bc      	cmp	r4, r7
 800b398:	4622      	mov	r2, r4
 800b39a:	4631      	mov	r1, r6
 800b39c:	bf28      	it	cs
 800b39e:	463a      	movcs	r2, r7
 800b3a0:	f7ff fc36 	bl	800ac10 <memcpy>
 800b3a4:	4631      	mov	r1, r6
 800b3a6:	4640      	mov	r0, r8
 800b3a8:	f000 f82e 	bl	800b408 <_free_r>
 800b3ac:	e7e1      	b.n	800b372 <_realloc_r+0x1e>
 800b3ae:	4635      	mov	r5, r6
 800b3b0:	e7df      	b.n	800b372 <_realloc_r+0x1e>

0800b3b2 <memmove>:
 800b3b2:	4288      	cmp	r0, r1
 800b3b4:	b510      	push	{r4, lr}
 800b3b6:	eb01 0402 	add.w	r4, r1, r2
 800b3ba:	d902      	bls.n	800b3c2 <memmove+0x10>
 800b3bc:	4284      	cmp	r4, r0
 800b3be:	4623      	mov	r3, r4
 800b3c0:	d807      	bhi.n	800b3d2 <memmove+0x20>
 800b3c2:	1e43      	subs	r3, r0, #1
 800b3c4:	42a1      	cmp	r1, r4
 800b3c6:	d008      	beq.n	800b3da <memmove+0x28>
 800b3c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3d0:	e7f8      	b.n	800b3c4 <memmove+0x12>
 800b3d2:	4402      	add	r2, r0
 800b3d4:	4601      	mov	r1, r0
 800b3d6:	428a      	cmp	r2, r1
 800b3d8:	d100      	bne.n	800b3dc <memmove+0x2a>
 800b3da:	bd10      	pop	{r4, pc}
 800b3dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3e4:	e7f7      	b.n	800b3d6 <memmove+0x24>
	...

0800b3e8 <_sbrk_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4d06      	ldr	r5, [pc, #24]	; (800b404 <_sbrk_r+0x1c>)
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	4608      	mov	r0, r1
 800b3f2:	602b      	str	r3, [r5, #0]
 800b3f4:	f7f6 fc2e 	bl	8001c54 <_sbrk>
 800b3f8:	1c43      	adds	r3, r0, #1
 800b3fa:	d102      	bne.n	800b402 <_sbrk_r+0x1a>
 800b3fc:	682b      	ldr	r3, [r5, #0]
 800b3fe:	b103      	cbz	r3, 800b402 <_sbrk_r+0x1a>
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	bd38      	pop	{r3, r4, r5, pc}
 800b404:	200008d0 	.word	0x200008d0

0800b408 <_free_r>:
 800b408:	b538      	push	{r3, r4, r5, lr}
 800b40a:	4605      	mov	r5, r0
 800b40c:	2900      	cmp	r1, #0
 800b40e:	d041      	beq.n	800b494 <_free_r+0x8c>
 800b410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b414:	1f0c      	subs	r4, r1, #4
 800b416:	2b00      	cmp	r3, #0
 800b418:	bfb8      	it	lt
 800b41a:	18e4      	addlt	r4, r4, r3
 800b41c:	f7ff ff8e 	bl	800b33c <__malloc_lock>
 800b420:	4a1d      	ldr	r2, [pc, #116]	; (800b498 <_free_r+0x90>)
 800b422:	6813      	ldr	r3, [r2, #0]
 800b424:	b933      	cbnz	r3, 800b434 <_free_r+0x2c>
 800b426:	6063      	str	r3, [r4, #4]
 800b428:	6014      	str	r4, [r2, #0]
 800b42a:	4628      	mov	r0, r5
 800b42c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b430:	f7ff bf8a 	b.w	800b348 <__malloc_unlock>
 800b434:	42a3      	cmp	r3, r4
 800b436:	d908      	bls.n	800b44a <_free_r+0x42>
 800b438:	6820      	ldr	r0, [r4, #0]
 800b43a:	1821      	adds	r1, r4, r0
 800b43c:	428b      	cmp	r3, r1
 800b43e:	bf01      	itttt	eq
 800b440:	6819      	ldreq	r1, [r3, #0]
 800b442:	685b      	ldreq	r3, [r3, #4]
 800b444:	1809      	addeq	r1, r1, r0
 800b446:	6021      	streq	r1, [r4, #0]
 800b448:	e7ed      	b.n	800b426 <_free_r+0x1e>
 800b44a:	461a      	mov	r2, r3
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	b10b      	cbz	r3, 800b454 <_free_r+0x4c>
 800b450:	42a3      	cmp	r3, r4
 800b452:	d9fa      	bls.n	800b44a <_free_r+0x42>
 800b454:	6811      	ldr	r1, [r2, #0]
 800b456:	1850      	adds	r0, r2, r1
 800b458:	42a0      	cmp	r0, r4
 800b45a:	d10b      	bne.n	800b474 <_free_r+0x6c>
 800b45c:	6820      	ldr	r0, [r4, #0]
 800b45e:	4401      	add	r1, r0
 800b460:	1850      	adds	r0, r2, r1
 800b462:	4283      	cmp	r3, r0
 800b464:	6011      	str	r1, [r2, #0]
 800b466:	d1e0      	bne.n	800b42a <_free_r+0x22>
 800b468:	6818      	ldr	r0, [r3, #0]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	6053      	str	r3, [r2, #4]
 800b46e:	4408      	add	r0, r1
 800b470:	6010      	str	r0, [r2, #0]
 800b472:	e7da      	b.n	800b42a <_free_r+0x22>
 800b474:	d902      	bls.n	800b47c <_free_r+0x74>
 800b476:	230c      	movs	r3, #12
 800b478:	602b      	str	r3, [r5, #0]
 800b47a:	e7d6      	b.n	800b42a <_free_r+0x22>
 800b47c:	6820      	ldr	r0, [r4, #0]
 800b47e:	1821      	adds	r1, r4, r0
 800b480:	428b      	cmp	r3, r1
 800b482:	bf04      	itt	eq
 800b484:	6819      	ldreq	r1, [r3, #0]
 800b486:	685b      	ldreq	r3, [r3, #4]
 800b488:	6063      	str	r3, [r4, #4]
 800b48a:	bf04      	itt	eq
 800b48c:	1809      	addeq	r1, r1, r0
 800b48e:	6021      	streq	r1, [r4, #0]
 800b490:	6054      	str	r4, [r2, #4]
 800b492:	e7ca      	b.n	800b42a <_free_r+0x22>
 800b494:	bd38      	pop	{r3, r4, r5, pc}
 800b496:	bf00      	nop
 800b498:	200008c8 	.word	0x200008c8

0800b49c <_malloc_usable_size_r>:
 800b49c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4a0:	1f18      	subs	r0, r3, #4
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	bfbc      	itt	lt
 800b4a6:	580b      	ldrlt	r3, [r1, r0]
 800b4a8:	18c0      	addlt	r0, r0, r3
 800b4aa:	4770      	bx	lr

0800b4ac <_init>:
 800b4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ae:	bf00      	nop
 800b4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4b2:	bc08      	pop	{r3}
 800b4b4:	469e      	mov	lr, r3
 800b4b6:	4770      	bx	lr

0800b4b8 <_fini>:
 800b4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ba:	bf00      	nop
 800b4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4be:	bc08      	pop	{r3}
 800b4c0:	469e      	mov	lr, r3
 800b4c2:	4770      	bx	lr
