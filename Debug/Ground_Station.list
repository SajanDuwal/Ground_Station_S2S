
Ground_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae14  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0800af54  0800af54  0001af54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b680  0800b680  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b680  0800b680  0001b680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b688  0800b688  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b688  0800b688  0001b688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b68c  0800b68c  0001b68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800b690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  20000060  0800b6f0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  0800b6f0  000207f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021900  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cf1  00000000  00000000  000419cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001eb8  00000000  00000000  000466c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001776  00000000  00000000  00048578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022165  00000000  00000000  00049cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021f71  00000000  00000000  0006be53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c443d  00000000  00000000  0008ddc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000083a0  00000000  00000000  00152204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0015a5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	0800af3c 	.word	0x0800af3c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	0800af3c 	.word	0x0800af3c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <getHDLCPacket>:
extern uint8_t temp_tx_buffer[100];

uint8_t ax_buffer[100] = { 0 };
uint8_t ax_buff_stuffed[100] = { 0 };

void getHDLCPacket(uint8_t *data, uint8_t data_len) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	70fb      	strb	r3, [r7, #3]
//		myDebug("%02x ", data[j]);
//	}
//	myDebug("\r\n");
//	myDebug("length of stuffed_packet: %d\r\n", data_len);

	uint16_t crc = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	81fb      	strh	r3, [r7, #14]
	crc = calculateCRC_CCITT_AX25(data, data_len);
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	4619      	mov	r1, r3
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 f935 	bl	80007a0 <calculateCRC_CCITT_AX25>
 8000536:	4603      	mov	r3, r0
 8000538:	81fb      	strh	r3, [r7, #14]

	temp_tx_buffer[0] = 0x7e;
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <getHDLCPacket+0xa8>)
 800053c:	227e      	movs	r2, #126	; 0x7e
 800053e:	701a      	strb	r2, [r3, #0]

	int i = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	e00e      	b.n	8000568 <getHDLCPacket+0x4c>
		temp_tx_buffer[i] = data[k];
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4413      	add	r3, r2
 8000550:	7819      	ldrb	r1, [r3, #0]
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <getHDLCPacket+0xa8>)
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	4413      	add	r3, r2
 8000558:	460a      	mov	r2, r1
 800055a:	701a      	strb	r2, [r3, #0]
		i++;
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3301      	adds	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	3301      	adds	r3, #1
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	693a      	ldr	r2, [r7, #16]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbec      	blt.n	800054a <getHDLCPacket+0x2e>
	}

	// Store CRC result in the packet array (from packet[1] to end of for loop)
	temp_tx_buffer[i] = (crc >> 8) & 0xFF; // Most significant byte
 8000570:	89fb      	ldrh	r3, [r7, #14]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	b2d9      	uxtb	r1, r3
 8000578:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <getHDLCPacket+0xa8>)
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	4413      	add	r3, r2
 800057e:	460a      	mov	r2, r1
 8000580:	701a      	strb	r2, [r3, #0]
	i++;
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	3301      	adds	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
	temp_tx_buffer[i] = crc & 0xFF;        // Least significant byte
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	b2d9      	uxtb	r1, r3
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <getHDLCPacket+0xa8>)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	4413      	add	r3, r2
 8000592:	460a      	mov	r2, r1
 8000594:	701a      	strb	r2, [r3, #0]
	i++;
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3301      	adds	r3, #1
 800059a:	617b      	str	r3, [r7, #20]

	temp_tx_buffer[i] = 0x7e;
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <getHDLCPacket+0xa8>)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	4413      	add	r3, r2
 80005a2:	227e      	movs	r2, #126	; 0x7e
 80005a4:	701a      	strb	r2, [r3, #0]
//		myDebug("%02x ", temp_tx_buffer[j]);
//	}
//	myDebug("\r\n");
//	myDebug("size of tx_buffer = %d\r\n", i + 1);

	memset(ax_buffer, '\0', sizeof(ax_buffer));
 80005a6:	2264      	movs	r2, #100	; 0x64
 80005a8:	2100      	movs	r1, #0
 80005aa:	4807      	ldr	r0, [pc, #28]	; (80005c8 <getHDLCPacket+0xac>)
 80005ac:	f00a f844 	bl	800a638 <memset>
	memset(ax_buff_stuffed, '\0', sizeof(ax_buff_stuffed));
 80005b0:	2264      	movs	r2, #100	; 0x64
 80005b2:	2100      	movs	r1, #0
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <getHDLCPacket+0xb0>)
 80005b6:	f00a f83f 	bl	800a638 <memset>

}
 80005ba:	bf00      	nop
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200001e8 	.word	0x200001e8
 80005c8:	2000007c 	.word	0x2000007c
 80005cc:	200000e0 	.word	0x200000e0

080005d0 <getAX25Packet>:

void getAX25Packet(uint8_t *infoField, uint8_t size) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]

	//destination field   9N2SI -0
	ax_buffer[0] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 80005dc:	4b2b      	ldr	r3, [pc, #172]	; (800068c <getAX25Packet+0xbc>)
 80005de:	2272      	movs	r2, #114	; 0x72
 80005e0:	701a      	strb	r2, [r3, #0]
	ax_buffer[1] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 80005e2:	4b2a      	ldr	r3, [pc, #168]	; (800068c <getAX25Packet+0xbc>)
 80005e4:	229c      	movs	r2, #156	; 0x9c
 80005e6:	705a      	strb	r2, [r3, #1]
	ax_buffer[2] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <getAX25Packet+0xbc>)
 80005ea:	2264      	movs	r2, #100	; 0x64
 80005ec:	709a      	strb	r2, [r3, #2]
	ax_buffer[3] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 80005ee:	4b27      	ldr	r3, [pc, #156]	; (800068c <getAX25Packet+0xbc>)
 80005f0:	22a6      	movs	r2, #166	; 0xa6
 80005f2:	70da      	strb	r2, [r3, #3]
	ax_buffer[4] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <getAX25Packet+0xbc>)
 80005f6:	2264      	movs	r2, #100	; 0x64
 80005f8:	711a      	strb	r2, [r3, #4]
	ax_buffer[5] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 80005fa:	4b24      	ldr	r3, [pc, #144]	; (800068c <getAX25Packet+0xbc>)
 80005fc:	2240      	movs	r2, #64	; 0x40
 80005fe:	715a      	strb	r2, [r3, #5]
	ax_buffer[6] = 0xE0; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <getAX25Packet+0xbc>)
 8000602:	22e0      	movs	r2, #224	; 0xe0
 8000604:	719a      	strb	r2, [r3, #6]

	//source field   9N2SI -0
	ax_buffer[7] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <getAX25Packet+0xbc>)
 8000608:	2272      	movs	r2, #114	; 0x72
 800060a:	71da      	strb	r2, [r3, #7]
	ax_buffer[8] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <getAX25Packet+0xbc>)
 800060e:	229c      	movs	r2, #156	; 0x9c
 8000610:	721a      	strb	r2, [r3, #8]
	ax_buffer[9] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <getAX25Packet+0xbc>)
 8000614:	2264      	movs	r2, #100	; 0x64
 8000616:	725a      	strb	r2, [r3, #9]
	ax_buffer[10] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <getAX25Packet+0xbc>)
 800061a:	22a6      	movs	r2, #166	; 0xa6
 800061c:	729a      	strb	r2, [r3, #10]
	ax_buffer[11] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <getAX25Packet+0xbc>)
 8000620:	2264      	movs	r2, #100	; 0x64
 8000622:	72da      	strb	r2, [r3, #11]
	ax_buffer[12] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <getAX25Packet+0xbc>)
 8000626:	2240      	movs	r2, #64	; 0x40
 8000628:	731a      	strb	r2, [r3, #12]
	ax_buffer[13] = 0x61; //	0b011SSID1, SSID->0000 and LSB is set to 1 if this is the last address, HEX->0x61
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <getAX25Packet+0xbc>)
 800062c:	2261      	movs	r2, #97	; 0x61
 800062e:	735a      	strb	r2, [r3, #13]

	//control bit
	ax_buffer[14] = 0x03; //  Unnumbered Information Frame, AX.25 is always 0b00000011 i.e 0x03 in HEX
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <getAX25Packet+0xbc>)
 8000632:	2203      	movs	r2, #3
 8000634:	739a      	strb	r2, [r3, #14]

	//protocol identifier
	ax_buffer[15] = 0xF0; //	No Layer-3 Implemented so, 0b11110000 i.e 0xF0 in HEX
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <getAX25Packet+0xbc>)
 8000638:	22f0      	movs	r2, #240	; 0xf0
 800063a:	73da      	strb	r2, [r3, #15]

	int i = 16;
 800063c:	2310      	movs	r3, #16
 800063e:	617b      	str	r3, [r7, #20]

	for (int k = 0; k < size; k++) {
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	e00e      	b.n	8000664 <getAX25Packet+0x94>
		ax_buffer[i] = infoField[k];
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	7819      	ldrb	r1, [r3, #0]
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <getAX25Packet+0xbc>)
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < size; k++) {
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	3301      	adds	r3, #1
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbec      	blt.n	8000646 <getAX25Packet+0x76>
//		myDebug("%02x ", ax_buffer[j]);
//	}
//	myDebug("\r\n");

	// Bit Stuffing
	int stuffed_size = bit_stuffing(ax_buffer, ax_buff_stuffed, i);
 800066c:	697a      	ldr	r2, [r7, #20]
 800066e:	4908      	ldr	r1, [pc, #32]	; (8000690 <getAX25Packet+0xc0>)
 8000670:	4806      	ldr	r0, [pc, #24]	; (800068c <getAX25Packet+0xbc>)
 8000672:	f000 f8d4 	bl	800081e <bit_stuffing>
 8000676:	60f8      	str	r0, [r7, #12]
//		myDebug("%02x ", tem[j]);
//	}
//	myDebug("\r\n");
//	myDebug("length of de-stuffed_packet: %d\r\n", destuffed_size);

	getHDLCPacket(ax_buff_stuffed, stuffed_size);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	4619      	mov	r1, r3
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <getAX25Packet+0xc0>)
 8000680:	f7ff ff4c 	bl	800051c <getHDLCPacket>
}
 8000684:	bf00      	nop
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000007c 	.word	0x2000007c
 8000690:	200000e0 	.word	0x200000e0

08000694 <myDebug>:
 *      Author: sajanduwal
 */

#include "com_debug.h"

void myDebug(const char *fmt, ...) {
 8000694:	b40f      	push	{r0, r1, r2, r3}
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	2164      	movs	r1, #100	; 0x64
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <myDebug+0x40>)
 80006aa:	f009 ffb7 	bl	800a61c <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 80006ae:	4809      	ldr	r0, [pc, #36]	; (80006d4 <myDebug+0x40>)
 80006b0:	f000 f814 	bl	80006dc <bufferSize>
 80006b4:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	4905      	ldr	r1, [pc, #20]	; (80006d4 <myDebug+0x40>)
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <myDebug+0x44>)
 80006c2:	f004 fe2f 	bl	8005324 <HAL_UART_Transmit>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006d0:	b004      	add	sp, #16
 80006d2:	4770      	bx	lr
 80006d4:	20000144 	.word	0x20000144
 80006d8:	20000390 	.word	0x20000390

080006dc <bufferSize>:

int bufferSize(char *buffer) {
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80006e8:	e002      	b.n	80006f0 <bufferSize+0x14>
		i++;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f6      	bne.n	80006ea <bufferSize+0xe>
	return i;
 80006fc:	68fb      	ldr	r3, [r7, #12]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <delay_us>:

void delay_us(uint32_t us) {
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <delay_us+0x30>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000718:	e002      	b.n	8000720 <delay_us+0x18>
		delay_counter_disp++;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	3301      	adds	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <delay_us+0x30>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f6      	bhi.n	800071a <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 800072c:	bf00      	nop
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000340 	.word	0x20000340

0800073c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800074a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4313      	orrs	r3, r2
 8000752:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000760:	68fb      	ldr	r3, [r7, #12]
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000770:	2004      	movs	r0, #4
 8000772:	f7ff ffe3 	bl	800073c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff ffe0 	bl	800073c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	200b      	movs	r0, #11
 8000782:	f001 fc22 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000786:	200b      	movs	r0, #11
 8000788:	f001 fc39 	bl	8001ffe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	200c      	movs	r0, #12
 8000792:	f001 fc1a 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000796:	200c      	movs	r0, #12
 8000798:	f001 fc31 	bl	8001ffe <HAL_NVIC_EnableIRQ>

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <calculateCRC_CCITT_AX25>:


#include "error_handler.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 80007a0:	b480      	push	{r7}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 80007aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ae:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 80007b0:	f241 0321 	movw	r3, #4129	; 0x1021
 80007b4:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	e026      	b.n	800080a <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007cc:	4053      	eors	r3, r2
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e012      	b.n	80007fe <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 80007d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	da08      	bge.n	80007f2 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 80007e0:	8afb      	ldrh	r3, [r7, #22]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007ea:	4053      	eors	r3, r2
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	82fb      	strh	r3, [r7, #22]
 80007f0:	e002      	b.n	80007f8 <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 80007f2:	8afb      	ldrh	r3, [r7, #22]
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b07      	cmp	r3, #7
 8000802:	dde9      	ble.n	80007d8 <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	3301      	adds	r3, #1
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	429a      	cmp	r2, r3
 8000810:	d3d4      	bcc.n	80007bc <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 8000812:	8afb      	ldrh	r3, [r7, #22]
}
 8000814:	4618      	mov	r0, r3
 8000816:	371c      	adds	r7, #28
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <bit_stuffing>:
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
	return crcReg;
}

int bit_stuffing(uint8_t *data, uint8_t *output_data, int length) {
 800081e:	b480      	push	{r7}
 8000820:	b08f      	sub	sp, #60	; 0x3c
 8000822:	af00      	add	r7, sp, #0
 8000824:	60f8      	str	r0, [r7, #12]
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_count = 0; // Count of consecutive 1 bits
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t current_byte = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int bit_pos = 7;
 8000838:	2307      	movs	r3, #7
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
	int stuffed_size = 0; // Track size of output data after bit stuffing
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
	int bits_stuffed = 0; // Number of bits stuffed since last size increase
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]

	//myDebug("Error handler: before Bit stuffing \n");

	for (int i = 0; i < length; i++) {
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
 8000848:	e078      	b.n	800093c <bit_stuffing+0x11e>
		for (int bit = 7; bit >= 0; bit--) {
 800084a:	2307      	movs	r3, #7
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	e06f      	b.n	8000930 <bit_stuffing+0x112>
			int bit_val = (data[i] >> bit) & 1;
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	fa42 f303 	asr.w	r3, r2, r3
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	617b      	str	r3, [r7, #20]

//			myDebug("%d ", bit_val);

			current_byte |= (bit_val << bit_pos);
 8000866:	697a      	ldr	r2, [r7, #20]
 8000868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	b25a      	sxtb	r2, r3
 8000870:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000874:	4313      	orrs	r3, r2
 8000876:	b25b      	sxtb	r3, r3
 8000878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			bit_pos--;
 800087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087e:	3b01      	subs	r3, #1
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28

			if (bit_val) {
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d02f      	beq.n	80008e8 <bit_stuffing+0xca>
				bit_count++;
 8000888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800088a:	3301      	adds	r3, #1
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
				if (bit_count == 5) {
 800088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000890:	2b05      	cmp	r3, #5
 8000892:	d12b      	bne.n	80008ec <bit_stuffing+0xce>
					// Insert a 0 bit after five consecutive 1s
					if (bit_pos < 0) {
 8000894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000896:	2b00      	cmp	r3, #0
 8000898:	da10      	bge.n	80008bc <bit_stuffing+0x9e>
						output_data[out_index++] = current_byte;
 800089a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089c:	1c5a      	adds	r2, r3, #1
 800089e:	637a      	str	r2, [r7, #52]	; 0x34
 80008a0:	461a      	mov	r2, r3
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	4413      	add	r3, r2
 80008a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80008aa:	701a      	strb	r2, [r3, #0]
						stuffed_size++;
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	3301      	adds	r3, #1
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
						current_byte = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						bit_pos = 7;
 80008b8:	2307      	movs	r3, #7
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					current_byte &= ~(1 << bit_pos);
 80008bc:	2201      	movs	r2, #1
 80008be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	b25a      	sxtb	r2, r3
 80008ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80008ce:	4013      	ands	r3, r2
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					bit_pos--;
 80008d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d8:	3b01      	subs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
					bits_stuffed++;
 80008dc:	6a3b      	ldr	r3, [r7, #32]
 80008de:	3301      	adds	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
					bit_count = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
 80008e6:	e001      	b.n	80008ec <bit_stuffing+0xce>
				}
			} else {
				bit_count = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (bit_pos < 0) {
 80008ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da10      	bge.n	8000914 <bit_stuffing+0xf6>
				output_data[out_index++] = current_byte;
 80008f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	637a      	str	r2, [r7, #52]	; 0x34
 80008f8:	461a      	mov	r2, r3
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	4413      	add	r3, r2
 80008fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000902:	701a      	strb	r2, [r3, #0]
				stuffed_size++;
 8000904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000906:	3301      	adds	r3, #1
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
				current_byte = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				bit_pos = 7;
 8000910:	2307      	movs	r3, #7
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			// Check if we've stuffed enough bits to increase size
			if (bits_stuffed >= 9 && bit_pos >= 0) {
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	2b08      	cmp	r3, #8
 8000918:	dd07      	ble.n	800092a <bit_stuffing+0x10c>
 800091a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091c:	2b00      	cmp	r3, #0
 800091e:	db04      	blt.n	800092a <bit_stuffing+0x10c>
				stuffed_size++;
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	3301      	adds	r3, #1
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
				bits_stuffed = 0; // Reset bits_stuffed after increasing size
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	3b01      	subs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	2b00      	cmp	r3, #0
 8000934:	da8c      	bge.n	8000850 <bit_stuffing+0x32>
	for (int i = 0; i < length; i++) {
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3301      	adds	r3, #1
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	69fa      	ldr	r2, [r7, #28]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	db82      	blt.n	800084a <bit_stuffing+0x2c>
			}
		}
	}
	//myDebug("\n");

	if (bit_pos < 7) {
 8000944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000946:	2b06      	cmp	r3, #6
 8000948:	dc0b      	bgt.n	8000962 <bit_stuffing+0x144>
		output_data[out_index++] = current_byte;
 800094a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	637a      	str	r2, [r7, #52]	; 0x34
 8000950:	461a      	mov	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	4413      	add	r3, r2
 8000956:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800095a:	701a      	strb	r2, [r3, #0]
		stuffed_size++;
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	3301      	adds	r3, #1
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	return out_index; // Return the size of output data after bit stuffing
 8000962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000964:	4618      	mov	r0, r3
 8000966:	373c      	adds	r7, #60	; 0x3c
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr

0800096e <bit_destuffing>:

int bit_destuffing(uint8_t *data, uint8_t *output_data, int length) {
 800096e:	b480      	push	{r7}
 8000970:	b08d      	sub	sp, #52	; 0x34
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
    int out_index = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int bit_count = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t current_byte = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int bit_pos = 7;
 8000988:	2307      	movs	r3, #7
 800098a:	623b      	str	r3, [r7, #32]

    for (int i = 0; i < length; i++) {
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
 8000990:	e052      	b.n	8000a38 <bit_destuffing+0xca>
        for (int bit = 7; bit >= 0; bit--) {
 8000992:	2307      	movs	r3, #7
 8000994:	61bb      	str	r3, [r7, #24]
 8000996:	e049      	b.n	8000a2c <bit_destuffing+0xbe>
            int bit_val = (data[i] >> bit) & 1;
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	4413      	add	r3, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	fa42 f303 	asr.w	r3, r2, r3
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	617b      	str	r3, [r7, #20]

            if (bit_val) {
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d011      	beq.n	80009d8 <bit_destuffing+0x6a>
                bit_count++;
 80009b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b6:	3301      	adds	r3, #1
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
                current_byte |= (bit_val << bit_pos);
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	6a3b      	ldr	r3, [r7, #32]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	b25a      	sxtb	r2, r3
 80009c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80009c8:	4313      	orrs	r3, r2
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                bit_pos--;
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
 80009d6:	e015      	b.n	8000a04 <bit_destuffing+0x96>
            } else {
                if (bit_count == 5) {
 80009d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009da:	2b05      	cmp	r3, #5
 80009dc:	d102      	bne.n	80009e4 <bit_destuffing+0x76>
                    // Skip this bit as it is a stuffed bit
                    bit_count = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
                    continue;
 80009e2:	e020      	b.n	8000a26 <bit_destuffing+0xb8>
                } else {
                    bit_count = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
                    current_byte |= (bit_val << bit_pos);
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	b25a      	sxtb	r2, r3
 80009f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80009f6:	4313      	orrs	r3, r2
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    bit_pos--;
 80009fe:	6a3b      	ldr	r3, [r7, #32]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
                }
            }

            if (bit_pos < 0) {
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	da0d      	bge.n	8000a26 <bit_destuffing+0xb8>
                output_data[out_index++] = current_byte;
 8000a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000a10:	461a      	mov	r2, r3
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	4413      	add	r3, r2
 8000a16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000a1a:	701a      	strb	r2, [r3, #0]
                current_byte = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                bit_pos = 7;
 8000a22:	2307      	movs	r3, #7
 8000a24:	623b      	str	r3, [r7, #32]
        for (int bit = 7; bit >= 0; bit--) {
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	dab2      	bge.n	8000998 <bit_destuffing+0x2a>
    for (int i = 0; i < length; i++) {
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3301      	adds	r3, #1
 8000a36:	61fb      	str	r3, [r7, #28]
 8000a38:	69fa      	ldr	r2, [r7, #28]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dba8      	blt.n	8000992 <bit_destuffing+0x24>
            }
        }
    }

    // Ensure the last byte is written if it's partially filled
    if (bit_pos < 7) {
 8000a40:	6a3b      	ldr	r3, [r7, #32]
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	dc08      	bgt.n	8000a58 <bit_destuffing+0xea>
        output_data[out_index++] = current_byte;
 8000a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	4413      	add	r3, r2
 8000a52:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000a56:	701a      	strb	r2, [r3, #0]
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

    return out_index;
 8000a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3734      	adds	r7, #52	; 0x34
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4013      	ands	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a88:	68fb      	ldr	r3, [r7, #12]
}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ffdb 	bl	8000a64 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ffd8 	bl	8000a64 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab4:	2004      	movs	r0, #4
 8000ab6:	f7ff ffd5 	bl	8000a64 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000ac0:	481f      	ldr	r0, [pc, #124]	; (8000b40 <MX_GPIO_Init+0xac>)
 8000ac2:	f001 ff99 	bl	80029f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2138      	movs	r1, #56	; 0x38
 8000aca:	481e      	ldr	r0, [pc, #120]	; (8000b44 <MX_GPIO_Init+0xb0>)
 8000acc:	f001 ff94 	bl	80029f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000ad0:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4816      	ldr	r0, [pc, #88]	; (8000b40 <MX_GPIO_Init+0xac>)
 8000ae8:	f001 fe26 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000aec:	2338      	movs	r3, #56	; 0x38
 8000aee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4810      	ldr	r0, [pc, #64]	; (8000b44 <MX_GPIO_Init+0xb0>)
 8000b02:	f001 fe19 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000b06:	2303      	movs	r3, #3
 8000b08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b0a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1c:	f001 fe0c 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000b20:	2340      	movs	r3, #64	; 0x40
 8000b22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_GPIO_Init+0xb0>)
 8000b34:	f001 fe00 	bl	8002738 <HAL_GPIO_Init>

}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	48000400 	.word	0x48000400
 8000b44:	48000800 	.word	0x48000800

08000b48 <countsDataBetweenFlags>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int countsDataBetweenFlags(uint8_t *data, int data_length) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b087      	sub	sp, #28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
	int found_first_7e = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
	int start_index = 0, end_index = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < data_length; i++) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	e013      	b.n	8000b8c <countsDataBetweenFlags+0x44>
		if (data[i] == 0x7e) {
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b7e      	cmp	r3, #126	; 0x7e
 8000b6e:	d10a      	bne.n	8000b86 <countsDataBetweenFlags+0x3e>
			if (!found_first_7e) {
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d104      	bne.n	8000b80 <countsDataBetweenFlags+0x38>
				found_first_7e = 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
				start_index = i;
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	e002      	b.n	8000b86 <countsDataBetweenFlags+0x3e>
			} else {
				end_index = i;
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60fb      	str	r3, [r7, #12]
				break;
 8000b84:	e006      	b.n	8000b94 <countsDataBetweenFlags+0x4c>
	for (int i = 0; i < data_length; i++) {
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68ba      	ldr	r2, [r7, #8]
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbe7      	blt.n	8000b64 <countsDataBetweenFlags+0x1c>
			}
		}
	}

	if (end_index > start_index) {
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dd04      	ble.n	8000ba6 <countsDataBetweenFlags+0x5e>
		return end_index - start_index + 1;
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	e001      	b.n	8000baa <countsDataBetweenFlags+0x62>
	} else {
		return -1; // Return -1 if two 0x7E flags are not found
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	371c      	adds	r7, #28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <setPacketParams>:

void setPacketParams(uint8_t buffer_length) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <setPacketParams+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = buffer_length;
 8000bc4:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <setPacketParams+0x50>)
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	7213      	strb	r3, [r2, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <setPacketParams+0x50>)
 8000bcc:	2208      	movs	r2, #8
 8000bce:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <setPacketParams+0x50>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <setPacketParams+0x50>)
 8000bd8:	2218      	movs	r2, #24
 8000bda:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <setPacketParams+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <setPacketParams+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <setPacketParams+0x50>)
 8000bea:	22f2      	movs	r2, #242	; 0xf2
 8000bec:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <setPacketParams+0x50>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	729a      	strb	r2, [r3, #10]
	SUBGRF_SetPacketParams(&pkt_params);
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <setPacketParams+0x50>)
 8000bf6:	f008 fce5 	bl	80095c4 <SUBGRF_SetPacketParams>

}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200001a8 	.word	0x200001a8

08000c08 <setModulationParams>:
void setModulationParams(unsigned long bitRate, unsigned long fDev) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <setModulationParams+0x38>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <setModulationParams+0x38>)
 8000c1a:	220d      	movs	r2, #13
 8000c1c:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = bitRate;
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <setModulationParams+0x38>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6053      	str	r3, [r2, #4]
	mod_params.Params.Gfsk.Fdev = fDev;
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <setModulationParams+0x38>)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	6093      	str	r3, [r2, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <setModulationParams+0x38>)
 8000c2c:	220b      	movs	r2, #11
 8000c2e:	731a      	strb	r2, [r3, #12]
	SUBGRF_SetModulationParams(&mod_params);
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <setModulationParams+0x38>)
 8000c32:	f008 fbf5 	bl	8009420 <SUBGRF_SetModulationParams>

}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200001bc 	.word	0x200001bc

08000c44 <radioConfig>:

void radioConfig(uint8_t *buffer, uint8_t buffer_len) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000c50:	2100      	movs	r1, #0
 8000c52:	2000      	movs	r0, #0
 8000c54:	f008 fd54 	bl	8009700 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(buffer, buffer_len);
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f007 ff35 	bl	8008acc <SUBGRF_SetPayload>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000c62:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <radioConfig+0x74>)
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	4618      	mov	r0, r3
 8000c76:	f007 ff6e 	bl	8008b56 <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000c7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000c7e:	f007 ffb9 	bl	8008bf4 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000c82:	2301      	movs	r3, #1
 8000c84:	2201      	movs	r2, #1
 8000c86:	2100      	movs	r1, #0
 8000c88:	2007      	movs	r0, #7
 8000c8a:	f008 fa11 	bl	80090b0 <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8000c8e:	2202      	movs	r2, #2
 8000c90:	210e      	movs	r1, #14
 8000c92:	2001      	movs	r0, #1
 8000c94:	f008 faf6 	bl	8009284 <SUBGRF_SetTxParams>

	SUBGRF_Init(DioIrqHndlr);
 8000c98:	4808      	ldr	r0, [pc, #32]	; (8000cbc <radioConfig+0x78>)
 8000c9a:	f007 fec5 	bl	8008a28 <SUBGRF_Init>
	SUBGRF_SetDioIrqParams(
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f240 210f 	movw	r1, #527	; 0x20f
 8000ca6:	f240 200f 	movw	r0, #527	; 0x20f
 8000caa:	f008 fa23 	bl	80090f4 <SUBGRF_SetDioIrqParams>
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);
}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	0800af54 	.word	0x0800af54
 8000cbc:	08001149 	.word	0x08001149

08000cc0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a2a      	ldr	r2, [pc, #168]	; (8000d74 <HAL_UART_RxCpltCallback+0xb4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d14d      	bne.n	8000d6c <HAL_UART_RxCpltCallback+0xac>

		uint8_t header = 0x00;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73fb      	strb	r3, [r7, #15]
		if (main_cmd[0] == header || main_cmd[0] != 0x53) {
 8000cd4:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <HAL_UART_RxCpltCallback+0xb8>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	7bfa      	ldrb	r2, [r7, #15]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d003      	beq.n	8000ce6 <HAL_UART_RxCpltCallback+0x26>
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <HAL_UART_RxCpltCallback+0xb8>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b53      	cmp	r3, #83	; 0x53
 8000ce4:	d011      	beq.n	8000d0a <HAL_UART_RxCpltCallback+0x4a>

			for (int loop1 = 0; loop1 < sizeof(main_cmd); loop1++) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e00b      	b.n	8000d04 <HAL_UART_RxCpltCallback+0x44>
				main_cmd[loop1] = main_cmd[loop1 + 1];
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	4a21      	ldr	r2, [pc, #132]	; (8000d78 <HAL_UART_RxCpltCallback+0xb8>)
 8000cf2:	5cd1      	ldrb	r1, [r2, r3]
 8000cf4:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <HAL_UART_RxCpltCallback+0xb8>)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	460a      	mov	r2, r1
 8000cfc:	701a      	strb	r2, [r3, #0]
			for (int loop1 = 0; loop1 < sizeof(main_cmd); loop1++) {
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	2b0c      	cmp	r3, #12
 8000d08:	d9f0      	bls.n	8000cec <HAL_UART_RxCpltCallback+0x2c>
			}
		}

		myDebug("\n-->Main command Received: 0x%x\r\n", main_cmd);
 8000d0a:	491b      	ldr	r1, [pc, #108]	; (8000d78 <HAL_UART_RxCpltCallback+0xb8>)
 8000d0c:	481b      	ldr	r0, [pc, #108]	; (8000d7c <HAL_UART_RxCpltCallback+0xbc>)
 8000d0e:	f7ff fcc1 	bl	8000694 <myDebug>

		if (sizeof(main_cmd) == main_cmd_len) {
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <HAL_UART_RxCpltCallback+0xc0>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b0d      	cmp	r3, #13
 8000d18:	d11a      	bne.n	8000d50 <HAL_UART_RxCpltCallback+0x90>
//			myDebug("-->Command ACK: 0x%x\r\n", main_cmd);
			for (int i = 0; i < main_cmd_len; i++) {
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	e00a      	b.n	8000d36 <HAL_UART_RxCpltCallback+0x76>
				myDebug("%02x ", main_cmd[i]);
 8000d20:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <HAL_UART_RxCpltCallback+0xb8>)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	4413      	add	r3, r2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4816      	ldr	r0, [pc, #88]	; (8000d84 <HAL_UART_RxCpltCallback+0xc4>)
 8000d2c:	f7ff fcb2 	bl	8000694 <myDebug>
			for (int i = 0; i < main_cmd_len; i++) {
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	3301      	adds	r3, #1
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_UART_RxCpltCallback+0xc0>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	dbee      	blt.n	8000d20 <HAL_UART_RxCpltCallback+0x60>
			}
			myDebug("\r\n");
 8000d42:	4811      	ldr	r0, [pc, #68]	; (8000d88 <HAL_UART_RxCpltCallback+0xc8>)
 8000d44:	f7ff fca6 	bl	8000694 <myDebug>
			TX_FLAG = 1;
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <HAL_UART_RxCpltCallback+0xcc>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
			myDebug("-->Command Not ACK: 0x%x\r\n", main_cmd);
			memset(main_cmd, '\0', main_cmd_len);
			TX_FLAG = 0;
		}
	}
}
 8000d4e:	e00d      	b.n	8000d6c <HAL_UART_RxCpltCallback+0xac>
			myDebug("-->Command Not ACK: 0x%x\r\n", main_cmd);
 8000d50:	4909      	ldr	r1, [pc, #36]	; (8000d78 <HAL_UART_RxCpltCallback+0xb8>)
 8000d52:	480f      	ldr	r0, [pc, #60]	; (8000d90 <HAL_UART_RxCpltCallback+0xd0>)
 8000d54:	f7ff fc9e 	bl	8000694 <myDebug>
			memset(main_cmd, '\0', main_cmd_len);
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_UART_RxCpltCallback+0xc0>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_UART_RxCpltCallback+0xb8>)
 8000d62:	f009 fc69 	bl	800a638 <memset>
			TX_FLAG = 0;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_UART_RxCpltCallback+0xcc>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000390 	.word	0x20000390
 8000d78:	200001d8 	.word	0x200001d8
 8000d7c:	0800af5c 	.word	0x0800af5c
 8000d80:	20000000 	.word	0x20000000
 8000d84:	0800af80 	.word	0x0800af80
 8000d88:	0800af88 	.word	0x0800af88
 8000d8c:	20000320 	.word	0x20000320
 8000d90:	0800af8c 	.word	0x0800af8c

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9a:	f000 ffd3 	bl	8001d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9e:	f000 f973 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da2:	f7ff fe77 	bl	8000a94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000da6:	f7ff fce1 	bl	800076c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000daa:	f000 fe99 	bl	8001ae0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000dae:	f000 fd89 	bl	80018c4 <MX_TIM2_Init>
  MX_SubGHz_Phy_Init();
 8000db2:	f009 f882 	bl	8009eba <MX_SubGHz_Phy_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 8000db6:	488f      	ldr	r0, [pc, #572]	; (8000ff4 <main+0x260>)
 8000db8:	f003 fe76 	bl	8004aa8 <HAL_TIM_Base_Start>

	myDebug("########## Slippers2Sat Ground Station: BEGIN ##########\r\n");
 8000dbc:	488e      	ldr	r0, [pc, #568]	; (8000ff8 <main+0x264>)
 8000dbe:	f7ff fc69 	bl	8000694 <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 8000dc2:	488e      	ldr	r0, [pc, #568]	; (8000ffc <main+0x268>)
 8000dc4:	f7ff fc66 	bl	8000694 <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 8000dc8:	488d      	ldr	r0, [pc, #564]	; (8001000 <main+0x26c>)
 8000dca:	f7ff fc63 	bl	8000694 <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz, UPLINK FREQ: %lu Hz\r\n",
 8000dce:	4a8d      	ldr	r2, [pc, #564]	; (8001004 <main+0x270>)
 8000dd0:	498d      	ldr	r1, [pc, #564]	; (8001008 <main+0x274>)
 8000dd2:	488e      	ldr	r0, [pc, #568]	; (800100c <main+0x278>)
 8000dd4:	f7ff fc5e 	bl	8000694 <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 8000dd8:	488d      	ldr	r0, [pc, #564]	; (8001010 <main+0x27c>)
 8000dda:	f7ff fc5b 	bl	8000694 <myDebug>
	myDebug(
 8000dde:	230e      	movs	r3, #14
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2301      	movs	r3, #1
 8000de4:	2200      	movs	r2, #0
 8000de6:	2107      	movs	r1, #7
 8000de8:	488a      	ldr	r0, [pc, #552]	; (8001014 <main+0x280>)
 8000dea:	f7ff fc53 	bl	8000694 <myDebug>
			"POWER CONFIG:::: \n"
					"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug(
 8000dee:	488a      	ldr	r0, [pc, #552]	; (8001018 <main+0x284>)
 8000df0:	f7ff fc50 	bl	8000694 <myDebug>
			"\n########## Operation Starts, Perform any one operation: ##########\r\n");
	myDebug("1. Transmit Command of 13 bytes\r\n");
 8000df4:	4889      	ldr	r0, [pc, #548]	; (800101c <main+0x288>)
 8000df6:	f7ff fc4d 	bl	8000694 <myDebug>
	myDebug("2. Wait to receive beacon from Satellite\r\n");
 8000dfa:	4889      	ldr	r0, [pc, #548]	; (8001020 <main+0x28c>)
 8000dfc:	f7ff fc4a 	bl	8000694 <myDebug>

	setPacketParams(rx_buffer_len);
 8000e00:	4b88      	ldr	r3, [pc, #544]	; (8001024 <main+0x290>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fed5 	bl	8000bb4 <setPacketParams>
	setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 8000e0a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8000e0e:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 8000e12:	f7ff fef9 	bl	8000c08 <setModulationParams>
	radioConfig(rx_buffer, rx_buffer_len);
 8000e16:	4b83      	ldr	r3, [pc, #524]	; (8001024 <main+0x290>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4882      	ldr	r0, [pc, #520]	; (8001028 <main+0x294>)
 8000e1e:	f7ff ff11 	bl	8000c44 <radioConfig>

	myDebug("\n########## RX Configuration: ##########\n");
 8000e22:	4882      	ldr	r0, [pc, #520]	; (800102c <main+0x298>)
 8000e24:	f7ff fc36 	bl	8000694 <myDebug>

	myDebug("FREQUENCY MODS: Downlink FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 8000e28:	4977      	ldr	r1, [pc, #476]	; (8001008 <main+0x274>)
 8000e2a:	4881      	ldr	r0, [pc, #516]	; (8001030 <main+0x29c>)
 8000e2c:	f7ff fc32 	bl	8000694 <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8000e30:	4b80      	ldr	r3, [pc, #512]	; (8001034 <main+0x2a0>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	4619      	mov	r1, r3
 8000e36:	4880      	ldr	r0, [pc, #512]	; (8001038 <main+0x2a4>)
 8000e38:	f7ff fc2c 	bl	8000694 <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8000e3c:	4b7d      	ldr	r3, [pc, #500]	; (8001034 <main+0x2a0>)
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	4619      	mov	r1, r3
 8000e42:	487e      	ldr	r0, [pc, #504]	; (800103c <main+0x2a8>)
 8000e44:	f7ff fc26 	bl	8000694 <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 8000e48:	4b7a      	ldr	r3, [pc, #488]	; (8001034 <main+0x2a0>)
 8000e4a:	7b5b      	ldrb	r3, [r3, #13]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	487c      	ldr	r0, [pc, #496]	; (8001040 <main+0x2ac>)
 8000e50:	f7ff fc20 	bl	8000694 <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000e54:	4b7b      	ldr	r3, [pc, #492]	; (8001044 <main+0x2b0>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	487b      	ldr	r0, [pc, #492]	; (8001048 <main+0x2b4>)
 8000e5c:	f7ff fc1a 	bl	8000694 <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 8000e60:	4b78      	ldr	r3, [pc, #480]	; (8001044 <main+0x2b0>)
 8000e62:	7a1b      	ldrb	r3, [r3, #8]
 8000e64:	4619      	mov	r1, r3
 8000e66:	4879      	ldr	r0, [pc, #484]	; (800104c <main+0x2b8>)
 8000e68:	f7ff fc14 	bl	8000694 <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 8000e6c:	4b75      	ldr	r3, [pc, #468]	; (8001044 <main+0x2b0>)
 8000e6e:	885b      	ldrh	r3, [r3, #2]
 8000e70:	4619      	mov	r1, r3
 8000e72:	4877      	ldr	r0, [pc, #476]	; (8001050 <main+0x2bc>)
 8000e74:	f7ff fc0e 	bl	8000694 <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 8000e78:	4b72      	ldr	r3, [pc, #456]	; (8001044 <main+0x2b0>)
 8000e7a:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4875      	ldr	r0, [pc, #468]	; (8001054 <main+0x2c0>)
 8000e80:	f7ff fc08 	bl	8000694 <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8000e84:	4b6f      	ldr	r3, [pc, #444]	; (8001044 <main+0x2b0>)
 8000e86:	79db      	ldrb	r3, [r3, #7]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4873      	ldr	r0, [pc, #460]	; (8001058 <main+0x2c4>)
 8000e8c:	f7ff fc02 	bl	8000694 <myDebug>
	myDebug("______________*******************______________\r\n");
 8000e90:	4872      	ldr	r0, [pc, #456]	; (800105c <main+0x2c8>)
 8000e92:	f7ff fbff 	bl	8000694 <myDebug>

	SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8000e96:	485c      	ldr	r0, [pc, #368]	; (8001008 <main+0x274>)
 8000e98:	f008 f988 	bl	80091ac <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f008 fdcc 	bl	8009a3c <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 8000ea4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000ea8:	f007 ffac 	bl	8008e04 <SUBGRF_SetRxBoosted>

	HAL_UART_Receive_DMA(&huart2, main_cmd, main_cmd_len);
 8000eac:	4b6c      	ldr	r3, [pc, #432]	; (8001060 <main+0x2cc>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	496b      	ldr	r1, [pc, #428]	; (8001064 <main+0x2d0>)
 8000eb6:	486c      	ldr	r0, [pc, #432]	; (8001068 <main+0x2d4>)
 8000eb8:	f004 faba 	bl	8005430 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8000ebc:	f009 f805 	bl	8009eca <MX_SubGHz_Phy_Process>

    /* USER CODE BEGIN 3 */

		delay_us(500000);
 8000ec0:	486a      	ldr	r0, [pc, #424]	; (800106c <main+0x2d8>)
 8000ec2:	f7ff fc21 	bl	8000708 <delay_us>

		if (TX_FLAG) {
 8000ec6:	4b6a      	ldr	r3, [pc, #424]	; (8001070 <main+0x2dc>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8089 	beq.w	8000fe2 <main+0x24e>

			getAX25Packet(main_cmd, main_cmd_len);
 8000ed0:	4b63      	ldr	r3, [pc, #396]	; (8001060 <main+0x2cc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4863      	ldr	r0, [pc, #396]	; (8001064 <main+0x2d0>)
 8000ed8:	f7ff fb7a 	bl	80005d0 <getAX25Packet>

			tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 8000edc:	2164      	movs	r1, #100	; 0x64
 8000ede:	4865      	ldr	r0, [pc, #404]	; (8001074 <main+0x2e0>)
 8000ee0:	f7ff fe32 	bl	8000b48 <countsDataBetweenFlags>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a64      	ldr	r2, [pc, #400]	; (8001078 <main+0x2e4>)
 8000ee8:	6013      	str	r3, [r2, #0]
					sizeof(temp_tx_buffer));

//			myDebug("AX.25 complete GS packet ready to TX: 0x%x\r\n", temp_tx_buffer);
			for (int j = 0; j < tx_buffer_len; j++) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	e00b      	b.n	8000f08 <main+0x174>
				tx_buffer[j] = temp_tx_buffer[j];
 8000ef0:	4a60      	ldr	r2, [pc, #384]	; (8001074 <main+0x2e0>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	7819      	ldrb	r1, [r3, #0]
 8000ef8:	4a60      	ldr	r2, [pc, #384]	; (800107c <main+0x2e8>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	460a      	mov	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < tx_buffer_len; j++) {
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3301      	adds	r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <main+0x2e4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	dbee      	blt.n	8000ef0 <main+0x15c>
			}
//			myDebug("\r\n");

//			myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

			memset(main_cmd, '\0', main_cmd_len);
 8000f12:	4b53      	ldr	r3, [pc, #332]	; (8001060 <main+0x2cc>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4852      	ldr	r0, [pc, #328]	; (8001064 <main+0x2d0>)
 8000f1c:	f009 fb8c 	bl	800a638 <memset>
			memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 8000f20:	2264      	movs	r2, #100	; 0x64
 8000f22:	2100      	movs	r1, #0
 8000f24:	4853      	ldr	r0, [pc, #332]	; (8001074 <main+0x2e0>)
 8000f26:	f009 fb87 	bl	800a638 <memset>

			setPacketParams(tx_buffer_len);
 8000f2a:	4b53      	ldr	r3, [pc, #332]	; (8001078 <main+0x2e4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fe3f 	bl	8000bb4 <setPacketParams>
			setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8000f36:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000f3a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000f3e:	f7ff fe63 	bl	8000c08 <setModulationParams>
			radioConfig(tx_buffer, tx_buffer_len);
 8000f42:	4b4d      	ldr	r3, [pc, #308]	; (8001078 <main+0x2e4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4619      	mov	r1, r3
 8000f4a:	484c      	ldr	r0, [pc, #304]	; (800107c <main+0x2e8>)
 8000f4c:	f7ff fe7a 	bl	8000c44 <radioConfig>

			myDebug("########## TX Configuration: ##########\n");
 8000f50:	484b      	ldr	r0, [pc, #300]	; (8001080 <main+0x2ec>)
 8000f52:	f7ff fb9f 	bl	8000694 <myDebug>

			myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8000f56:	492b      	ldr	r1, [pc, #172]	; (8001004 <main+0x270>)
 8000f58:	484a      	ldr	r0, [pc, #296]	; (8001084 <main+0x2f0>)
 8000f5a:	f7ff fb9b 	bl	8000694 <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8000f5e:	4b35      	ldr	r3, [pc, #212]	; (8001034 <main+0x2a0>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4834      	ldr	r0, [pc, #208]	; (8001038 <main+0x2a4>)
 8000f66:	f7ff fb95 	bl	8000694 <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 8000f6a:	4b32      	ldr	r3, [pc, #200]	; (8001034 <main+0x2a0>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4832      	ldr	r0, [pc, #200]	; (800103c <main+0x2a8>)
 8000f72:	f7ff fb8f 	bl	8000694 <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 8000f76:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <main+0x2a0>)
 8000f78:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4830      	ldr	r0, [pc, #192]	; (8001040 <main+0x2ac>)
 8000f7e:	f7ff fb89 	bl	8000694 <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000f82:	4b30      	ldr	r3, [pc, #192]	; (8001044 <main+0x2b0>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4619      	mov	r1, r3
 8000f88:	482f      	ldr	r0, [pc, #188]	; (8001048 <main+0x2b4>)
 8000f8a:	f7ff fb83 	bl	8000694 <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <main+0x2b0>)
 8000f90:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 8000f92:	4619      	mov	r1, r3
 8000f94:	482d      	ldr	r0, [pc, #180]	; (800104c <main+0x2b8>)
 8000f96:	f7ff fb7d 	bl	8000694 <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <main+0x2b0>)
 8000f9c:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	482b      	ldr	r0, [pc, #172]	; (8001050 <main+0x2bc>)
 8000fa2:	f7ff fb77 	bl	8000694 <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <main+0x2b0>)
 8000fa8:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 8000faa:	4619      	mov	r1, r3
 8000fac:	4829      	ldr	r0, [pc, #164]	; (8001054 <main+0x2c0>)
 8000fae:	f7ff fb71 	bl	8000694 <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8000fb2:	4b24      	ldr	r3, [pc, #144]	; (8001044 <main+0x2b0>)
 8000fb4:	79db      	ldrb	r3, [r3, #7]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4827      	ldr	r0, [pc, #156]	; (8001058 <main+0x2c4>)
 8000fba:	f7ff fb6b 	bl	8000694 <myDebug>
			myDebug("______________*******************______________\r\n");
 8000fbe:	4827      	ldr	r0, [pc, #156]	; (800105c <main+0x2c8>)
 8000fc0:	f7ff fb68 	bl	8000694 <myDebug>

			SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8000fc4:	480f      	ldr	r0, [pc, #60]	; (8001004 <main+0x270>)
 8000fc6:	f008 f8f1 	bl	80091ac <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000fca:	2101      	movs	r1, #1
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f008 fd35 	bl	8009a3c <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <main+0x2e4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4827      	ldr	r0, [pc, #156]	; (800107c <main+0x2e8>)
 8000fde:	f007 fda7 	bl	8008b30 <SUBGRF_SendPayload>
		}

		HAL_UART_Receive_DMA(&huart2, main_cmd, main_cmd_len);
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <main+0x2cc>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	491e      	ldr	r1, [pc, #120]	; (8001064 <main+0x2d0>)
 8000fec:	481e      	ldr	r0, [pc, #120]	; (8001068 <main+0x2d4>)
 8000fee:	f004 fa1f 	bl	8005430 <HAL_UART_Receive_DMA>
    MX_SubGHz_Phy_Process();
 8000ff2:	e763      	b.n	8000ebc <main+0x128>
 8000ff4:	20000340 	.word	0x20000340
 8000ff8:	0800afa8 	.word	0x0800afa8
 8000ffc:	0800afe4 	.word	0x0800afe4
 8001000:	0800b018 	.word	0x0800b018
 8001004:	19f25968 	.word	0x19f25968
 8001008:	1a11d018 	.word	0x1a11d018
 800100c:	0800b034 	.word	0x0800b034
 8001010:	0800b074 	.word	0x0800b074
 8001014:	0800b09c 	.word	0x0800b09c
 8001018:	0800b0f0 	.word	0x0800b0f0
 800101c:	0800b138 	.word	0x0800b138
 8001020:	0800b15c 	.word	0x0800b15c
 8001024:	20000001 	.word	0x20000001
 8001028:	200002b4 	.word	0x200002b4
 800102c:	0800b188 	.word	0x0800b188
 8001030:	0800b1b4 	.word	0x0800b1b4
 8001034:	200001bc 	.word	0x200001bc
 8001038:	0800b1dc 	.word	0x0800b1dc
 800103c:	0800b1ec 	.word	0x0800b1ec
 8001040:	0800b208 	.word	0x0800b208
 8001044:	200001a8 	.word	0x200001a8
 8001048:	0800b224 	.word	0x0800b224
 800104c:	0800b238 	.word	0x0800b238
 8001050:	0800b250 	.word	0x0800b250
 8001054:	0800b268 	.word	0x0800b268
 8001058:	0800b280 	.word	0x0800b280
 800105c:	0800b294 	.word	0x0800b294
 8001060:	20000000 	.word	0x20000000
 8001064:	200001d8 	.word	0x200001d8
 8001068:	20000390 	.word	0x20000390
 800106c:	0007a120 	.word	0x0007a120
 8001070:	20000320 	.word	0x20000320
 8001074:	200001e8 	.word	0x200001e8
 8001078:	2000024c 	.word	0x2000024c
 800107c:	20000250 	.word	0x20000250
 8001080:	0800b2c8 	.word	0x0800b2c8
 8001084:	0800b2f4 	.word	0x0800b2f4

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b09a      	sub	sp, #104	; 0x68
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	2248      	movs	r2, #72	; 0x48
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f009 face 	bl	800a638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	615a      	str	r2, [r3, #20]
 80010ac:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <SystemClock_Config+0xbc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010b6:	4a23      	ldr	r2, [pc, #140]	; (8001144 <SystemClock_Config+0xbc>)
 80010b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <SystemClock_Config+0xbc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ca:	2301      	movs	r3, #1
 80010cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 80010ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d8:	2302      	movs	r3, #2
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010dc:	2303      	movs	r3, #3
 80010de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80010e0:	2310      	movs	r3, #16
 80010e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 80010e4:	2306      	movs	r3, #6
 80010e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010f8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 ff64 	bl	8002fcc <HAL_RCC_OscConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800110a:	f000 fabf 	bl	800168c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800110e:	234f      	movs	r3, #79	; 0x4f
 8001110:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001112:	2303      	movs	r3, #3
 8001114:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2102      	movs	r1, #2
 800112a:	4618      	mov	r0, r3
 800112c:	f002 fad0 	bl	80036d0 <HAL_RCC_ClockConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001136:	f000 faa9 	bl	800168c <Error_Handler>
  }
}
 800113a:	bf00      	nop
 800113c:	3768      	adds	r7, #104	; 0x68
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	58000400 	.word	0x58000400

08001148 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8001148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800114c:	b0c1      	sub	sp, #260	; 0x104
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	83fb      	strh	r3, [r7, #30]
	if (radioIrq == IRQ_TX_DONE) {
 8001154:	8bfb      	ldrh	r3, [r7, #30]
 8001156:	2b01      	cmp	r3, #1
 8001158:	f040 8087 	bne.w	800126a <DioIrqHndlr+0x122>
		TX_FLAG = 0;
 800115c:	4b97      	ldr	r3, [pc, #604]	; (80013bc <DioIrqHndlr+0x274>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
		myDebug("\nGS Command Transmitted Successful, Length: %d\r\n",
 8001162:	4b97      	ldr	r3, [pc, #604]	; (80013c0 <DioIrqHndlr+0x278>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4619      	mov	r1, r3
 8001168:	4896      	ldr	r0, [pc, #600]	; (80013c4 <DioIrqHndlr+0x27c>)
 800116a:	f7ff fa93 	bl	8000694 <myDebug>
				tx_buffer_len);
		for (int i = 0; i < tx_buffer_len; i++) {
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001174:	e00d      	b.n	8001192 <DioIrqHndlr+0x4a>
			myDebug("%02x ", tx_buffer[i]);
 8001176:	4a94      	ldr	r2, [pc, #592]	; (80013c8 <DioIrqHndlr+0x280>)
 8001178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	4892      	ldr	r0, [pc, #584]	; (80013cc <DioIrqHndlr+0x284>)
 8001184:	f7ff fa86 	bl	8000694 <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 8001188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800118c:	3301      	adds	r3, #1
 800118e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001192:	4b8b      	ldr	r3, [pc, #556]	; (80013c0 <DioIrqHndlr+0x278>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800119a:	429a      	cmp	r2, r3
 800119c:	dbeb      	blt.n	8001176 <DioIrqHndlr+0x2e>
		}

		myDebug("\r\n");
 800119e:	488c      	ldr	r0, [pc, #560]	; (80013d0 <DioIrqHndlr+0x288>)
 80011a0:	f7ff fa78 	bl	8000694 <myDebug>
		memset(tx_buffer, '\0', sizeof(tx_buffer));
 80011a4:	2264      	movs	r2, #100	; 0x64
 80011a6:	2100      	movs	r1, #0
 80011a8:	4887      	ldr	r0, [pc, #540]	; (80013c8 <DioIrqHndlr+0x280>)
 80011aa:	f009 fa45 	bl	800a638 <memset>

		setPacketParams(rx_buffer_len);
 80011ae:	4b89      	ldr	r3, [pc, #548]	; (80013d4 <DioIrqHndlr+0x28c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fcfe 	bl	8000bb4 <setPacketParams>
		setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 80011b8:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 80011bc:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 80011c0:	f7ff fd22 	bl	8000c08 <setModulationParams>
		radioConfig(rx_buffer, rx_buffer_len);
 80011c4:	4b83      	ldr	r3, [pc, #524]	; (80013d4 <DioIrqHndlr+0x28c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4883      	ldr	r0, [pc, #524]	; (80013d8 <DioIrqHndlr+0x290>)
 80011cc:	f7ff fd3a 	bl	8000c44 <radioConfig>

		myDebug("\n########## RX Configuration: ##########\n");
 80011d0:	4882      	ldr	r0, [pc, #520]	; (80013dc <DioIrqHndlr+0x294>)
 80011d2:	f7ff fa5f 	bl	8000694 <myDebug>

		myDebug("FREQUENCY MODS: Downlink FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 80011d6:	4982      	ldr	r1, [pc, #520]	; (80013e0 <DioIrqHndlr+0x298>)
 80011d8:	4882      	ldr	r0, [pc, #520]	; (80013e4 <DioIrqHndlr+0x29c>)
 80011da:	f7ff fa5b 	bl	8000694 <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 80011de:	4b82      	ldr	r3, [pc, #520]	; (80013e8 <DioIrqHndlr+0x2a0>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4619      	mov	r1, r3
 80011e4:	4881      	ldr	r0, [pc, #516]	; (80013ec <DioIrqHndlr+0x2a4>)
 80011e6:	f7ff fa55 	bl	8000694 <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 80011ea:	4b7f      	ldr	r3, [pc, #508]	; (80013e8 <DioIrqHndlr+0x2a0>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	4619      	mov	r1, r3
 80011f0:	487f      	ldr	r0, [pc, #508]	; (80013f0 <DioIrqHndlr+0x2a8>)
 80011f2:	f7ff fa4f 	bl	8000694 <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 80011f6:	4b7c      	ldr	r3, [pc, #496]	; (80013e8 <DioIrqHndlr+0x2a0>)
 80011f8:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80011fa:	4619      	mov	r1, r3
 80011fc:	487d      	ldr	r0, [pc, #500]	; (80013f4 <DioIrqHndlr+0x2ac>)
 80011fe:	f7ff fa49 	bl	8000694 <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001202:	4b7d      	ldr	r3, [pc, #500]	; (80013f8 <DioIrqHndlr+0x2b0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	487c      	ldr	r0, [pc, #496]	; (80013fc <DioIrqHndlr+0x2b4>)
 800120a:	f7ff fa43 	bl	8000694 <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 800120e:	4b7a      	ldr	r3, [pc, #488]	; (80013f8 <DioIrqHndlr+0x2b0>)
 8001210:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 8001212:	4619      	mov	r1, r3
 8001214:	487a      	ldr	r0, [pc, #488]	; (8001400 <DioIrqHndlr+0x2b8>)
 8001216:	f7ff fa3d 	bl	8000694 <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 800121a:	4b77      	ldr	r3, [pc, #476]	; (80013f8 <DioIrqHndlr+0x2b0>)
 800121c:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 800121e:	4619      	mov	r1, r3
 8001220:	4878      	ldr	r0, [pc, #480]	; (8001404 <DioIrqHndlr+0x2bc>)
 8001222:	f7ff fa37 	bl	8000694 <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 8001226:	4b74      	ldr	r3, [pc, #464]	; (80013f8 <DioIrqHndlr+0x2b0>)
 8001228:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 800122a:	4619      	mov	r1, r3
 800122c:	4876      	ldr	r0, [pc, #472]	; (8001408 <DioIrqHndlr+0x2c0>)
 800122e:	f7ff fa31 	bl	8000694 <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001232:	4b71      	ldr	r3, [pc, #452]	; (80013f8 <DioIrqHndlr+0x2b0>)
 8001234:	79db      	ldrb	r3, [r3, #7]
 8001236:	4619      	mov	r1, r3
 8001238:	4874      	ldr	r0, [pc, #464]	; (800140c <DioIrqHndlr+0x2c4>)
 800123a:	f7ff fa2b 	bl	8000694 <myDebug>
		myDebug("______________*******************______________\r\n");
 800123e:	4874      	ldr	r0, [pc, #464]	; (8001410 <DioIrqHndlr+0x2c8>)
 8001240:	f7ff fa28 	bl	8000694 <myDebug>

		SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001244:	4866      	ldr	r0, [pc, #408]	; (80013e0 <DioIrqHndlr+0x298>)
 8001246:	f007 ffb1 	bl	80091ac <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 800124a:	2100      	movs	r1, #0
 800124c:	2001      	movs	r0, #1
 800124e:	f008 fbf5 	bl	8009a3c <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8001252:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001256:	f007 fdd5 	bl	8008e04 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, main_cmd, main_cmd_len);
 800125a:	4b6e      	ldr	r3, [pc, #440]	; (8001414 <DioIrqHndlr+0x2cc>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	496d      	ldr	r1, [pc, #436]	; (8001418 <DioIrqHndlr+0x2d0>)
 8001264:	486d      	ldr	r0, [pc, #436]	; (800141c <DioIrqHndlr+0x2d4>)
 8001266:	f004 f8e3 	bl	8005430 <HAL_UART_Receive_DMA>

	}

	if (radioIrq == IRQ_RX_DONE) {
 800126a:	8bfb      	ldrh	r3, [r7, #30]
 800126c:	2b02      	cmp	r3, #2
 800126e:	f040 81ef 	bne.w	8001650 <DioIrqHndlr+0x508>
		TX_FLAG = 0;
 8001272:	4b52      	ldr	r3, [pc, #328]	; (80013bc <DioIrqHndlr+0x274>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
		SUBGRF_GetPayload(rx_buffer, &rx_buffer_len, RX_PAYLOAD_LENGTH);
 8001278:	2269      	movs	r2, #105	; 0x69
 800127a:	4956      	ldr	r1, [pc, #344]	; (80013d4 <DioIrqHndlr+0x28c>)
 800127c:	4856      	ldr	r0, [pc, #344]	; (80013d8 <DioIrqHndlr+0x290>)
 800127e:	f007 fc35 	bl	8008aec <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 8001282:	f008 fa54 	bl	800972e <SUBGRF_GetRssiInst>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	4b65      	ldr	r3, [pc, #404]	; (8001420 <DioIrqHndlr+0x2d8>)
 800128c:	601a      	str	r2, [r3, #0]

		uint8_t temp_rx_buffer_len = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
		temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer, rx_buffer_len);
 8001294:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <DioIrqHndlr+0x28c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	484f      	ldr	r0, [pc, #316]	; (80013d8 <DioIrqHndlr+0x290>)
 800129c:	f7ff fc54 	bl	8000b48 <countsDataBetweenFlags>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7

		if (temp_rx_buffer_len != -1) {
 80012a6:	466b      	mov	r3, sp
 80012a8:	61bb      	str	r3, [r7, #24]

//			myDebug("\nSatellite Data Received, Length: %d and RSSI: %d dBm\r\n", temp_rx_buffer_len, rssi_value);

			uint8_t temp_check_buff[temp_rx_buffer_len];
 80012aa:	f897 60e7 	ldrb.w	r6, [r7, #231]	; 0xe7
 80012ae:	4633      	mov	r3, r6
 80012b0:	3b01      	subs	r3, #1
 80012b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80012b6:	b2f3      	uxtb	r3, r6
 80012b8:	2200      	movs	r2, #0
 80012ba:	461c      	mov	r4, r3
 80012bc:	4615      	mov	r5, r2
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	00eb      	lsls	r3, r5, #3
 80012c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012cc:	00e2      	lsls	r2, r4, #3
 80012ce:	b2f3      	uxtb	r3, r6
 80012d0:	2200      	movs	r2, #0
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80012e2:	4629      	mov	r1, r5
 80012e4:	00cb      	lsls	r3, r1, #3
 80012e6:	4620      	mov	r0, r4
 80012e8:	4629      	mov	r1, r5
 80012ea:	4604      	mov	r4, r0
 80012ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012f0:	4601      	mov	r1, r0
 80012f2:	00ca      	lsls	r2, r1, #3
 80012f4:	4633      	mov	r3, r6
 80012f6:	3307      	adds	r3, #7
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	ebad 0d03 	sub.w	sp, sp, r3
 8001300:	466b      	mov	r3, sp
 8001302:	3300      	adds	r3, #0
 8001304:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800130e:	e010      	b.n	8001332 <DioIrqHndlr+0x1ea>
				temp_check_buff[i] = rx_buffer[i];
 8001310:	4a31      	ldr	r2, [pc, #196]	; (80013d8 <DioIrqHndlr+0x290>)
 8001312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001316:	4413      	add	r3, r2
 8001318:	7819      	ldrb	r1, [r3, #0]
 800131a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800131e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001322:	4413      	add	r3, r2
 8001324:	460a      	mov	r2, r1
 8001326:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800132c:	3301      	adds	r3, #1
 800132e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001332:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001336:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800133a:	429a      	cmp	r2, r3
 800133c:	dbe8      	blt.n	8001310 <DioIrqHndlr+0x1c8>
			}
//			myDebug("\r\n");

//			memset(rx_buffer, '\0', sizeof(rx_buffer_len));

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 800133e:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001342:	3b04      	subs	r3, #4
 8001344:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
			uint8_t crc_buff[crc_buff_len];
 8001348:	f897 40db 	ldrb.w	r4, [r7, #219]	; 0xdb
 800134c:	4623      	mov	r3, r4
 800134e:	3b01      	subs	r3, #1
 8001350:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001354:	b2e3      	uxtb	r3, r4
 8001356:	2200      	movs	r2, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	617a      	str	r2, [r7, #20]
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	6979      	ldr	r1, [r7, #20]
 8001366:	00cb      	lsls	r3, r1, #3
 8001368:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800136c:	4605      	mov	r5, r0
 800136e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001372:	4601      	mov	r1, r0
 8001374:	00ca      	lsls	r2, r1, #3
 8001376:	b2e3      	uxtb	r3, r4
 8001378:	2200      	movs	r2, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	60fa      	str	r2, [r7, #12]
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	68f9      	ldr	r1, [r7, #12]
 8001388:	00cb      	lsls	r3, r1, #3
 800138a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800138e:	4605      	mov	r5, r0
 8001390:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001394:	4601      	mov	r1, r0
 8001396:	00ca      	lsls	r2, r1, #3
 8001398:	4623      	mov	r3, r4
 800139a:	3307      	adds	r3, #7
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	ebad 0d03 	sub.w	sp, sp, r3
 80013a4:	466b      	mov	r3, sp
 80013a6:	3300      	adds	r3, #0
 80013a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

//			myDebug("\nSatellite Data Testing: 0x%x\r\n");

			int j = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			for (int i = 1; i <= crc_buff_len; i++) {
 80013b2:	2301      	movs	r3, #1
 80013b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80013b8:	e04b      	b.n	8001452 <DioIrqHndlr+0x30a>
 80013ba:	bf00      	nop
 80013bc:	20000320 	.word	0x20000320
 80013c0:	2000024c 	.word	0x2000024c
 80013c4:	0800b31c 	.word	0x0800b31c
 80013c8:	20000250 	.word	0x20000250
 80013cc:	0800af80 	.word	0x0800af80
 80013d0:	0800af88 	.word	0x0800af88
 80013d4:	20000001 	.word	0x20000001
 80013d8:	200002b4 	.word	0x200002b4
 80013dc:	0800b188 	.word	0x0800b188
 80013e0:	1a11d018 	.word	0x1a11d018
 80013e4:	0800b1b4 	.word	0x0800b1b4
 80013e8:	200001bc 	.word	0x200001bc
 80013ec:	0800b1dc 	.word	0x0800b1dc
 80013f0:	0800b1ec 	.word	0x0800b1ec
 80013f4:	0800b208 	.word	0x0800b208
 80013f8:	200001a8 	.word	0x200001a8
 80013fc:	0800b224 	.word	0x0800b224
 8001400:	0800b238 	.word	0x0800b238
 8001404:	0800b250 	.word	0x0800b250
 8001408:	0800b268 	.word	0x0800b268
 800140c:	0800b280 	.word	0x0800b280
 8001410:	0800b294 	.word	0x0800b294
 8001414:	20000000 	.word	0x20000000
 8001418:	200001d8 	.word	0x200001d8
 800141c:	20000390 	.word	0x20000390
 8001420:	20000324 	.word	0x20000324
				crc_buff[j] = temp_check_buff[i];
 8001424:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001428:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800142c:	4413      	add	r3, r2
 800142e:	7819      	ldrb	r1, [r3, #0]
 8001430:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001434:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001438:	4413      	add	r3, r2
 800143a:	460a      	mov	r2, r1
 800143c:	701a      	strb	r2, [r3, #0]
//				myDebug("%02x ", crc_buff[j]);
				j++;
 800143e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001442:	3301      	adds	r3, #1
 8001444:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			for (int i = 1; i <= crc_buff_len; i++) {
 8001448:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800144c:	3301      	adds	r3, #1
 800144e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001452:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001456:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800145a:	429a      	cmp	r2, r3
 800145c:	dde2      	ble.n	8001424 <DioIrqHndlr+0x2dc>
			}
//			myDebug("\r\n");

			uint16_t crc = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
			crc = calculateCRC_CCITT_AX25(crc_buff, crc_buff_len);
 8001464:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001468:	4619      	mov	r1, r3
 800146a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800146e:	f7ff f997 	bl	80007a0 <calculateCRC_CCITT_AX25>
 8001472:	4603      	mov	r3, r0
 8001474:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

			uint8_t calc_crc[2];
			calc_crc[0] = (crc >> 8) & 0xFF;
 8001478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	b29b      	uxth	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
			calc_crc[1] = crc & 0xFF;
 8001486:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd

			uint8_t msb_crc = temp_check_buff[temp_rx_buffer_len - 3];
 8001490:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001494:	3b03      	subs	r3, #3
 8001496:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			uint8_t lsb_crc = temp_check_buff[temp_rx_buffer_len - 2];
 80014a0:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80014a4:	3b02      	subs	r3, #2
 80014a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80014aa:	5cd3      	ldrb	r3, [r2, r3]
 80014ac:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc

			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 80014b0:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80014b4:	f897 20cd 	ldrb.w	r2, [r7, #205]	; 0xcd
 80014b8:	429a      	cmp	r2, r3
 80014ba:	f040 8081 	bne.w	80015c0 <DioIrqHndlr+0x478>
 80014be:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 80014c2:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d17a      	bne.n	80015c0 <DioIrqHndlr+0x478>
 80014ca:	466b      	mov	r3, sp
 80014cc:	461c      	mov	r4, r3
//				myDebug("Satellite Data checksum correct: 0x%x\r\n");

				uint8_t gs_cmd_buff[150];
				int gs_cmd_len = bit_destuffing(crc_buff, gs_cmd_buff,
 80014ce:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80014dc:	f7ff fa47 	bl	800096e <bit_destuffing>
 80014e0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						crc_buff_len);
				gs_cmd_len--;
 80014e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80014e8:	3b01      	subs	r3, #1
 80014ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

				myDebug(
 80014ee:	4b5b      	ldr	r3, [pc, #364]	; (800165c <DioIrqHndlr+0x514>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80014f8:	4859      	ldr	r0, [pc, #356]	; (8001660 <DioIrqHndlr+0x518>)
 80014fa:	f7ff f8cb 	bl	8000694 <myDebug>
						"\nSatellite Real Data, Length: %d bytes  and RSSI: %d dBm\r\n",
						gs_cmd_len, rssi_value);

				uint8_t main_gs_cmd[gs_cmd_len];
 80014fe:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001502:	1e4b      	subs	r3, r1, #1
 8001504:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001508:	460a      	mov	r2, r1
 800150a:	2300      	movs	r3, #0
 800150c:	4692      	mov	sl, r2
 800150e:	469b      	mov	fp, r3
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800151c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001524:	460a      	mov	r2, r1
 8001526:	2300      	movs	r3, #0
 8001528:	4690      	mov	r8, r2
 800152a:	4699      	mov	r9, r3
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001538:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800153c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001540:	460b      	mov	r3, r1
 8001542:	3307      	adds	r3, #7
 8001544:	08db      	lsrs	r3, r3, #3
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	ebad 0d03 	sub.w	sp, sp, r3
 800154c:	466b      	mov	r3, sp
 800154e:	3300      	adds	r3, #0
 8001550:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
				for (int i = 0; i < gs_cmd_len; i++) {
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800155a:	e01b      	b.n	8001594 <DioIrqHndlr+0x44c>
					main_gs_cmd[i] = gs_cmd_buff[i];
 800155c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001560:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001564:	4413      	add	r3, r2
 8001566:	7819      	ldrb	r1, [r3, #0]
 8001568:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800156c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001570:	4413      	add	r3, r2
 8001572:	460a      	mov	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]
					myDebug("%02x ", main_gs_cmd[i]);
 8001576:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800157a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800157e:	4413      	add	r3, r2
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	4619      	mov	r1, r3
 8001584:	4837      	ldr	r0, [pc, #220]	; (8001664 <DioIrqHndlr+0x51c>)
 8001586:	f7ff f885 	bl	8000694 <myDebug>
				for (int i = 0; i < gs_cmd_len; i++) {
 800158a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800158e:	3301      	adds	r3, #1
 8001590:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001594:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001598:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800159c:	429a      	cmp	r2, r3
 800159e:	dbdd      	blt.n	800155c <DioIrqHndlr+0x414>
				}
				myDebug("\r\n");
 80015a0:	4831      	ldr	r0, [pc, #196]	; (8001668 <DioIrqHndlr+0x520>)
 80015a2:	f7ff f877 	bl	8000694 <myDebug>
				myDebug("__________\r\n");
 80015a6:	4831      	ldr	r0, [pc, #196]	; (800166c <DioIrqHndlr+0x524>)
 80015a8:	f7ff f874 	bl	8000694 <myDebug>
				memset(main_gs_cmd, '\0', gs_cmd_len);
 80015ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015b0:	461a      	mov	r2, r3
 80015b2:	2100      	movs	r1, #0
 80015b4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80015b8:	f009 f83e 	bl	800a638 <memset>
 80015bc:	46a5      	mov	sp, r4
			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 80015be:	e032      	b.n	8001626 <DioIrqHndlr+0x4de>
			} else {
				checksum_error_count++;
 80015c0:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <DioIrqHndlr+0x528>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3301      	adds	r3, #1
 80015c6:	4a2a      	ldr	r2, [pc, #168]	; (8001670 <DioIrqHndlr+0x528>)
 80015c8:	6013      	str	r3, [r2, #0]
				myDebug(
 80015ca:	4b29      	ldr	r3, [pc, #164]	; (8001670 <DioIrqHndlr+0x528>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4828      	ldr	r0, [pc, #160]	; (8001674 <DioIrqHndlr+0x52c>)
 80015d2:	f7ff f85f 	bl	8000694 <myDebug>
						"Satellite Data checksum error: 0x%x and no of packets: %d\r\n",
						checksum_error_count);
				for (int i = 0; i < sizeof(temp_check_buff); i++) {
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80015dc:	e00e      	b.n	80015fc <DioIrqHndlr+0x4b4>
					myDebug("%02x ", temp_check_buff[i]);
 80015de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80015e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4619      	mov	r1, r3
 80015ec:	481d      	ldr	r0, [pc, #116]	; (8001664 <DioIrqHndlr+0x51c>)
 80015ee:	f7ff f851 	bl	8000694 <myDebug>
				for (int i = 0; i < sizeof(temp_check_buff); i++) {
 80015f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80015f6:	3301      	adds	r3, #1
 80015f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80015fc:	4632      	mov	r2, r6
 80015fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001602:	429a      	cmp	r2, r3
 8001604:	d8eb      	bhi.n	80015de <DioIrqHndlr+0x496>
				}
				myDebug("\r\n");
 8001606:	4818      	ldr	r0, [pc, #96]	; (8001668 <DioIrqHndlr+0x520>)
 8001608:	f7ff f844 	bl	8000694 <myDebug>
				myDebug("__________\r\n");
 800160c:	4817      	ldr	r0, [pc, #92]	; (800166c <DioIrqHndlr+0x524>)
 800160e:	f7ff f841 	bl	8000694 <myDebug>
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <DioIrqHndlr+0x530>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
				memset(rx_buffer, '\0', sizeof(rx_buffer_len));
				memset(crc_buff, '\0', sizeof(crc_buff));
 8001618:	4623      	mov	r3, r4
 800161a:	461a      	mov	r2, r3
 800161c:	2100      	movs	r1, #0
 800161e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001622:	f009 f809 	bl	800a638 <memset>
 8001626:	f8d7 d018 	ldr.w	sp, [r7, #24]
			myDebug("\r\n");
			myDebug("__________\r\n");
			memset(rx_buffer, '\0', sizeof(rx_buffer_len));
		}

		SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 800162a:	4814      	ldr	r0, [pc, #80]	; (800167c <DioIrqHndlr+0x534>)
 800162c:	f007 fdbe 	bl	80091ac <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8001630:	2100      	movs	r1, #0
 8001632:	2001      	movs	r0, #1
 8001634:	f008 fa02 	bl	8009a3c <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8001638:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800163c:	f007 fbe2 	bl	8008e04 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, main_cmd, main_cmd_len);
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <DioIrqHndlr+0x538>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b29b      	uxth	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	490e      	ldr	r1, [pc, #56]	; (8001684 <DioIrqHndlr+0x53c>)
 800164a:	480f      	ldr	r0, [pc, #60]	; (8001688 <DioIrqHndlr+0x540>)
 800164c:	f003 fef0 	bl	8005430 <HAL_UART_Receive_DMA>
	}
}
 8001650:	bf00      	nop
 8001652:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8001656:	46bd      	mov	sp, r7
 8001658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800165c:	20000324 	.word	0x20000324
 8001660:	0800b350 	.word	0x0800b350
 8001664:	0800af80 	.word	0x0800af80
 8001668:	0800af88 	.word	0x0800af88
 800166c:	0800b38c 	.word	0x0800b38c
 8001670:	20000328 	.word	0x20000328
 8001674:	0800b39c 	.word	0x0800b39c
 8001678:	200002b4 	.word	0x200002b4
 800167c:	1a11d018 	.word	0x1a11d018
 8001680:	20000000 	.word	0x20000000
 8001684:	200001d8 	.word	0x200001d8
 8001688:	20000390 	.word	0x20000390

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001694:	e7fe      	b.n	8001694 <Error_Handler+0x8>

08001696 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <NMI_Handler+0x4>

080016a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <HardFault_Handler+0x4>

080016ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <MemManage_Handler+0x4>

080016b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <BusFault_Handler+0x4>

080016ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <UsageFault_Handler+0x4>

080016c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e8:	f000 fb86 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <DMA1_Channel1_IRQHandler+0x10>)
 80016f6:	f000 fe81 	bl	80023fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000424 	.word	0x20000424

08001704 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <DMA1_Channel2_IRQHandler+0x10>)
 800170a:	f000 fe77 	bl	80023fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000484 	.word	0x20000484

08001718 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 Global Interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <TIM2_IRQHandler+0x10>)
 800171e:	f003 fa07 	bl	8004b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000340 	.word	0x20000340

0800172c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <USART2_IRQHandler+0x10>)
 8001732:	f003 fec9 	bl	80054c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000390 	.word	0x20000390

08001740 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001746:	f002 ffb9 	bl	80046bc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000032c 	.word	0x2000032c

08001754 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800175c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001760:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4313      	orrs	r3, r2
 800176a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800176c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001770:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001778:	68fb      	ldr	r3, [r7, #12]
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_SUBGHZ_Init+0x20>)
 800178a:	2210      	movs	r2, #16
 800178c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_SUBGHZ_Init+0x20>)
 8001790:	f002 fd12 	bl	80041b8 <HAL_SUBGHZ_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800179a:	f7ff ff77 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000032c 	.word	0x2000032c

080017a8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80017b0:	2001      	movs	r0, #1
 80017b2:	f7ff ffcf 	bl	8001754 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2032      	movs	r0, #50	; 0x32
 80017bc:	f000 fc05 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80017c0:	2032      	movs	r0, #50	; 0x32
 80017c2:	f000 fc1c 	bl	8001ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
	...

080017dc <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_GetTick+0x24>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80017ee:	f000 f910 	bl	8001a12 <TIMER_IF_GetTimerValue>
 80017f2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80017f4:	687b      	ldr	r3, [r7, #4]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000338 	.word	0x20000338

08001804 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f92d 	bl	8001a6e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f008 fefc 	bl	800a648 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20010000 	.word	0x20010000
 800187c:	00000400 	.word	0x00000400
 8001880:	2000033c 	.word	0x2000033c
 8001884:	200007f0 	.word	0x200007f0

08001888 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <LL_APB1_GRP1_EnableClock>:
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4013      	ands	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b8:	68fb      	ldr	r3, [r7, #12]
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ca:	f107 0310 	add.w	r3, r7, #16
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <MX_TIM2_Init+0x94>)
 80018e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <MX_TIM2_Init+0x94>)
 80018ec:	222f      	movs	r2, #47	; 0x2f
 80018ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <MX_TIM2_Init+0x94>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000001-1;
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <MX_TIM2_Init+0x94>)
 80018f8:	4a18      	ldr	r2, [pc, #96]	; (800195c <MX_TIM2_Init+0x98>)
 80018fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <MX_TIM2_Init+0x94>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <MX_TIM2_Init+0x94>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001908:	4813      	ldr	r0, [pc, #76]	; (8001958 <MX_TIM2_Init+0x94>)
 800190a:	f003 f875 	bl	80049f8 <HAL_TIM_Base_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001914:	f7ff feba 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800191e:	f107 0310 	add.w	r3, r7, #16
 8001922:	4619      	mov	r1, r3
 8001924:	480c      	ldr	r0, [pc, #48]	; (8001958 <MX_TIM2_Init+0x94>)
 8001926:	f003 fa22 	bl	8004d6e <HAL_TIM_ConfigClockSource>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001930:	f7ff feac 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <MX_TIM2_Init+0x94>)
 8001942:	f003 fc05 	bl	8005150 <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800194c:	f7ff fe9e 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000340 	.word	0x20000340
 800195c:	000f4240 	.word	0x000f4240

08001960 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001970:	d10a      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001972:	2001      	movs	r0, #1
 8001974:	f7ff ff8e 	bl	8001894 <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	2100      	movs	r1, #0
 800197c:	201b      	movs	r0, #27
 800197e:	f000 fb24 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001982:	201b      	movs	r0, #27
 8001984:	f000 fb3b 	bl	8001ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 800199a:	79fb      	ldrb	r3, [r7, #7]
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 80019c8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80019d8:	4b02      	ldr	r3, [pc, #8]	; (80019e4 <TIMER_IF_SetTimerContext+0x10>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	2000038c 	.word	0x2000038c

080019e8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80019ec:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <TIMER_IF_GetTimerContext+0x10>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	2000038c 	.word	0x2000038c

080019fc <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8001a06:	687b      	ldr	r3, [r7, #4]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001a1c:	687b      	ldr	r3, [r7, #4]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8001a32:	687b      	ldr	r3, [r7, #4]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b085      	sub	sp, #20
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <LL_AHB2_GRP1_EnableClock>:
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <LL_APB1_GRP1_EnableClock>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001acc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001ae6:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <MX_USART2_UART_Init+0x94>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001b06:	220c      	movs	r2, #12
 8001b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b28:	4811      	ldr	r0, [pc, #68]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001b2a:	f003 fbab 	bl	8005284 <HAL_UART_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b34:	f7ff fdaa 	bl	800168c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b38:	2100      	movs	r1, #0
 8001b3a:	480d      	ldr	r0, [pc, #52]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001b3c:	f004 ff0e 	bl	800695c <HAL_UARTEx_SetTxFifoThreshold>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b46:	f7ff fda1 	bl	800168c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4808      	ldr	r0, [pc, #32]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001b4e:	f004 ff43 	bl	80069d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b58:	f7ff fd98 	bl	800168c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_USART2_UART_Init+0x90>)
 8001b5e:	f004 fec5 	bl	80068ec <HAL_UARTEx_DisableFifoMode>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b68:	f7ff fd90 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000390 	.word	0x20000390
 8001b74:	40004400 	.word	0x40004400

08001b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b096      	sub	sp, #88	; 0x58
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	2238      	movs	r2, #56	; 0x38
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f008 fd4d 	bl	800a638 <memset>
  if(uartHandle->Instance==USART2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a4e      	ldr	r2, [pc, #312]	; (8001cdc <HAL_UART_MspInit+0x164>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	f040 8094 	bne.w	8001cd2 <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001baa:	2302      	movs	r3, #2
 8001bac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bae:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001bb2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 f949 	bl	8003e50 <HAL_RCCEx_PeriphCLKConfig>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001bc4:	f7ff fd62 	bl	800168c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001bcc:	f7ff ff70 	bl	8001ab0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f7ff ff55 	bl	8001a80 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001bd6:	230c      	movs	r3, #12
 8001bd8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001be6:	2307      	movs	r3, #7
 8001be8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf4:	f000 fda0 	bl	8002738 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001bf8:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <HAL_UART_MspInit+0x168>)
 8001bfa:	4a3a      	ldr	r2, [pc, #232]	; (8001ce4 <HAL_UART_MspInit+0x16c>)
 8001bfc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001bfe:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <HAL_UART_MspInit+0x168>)
 8001c00:	2213      	movs	r2, #19
 8001c02:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c04:	4b36      	ldr	r3, [pc, #216]	; (8001ce0 <HAL_UART_MspInit+0x168>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0a:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <HAL_UART_MspInit+0x168>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c10:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <HAL_UART_MspInit+0x168>)
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c16:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <HAL_UART_MspInit+0x168>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <HAL_UART_MspInit+0x168>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c22:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <HAL_UART_MspInit+0x168>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c28:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <HAL_UART_MspInit+0x168>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c2e:	482c      	ldr	r0, [pc, #176]	; (8001ce0 <HAL_UART_MspInit+0x168>)
 8001c30:	f000 fa00 	bl	8002034 <HAL_DMA_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001c3a:	f7ff fd27 	bl	800168c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001c3e:	2110      	movs	r1, #16
 8001c40:	4827      	ldr	r0, [pc, #156]	; (8001ce0 <HAL_UART_MspInit+0x168>)
 8001c42:	f000 fca1 	bl	8002588 <HAL_DMA_ConfigChannelAttributes>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_UART_MspInit+0xd8>
    {
      Error_Handler();
 8001c4c:	f7ff fd1e 	bl	800168c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <HAL_UART_MspInit+0x168>)
 8001c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001c58:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <HAL_UART_MspInit+0x168>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8001c5e:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_UART_MspInit+0x170>)
 8001c60:	4a22      	ldr	r2, [pc, #136]	; (8001cec <HAL_UART_MspInit+0x174>)
 8001c62:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_UART_MspInit+0x170>)
 8001c66:	2214      	movs	r2, #20
 8001c68:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <HAL_UART_MspInit+0x170>)
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_UART_MspInit+0x170>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_UART_MspInit+0x170>)
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <HAL_UART_MspInit+0x170>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c82:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_UART_MspInit+0x170>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_UART_MspInit+0x170>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <HAL_UART_MspInit+0x170>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c94:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <HAL_UART_MspInit+0x170>)
 8001c96:	f000 f9cd 	bl	8002034 <HAL_DMA_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001ca0:	f7ff fcf4 	bl	800168c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001ca4:	2110      	movs	r1, #16
 8001ca6:	4810      	ldr	r0, [pc, #64]	; (8001ce8 <HAL_UART_MspInit+0x170>)
 8001ca8:	f000 fc6e 	bl	8002588 <HAL_DMA_ConfigChannelAttributes>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001cb2:	f7ff fceb 	bl	800168c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <HAL_UART_MspInit+0x170>)
 8001cba:	67da      	str	r2, [r3, #124]	; 0x7c
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_UART_MspInit+0x170>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2025      	movs	r0, #37	; 0x25
 8001cc8:	f000 f97f 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ccc:	2025      	movs	r0, #37	; 0x25
 8001cce:	f000 f996 	bl	8001ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	3758      	adds	r7, #88	; 0x58
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40004400 	.word	0x40004400
 8001ce0:	20000424 	.word	0x20000424
 8001ce4:	40020008 	.word	0x40020008
 8001ce8:	20000484 	.word	0x20000484
 8001cec:	4002001c 	.word	0x4002001c

08001cf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cf2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cf4:	f7ff fdc8 	bl	8001888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001cfa:	490d      	ldr	r1, [pc, #52]	; (8001d30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <LoopForever+0xe>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d00:	e002      	b.n	8001d08 <LoopCopyDataInit>

08001d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d06:	3304      	adds	r3, #4

08001d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d0c:	d3f9      	bcc.n	8001d02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d10:	4c0a      	ldr	r4, [pc, #40]	; (8001d3c <LoopForever+0x16>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d14:	e001      	b.n	8001d1a <LoopFillZerobss>

08001d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d18:	3204      	adds	r2, #4

08001d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d1c:	d3fb      	bcc.n	8001d16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d1e:	f008 fc99 	bl	800a654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d22:	f7ff f837 	bl	8000d94 <main>

08001d26 <LoopForever>:

LoopForever:
    b LoopForever
 8001d26:	e7fe      	b.n	8001d26 <LoopForever>
  ldr   r0, =_estack
 8001d28:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d30:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001d34:	0800b690 	.word	0x0800b690
  ldr r2, =_sbss
 8001d38:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001d3c:	200007f0 	.word	0x200007f0

08001d40 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d40:	e7fe      	b.n	8001d40 <ADC_IRQHandler>
	...

08001d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4e:	2003      	movs	r0, #3
 8001d50:	f000 f930 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d54:	f001 fe9e 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_Init+0x3c>)
 8001d5c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f000 f810 	bl	8001d84 <HAL_InitTick>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	e001      	b.n	8001d74 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d70:	f7ff fc91 	bl	8001696 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d74:	79fb      	ldrb	r3, [r7, #7]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000004 	.word	0x20000004

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_InitTick+0x6c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d024      	beq.n	8001de2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d98:	f001 fe7c 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <HAL_InitTick+0x6c>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	4619      	mov	r1, r3
 8001da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 f932 	bl	800201a <HAL_SYSTICK_Config>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10f      	bne.n	8001ddc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b0f      	cmp	r3, #15
 8001dc0:	d809      	bhi.n	8001dd6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dca:	f000 f8fe 	bl	8001fca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dce:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <HAL_InitTick+0x70>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e007      	b.n	8001de6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e004      	b.n	8001de6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e001      	b.n	8001de6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2000000c 	.word	0x2000000c
 8001df4:	20000008 	.word	0x20000008

08001df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_IncTick+0x1c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_IncTick+0x20>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a03      	ldr	r2, [pc, #12]	; (8001e18 <HAL_IncTick+0x20>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	2000000c 	.word	0x2000000c
 8001e18:	200004e4 	.word	0x200004e4

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db0b      	blt.n	8001eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4906      	ldr	r1, [pc, #24]	; (8001eb4 <__NVIC_EnableIRQ+0x34>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	; (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	; (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f80:	d301      	bcc.n	8001f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00f      	b.n	8001fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <SysTick_Config+0x40>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8e:	210f      	movs	r1, #15
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f94:	f7ff ff90 	bl	8001eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <SysTick_Config+0x40>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <SysTick_Config+0x40>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff2d 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd8:	f7ff ff44 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	6978      	ldr	r0, [r7, #20]
 8001fe4:	f7ff ff92 	bl	8001f0c <NVIC_EncodePriority>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff61 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001ff6:	bf00      	nop
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff37 	bl	8001e80 <__NVIC_EnableIRQ>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ffa4 	bl	8001f70 <SysTick_Config>
 8002028:	4603      	mov	r3, r0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e08e      	b.n	8002164 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_DMA_Init+0x138>)
 800204e:	429a      	cmp	r2, r3
 8002050:	d80f      	bhi.n	8002072 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	4b45      	ldr	r3, [pc, #276]	; (8002170 <HAL_DMA_Init+0x13c>)
 800205a:	4413      	add	r3, r2
 800205c:	4a45      	ldr	r2, [pc, #276]	; (8002174 <HAL_DMA_Init+0x140>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	009a      	lsls	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a42      	ldr	r2, [pc, #264]	; (8002178 <HAL_DMA_Init+0x144>)
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
 8002070:	e00e      	b.n	8002090 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	4b40      	ldr	r3, [pc, #256]	; (800217c <HAL_DMA_Init+0x148>)
 800207a:	4413      	add	r3, r2
 800207c:	4a3d      	ldr	r2, [pc, #244]	; (8002174 <HAL_DMA_Init+0x140>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	009a      	lsls	r2, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a3c      	ldr	r2, [pc, #240]	; (8002180 <HAL_DMA_Init+0x14c>)
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80020a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020aa:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6819      	ldr	r1, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fabc 	bl	8002660 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020f0:	d102      	bne.n	80020f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002100:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002104:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800210e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d010      	beq.n	800213a <HAL_DMA_Init+0x106>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b04      	cmp	r3, #4
 800211e:	d80c      	bhi.n	800213a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 fae5 	bl	80026f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	e008      	b.n	800214c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40020407 	.word	0x40020407
 8002170:	bffdfff8 	.word	0xbffdfff8
 8002174:	cccccccd 	.word	0xcccccccd
 8002178:	40020000 	.word	0x40020000
 800217c:	bffdfbf8 	.word	0xbffdfbf8
 8002180:	40020400 	.word	0x40020400

08002184 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_DMA_Start_IT+0x20>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e069      	b.n	8002278 <HAL_DMA_Start_IT+0xf4>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d155      	bne.n	8002264 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0201 	bic.w	r2, r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fa02 	bl	80025e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 020e 	orr.w	r2, r2, #14
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e00f      	b.n	800221c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0204 	bic.w	r2, r2, #4
 800220a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 020a 	orr.w	r2, r2, #10
 800221a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002238:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002250:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	e008      	b.n	8002276 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2280      	movs	r2, #128	; 0x80
 8002268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002276:	7dfb      	ldrb	r3, [r7, #23]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e04f      	b.n	8002332 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d008      	beq.n	80022b0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2204      	movs	r2, #4
 80022a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e040      	b.n	8002332 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 020e 	bic.w	r2, r2, #14
 80022be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e4:	f003 021c 	and.w	r2, r3, #28
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f202 	lsl.w	r2, r1, r2
 80022f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00c      	beq.n	8002320 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002314:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800231e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d005      	beq.n	8002360 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2204      	movs	r2, #4
 8002358:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e047      	b.n	80023f0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 020e 	bic.w	r2, r2, #14
 800236e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800238e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002394:	f003 021c 	and.w	r2, r3, #28
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	2101      	movs	r1, #1
 800239e:	fa01 f202 	lsl.w	r2, r1, r2
 80023a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00c      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	4798      	blx	r3
    }
  }
  return status;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	f003 031c 	and.w	r3, r3, #28
 800241c:	2204      	movs	r2, #4
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d027      	beq.n	8002478 <HAL_DMA_IRQHandler+0x7c>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d022      	beq.n	8002478 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b00      	cmp	r3, #0
 800243e:	d107      	bne.n	8002450 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0204 	bic.w	r2, r2, #4
 800244e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	f003 021c 	and.w	r2, r3, #28
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	2104      	movs	r1, #4
 800245e:	fa01 f202 	lsl.w	r2, r1, r2
 8002462:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8081 	beq.w	8002570 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002476:	e07b      	b.n	8002570 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247c:	f003 031c 	and.w	r3, r3, #28
 8002480:	2202      	movs	r2, #2
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d03d      	beq.n	8002508 <HAL_DMA_IRQHandler+0x10c>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d038      	beq.n	8002508 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10b      	bne.n	80024bc <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 020a 	bic.w	r2, r2, #10
 80024b2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_DMA_IRQHandler+0x180>)
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d909      	bls.n	80024dc <HAL_DMA_IRQHandler+0xe0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	f003 031c 	and.w	r3, r3, #28
 80024d0:	4a2b      	ldr	r2, [pc, #172]	; (8002580 <HAL_DMA_IRQHandler+0x184>)
 80024d2:	2102      	movs	r1, #2
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	6053      	str	r3, [r2, #4]
 80024da:	e008      	b.n	80024ee <HAL_DMA_IRQHandler+0xf2>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	f003 031c 	and.w	r3, r3, #28
 80024e4:	4a27      	ldr	r2, [pc, #156]	; (8002584 <HAL_DMA_IRQHandler+0x188>)
 80024e6:	2102      	movs	r1, #2
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d038      	beq.n	8002570 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002506:	e033      	b.n	8002570 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	f003 031c 	and.w	r3, r3, #28
 8002510:	2208      	movs	r2, #8
 8002512:	409a      	lsls	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d02a      	beq.n	8002572 <HAL_DMA_IRQHandler+0x176>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d025      	beq.n	8002572 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 020e 	bic.w	r2, r2, #14
 8002534:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f003 021c 	and.w	r2, r3, #28
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2101      	movs	r1, #1
 8002544:	fa01 f202 	lsl.w	r2, r1, r2
 8002548:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002570:	bf00      	nop
 8002572:	bf00      	nop
}
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40020080 	.word	0x40020080
 8002580:	40020400 	.word	0x40020400
 8002584:	40020000 	.word	0x40020000

08002588 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d103      	bne.n	80025a4 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	72fb      	strb	r3, [r7, #11]
    return status;
 80025a0:	7afb      	ldrb	r3, [r7, #11]
 80025a2:	e01b      	b.n	80025dc <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00d      	beq.n	80025d2 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	e003      	b.n	80025d2 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025d0:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	601a      	str	r2, [r3, #0]

  return status;
 80025da:	7afb      	ldrb	r3, [r7, #11]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025fc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800260e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	f003 021c 	and.w	r2, r3, #28
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	2101      	movs	r1, #1
 800261e:	fa01 f202 	lsl.w	r2, r1, r2
 8002622:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b10      	cmp	r3, #16
 8002632:	d108      	bne.n	8002646 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002644:	e007      	b.n	8002656 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	60da      	str	r2, [r3, #12]
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002670:	429a      	cmp	r2, r3
 8002672:	d813      	bhi.n	800269c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002680:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	3b08      	subs	r3, #8
 8002690:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	e011      	b.n	80026c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	009a      	lsls	r2, r3, #2
 80026a4:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80026a6:	4413      	add	r3, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	3b08      	subs	r3, #8
 80026b4:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	3307      	adds	r3, #7
 80026be:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80026c4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2201      	movs	r2, #1
 80026ce:	409a      	lsls	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40020407 	.word	0x40020407
 80026e4:	cccccccd 	.word	0xcccccccd
 80026e8:	4002081c 	.word	0x4002081c
 80026ec:	40020880 	.word	0x40020880

080026f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002700:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002714:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3b01      	subs	r3, #1
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2201      	movs	r2, #1
 8002720:	409a      	lsls	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	1000823f 	.word	0x1000823f
 8002734:	40020940 	.word	0x40020940

08002738 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002746:	e140      	b.n	80029ca <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	fa01 f303 	lsl.w	r3, r1, r3
 8002754:	4013      	ands	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8132 	beq.w	80029c4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d005      	beq.n	8002778 <HAL_GPIO_Init+0x40>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d130      	bne.n	80027da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	2203      	movs	r2, #3
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ae:	2201      	movs	r2, #1
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	f003 0201 	and.w	r2, r3, #1
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d017      	beq.n	8002816 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d123      	bne.n	800286a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	08da      	lsrs	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3208      	adds	r2, #8
 800282a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800282e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	220f      	movs	r2, #15
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	08da      	lsrs	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3208      	adds	r2, #8
 8002864:	6939      	ldr	r1, [r7, #16]
 8002866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	2203      	movs	r2, #3
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0203 	and.w	r2, r3, #3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 808c 	beq.w	80029c4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80028ac:	4a4e      	ldr	r2, [pc, #312]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	2207      	movs	r2, #7
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028d6:	d00d      	beq.n	80028f4 <HAL_GPIO_Init+0x1bc>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a44      	ldr	r2, [pc, #272]	; (80029ec <HAL_GPIO_Init+0x2b4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d007      	beq.n	80028f0 <HAL_GPIO_Init+0x1b8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a43      	ldr	r2, [pc, #268]	; (80029f0 <HAL_GPIO_Init+0x2b8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_GPIO_Init+0x1b4>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e004      	b.n	80028f6 <HAL_GPIO_Init+0x1be>
 80028ec:	2307      	movs	r3, #7
 80028ee:	e002      	b.n	80028f6 <HAL_GPIO_Init+0x1be>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_GPIO_Init+0x1be>
 80028f4:	2300      	movs	r3, #0
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	f002 0203 	and.w	r2, r2, #3
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	4093      	lsls	r3, r2
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002906:	4938      	ldr	r1, [pc, #224]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	3302      	adds	r3, #2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002914:	4b37      	ldr	r3, [pc, #220]	; (80029f4 <HAL_GPIO_Init+0x2bc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002938:	4a2e      	ldr	r2, [pc, #184]	; (80029f4 <HAL_GPIO_Init+0x2bc>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <HAL_GPIO_Init+0x2bc>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002962:	4a24      	ldr	r2, [pc, #144]	; (80029f4 <HAL_GPIO_Init+0x2bc>)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_GPIO_Init+0x2bc>)
 800296a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800296e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	43db      	mvns	r3, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800298e:	4a19      	ldr	r2, [pc, #100]	; (80029f4 <HAL_GPIO_Init+0x2bc>)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002996:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <HAL_GPIO_Init+0x2bc>)
 8002998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800299c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80029bc:	4a0d      	ldr	r2, [pc, #52]	; (80029f4 <HAL_GPIO_Init+0x2bc>)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3301      	adds	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f47f aeb7 	bne.w	8002748 <HAL_GPIO_Init+0x10>
  }
}
 80029da:	bf00      	nop
 80029dc:	bf00      	nop
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40010000 	.word	0x40010000
 80029ec:	48000400 	.word	0x48000400
 80029f0:	48000800 	.word	0x48000800
 80029f4:	58000800 	.word	0x58000800

080029f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]
 8002a04:	4613      	mov	r3, r2
 8002a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a08:	787b      	ldrb	r3, [r7, #1]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a0e:	887a      	ldrh	r2, [r7, #2]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a14:	e002      	b.n	8002a1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a03      	ldr	r2, [pc, #12]	; (8002a40 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	58000400 	.word	0x58000400

08002a44 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002a48:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <HAL_PWREx_GetVoltageRange+0x14>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	58000400 	.word	0x58000400

08002a5c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a6c:	d101      	bne.n	8002a72 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	58000400 	.word	0x58000400

08002a80 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002aae:	6013      	str	r3, [r2, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aca:	d101      	bne.n	8002ad0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
}
 8002b0a:	bf00      	nop
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b24:	d101      	bne.n	8002b2a <LL_RCC_HSE_IsReady+0x18>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <LL_RCC_HSE_IsReady+0x1a>
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b46:	6013      	str	r3, [r2, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b62:	6013      	str	r3, [r2, #0]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7e:	d101      	bne.n	8002b84 <LL_RCC_HSI_IsReady+0x18>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <LL_RCC_HSI_IsReady+0x1a>
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	061b      	lsls	r3, r3, #24
 8002ba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d101      	bne.n	8002bce <LL_RCC_LSE_IsReady+0x18>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <LL_RCC_LSE_IsReady+0x1a>
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d101      	bne.n	8002c30 <LL_RCC_LSI_IsReady+0x18>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <LL_RCC_LSI_IsReady+0x1a>
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6013      	str	r3, [r2, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6013      	str	r3, [r2, #0]
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d101      	bne.n	8002c88 <LL_RCC_MSI_IsReady+0x16>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <LL_RCC_MSI_IsReady+0x18>
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d101      	bne.n	8002ca8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	021b      	lsls	r3, r3, #8
 8002cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	608b      	str	r3, [r1, #8]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 030c 	and.w	r3, r3, #12
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002da4:	f023 020f 	bic.w	r2, r3, #15
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	608b      	str	r3, [r1, #8]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	6013      	str	r3, [r2, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e96:	6013      	str	r3, [r2, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eb2:	d101      	bne.n	8002eb8 <LL_RCC_PLL_IsReady+0x18>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <LL_RCC_PLL_IsReady+0x1a>
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0303 	and.w	r3, r3, #3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2e:	d101      	bne.n	8002f34 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f52:	d101      	bne.n	8002f58 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr

08002f62 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f76:	d101      	bne.n	8002f7c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr

08002f86 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f98:	d101      	bne.n	8002f9e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fba:	d101      	bne.n	8002fc0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
	...

08002fcc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e36f      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fde:	f7ff fea6 	bl	8002d2e <LL_RCC_GetSysClkSource>
 8002fe2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe4:	f7ff ff8f 	bl	8002f06 <LL_RCC_PLL_GetMainSource>
 8002fe8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80c4 	beq.w	8003180 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <HAL_RCC_OscConfig+0x3e>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	2b0c      	cmp	r3, #12
 8003002:	d176      	bne.n	80030f2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d173      	bne.n	80030f2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e353      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800301a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_OscConfig+0x68>
 8003028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003032:	e006      	b.n	8003042 <HAL_RCC_OscConfig+0x76>
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003042:	4293      	cmp	r3, r2
 8003044:	d222      	bcs.n	800308c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fd5a 	bl	8003b04 <RCC_SetFlashLatencyFromMSIRange>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e331      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800305a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003064:	f043 0308 	orr.w	r3, r3, #8
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800307c:	4313      	orrs	r3, r2
 800307e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fe2b 	bl	8002ce0 <LL_RCC_MSI_SetCalibTrimming>
 800308a:	e021      	b.n	80030d0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003096:	f043 0308 	orr.w	r3, r3, #8
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fe12 	bl	8002ce0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fd1f 	bl	8003b04 <RCC_SetFlashLatencyFromMSIRange>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e2f6      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80030d0:	f000 fce0 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 80030d4:	4603      	mov	r3, r0
 80030d6:	4aa7      	ldr	r2, [pc, #668]	; (8003374 <HAL_RCC_OscConfig+0x3a8>)
 80030d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80030da:	4ba7      	ldr	r3, [pc, #668]	; (8003378 <HAL_RCC_OscConfig+0x3ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fe50 	bl	8001d84 <HAL_InitTick>
 80030e4:	4603      	mov	r3, r0
 80030e6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d047      	beq.n	800317e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80030ee:	7cfb      	ldrb	r3, [r7, #19]
 80030f0:	e2e5      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d02c      	beq.n	8003154 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030fa:	f7ff fd9e 	bl	8002c3a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030fe:	f7fe fb6d 	bl	80017dc <HAL_GetTick>
 8003102:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003106:	f7fe fb69 	bl	80017dc <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e2d2      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003118:	f7ff fdab 	bl	8002c72 <LL_RCC_MSI_IsReady>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f1      	beq.n	8003106 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800312c:	f043 0308 	orr.w	r3, r3, #8
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003144:	4313      	orrs	r3, r2
 8003146:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fdc7 	bl	8002ce0 <LL_RCC_MSI_SetCalibTrimming>
 8003152:	e015      	b.n	8003180 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003154:	f7ff fd7f 	bl	8002c56 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003158:	f7fe fb40 	bl	80017dc <HAL_GetTick>
 800315c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003160:	f7fe fb3c 	bl	80017dc <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e2a5      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003172:	f7ff fd7e 	bl	8002c72 <LL_RCC_MSI_IsReady>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f1      	bne.n	8003160 <HAL_RCC_OscConfig+0x194>
 800317c:	e000      	b.n	8003180 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800317e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d058      	beq.n	800323e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	2b08      	cmp	r3, #8
 8003190:	d005      	beq.n	800319e <HAL_RCC_OscConfig+0x1d2>
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	2b0c      	cmp	r3, #12
 8003196:	d108      	bne.n	80031aa <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b03      	cmp	r3, #3
 800319c:	d105      	bne.n	80031aa <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d14b      	bne.n	800323e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e289      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80031aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031bc:	4313      	orrs	r3, r2
 80031be:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d102      	bne.n	80031d0 <HAL_RCC_OscConfig+0x204>
 80031ca:	f7ff fc86 	bl	8002ada <LL_RCC_HSE_Enable>
 80031ce:	e00d      	b.n	80031ec <HAL_RCC_OscConfig+0x220>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80031d8:	d104      	bne.n	80031e4 <HAL_RCC_OscConfig+0x218>
 80031da:	f7ff fc51 	bl	8002a80 <LL_RCC_HSE_EnableTcxo>
 80031de:	f7ff fc7c 	bl	8002ada <LL_RCC_HSE_Enable>
 80031e2:	e003      	b.n	80031ec <HAL_RCC_OscConfig+0x220>
 80031e4:	f7ff fc87 	bl	8002af6 <LL_RCC_HSE_Disable>
 80031e8:	f7ff fc58 	bl	8002a9c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d012      	beq.n	800321a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fe faf2 	bl	80017dc <HAL_GetTick>
 80031f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031fc:	f7fe faee 	bl	80017dc <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e257      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800320e:	f7ff fc80 	bl	8002b12 <LL_RCC_HSE_IsReady>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f1      	beq.n	80031fc <HAL_RCC_OscConfig+0x230>
 8003218:	e011      	b.n	800323e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fe fadf 	bl	80017dc <HAL_GetTick>
 800321e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003222:	f7fe fadb 	bl	80017dc <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b64      	cmp	r3, #100	; 0x64
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e244      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003234:	f7ff fc6d 	bl	8002b12 <LL_RCC_HSE_IsReady>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f1      	bne.n	8003222 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d046      	beq.n	80032d8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	2b04      	cmp	r3, #4
 800324e:	d005      	beq.n	800325c <HAL_RCC_OscConfig+0x290>
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d10e      	bne.n	8003274 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d10b      	bne.n	8003274 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e22a      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fc8e 	bl	8002b8e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003272:	e031      	b.n	80032d8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d019      	beq.n	80032b0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800327c:	f7ff fc5a 	bl	8002b34 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe faac 	bl	80017dc <HAL_GetTick>
 8003284:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003288:	f7fe faa8 	bl	80017dc <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e211      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800329a:	f7ff fc67 	bl	8002b6c <LL_RCC_HSI_IsReady>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f1      	beq.n	8003288 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fc70 	bl	8002b8e <LL_RCC_HSI_SetCalibTrimming>
 80032ae:	e013      	b.n	80032d8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b0:	f7ff fc4e 	bl	8002b50 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fe fa92 	bl	80017dc <HAL_GetTick>
 80032b8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032bc:	f7fe fa8e 	bl	80017dc <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e1f7      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80032ce:	f7ff fc4d 	bl	8002b6c <LL_RCC_HSI_IsReady>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f1      	bne.n	80032bc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d06e      	beq.n	80033c2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d056      	beq.n	800339a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80032ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69da      	ldr	r2, [r3, #28]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	429a      	cmp	r2, r3
 8003302:	d031      	beq.n	8003368 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d006      	beq.n	800331c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e1d0      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d013      	beq.n	800334e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003326:	f7ff fc67 	bl	8002bf8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800332a:	f7fe fa57 	bl	80017dc <HAL_GetTick>
 800332e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003332:	f7fe fa53 	bl	80017dc <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b11      	cmp	r3, #17
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1bc      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003344:	f7ff fc68 	bl	8002c18 <LL_RCC_LSI_IsReady>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f1      	bne.n	8003332 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003356:	f023 0210 	bic.w	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003368:	f7ff fc36 	bl	8002bd8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336c:	f7fe fa36 	bl	80017dc <HAL_GetTick>
 8003370:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003372:	e00c      	b.n	800338e <HAL_RCC_OscConfig+0x3c2>
 8003374:	20000004 	.word	0x20000004
 8003378:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337c:	f7fe fa2e 	bl	80017dc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b11      	cmp	r3, #17
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e197      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800338e:	f7ff fc43 	bl	8002c18 <LL_RCC_LSI_IsReady>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f1      	beq.n	800337c <HAL_RCC_OscConfig+0x3b0>
 8003398:	e013      	b.n	80033c2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800339a:	f7ff fc2d 	bl	8002bf8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339e:	f7fe fa1d 	bl	80017dc <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a6:	f7fe fa19 	bl	80017dc <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b11      	cmp	r3, #17
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e182      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80033b8:	f7ff fc2e 	bl	8002c18 <LL_RCC_LSI_IsReady>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f1      	bne.n	80033a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80d8 	beq.w	8003580 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80033d0:	f7ff fb44 	bl	8002a5c <LL_PWR_IsEnabledBkUpAccess>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d113      	bne.n	8003402 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80033da:	f7ff fb25 	bl	8002a28 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033de:	f7fe f9fd 	bl	80017dc <HAL_GetTick>
 80033e2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e6:	f7fe f9f9 	bl	80017dc <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e162      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80033f8:	f7ff fb30 	bl	8002a5c <LL_PWR_IsEnabledBkUpAccess>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f1      	beq.n	80033e6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d07b      	beq.n	8003502 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b85      	cmp	r3, #133	; 0x85
 8003410:	d003      	beq.n	800341a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b05      	cmp	r3, #5
 8003418:	d109      	bne.n	800342e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800341a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342e:	f7fe f9d5 	bl	80017dc <HAL_GetTick>
 8003432:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003448:	e00a      	b.n	8003460 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344a:	f7fe f9c7 	bl	80017dc <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	f241 3288 	movw	r2, #5000	; 0x1388
 8003458:	4293      	cmp	r3, r2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e12e      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003460:	f7ff fba9 	bl	8002bb6 <LL_RCC_LSE_IsReady>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0ef      	beq.n	800344a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b81      	cmp	r3, #129	; 0x81
 8003470:	d003      	beq.n	800347a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b85      	cmp	r3, #133	; 0x85
 8003478:	d121      	bne.n	80034be <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347a:	f7fe f9af 	bl	80017dc <HAL_GetTick>
 800347e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800348c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003494:	e00a      	b.n	80034ac <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fe f9a1 	bl	80017dc <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e108      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ec      	beq.n	8003496 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80034bc:	e060      	b.n	8003580 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034be:	f7fe f98d 	bl	80017dc <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034d8:	e00a      	b.n	80034f0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034da:	f7fe f97f 	bl	80017dc <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e0e6      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ec      	bne.n	80034da <HAL_RCC_OscConfig+0x50e>
 8003500:	e03e      	b.n	8003580 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003502:	f7fe f96b 	bl	80017dc <HAL_GetTick>
 8003506:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800351c:	e00a      	b.n	8003534 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7fe f95d 	bl	80017dc <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f241 3288 	movw	r2, #5000	; 0x1388
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e0c4      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1ec      	bne.n	800351e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003544:	f7fe f94a 	bl	80017dc <HAL_GetTick>
 8003548:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800354a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800355e:	e00a      	b.n	8003576 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f7fe f93c 	bl	80017dc <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	; 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e0a3      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003576:	f7ff fb1e 	bl	8002bb6 <LL_RCC_LSE_IsReady>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1ef      	bne.n	8003560 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8099 	beq.w	80036bc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	2b0c      	cmp	r3, #12
 800358e:	d06c      	beq.n	800366a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	2b02      	cmp	r3, #2
 8003596:	d14b      	bne.n	8003630 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003598:	f7ff fc74 	bl	8002e84 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe f91e 	bl	80017dc <HAL_GetTick>
 80035a0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fe f91a 	bl	80017dc <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b0a      	cmp	r3, #10
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e083      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80035b6:	f7ff fc73 	bl	8002ea0 <LL_RCC_PLL_IsReady>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f1      	bne.n	80035a4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	4b40      	ldr	r3, [pc, #256]	; (80036c8 <HAL_RCC_OscConfig+0x6fc>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035d2:	4311      	orrs	r1, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035d8:	0212      	lsls	r2, r2, #8
 80035da:	4311      	orrs	r1, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035e0:	4311      	orrs	r1, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035e6:	4311      	orrs	r1, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80035ec:	430a      	orrs	r2, r1
 80035ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f6:	f7ff fc37 	bl	8002e68 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003608:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360a:	f7fe f8e7 	bl	80017dc <HAL_GetTick>
 800360e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003612:	f7fe f8e3 	bl	80017dc <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b0a      	cmp	r3, #10
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e04c      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003624:	f7ff fc3c 	bl	8002ea0 <LL_RCC_PLL_IsReady>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f1      	beq.n	8003612 <HAL_RCC_OscConfig+0x646>
 800362e:	e045      	b.n	80036bc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003630:	f7ff fc28 	bl	8002e84 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fe f8d2 	bl	80017dc <HAL_GetTick>
 8003638:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363c:	f7fe f8ce 	bl	80017dc <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b0a      	cmp	r3, #10
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e037      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800364e:	f7ff fc27 	bl	8002ea0 <LL_RCC_PLL_IsReady>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f1      	bne.n	800363c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <HAL_RCC_OscConfig+0x700>)
 8003664:	4013      	ands	r3, r2
 8003666:	60cb      	str	r3, [r1, #12]
 8003668:	e028      	b.n	80036bc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e023      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	f003 0203 	and.w	r2, r3, #3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	429a      	cmp	r2, r3
 800368a:	d115      	bne.n	80036b8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003696:	429a      	cmp	r2, r3
 8003698:	d10e      	bne.n	80036b8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d106      	bne.n	80036b8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	11c1808c 	.word	0x11c1808c
 80036cc:	eefefffc 	.word	0xeefefffc

080036d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e12c      	b.n	800393e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b98      	ldr	r3, [pc, #608]	; (8003948 <HAL_RCC_ClockConfig+0x278>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d91b      	bls.n	800372a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b95      	ldr	r3, [pc, #596]	; (8003948 <HAL_RCC_ClockConfig+0x278>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 0207 	bic.w	r2, r3, #7
 80036fa:	4993      	ldr	r1, [pc, #588]	; (8003948 <HAL_RCC_ClockConfig+0x278>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003702:	f7fe f86b 	bl	80017dc <HAL_GetTick>
 8003706:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003708:	e008      	b.n	800371c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800370a:	f7fe f867 	bl	80017dc <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e110      	b.n	800393e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371c:	4b8a      	ldr	r3, [pc, #552]	; (8003948 <HAL_RCC_ClockConfig+0x278>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d1ef      	bne.n	800370a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fb02 	bl	8002d44 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003740:	f7fe f84c 	bl	80017dc <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003748:	f7fe f848 	bl	80017dc <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e0f1      	b.n	800393e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800375a:	f7ff fbdf 	bl	8002f1c <LL_RCC_IsActiveFlag_HPRE>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f1      	beq.n	8003748 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d016      	beq.n	800379e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff faf8 	bl	8002d6a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800377a:	f7fe f82f 	bl	80017dc <HAL_GetTick>
 800377e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003780:	e008      	b.n	8003794 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003782:	f7fe f82b 	bl	80017dc <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e0d4      	b.n	800393e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003794:	f7ff fbd3 	bl	8002f3e <LL_RCC_IsActiveFlag_C2HPRE>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f1      	beq.n	8003782 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d016      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff faf0 	bl	8002d94 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037b4:	f7fe f812 	bl	80017dc <HAL_GetTick>
 80037b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037bc:	f7fe f80e 	bl	80017dc <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e0b7      	b.n	800393e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80037ce:	f7ff fbc8 	bl	8002f62 <LL_RCC_IsActiveFlag_SHDHPRE>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f1      	beq.n	80037bc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d016      	beq.n	8003812 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fae9 	bl	8002dc0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037ee:	f7fd fff5 	bl	80017dc <HAL_GetTick>
 80037f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037f6:	f7fd fff1 	bl	80017dc <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e09a      	b.n	800393e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003808:	f7ff fbbd 	bl	8002f86 <LL_RCC_IsActiveFlag_PPRE1>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f1      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d017      	beq.n	800384e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fade 	bl	8002de6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800382a:	f7fd ffd7 	bl	80017dc <HAL_GetTick>
 800382e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003830:	e008      	b.n	8003844 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003832:	f7fd ffd3 	bl	80017dc <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e07c      	b.n	800393e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003844:	f7ff fbb0 	bl	8002fa8 <LL_RCC_IsActiveFlag_PPRE2>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f1      	beq.n	8003832 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d043      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d106      	bne.n	8003870 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003862:	f7ff f956 	bl	8002b12 <LL_RCC_HSE_IsReady>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d11e      	bne.n	80038aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e066      	b.n	800393e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d106      	bne.n	8003886 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003878:	f7ff fb12 	bl	8002ea0 <LL_RCC_PLL_IsReady>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d113      	bne.n	80038aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e05b      	b.n	800393e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800388e:	f7ff f9f0 	bl	8002c72 <LL_RCC_MSI_IsReady>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d108      	bne.n	80038aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e050      	b.n	800393e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800389c:	f7ff f966 	bl	8002b6c <LL_RCC_HSI_IsReady>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e049      	b.n	800393e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fa2a 	bl	8002d08 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b4:	f7fd ff92 	bl	80017dc <HAL_GetTick>
 80038b8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038bc:	f7fd ff8e 	bl	80017dc <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e035      	b.n	800393e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	f7ff fa2c 	bl	8002d2e <LL_RCC_GetSysClkSource>
 80038d6:	4602      	mov	r2, r0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	429a      	cmp	r2, r3
 80038e0:	d1ec      	bne.n	80038bc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038e2:	4b19      	ldr	r3, [pc, #100]	; (8003948 <HAL_RCC_ClockConfig+0x278>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d21b      	bcs.n	8003928 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f0:	4b15      	ldr	r3, [pc, #84]	; (8003948 <HAL_RCC_ClockConfig+0x278>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f023 0207 	bic.w	r2, r3, #7
 80038f8:	4913      	ldr	r1, [pc, #76]	; (8003948 <HAL_RCC_ClockConfig+0x278>)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003900:	f7fd ff6c 	bl	80017dc <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	e008      	b.n	800391a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003908:	f7fd ff68 	bl	80017dc <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e011      	b.n	800393e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_RCC_ClockConfig+0x278>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d1ef      	bne.n	8003908 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003928:	f000 f8b4 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 800392c:	4603      	mov	r3, r0
 800392e:	4a07      	ldr	r2, [pc, #28]	; (800394c <HAL_RCC_ClockConfig+0x27c>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003932:	4b07      	ldr	r3, [pc, #28]	; (8003950 <HAL_RCC_ClockConfig+0x280>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fa24 	bl	8001d84 <HAL_InitTick>
 800393c:	4603      	mov	r3, r0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	58004000 	.word	0x58004000
 800394c:	20000004 	.word	0x20000004
 8003950:	20000008 	.word	0x20000008

08003954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003954:	b590      	push	{r4, r7, lr}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003962:	f7ff f9e4 	bl	8002d2e <LL_RCC_GetSysClkSource>
 8003966:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003968:	f7ff facd 	bl	8002f06 <LL_RCC_PLL_GetMainSource>
 800396c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x2c>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b0c      	cmp	r3, #12
 8003978:	d139      	bne.n	80039ee <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d136      	bne.n	80039ee <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003980:	f7ff f987 	bl	8002c92 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d115      	bne.n	80039b6 <HAL_RCC_GetSysClockFreq+0x62>
 800398a:	f7ff f982 	bl	8002c92 <LL_RCC_MSI_IsEnabledRangeSelect>
 800398e:	4603      	mov	r3, r0
 8003990:	2b01      	cmp	r3, #1
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_GetSysClockFreq+0x4e>
 8003994:	f7ff f98d 	bl	8002cb2 <LL_RCC_MSI_GetRange>
 8003998:	4603      	mov	r3, r0
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	e005      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x5a>
 80039a2:	f7ff f991 	bl	8002cc8 <LL_RCC_MSI_GetRangeAfterStandby>
 80039a6:	4603      	mov	r3, r0
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	4a36      	ldr	r2, [pc, #216]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x134>)
 80039b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b4:	e014      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x8c>
 80039b6:	f7ff f96c 	bl	8002c92 <LL_RCC_MSI_IsEnabledRangeSelect>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d106      	bne.n	80039ce <HAL_RCC_GetSysClockFreq+0x7a>
 80039c0:	f7ff f977 	bl	8002cb2 <LL_RCC_MSI_GetRange>
 80039c4:	4603      	mov	r3, r0
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	e005      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x86>
 80039ce:	f7ff f97b 	bl	8002cc8 <LL_RCC_MSI_GetRangeAfterStandby>
 80039d2:	4603      	mov	r3, r0
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	4a2b      	ldr	r2, [pc, #172]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x134>)
 80039dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d115      	bne.n	8003a14 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039ec:	e012      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d102      	bne.n	80039fa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039f4:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x138>)
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	e00c      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d109      	bne.n	8003a14 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a00:	f7ff f85a 	bl	8002ab8 <LL_RCC_HSE_IsEnabledDiv2>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d102      	bne.n	8003a10 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a0a:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x138>)
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	e001      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a10:	4b1f      	ldr	r3, [pc, #124]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a12:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a14:	f7ff f98b 	bl	8002d2e <LL_RCC_GetSysClkSource>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d12f      	bne.n	8003a7e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a1e:	f7ff fa72 	bl	8002f06 <LL_RCC_PLL_GetMainSource>
 8003a22:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d003      	beq.n	8003a32 <HAL_RCC_GetSysClockFreq+0xde>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d003      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0xe4>
 8003a30:	e00d      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a32:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x138>)
 8003a34:	60fb      	str	r3, [r7, #12]
        break;
 8003a36:	e00d      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a38:	f7ff f83e 	bl	8002ab8 <LL_RCC_HSE_IsEnabledDiv2>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d102      	bne.n	8003a48 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a42:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x138>)
 8003a44:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a46:	e005      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a4a:	60fb      	str	r3, [r7, #12]
        break;
 8003a4c:	e002      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	60fb      	str	r3, [r7, #12]
        break;
 8003a52:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003a54:	f7ff fa35 	bl	8002ec2 <LL_RCC_PLL_GetN>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	fb03 f402 	mul.w	r4, r3, r2
 8003a60:	f7ff fa46 	bl	8002ef0 <LL_RCC_PLL_GetDivider>
 8003a64:	4603      	mov	r3, r0
 8003a66:	091b      	lsrs	r3, r3, #4
 8003a68:	3301      	adds	r3, #1
 8003a6a:	fbb4 f4f3 	udiv	r4, r4, r3
 8003a6e:	f7ff fa34 	bl	8002eda <LL_RCC_PLL_GetR>
 8003a72:	4603      	mov	r3, r0
 8003a74:	0f5b      	lsrs	r3, r3, #29
 8003a76:	3301      	adds	r3, #1
 8003a78:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a7c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003a7e:	697b      	ldr	r3, [r7, #20]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd90      	pop	{r4, r7, pc}
 8003a88:	0800b478 	.word	0x0800b478
 8003a8c:	00f42400 	.word	0x00f42400
 8003a90:	01e84800 	.word	0x01e84800

08003a94 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a94:	b598      	push	{r3, r4, r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003a98:	f7ff ff5c 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	f7ff f9b5 	bl	8002e0c <LL_RCC_GetAHBPrescaler>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	4a03      	ldr	r2, [pc, #12]	; (8003ab8 <HAL_RCC_GetHCLKFreq+0x24>)
 8003aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd98      	pop	{r3, r4, r7, pc}
 8003ab8:	0800b418 	.word	0x0800b418

08003abc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003abc:	b598      	push	{r3, r4, r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003ac0:	f7ff ffe8 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	f7ff f9b9 	bl	8002e3c <LL_RCC_GetAPB1Prescaler>
 8003aca:	4603      	mov	r3, r0
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	4a03      	ldr	r2, [pc, #12]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd98      	pop	{r3, r4, r7, pc}
 8003adc:	0800b458 	.word	0x0800b458

08003ae0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae0:	b598      	push	{r3, r4, r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003ae4:	f7ff ffd6 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003ae8:	4604      	mov	r4, r0
 8003aea:	f7ff f9b2 	bl	8002e52 <LL_RCC_GetAPB2Prescaler>
 8003aee:	4603      	mov	r3, r0
 8003af0:	0adb      	lsrs	r3, r3, #11
 8003af2:	4a03      	ldr	r2, [pc, #12]	; (8003b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd98      	pop	{r3, r4, r7, pc}
 8003b00:	0800b458 	.word	0x0800b458

08003b04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	091b      	lsrs	r3, r3, #4
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	4a10      	ldr	r2, [pc, #64]	; (8003b58 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003b1c:	f7ff f981 	bl	8002e22 <LL_RCC_GetAHB3Prescaler>
 8003b20:	4603      	mov	r3, r0
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	4a0c      	ldr	r2, [pc, #48]	; (8003b5c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	4a09      	ldr	r2, [pc, #36]	; (8003b60 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	0c9c      	lsrs	r4, r3, #18
 8003b40:	f7fe ff80 	bl	8002a44 <HAL_PWREx_GetVoltageRange>
 8003b44:	4603      	mov	r3, r0
 8003b46:	4619      	mov	r1, r3
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f000 f80b 	bl	8003b64 <RCC_SetFlashLatency>
 8003b4e:	4603      	mov	r3, r0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd90      	pop	{r4, r7, pc}
 8003b58:	0800b478 	.word	0x0800b478
 8003b5c:	0800b418 	.word	0x0800b418
 8003b60:	431bde83 	.word	0x431bde83

08003b64 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08e      	sub	sp, #56	; 0x38
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003b6e:	4a3a      	ldr	r2, [pc, #232]	; (8003c58 <RCC_SetFlashLatency+0xf4>)
 8003b70:	f107 0320 	add.w	r3, r7, #32
 8003b74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b78:	6018      	str	r0, [r3, #0]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003b7e:	4a37      	ldr	r2, [pc, #220]	; (8003c5c <RCC_SetFlashLatency+0xf8>)
 8003b80:	f107 0318 	add.w	r3, r7, #24
 8003b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b88:	6018      	str	r0, [r3, #0]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003b8e:	4a34      	ldr	r2, [pc, #208]	; (8003c60 <RCC_SetFlashLatency+0xfc>)
 8003b90:	f107 030c 	add.w	r3, r7, #12
 8003b94:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b96:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba4:	d11b      	bne.n	8003bde <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8003baa:	e014      	b.n	8003bd6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	3338      	adds	r3, #56	; 0x38
 8003bb2:	443b      	add	r3, r7
 8003bb4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d807      	bhi.n	8003bd0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	3338      	adds	r3, #56	; 0x38
 8003bc6:	443b      	add	r3, r7
 8003bc8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003bcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bce:	e021      	b.n	8003c14 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d9e7      	bls.n	8003bac <RCC_SetFlashLatency+0x48>
 8003bdc:	e01a      	b.n	8003c14 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003be2:	e014      	b.n	8003c0e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	3338      	adds	r3, #56	; 0x38
 8003bea:	443b      	add	r3, r7
 8003bec:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d807      	bhi.n	8003c08 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	3338      	adds	r3, #56	; 0x38
 8003bfe:	443b      	add	r3, r7
 8003c00:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c06:	e005      	b.n	8003c14 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d9e7      	bls.n	8003be4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <RCC_SetFlashLatency+0x100>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 0207 	bic.w	r2, r3, #7
 8003c1c:	4911      	ldr	r1, [pc, #68]	; (8003c64 <RCC_SetFlashLatency+0x100>)
 8003c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c24:	f7fd fdda 	bl	80017dc <HAL_GetTick>
 8003c28:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c2a:	e008      	b.n	8003c3e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c2c:	f7fd fdd6 	bl	80017dc <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e007      	b.n	8003c4e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c3e:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <RCC_SetFlashLatency+0x100>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d1ef      	bne.n	8003c2c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3738      	adds	r7, #56	; 0x38
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	0800b3d8 	.word	0x0800b3d8
 8003c5c:	0800b3e0 	.word	0x0800b3e0
 8003c60:	0800b3e8 	.word	0x0800b3e8
 8003c64:	58004000 	.word	0x58004000

08003c68 <LL_RCC_LSE_IsReady>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d101      	bne.n	8003c80 <LL_RCC_LSE_IsReady+0x18>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <LL_RCC_LSE_IsReady+0x1a>
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <LL_RCC_SetUSARTClockSource>:
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	401a      	ands	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <LL_RCC_SetI2SClockSource>:
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <LL_RCC_SetLPUARTClockSource>:
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <LL_RCC_SetI2CClockSource>:
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d26:	43db      	mvns	r3, r3
 8003d28:	401a      	ands	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr

08003d46 <LL_RCC_SetLPTIMClockSource>:
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	0c1b      	lsrs	r3, r3, #16
 8003d5a:	041b      	lsls	r3, r3, #16
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	401a      	ands	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <LL_RCC_SetRNGClockSource>:
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003d8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <LL_RCC_SetADCClockSource>:
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003db6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <LL_RCC_SetRTCClockSource>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003de0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr

08003df6 <LL_RCC_GetRTCClockSource>:
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <LL_RCC_ForceBackupDomainReset>:
{
 8003e0e:	b480      	push	{r7}
 8003e10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <LL_RCC_ReleaseBackupDomainReset>:
{
 8003e2e:	b480      	push	{r7}
 8003e30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e46:	bf00      	nop
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003e60:	2300      	movs	r3, #0
 8003e62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d058      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003e70:	f7fe fdda 	bl	8002a28 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e74:	f7fd fcb2 	bl	80017dc <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003e7a:	e009      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7c:	f7fd fcae 	bl	80017dc <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d902      	bls.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	74fb      	strb	r3, [r7, #19]
        break;
 8003e8e:	e006      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003e90:	4b7b      	ldr	r3, [pc, #492]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e9c:	d1ee      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003e9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d13c      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003ea4:	f7ff ffa7 	bl	8003df6 <LL_RCC_GetRTCClockSource>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d00f      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ec0:	f7ff ffa5 	bl	8003e0e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec4:	f7ff ffb3 	bl	8003e2e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d014      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fd fc7e 	bl	80017dc <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003ee2:	e00b      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fd fc7a 	bl	80017dc <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d902      	bls.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	74fb      	strb	r3, [r7, #19]
            break;
 8003efa:	e004      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003efc:	f7ff feb4 	bl	8003c68 <LL_RCC_LSE_IsReady>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d1ee      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff ff5b 	bl	8003dcc <LL_RCC_SetRTCClockSource>
 8003f16:	e004      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	74bb      	strb	r3, [r7, #18]
 8003f1c:	e001      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1e:	7cfb      	ldrb	r3, [r7, #19]
 8003f20:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d004      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff fea9 	bl	8003c8a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fe9e 	bl	8003c8a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d004      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fec0 	bl	8003ce4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d004      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fee6 	bl	8003d46 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d004      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff fedb 	bl	8003d46 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff fed0 	bl	8003d46 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fea9 	bl	8003d0e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d004      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fe9e 	bl	8003d0e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fe93 	bl	8003d0e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d011      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff fe5e 	bl	8003cba <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004006:	d107      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004016:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d010      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fea5 	bl	8003d78 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	2b00      	cmp	r3, #0
 8004034:	d107      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004044:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d011      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fea3 	bl	8003da2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004064:	d107      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004074:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004076:	7cbb      	ldrb	r3, [r7, #18]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	58000400 	.word	0x58000400

08004084 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004094:	4904      	ldr	r1, [pc, #16]	; (80040a8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4313      	orrs	r3, r2
 800409a:	608b      	str	r3, [r1, #8]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	58000400 	.word	0x58000400

080040ac <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80040b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr
 80040c8:	58000400 	.word	0x58000400

080040cc <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80040d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr
 80040e8:	58000400 	.word	0x58000400

080040ec <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80040f0:	4b03      	ldr	r3, [pc, #12]	; (8004100 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80040f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040f6:	619a      	str	r2, [r3, #24]
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	58000400 	.word	0x58000400

08004104 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004108:	4b06      	ldr	r3, [pc, #24]	; (8004124 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b02      	cmp	r3, #2
 8004112:	d101      	bne.n	8004118 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	58000400 	.word	0x58000400

08004128 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b04      	cmp	r3, #4
 8004136:	d101      	bne.n	800413c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	58000400 	.word	0x58000400

0800414c <LL_RCC_RF_DisableReset>:
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800415c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004160:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <LL_RCC_IsRFUnderReset>:
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800417c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004180:	d101      	bne.n	8004186 <LL_RCC_IsRFUnderReset+0x1a>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <LL_RCC_IsRFUnderReset+0x1c>
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <LL_EXTI_EnableIT_32_63+0x24>)
 800419a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800419e:	4905      	ldr	r1, [pc, #20]	; (80041b4 <LL_EXTI_EnableIT_32_63+0x24>)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	58000800 	.word	0x58000800

080041b8 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d103      	bne.n	80041ce <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
    return status;
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	e052      	b.n	8004274 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	799b      	ldrb	r3, [r3, #6]
 80041d6:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80041d8:	7bbb      	ldrb	r3, [r7, #14]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <HAL_SUBGHZ_Init+0x2c>
 80041de:	7bbb      	ldrb	r3, [r7, #14]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d109      	bne.n	80041f8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd fadc 	bl	80017a8 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80041f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80041f4:	f7ff ffcc 	bl	8004190 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80041f8:	7bbb      	ldrb	r3, [r7, #14]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d126      	bne.n	800424c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2202      	movs	r2, #2
 8004202:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004204:	f7ff ffa2 	bl	800414c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004208:	4b1c      	ldr	r3, [pc, #112]	; (800427c <HAL_SUBGHZ_Init+0xc4>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	0cdb      	lsrs	r3, r3, #19
 8004216:	2264      	movs	r2, #100	; 0x64
 8004218:	fb02 f303 	mul.w	r3, r2, r3
 800421c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d105      	bne.n	8004230 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	609a      	str	r2, [r3, #8]
        break;
 800422e:	e007      	b.n	8004240 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	3b01      	subs	r3, #1
 8004234:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004236:	f7ff ff99 	bl	800416c <LL_RCC_IsRFUnderReset>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1ee      	bne.n	800421e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004240:	f7ff ff34 	bl	80040ac <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004244:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004248:	f7ff ff1c 	bl	8004084 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800424c:	f7ff ff4e 	bl	80040ec <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f000 faac 	bl	80047b8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	719a      	strb	r2, [r3, #6]

  return status;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000004 	.word	0x20000004

08004280 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	461a      	mov	r2, r3
 800428c:	460b      	mov	r3, r1
 800428e:	817b      	strh	r3, [r7, #10]
 8004290:	4613      	mov	r3, r2
 8004292:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	799b      	ldrb	r3, [r3, #6]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b01      	cmp	r3, #1
 800429c:	d14a      	bne.n	8004334 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	795b      	ldrb	r3, [r3, #5]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_SUBGHZ_WriteRegisters+0x2a>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e045      	b.n	8004336 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2202      	movs	r2, #2
 80042b4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fb4c 	bl	8004954 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80042bc:	f7ff ff06 	bl	80040cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80042c0:	210d      	movs	r1, #13
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 fa98 	bl	80047f8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80042c8:	897b      	ldrh	r3, [r7, #10]
 80042ca:	0a1b      	lsrs	r3, r3, #8
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	4619      	mov	r1, r3
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fa90 	bl	80047f8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80042d8:	897b      	ldrh	r3, [r7, #10]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	4619      	mov	r1, r3
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 fa8a 	bl	80047f8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80042e4:	2300      	movs	r3, #0
 80042e6:	82bb      	strh	r3, [r7, #20]
 80042e8:	e00a      	b.n	8004300 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80042ea:	8abb      	ldrh	r3, [r7, #20]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	4413      	add	r3, r2
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	4619      	mov	r1, r3
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 fa7f 	bl	80047f8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80042fa:	8abb      	ldrh	r3, [r7, #20]
 80042fc:	3301      	adds	r3, #1
 80042fe:	82bb      	strh	r3, [r7, #20]
 8004300:	8aba      	ldrh	r2, [r7, #20]
 8004302:	893b      	ldrh	r3, [r7, #8]
 8004304:	429a      	cmp	r2, r3
 8004306:	d3f0      	bcc.n	80042ea <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004308:	f7ff fed0 	bl	80040ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 fb45 	bl	800499c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	75fb      	strb	r3, [r7, #23]
 800431e:	e001      	b.n	8004324 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	715a      	strb	r2, [r3, #5]

    return status;
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	e000      	b.n	8004336 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004334:	2302      	movs	r3, #2
  }
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b088      	sub	sp, #32
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	461a      	mov	r2, r3
 800434a:	460b      	mov	r3, r1
 800434c:	817b      	strh	r3, [r7, #10]
 800434e:	4613      	mov	r3, r2
 8004350:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	799b      	ldrb	r3, [r3, #6]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d14a      	bne.n	80043f6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	795b      	ldrb	r3, [r3, #5]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004368:	2302      	movs	r3, #2
 800436a:	e045      	b.n	80043f8 <HAL_SUBGHZ_ReadRegisters+0xba>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 faee 	bl	8004954 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004378:	f7ff fea8 	bl	80040cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800437c:	211d      	movs	r1, #29
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 fa3a 	bl	80047f8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004384:	897b      	ldrh	r3, [r7, #10]
 8004386:	0a1b      	lsrs	r3, r3, #8
 8004388:	b29b      	uxth	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	4619      	mov	r1, r3
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fa32 	bl	80047f8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004394:	897b      	ldrh	r3, [r7, #10]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	4619      	mov	r1, r3
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fa2c 	bl	80047f8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80043a0:	2100      	movs	r1, #0
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fa28 	bl	80047f8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80043a8:	2300      	movs	r3, #0
 80043aa:	82fb      	strh	r3, [r7, #22]
 80043ac:	e009      	b.n	80043c2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80043ae:	69b9      	ldr	r1, [r7, #24]
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 fa77 	bl	80048a4 <SUBGHZSPI_Receive>
      pData++;
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	3301      	adds	r3, #1
 80043ba:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80043bc:	8afb      	ldrh	r3, [r7, #22]
 80043be:	3301      	adds	r3, #1
 80043c0:	82fb      	strh	r3, [r7, #22]
 80043c2:	8afa      	ldrh	r2, [r7, #22]
 80043c4:	893b      	ldrh	r3, [r7, #8]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d3f1      	bcc.n	80043ae <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80043ca:	f7ff fe6f 	bl	80040ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fae4 	bl	800499c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e001      	b.n	80043e6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	715a      	strb	r2, [r3, #5]

    return status;
 80043f2:	7ffb      	ldrb	r3, [r7, #31]
 80043f4:	e000      	b.n	80043f8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	607a      	str	r2, [r7, #4]
 800440a:	461a      	mov	r2, r3
 800440c:	460b      	mov	r3, r1
 800440e:	72fb      	strb	r3, [r7, #11]
 8004410:	4613      	mov	r3, r2
 8004412:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	799b      	ldrb	r3, [r3, #6]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	d14a      	bne.n	80044b4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	795b      	ldrb	r3, [r3, #5]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004426:	2302      	movs	r3, #2
 8004428:	e045      	b.n	80044b6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fa8f 	bl	8004954 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004436:	7afb      	ldrb	r3, [r7, #11]
 8004438:	2b84      	cmp	r3, #132	; 0x84
 800443a:	d002      	beq.n	8004442 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800443c:	7afb      	ldrb	r3, [r7, #11]
 800443e:	2b94      	cmp	r3, #148	; 0x94
 8004440:	d103      	bne.n	800444a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	711a      	strb	r2, [r3, #4]
 8004448:	e002      	b.n	8004450 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004450:	f7ff fe3c 	bl	80040cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004454:	7afb      	ldrb	r3, [r7, #11]
 8004456:	4619      	mov	r1, r3
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f9cd 	bl	80047f8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800445e:	2300      	movs	r3, #0
 8004460:	82bb      	strh	r3, [r7, #20]
 8004462:	e00a      	b.n	800447a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004464:	8abb      	ldrh	r3, [r7, #20]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4413      	add	r3, r2
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	4619      	mov	r1, r3
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f9c2 	bl	80047f8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004474:	8abb      	ldrh	r3, [r7, #20]
 8004476:	3301      	adds	r3, #1
 8004478:	82bb      	strh	r3, [r7, #20]
 800447a:	8aba      	ldrh	r2, [r7, #20]
 800447c:	893b      	ldrh	r3, [r7, #8]
 800447e:	429a      	cmp	r2, r3
 8004480:	d3f0      	bcc.n	8004464 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004482:	f7ff fe13 	bl	80040ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004486:	7afb      	ldrb	r3, [r7, #11]
 8004488:	2b84      	cmp	r3, #132	; 0x84
 800448a:	d002      	beq.n	8004492 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fa85 	bl	800499c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
 800449e:	e001      	b.n	80044a4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	715a      	strb	r2, [r3, #5]

    return status;
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	e000      	b.n	80044b6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
  }
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b088      	sub	sp, #32
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	461a      	mov	r2, r3
 80044ca:	460b      	mov	r3, r1
 80044cc:	72fb      	strb	r3, [r7, #11]
 80044ce:	4613      	mov	r3, r2
 80044d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	799b      	ldrb	r3, [r3, #6]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d13d      	bne.n	800455c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	795b      	ldrb	r3, [r3, #5]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e038      	b.n	800455e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 fa2e 	bl	8004954 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80044f8:	f7ff fde8 	bl	80040cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80044fc:	7afb      	ldrb	r3, [r7, #11]
 80044fe:	4619      	mov	r1, r3
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f979 	bl	80047f8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004506:	2100      	movs	r1, #0
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 f975 	bl	80047f8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800450e:	2300      	movs	r3, #0
 8004510:	82fb      	strh	r3, [r7, #22]
 8004512:	e009      	b.n	8004528 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004514:	69b9      	ldr	r1, [r7, #24]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f9c4 	bl	80048a4 <SUBGHZSPI_Receive>
      pData++;
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	3301      	adds	r3, #1
 8004520:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004522:	8afb      	ldrh	r3, [r7, #22]
 8004524:	3301      	adds	r3, #1
 8004526:	82fb      	strh	r3, [r7, #22]
 8004528:	8afa      	ldrh	r2, [r7, #22]
 800452a:	893b      	ldrh	r3, [r7, #8]
 800452c:	429a      	cmp	r2, r3
 800452e:	d3f1      	bcc.n	8004514 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004530:	f7ff fdbc 	bl	80040ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fa31 	bl	800499c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	77fb      	strb	r3, [r7, #31]
 8004546:	e001      	b.n	800454c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	715a      	strb	r2, [r3, #5]

    return status;
 8004558:	7ffb      	ldrb	r3, [r7, #31]
 800455a:	e000      	b.n	800455e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800455c:	2302      	movs	r3, #2
  }
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b086      	sub	sp, #24
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	461a      	mov	r2, r3
 8004572:	460b      	mov	r3, r1
 8004574:	72fb      	strb	r3, [r7, #11]
 8004576:	4613      	mov	r3, r2
 8004578:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	799b      	ldrb	r3, [r3, #6]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d13e      	bne.n	8004602 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	795b      	ldrb	r3, [r3, #5]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800458c:	2302      	movs	r3, #2
 800458e:	e039      	b.n	8004604 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f9dc 	bl	8004954 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800459c:	f7ff fd96 	bl	80040cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80045a0:	210e      	movs	r1, #14
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f928 	bl	80047f8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80045a8:	7afb      	ldrb	r3, [r7, #11]
 80045aa:	4619      	mov	r1, r3
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f923 	bl	80047f8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	82bb      	strh	r3, [r7, #20]
 80045b6:	e00a      	b.n	80045ce <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80045b8:	8abb      	ldrh	r3, [r7, #20]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	4619      	mov	r1, r3
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f918 	bl	80047f8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80045c8:	8abb      	ldrh	r3, [r7, #20]
 80045ca:	3301      	adds	r3, #1
 80045cc:	82bb      	strh	r3, [r7, #20]
 80045ce:	8aba      	ldrh	r2, [r7, #20]
 80045d0:	893b      	ldrh	r3, [r7, #8]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d3f0      	bcc.n	80045b8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80045d6:	f7ff fd69 	bl	80040ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f9de 	bl	800499c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	75fb      	strb	r3, [r7, #23]
 80045ec:	e001      	b.n	80045f2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	715a      	strb	r2, [r3, #5]

    return status;
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
 8004600:	e000      	b.n	8004604 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004602:	2302      	movs	r3, #2
  }
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	607a      	str	r2, [r7, #4]
 8004616:	461a      	mov	r2, r3
 8004618:	460b      	mov	r3, r1
 800461a:	72fb      	strb	r3, [r7, #11]
 800461c:	4613      	mov	r3, r2
 800461e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	799b      	ldrb	r3, [r3, #6]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	d141      	bne.n	80046b2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	795b      	ldrb	r3, [r3, #5]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004636:	2302      	movs	r3, #2
 8004638:	e03c      	b.n	80046b4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2201      	movs	r2, #1
 800463e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f987 	bl	8004954 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004646:	f7ff fd41 	bl	80040cc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800464a:	211e      	movs	r1, #30
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f8d3 	bl	80047f8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004652:	7afb      	ldrb	r3, [r7, #11]
 8004654:	4619      	mov	r1, r3
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f8ce 	bl	80047f8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800465c:	2100      	movs	r1, #0
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f8ca 	bl	80047f8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004664:	2300      	movs	r3, #0
 8004666:	82fb      	strh	r3, [r7, #22]
 8004668:	e009      	b.n	800467e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800466a:	69b9      	ldr	r1, [r7, #24]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f919 	bl	80048a4 <SUBGHZSPI_Receive>
      pData++;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	3301      	adds	r3, #1
 8004676:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004678:	8afb      	ldrh	r3, [r7, #22]
 800467a:	3301      	adds	r3, #1
 800467c:	82fb      	strh	r3, [r7, #22]
 800467e:	8afa      	ldrh	r2, [r7, #22]
 8004680:	893b      	ldrh	r3, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	d3f1      	bcc.n	800466a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004686:	f7ff fd11 	bl	80040ac <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f986 	bl	800499c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e001      	b.n	80046a2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	715a      	strb	r2, [r3, #5]

    return status;
 80046ae:	7ffb      	ldrb	r3, [r7, #31]
 80046b0:	e000      	b.n	80046b4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80046b2:	2302      	movs	r3, #2
  }
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80046c4:	2300      	movs	r3, #0
 80046c6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80046c8:	f107 020c 	add.w	r2, r7, #12
 80046cc:	2302      	movs	r3, #2
 80046ce:	2112      	movs	r1, #18
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff fef4 	bl	80044be <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80046d6:	7b3b      	ldrb	r3, [r7, #12]
 80046d8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80046da:	89fb      	ldrh	r3, [r7, #14]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	b21a      	sxth	r2, r3
 80046e0:	7b7b      	ldrb	r3, [r7, #13]
 80046e2:	b21b      	sxth	r3, r3
 80046e4:	4313      	orrs	r3, r2
 80046e6:	b21b      	sxth	r3, r3
 80046e8:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80046ea:	f107 020c 	add.w	r2, r7, #12
 80046ee:	2302      	movs	r3, #2
 80046f0:	2102      	movs	r1, #2
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff fe84 	bl	8004400 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80046f8:	89fb      	ldrh	r3, [r7, #14]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f005 f9fe 	bl	8009b04 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004708:	89fb      	ldrh	r3, [r7, #14]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f005 fa04 	bl	8009b20 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004718:	89fb      	ldrh	r3, [r7, #14]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f005 fa54 	bl	8009bd0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004728:	89fb      	ldrh	r3, [r7, #14]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f005 fa5a 	bl	8009bec <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004738:	89fb      	ldrh	r3, [r7, #14]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f005 fa60 	bl	8009c08 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004748:	89fb      	ldrh	r3, [r7, #14]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f005 fa2e 	bl	8009bb4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004758:	89fb      	ldrh	r3, [r7, #14]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f005 f9ea 	bl	8009b3c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004768:	89fb      	ldrh	r3, [r7, #14]
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004772:	89fb      	ldrh	r3, [r7, #14]
 8004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d004      	beq.n	8004786 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800477c:	2101      	movs	r1, #1
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f005 f9ea 	bl	8009b58 <HAL_SUBGHZ_CADStatusCallback>
 8004784:	e003      	b.n	800478e <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004786:	2100      	movs	r1, #0
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f005 f9e5 	bl	8009b58 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800478e:	89fb      	ldrh	r3, [r7, #14]
 8004790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f005 f9fb 	bl	8009b94 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800479e:	89fb      	ldrh	r3, [r7, #14]
 80047a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f005 fa3b 	bl	8009c24 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80047ae:	bf00      	nop
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <SUBGHZSPI_Init+0x3c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a0b      	ldr	r2, [pc, #44]	; (80047f4 <SUBGHZSPI_Init+0x3c>)
 80047c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ca:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80047cc:	4a09      	ldr	r2, [pc, #36]	; (80047f4 <SUBGHZSPI_Init+0x3c>)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80047d4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80047d6:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <SUBGHZSPI_Init+0x3c>)
 80047d8:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80047dc:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80047de:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <SUBGHZSPI_Init+0x3c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <SUBGHZSPI_Init+0x3c>)
 80047e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e8:	6013      	str	r3, [r2, #0]
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr
 80047f4:	58010000 	.word	0x58010000

080047f8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004808:	4b23      	ldr	r3, [pc, #140]	; (8004898 <SUBGHZSPI_Transmit+0xa0>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	0cdb      	lsrs	r3, r3, #19
 8004816:	2264      	movs	r2, #100	; 0x64
 8004818:	fb02 f303 	mul.w	r3, r2, r3
 800481c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d105      	bne.n	8004830 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	609a      	str	r2, [r3, #8]
      break;
 800482e:	e008      	b.n	8004842 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3b01      	subs	r3, #1
 8004834:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004836:	4b19      	ldr	r3, [pc, #100]	; (800489c <SUBGHZSPI_Transmit+0xa4>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b02      	cmp	r3, #2
 8004840:	d1ed      	bne.n	800481e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004842:	4b17      	ldr	r3, [pc, #92]	; (80048a0 <SUBGHZSPI_Transmit+0xa8>)
 8004844:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800484c:	4b12      	ldr	r3, [pc, #72]	; (8004898 <SUBGHZSPI_Transmit+0xa0>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	0cdb      	lsrs	r3, r3, #19
 800485a:	2264      	movs	r2, #100	; 0x64
 800485c:	fb02 f303 	mul.w	r3, r2, r3
 8004860:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d105      	bne.n	8004874 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	609a      	str	r2, [r3, #8]
      break;
 8004872:	e008      	b.n	8004886 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3b01      	subs	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800487a:	4b08      	ldr	r3, [pc, #32]	; (800489c <SUBGHZSPI_Transmit+0xa4>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b01      	cmp	r3, #1
 8004884:	d1ed      	bne.n	8004862 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004886:	4b05      	ldr	r3, [pc, #20]	; (800489c <SUBGHZSPI_Transmit+0xa4>)
 8004888:	68db      	ldr	r3, [r3, #12]

  return status;
 800488a:	7dfb      	ldrb	r3, [r7, #23]
}
 800488c:	4618      	mov	r0, r3
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000004 	.word	0x20000004
 800489c:	58010000 	.word	0x58010000
 80048a0:	5801000c 	.word	0x5801000c

080048a4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80048b2:	4b25      	ldr	r3, [pc, #148]	; (8004948 <SUBGHZSPI_Receive+0xa4>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4613      	mov	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	0cdb      	lsrs	r3, r3, #19
 80048c0:	2264      	movs	r2, #100	; 0x64
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d105      	bne.n	80048da <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	609a      	str	r2, [r3, #8]
      break;
 80048d8:	e008      	b.n	80048ec <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3b01      	subs	r3, #1
 80048de:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80048e0:	4b1a      	ldr	r3, [pc, #104]	; (800494c <SUBGHZSPI_Receive+0xa8>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d1ed      	bne.n	80048c8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80048ec:	4b18      	ldr	r3, [pc, #96]	; (8004950 <SUBGHZSPI_Receive+0xac>)
 80048ee:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	22ff      	movs	r2, #255	; 0xff
 80048f4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80048f6:	4b14      	ldr	r3, [pc, #80]	; (8004948 <SUBGHZSPI_Receive+0xa4>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	4613      	mov	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	0cdb      	lsrs	r3, r3, #19
 8004904:	2264      	movs	r2, #100	; 0x64
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d105      	bne.n	800491e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	609a      	str	r2, [r3, #8]
      break;
 800491c:	e008      	b.n	8004930 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3b01      	subs	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004924:	4b09      	ldr	r3, [pc, #36]	; (800494c <SUBGHZSPI_Receive+0xa8>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b01      	cmp	r3, #1
 800492e:	d1ed      	bne.n	800490c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <SUBGHZSPI_Receive+0xa8>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	701a      	strb	r2, [r3, #0]

  return status;
 800493a:	7dfb      	ldrb	r3, [r7, #23]
}
 800493c:	4618      	mov	r0, r3
 800493e:	371c      	adds	r7, #28
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20000004 	.word	0x20000004
 800494c:	58010000 	.word	0x58010000
 8004950:	5801000c 	.word	0x5801000c

08004954 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	791b      	ldrb	r3, [r3, #4]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d111      	bne.n	8004988 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <SUBGHZ_CheckDeviceReady+0x44>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	4413      	add	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	0c1b      	lsrs	r3, r3, #16
 8004972:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004974:	f7ff fbaa 	bl	80040cc <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3b01      	subs	r3, #1
 800497c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1f9      	bne.n	8004978 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004984:	f7ff fb92 	bl	80040ac <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f807 	bl	800499c <SUBGHZ_WaitOnBusy>
 800498e:	4603      	mov	r3, r0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000004 	.word	0x20000004

0800499c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80049a8:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <SUBGHZ_WaitOnBusy+0x58>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	4413      	add	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	0d1b      	lsrs	r3, r3, #20
 80049b6:	2264      	movs	r2, #100	; 0x64
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80049be:	f7ff fbb3 	bl	8004128 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80049c2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d105      	bne.n	80049d6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	609a      	str	r2, [r3, #8]
      break;
 80049d4:	e009      	b.n	80049ea <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3b01      	subs	r3, #1
 80049da:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80049dc:	f7ff fb92 	bl	8004104 <LL_PWR_IsActiveFlag_RFBUSYS>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d0e9      	beq.n	80049be <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20000004 	.word	0x20000004

080049f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e049      	b.n	8004a9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fc ff9e 	bl	8001960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4619      	mov	r1, r3
 8004a36:	4610      	mov	r0, r2
 8004a38:	f000 fa90 	bl	8004f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d001      	beq.n	8004ac0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e02e      	b.n	8004b1e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a16      	ldr	r2, [pc, #88]	; (8004b28 <HAL_TIM_Base_Start+0x80>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d004      	beq.n	8004adc <HAL_TIM_Base_Start+0x34>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ada:	d115      	bne.n	8004b08 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <HAL_TIM_Base_Start+0x84>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b06      	cmp	r3, #6
 8004aec:	d015      	beq.n	8004b1a <HAL_TIM_Base_Start+0x72>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af4:	d011      	beq.n	8004b1a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0201 	orr.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b06:	e008      	b.n	8004b1a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e000      	b.n	8004b1c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	00010007 	.word	0x00010007

08004b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d122      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d11b      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0202 	mvn.w	r2, #2
 8004b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f9d6 	bl	8004f24 <HAL_TIM_IC_CaptureCallback>
 8004b78:	e005      	b.n	8004b86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f9c9 	bl	8004f12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f9d8 	bl	8004f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d122      	bne.n	8004be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d11b      	bne.n	8004be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0204 	mvn.w	r2, #4
 8004bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f9ac 	bl	8004f24 <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f99f 	bl	8004f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f9ae 	bl	8004f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d122      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d11b      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0208 	mvn.w	r2, #8
 8004c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f982 	bl	8004f24 <HAL_TIM_IC_CaptureCallback>
 8004c20:	e005      	b.n	8004c2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f975 	bl	8004f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f984 	bl	8004f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0310 	and.w	r3, r3, #16
 8004c3e:	2b10      	cmp	r3, #16
 8004c40:	d122      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d11b      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0210 	mvn.w	r2, #16
 8004c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f958 	bl	8004f24 <HAL_TIM_IC_CaptureCallback>
 8004c74:	e005      	b.n	8004c82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f94b 	bl	8004f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f95a 	bl	8004f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d10e      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d107      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0201 	mvn.w	r2, #1
 8004cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f926 	bl	8004f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbe:	2b80      	cmp	r3, #128	; 0x80
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ccc:	2b80      	cmp	r3, #128	; 0x80
 8004cce:	d107      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fa9f 	bl	800521e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cee:	d10e      	bne.n	8004d0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	2b80      	cmp	r3, #128	; 0x80
 8004cfc:	d107      	bne.n	8004d0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fa91 	bl	8005230 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b40      	cmp	r3, #64	; 0x40
 8004d1a:	d10e      	bne.n	8004d3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d107      	bne.n	8004d3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f907 	bl	8004f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d10e      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d107      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f06f 0220 	mvn.w	r2, #32
 8004d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fa53 	bl	800520c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_TIM_ConfigClockSource+0x1c>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e0b6      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x18a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2202      	movs	r2, #2
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004da8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc6:	d03e      	beq.n	8004e46 <HAL_TIM_ConfigClockSource+0xd8>
 8004dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dcc:	f200 8087 	bhi.w	8004ede <HAL_TIM_ConfigClockSource+0x170>
 8004dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd4:	f000 8086 	beq.w	8004ee4 <HAL_TIM_ConfigClockSource+0x176>
 8004dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ddc:	d87f      	bhi.n	8004ede <HAL_TIM_ConfigClockSource+0x170>
 8004dde:	2b70      	cmp	r3, #112	; 0x70
 8004de0:	d01a      	beq.n	8004e18 <HAL_TIM_ConfigClockSource+0xaa>
 8004de2:	2b70      	cmp	r3, #112	; 0x70
 8004de4:	d87b      	bhi.n	8004ede <HAL_TIM_ConfigClockSource+0x170>
 8004de6:	2b60      	cmp	r3, #96	; 0x60
 8004de8:	d050      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0x11e>
 8004dea:	2b60      	cmp	r3, #96	; 0x60
 8004dec:	d877      	bhi.n	8004ede <HAL_TIM_ConfigClockSource+0x170>
 8004dee:	2b50      	cmp	r3, #80	; 0x50
 8004df0:	d03c      	beq.n	8004e6c <HAL_TIM_ConfigClockSource+0xfe>
 8004df2:	2b50      	cmp	r3, #80	; 0x50
 8004df4:	d873      	bhi.n	8004ede <HAL_TIM_ConfigClockSource+0x170>
 8004df6:	2b40      	cmp	r3, #64	; 0x40
 8004df8:	d058      	beq.n	8004eac <HAL_TIM_ConfigClockSource+0x13e>
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d86f      	bhi.n	8004ede <HAL_TIM_ConfigClockSource+0x170>
 8004dfe:	2b30      	cmp	r3, #48	; 0x30
 8004e00:	d064      	beq.n	8004ecc <HAL_TIM_ConfigClockSource+0x15e>
 8004e02:	2b30      	cmp	r3, #48	; 0x30
 8004e04:	d86b      	bhi.n	8004ede <HAL_TIM_ConfigClockSource+0x170>
 8004e06:	2b20      	cmp	r3, #32
 8004e08:	d060      	beq.n	8004ecc <HAL_TIM_ConfigClockSource+0x15e>
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d867      	bhi.n	8004ede <HAL_TIM_ConfigClockSource+0x170>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d05c      	beq.n	8004ecc <HAL_TIM_ConfigClockSource+0x15e>
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d05a      	beq.n	8004ecc <HAL_TIM_ConfigClockSource+0x15e>
 8004e16:	e062      	b.n	8004ede <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e28:	f000 f973 	bl	8005112 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	609a      	str	r2, [r3, #8]
      break;
 8004e44:	e04f      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e56:	f000 f95c 	bl	8005112 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e68:	609a      	str	r2, [r3, #8]
      break;
 8004e6a:	e03c      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f000 f8d1 	bl	8005020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2150      	movs	r1, #80	; 0x50
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 f928 	bl	80050da <TIM_ITRx_SetConfig>
      break;
 8004e8a:	e02c      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e98:	461a      	mov	r2, r3
 8004e9a:	f000 f8ef 	bl	800507c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2160      	movs	r1, #96	; 0x60
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f918 	bl	80050da <TIM_ITRx_SetConfig>
      break;
 8004eaa:	e01c      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb8:	461a      	mov	r2, r3
 8004eba:	f000 f8b1 	bl	8005020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2140      	movs	r1, #64	; 0x40
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 f908 	bl	80050da <TIM_ITRx_SetConfig>
      break;
 8004eca:	e00c      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f000 f8ff 	bl	80050da <TIM_ITRx_SetConfig>
      break;
 8004edc:	e003      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee2:	e000      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ee4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr

08004f12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr
	...

08004f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a29      	ldr	r2, [pc, #164]	; (8005014 <TIM_Base_SetConfig+0xb8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_Base_SetConfig+0x20>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7a:	d108      	bne.n	8004f8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a20      	ldr	r2, [pc, #128]	; (8005014 <TIM_Base_SetConfig+0xb8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00b      	beq.n	8004fae <TIM_Base_SetConfig+0x52>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9c:	d007      	beq.n	8004fae <TIM_Base_SetConfig+0x52>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1d      	ldr	r2, [pc, #116]	; (8005018 <TIM_Base_SetConfig+0xbc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d003      	beq.n	8004fae <TIM_Base_SetConfig+0x52>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1c      	ldr	r2, [pc, #112]	; (800501c <TIM_Base_SetConfig+0xc0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d108      	bne.n	8004fc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a0b      	ldr	r2, [pc, #44]	; (8005014 <TIM_Base_SetConfig+0xb8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d007      	beq.n	8004ffc <TIM_Base_SetConfig+0xa0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a0a      	ldr	r2, [pc, #40]	; (8005018 <TIM_Base_SetConfig+0xbc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_Base_SetConfig+0xa0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <TIM_Base_SetConfig+0xc0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d103      	bne.n	8005004 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	615a      	str	r2, [r3, #20]
}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr
 8005014:	40012c00 	.word	0x40012c00
 8005018:	40014400 	.word	0x40014400
 800501c:	40014800 	.word	0x40014800

08005020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0201 	bic.w	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 030a 	bic.w	r3, r3, #10
 800505c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr

0800507c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f023 0210 	bic.w	r2, r3, #16
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	031b      	lsls	r3, r3, #12
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	621a      	str	r2, [r3, #32]
}
 80050d0:	bf00      	nop
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr

080050da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050da:	b480      	push	{r7}
 80050dc:	b085      	sub	sp, #20
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80050f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f043 0307 	orr.w	r3, r3, #7
 8005100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	609a      	str	r2, [r3, #8]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr

08005112 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005112:	b480      	push	{r7}
 8005114:	b087      	sub	sp, #28
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800512c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	021a      	lsls	r2, r3, #8
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	431a      	orrs	r2, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4313      	orrs	r3, r2
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	609a      	str	r2, [r3, #8]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr

08005150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005164:	2302      	movs	r3, #2
 8005166:	e04a      	b.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1e      	ldr	r2, [pc, #120]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d108      	bne.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005198:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a11      	ldr	r2, [pc, #68]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d004      	beq.n	80051d2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d0:	d10c      	bne.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr
 8005208:	40012c00 	.word	0x40012c00

0800520c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr

0800521e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr

08005242 <LL_RCC_GetUSARTClockSource>:
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800524a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	401a      	ands	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	4313      	orrs	r3, r2
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <LL_RCC_GetLPUARTClockSource>:
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800526e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005272:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4013      	ands	r3, r2
}
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr

08005284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e042      	b.n	800531c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7fc fc65 	bl	8001b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2224      	movs	r2, #36	; 0x24
 80052b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fc48 	bl	8005b5c <UART_SetConfig>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e022      	b.n	800531c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 feb0 	bl	8006044 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 ff36 	bl	8006186 <UART_CheckIdleState>
 800531a:	4603      	mov	r3, r0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	; 0x28
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	2b20      	cmp	r3, #32
 800533c:	d173      	bne.n	8005426 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <HAL_UART_Transmit+0x26>
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e06c      	b.n	8005428 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2221      	movs	r2, #33	; 0x21
 800535a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800535e:	f7fc fa3d 	bl	80017dc <HAL_GetTick>
 8005362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	88fa      	ldrh	r2, [r7, #6]
 8005370:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537c:	d108      	bne.n	8005390 <HAL_UART_Transmit+0x6c>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d104      	bne.n	8005390 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e003      	b.n	8005398 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005394:	2300      	movs	r3, #0
 8005396:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005398:	e02c      	b.n	80053f4 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2200      	movs	r2, #0
 80053a2:	2180      	movs	r1, #128	; 0x80
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 ff3c 	bl	8006222 <UART_WaitOnFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e039      	b.n	8005428 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10b      	bne.n	80053d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	3302      	adds	r3, #2
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	e007      	b.n	80053e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	781a      	ldrb	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	3301      	adds	r3, #1
 80053e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1cc      	bne.n	800539a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2200      	movs	r2, #0
 8005408:	2140      	movs	r1, #64	; 0x40
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 ff09 	bl	8006222 <UART_WaitOnFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e006      	b.n	8005428 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	e000      	b.n	8005428 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005426:	2302      	movs	r3, #2
  }
}
 8005428:	4618      	mov	r0, r3
 800542a:	3720      	adds	r7, #32
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	; 0x28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	4613      	mov	r3, r2
 800543c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005444:	2b20      	cmp	r3, #32
 8005446:	d137      	bne.n	80054b8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <HAL_UART_Receive_DMA+0x24>
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e030      	b.n	80054ba <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <HAL_UART_Receive_DMA+0x94>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d01f      	beq.n	80054a8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d018      	beq.n	80054a8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	613b      	str	r3, [r7, #16]
   return(result);
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	623b      	str	r3, [r7, #32]
 8005496:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005498:	69f9      	ldr	r1, [r7, #28]
 800549a:	6a3a      	ldr	r2, [r7, #32]
 800549c:	e841 2300 	strex	r3, r2, [r1]
 80054a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e6      	bne.n	8005476 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80054a8:	88fb      	ldrh	r3, [r7, #6]
 80054aa:	461a      	mov	r2, r3
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 ff80 	bl	80063b4 <UART_Start_Receive_DMA>
 80054b4:	4603      	mov	r3, r0
 80054b6:	e000      	b.n	80054ba <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
  }
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3728      	adds	r7, #40	; 0x28
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40008000 	.word	0x40008000

080054c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b0ba      	sub	sp, #232	; 0xe8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80054f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80054f6:	4013      	ands	r3, r2
 80054f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80054fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005500:	2b00      	cmp	r3, #0
 8005502:	d11b      	bne.n	800553c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b00      	cmp	r3, #0
 800550e:	d015      	beq.n	800553c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b00      	cmp	r3, #0
 800551a:	d105      	bne.n	8005528 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800551c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 82e3 	beq.w	8005af8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	4798      	blx	r3
      }
      return;
 800553a:	e2dd      	b.n	8005af8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800553c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8123 	beq.w	800578c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005546:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800554a:	4b8d      	ldr	r3, [pc, #564]	; (8005780 <HAL_UART_IRQHandler+0x2b8>)
 800554c:	4013      	ands	r3, r2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005552:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005556:	4b8b      	ldr	r3, [pc, #556]	; (8005784 <HAL_UART_IRQHandler+0x2bc>)
 8005558:	4013      	ands	r3, r2
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 8116 	beq.w	800578c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d011      	beq.n	8005590 <HAL_UART_IRQHandler+0xc8>
 800556c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00b      	beq.n	8005590 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2201      	movs	r2, #1
 800557e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005586:	f043 0201 	orr.w	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d011      	beq.n	80055c0 <HAL_UART_IRQHandler+0xf8>
 800559c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00b      	beq.n	80055c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2202      	movs	r2, #2
 80055ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b6:	f043 0204 	orr.w	r2, r3, #4
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d011      	beq.n	80055f0 <HAL_UART_IRQHandler+0x128>
 80055cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00b      	beq.n	80055f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2204      	movs	r2, #4
 80055de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e6:	f043 0202 	orr.w	r2, r3, #2
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d017      	beq.n	800562c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d105      	bne.n	8005614 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005608:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800560c:	4b5c      	ldr	r3, [pc, #368]	; (8005780 <HAL_UART_IRQHandler+0x2b8>)
 800560e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00b      	beq.n	800562c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2208      	movs	r2, #8
 800561a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	f043 0208 	orr.w	r2, r3, #8
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800562c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005634:	2b00      	cmp	r3, #0
 8005636:	d012      	beq.n	800565e <HAL_UART_IRQHandler+0x196>
 8005638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00c      	beq.n	800565e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800564c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005654:	f043 0220 	orr.w	r2, r3, #32
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8249 	beq.w	8005afc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800566a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566e:	f003 0320 	and.w	r3, r3, #32
 8005672:	2b00      	cmp	r3, #0
 8005674:	d013      	beq.n	800569e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d105      	bne.n	800568e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d005      	beq.n	80056c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d054      	beq.n	800576c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 ff5c 	bl	8006580 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d146      	bne.n	8005764 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3308      	adds	r3, #8
 80056dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3308      	adds	r3, #8
 80056fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005702:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800570e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800571a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1d9      	bne.n	80056d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005728:	2b00      	cmp	r3, #0
 800572a:	d017      	beq.n	800575c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005732:	4a15      	ldr	r2, [pc, #84]	; (8005788 <HAL_UART_IRQHandler+0x2c0>)
 8005734:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800573c:	4618      	mov	r0, r3
 800573e:	f7fc fdfd 	bl	800233c <HAL_DMA_Abort_IT>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d019      	beq.n	800577c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005756:	4610      	mov	r0, r2
 8005758:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800575a:	e00f      	b.n	800577c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f9e9 	bl	8005b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005762:	e00b      	b.n	800577c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f9e5 	bl	8005b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576a:	e007      	b.n	800577c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f9e1 	bl	8005b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800577a:	e1bf      	b.n	8005afc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577c:	bf00      	nop
    return;
 800577e:	e1bd      	b.n	8005afc <HAL_UART_IRQHandler+0x634>
 8005780:	10000001 	.word	0x10000001
 8005784:	04000120 	.word	0x04000120
 8005788:	08006835 	.word	0x08006835

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005790:	2b01      	cmp	r3, #1
 8005792:	f040 8153 	bne.w	8005a3c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 814c 	beq.w	8005a3c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8145 	beq.w	8005a3c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2210      	movs	r2, #16
 80057b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c4:	2b40      	cmp	r3, #64	; 0x40
 80057c6:	f040 80bb 	bne.w	8005940 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 818f 	beq.w	8005b00 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ec:	429a      	cmp	r2, r3
 80057ee:	f080 8187 	bcs.w	8005b00 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	f040 8087 	bne.w	800591e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005824:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800582c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800583a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800583e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005846:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1da      	bne.n	8005810 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3308      	adds	r3, #8
 8005860:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800586a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800586c:	f023 0301 	bic.w	r3, r3, #1
 8005870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3308      	adds	r3, #8
 800587a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800587e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005882:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005886:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e1      	bne.n	800585a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3308      	adds	r3, #8
 80058b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e3      	bne.n	8005896 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ec:	f023 0310 	bic.w	r3, r3, #16
 80058f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	461a      	mov	r2, r3
 80058fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005900:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800590c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e4      	bne.n	80058dc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005918:	4618      	mov	r0, r3
 800591a:	f7fc fcb1 	bl	8002280 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005930:	b29b      	uxth	r3, r3
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	b29b      	uxth	r3, r3
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f904 	bl	8005b46 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800593e:	e0df      	b.n	8005b00 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800594c:	b29b      	uxth	r3, r3
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800595a:	b29b      	uxth	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 80d1 	beq.w	8005b04 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005962:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 80cc 	beq.w	8005b04 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800597a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005980:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800598e:	647b      	str	r3, [r7, #68]	; 0x44
 8005990:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800599c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e4      	bne.n	800596c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3308      	adds	r3, #8
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	623b      	str	r3, [r7, #32]
   return(result);
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b8:	f023 0301 	bic.w	r3, r3, #1
 80059bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3308      	adds	r3, #8
 80059c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059ca:	633a      	str	r2, [r7, #48]	; 0x30
 80059cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e1      	bne.n	80059a2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0310 	bic.w	r3, r3, #16
 8005a06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	69b9      	ldr	r1, [r7, #24]
 8005a1a:	69fa      	ldr	r2, [r7, #28]
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	617b      	str	r3, [r7, #20]
   return(result);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e4      	bne.n	80059f2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f886 	bl	8005b46 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a3a:	e063      	b.n	8005b04 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00e      	beq.n	8005a66 <HAL_UART_IRQHandler+0x59e>
 8005a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 ff29 	bl	80068b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a64:	e051      	b.n	8005b0a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d014      	beq.n	8005a9c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d105      	bne.n	8005a8a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d008      	beq.n	8005a9c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d03a      	beq.n	8005b08 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4798      	blx	r3
    }
    return;
 8005a9a:	e035      	b.n	8005b08 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d009      	beq.n	8005abc <HAL_UART_IRQHandler+0x5f4>
 8005aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fed3 	bl	8006860 <UART_EndTransmit_IT>
    return;
 8005aba:	e026      	b.n	8005b0a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d009      	beq.n	8005adc <HAL_UART_IRQHandler+0x614>
 8005ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005acc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 ff00 	bl	80068da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ada:	e016      	b.n	8005b0a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d010      	beq.n	8005b0a <HAL_UART_IRQHandler+0x642>
 8005ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	da0c      	bge.n	8005b0a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fee9 	bl	80068c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005af6:	e008      	b.n	8005b0a <HAL_UART_IRQHandler+0x642>
      return;
 8005af8:	bf00      	nop
 8005afa:	e006      	b.n	8005b0a <HAL_UART_IRQHandler+0x642>
    return;
 8005afc:	bf00      	nop
 8005afe:	e004      	b.n	8005b0a <HAL_UART_IRQHandler+0x642>
      return;
 8005b00:	bf00      	nop
 8005b02:	e002      	b.n	8005b0a <HAL_UART_IRQHandler+0x642>
      return;
 8005b04:	bf00      	nop
 8005b06:	e000      	b.n	8005b0a <HAL_UART_IRQHandler+0x642>
    return;
 8005b08:	bf00      	nop
  }
}
 8005b0a:	37e8      	adds	r7, #232	; 0xe8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr

08005b22 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr

08005b34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr

08005b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b60:	b08c      	sub	sp, #48	; 0x30
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	431a      	orrs	r2, r3
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4b94      	ldr	r3, [pc, #592]	; (8005ddc <UART_SetConfig+0x280>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b94:	430b      	orrs	r3, r1
 8005b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a89      	ldr	r2, [pc, #548]	; (8005de0 <UART_SetConfig+0x284>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005bd2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	f023 010f 	bic.w	r1, r3, #15
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a7a      	ldr	r2, [pc, #488]	; (8005de4 <UART_SetConfig+0x288>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d127      	bne.n	8005c50 <UART_SetConfig+0xf4>
 8005c00:	2003      	movs	r0, #3
 8005c02:	f7ff fb1e 	bl	8005242 <LL_RCC_GetUSARTClockSource>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d81b      	bhi.n	8005c48 <UART_SetConfig+0xec>
 8005c10:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <UART_SetConfig+0xbc>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005c39 	.word	0x08005c39
 8005c20:	08005c31 	.word	0x08005c31
 8005c24:	08005c41 	.word	0x08005c41
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c2e:	e080      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005c30:	2302      	movs	r3, #2
 8005c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c36:	e07c      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c3e:	e078      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005c40:	2308      	movs	r3, #8
 8005c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c46:	e074      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c4e:	e070      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a64      	ldr	r2, [pc, #400]	; (8005de8 <UART_SetConfig+0x28c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d138      	bne.n	8005ccc <UART_SetConfig+0x170>
 8005c5a:	200c      	movs	r0, #12
 8005c5c:	f7ff faf1 	bl	8005242 <LL_RCC_GetUSARTClockSource>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005c66:	2b0c      	cmp	r3, #12
 8005c68:	d82c      	bhi.n	8005cc4 <UART_SetConfig+0x168>
 8005c6a:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <UART_SetConfig+0x114>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005ca5 	.word	0x08005ca5
 8005c74:	08005cc5 	.word	0x08005cc5
 8005c78:	08005cc5 	.word	0x08005cc5
 8005c7c:	08005cc5 	.word	0x08005cc5
 8005c80:	08005cb5 	.word	0x08005cb5
 8005c84:	08005cc5 	.word	0x08005cc5
 8005c88:	08005cc5 	.word	0x08005cc5
 8005c8c:	08005cc5 	.word	0x08005cc5
 8005c90:	08005cad 	.word	0x08005cad
 8005c94:	08005cc5 	.word	0x08005cc5
 8005c98:	08005cc5 	.word	0x08005cc5
 8005c9c:	08005cc5 	.word	0x08005cc5
 8005ca0:	08005cbd 	.word	0x08005cbd
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005caa:	e042      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005cac:	2302      	movs	r3, #2
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb2:	e03e      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cba:	e03a      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005cbc:	2308      	movs	r3, #8
 8005cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cc2:	e036      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cca:	e032      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a43      	ldr	r2, [pc, #268]	; (8005de0 <UART_SetConfig+0x284>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d12a      	bne.n	8005d2c <UART_SetConfig+0x1d0>
 8005cd6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005cda:	f7ff fac4 	bl	8005266 <LL_RCC_GetLPUARTClockSource>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ce4:	d01a      	beq.n	8005d1c <UART_SetConfig+0x1c0>
 8005ce6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cea:	d81b      	bhi.n	8005d24 <UART_SetConfig+0x1c8>
 8005cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cf0:	d00c      	beq.n	8005d0c <UART_SetConfig+0x1b0>
 8005cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cf6:	d815      	bhi.n	8005d24 <UART_SetConfig+0x1c8>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <UART_SetConfig+0x1a8>
 8005cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d00:	d008      	beq.n	8005d14 <UART_SetConfig+0x1b8>
 8005d02:	e00f      	b.n	8005d24 <UART_SetConfig+0x1c8>
 8005d04:	2300      	movs	r3, #0
 8005d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d0a:	e012      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d12:	e00e      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005d14:	2304      	movs	r3, #4
 8005d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d1a:	e00a      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d22:	e006      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005d24:	2310      	movs	r3, #16
 8005d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d2a:	e002      	b.n	8005d32 <UART_SetConfig+0x1d6>
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2a      	ldr	r2, [pc, #168]	; (8005de0 <UART_SetConfig+0x284>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	f040 80a4 	bne.w	8005e86 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d823      	bhi.n	8005d8e <UART_SetConfig+0x232>
 8005d46:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <UART_SetConfig+0x1f0>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d8f 	.word	0x08005d8f
 8005d54:	08005d79 	.word	0x08005d79
 8005d58:	08005d8f 	.word	0x08005d8f
 8005d5c:	08005d7f 	.word	0x08005d7f
 8005d60:	08005d8f 	.word	0x08005d8f
 8005d64:	08005d8f 	.word	0x08005d8f
 8005d68:	08005d8f 	.word	0x08005d8f
 8005d6c:	08005d87 	.word	0x08005d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d70:	f7fd fea4 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
 8005d74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d76:	e010      	b.n	8005d9a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d78:	4b1c      	ldr	r3, [pc, #112]	; (8005dec <UART_SetConfig+0x290>)
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d7c:	e00d      	b.n	8005d9a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d7e:	f7fd fde9 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8005d82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d84:	e009      	b.n	8005d9a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d8c:	e005      	b.n	8005d9a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8137 	beq.w	8006010 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	4a12      	ldr	r2, [pc, #72]	; (8005df0 <UART_SetConfig+0x294>)
 8005da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dac:	461a      	mov	r2, r3
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	4413      	add	r3, r2
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d305      	bcc.n	8005dd2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d910      	bls.n	8005df4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005dd8:	e11a      	b.n	8006010 <UART_SetConfig+0x4b4>
 8005dda:	bf00      	nop
 8005ddc:	cfff69f3 	.word	0xcfff69f3
 8005de0:	40008000 	.word	0x40008000
 8005de4:	40013800 	.word	0x40013800
 8005de8:	40004400 	.word	0x40004400
 8005dec:	00f42400 	.word	0x00f42400
 8005df0:	0800b4e4 	.word	0x0800b4e4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	2200      	movs	r2, #0
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	60fa      	str	r2, [r7, #12]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	4a8e      	ldr	r2, [pc, #568]	; (800603c <UART_SetConfig+0x4e0>)
 8005e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2200      	movs	r2, #0
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	607a      	str	r2, [r7, #4]
 8005e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e16:	f7fa fa03 	bl	8000220 <__aeabi_uldivmod>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4610      	mov	r0, r2
 8005e20:	4619      	mov	r1, r3
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	f04f 0300 	mov.w	r3, #0
 8005e2a:	020b      	lsls	r3, r1, #8
 8005e2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e30:	0202      	lsls	r2, r0, #8
 8005e32:	6979      	ldr	r1, [r7, #20]
 8005e34:	6849      	ldr	r1, [r1, #4]
 8005e36:	0849      	lsrs	r1, r1, #1
 8005e38:	2000      	movs	r0, #0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	eb12 0804 	adds.w	r8, r2, r4
 8005e42:	eb43 0905 	adc.w	r9, r3, r5
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	469a      	mov	sl, r3
 8005e4e:	4693      	mov	fp, r2
 8005e50:	4652      	mov	r2, sl
 8005e52:	465b      	mov	r3, fp
 8005e54:	4640      	mov	r0, r8
 8005e56:	4649      	mov	r1, r9
 8005e58:	f7fa f9e2 	bl	8000220 <__aeabi_uldivmod>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4613      	mov	r3, r2
 8005e62:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e6a:	d308      	bcc.n	8005e7e <UART_SetConfig+0x322>
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e72:	d204      	bcs.n	8005e7e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6a3a      	ldr	r2, [r7, #32]
 8005e7a:	60da      	str	r2, [r3, #12]
 8005e7c:	e0c8      	b.n	8006010 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e84:	e0c4      	b.n	8006010 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e8e:	d167      	bne.n	8005f60 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005e90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d828      	bhi.n	8005eea <UART_SetConfig+0x38e>
 8005e98:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <UART_SetConfig+0x344>)
 8005e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9e:	bf00      	nop
 8005ea0:	08005ec5 	.word	0x08005ec5
 8005ea4:	08005ecd 	.word	0x08005ecd
 8005ea8:	08005ed5 	.word	0x08005ed5
 8005eac:	08005eeb 	.word	0x08005eeb
 8005eb0:	08005edb 	.word	0x08005edb
 8005eb4:	08005eeb 	.word	0x08005eeb
 8005eb8:	08005eeb 	.word	0x08005eeb
 8005ebc:	08005eeb 	.word	0x08005eeb
 8005ec0:	08005ee3 	.word	0x08005ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec4:	f7fd fdfa 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
 8005ec8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005eca:	e014      	b.n	8005ef6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ecc:	f7fd fe08 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 8005ed0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ed2:	e010      	b.n	8005ef6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed4:	4b5a      	ldr	r3, [pc, #360]	; (8006040 <UART_SetConfig+0x4e4>)
 8005ed6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ed8:	e00d      	b.n	8005ef6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eda:	f7fd fd3b 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8005ede:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ee0:	e009      	b.n	8005ef6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ee8:	e005      	b.n	8005ef6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ef4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 8089 	beq.w	8006010 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	4a4e      	ldr	r2, [pc, #312]	; (800603c <UART_SetConfig+0x4e0>)
 8005f04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f10:	005a      	lsls	r2, r3, #1
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	441a      	add	r2, r3
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	2b0f      	cmp	r3, #15
 8005f28:	d916      	bls.n	8005f58 <UART_SetConfig+0x3fc>
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f30:	d212      	bcs.n	8005f58 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f023 030f 	bic.w	r3, r3, #15
 8005f3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	085b      	lsrs	r3, r3, #1
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	8bfb      	ldrh	r3, [r7, #30]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	8bfa      	ldrh	r2, [r7, #30]
 8005f54:	60da      	str	r2, [r3, #12]
 8005f56:	e05b      	b.n	8006010 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f5e:	e057      	b.n	8006010 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d828      	bhi.n	8005fba <UART_SetConfig+0x45e>
 8005f68:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <UART_SetConfig+0x414>)
 8005f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6e:	bf00      	nop
 8005f70:	08005f95 	.word	0x08005f95
 8005f74:	08005f9d 	.word	0x08005f9d
 8005f78:	08005fa5 	.word	0x08005fa5
 8005f7c:	08005fbb 	.word	0x08005fbb
 8005f80:	08005fab 	.word	0x08005fab
 8005f84:	08005fbb 	.word	0x08005fbb
 8005f88:	08005fbb 	.word	0x08005fbb
 8005f8c:	08005fbb 	.word	0x08005fbb
 8005f90:	08005fb3 	.word	0x08005fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f94:	f7fd fd92 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
 8005f98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f9a:	e014      	b.n	8005fc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f9c:	f7fd fda0 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 8005fa0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fa2:	e010      	b.n	8005fc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa4:	4b26      	ldr	r3, [pc, #152]	; (8006040 <UART_SetConfig+0x4e4>)
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fa8:	e00d      	b.n	8005fc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005faa:	f7fd fcd3 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8005fae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fb0:	e009      	b.n	8005fc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fb8:	e005      	b.n	8005fc6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fc4:	bf00      	nop
    }

    if (pclk != 0U)
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d021      	beq.n	8006010 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	4a1a      	ldr	r2, [pc, #104]	; (800603c <UART_SetConfig+0x4e0>)
 8005fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	085b      	lsrs	r3, r3, #1
 8005fe4:	441a      	add	r2, r3
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	2b0f      	cmp	r3, #15
 8005ff4:	d909      	bls.n	800600a <UART_SetConfig+0x4ae>
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ffc:	d205      	bcs.n	800600a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	b29a      	uxth	r2, r3
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60da      	str	r2, [r3, #12]
 8006008:	e002      	b.n	8006010 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2201      	movs	r2, #1
 8006014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2201      	movs	r2, #1
 800601c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2200      	movs	r2, #0
 8006024:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2200      	movs	r2, #0
 800602a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800602c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006030:	4618      	mov	r0, r3
 8006032:	3730      	adds	r7, #48	; 0x30
 8006034:	46bd      	mov	sp, r7
 8006036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800603a:	bf00      	nop
 800603c:	0800b4e4 	.word	0x0800b4e4
 8006040:	00f42400 	.word	0x00f42400

08006044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	f003 0310 	and.w	r3, r3, #16
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01a      	beq.n	800615a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006142:	d10a      	bne.n	800615a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	605a      	str	r2, [r3, #4]
  }
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	4770      	bx	lr

08006186 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b086      	sub	sp, #24
 800618a:	af02      	add	r7, sp, #8
 800618c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006196:	f7fb fb21 	bl	80017dc <HAL_GetTick>
 800619a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0308 	and.w	r3, r3, #8
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d10e      	bne.n	80061c8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f832 	bl	8006222 <UART_WaitOnFlagUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e028      	b.n	800621a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0304 	and.w	r3, r3, #4
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d10e      	bne.n	80061f4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f81c 	bl	8006222 <UART_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e012      	b.n	800621a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2220      	movs	r2, #32
 8006200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b09c      	sub	sp, #112	; 0x70
 8006226:	af00      	add	r7, sp, #0
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	603b      	str	r3, [r7, #0]
 800622e:	4613      	mov	r3, r2
 8006230:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006232:	e0a9      	b.n	8006388 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800623a:	f000 80a5 	beq.w	8006388 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623e:	f7fb facd 	bl	80017dc <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800624a:	429a      	cmp	r2, r3
 800624c:	d302      	bcc.n	8006254 <UART_WaitOnFlagUntilTimeout+0x32>
 800624e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006250:	2b00      	cmp	r3, #0
 8006252:	d140      	bne.n	80062d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006264:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006268:	667b      	str	r3, [r7, #100]	; 0x64
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006272:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006274:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006278:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e6      	bne.n	8006254 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3308      	adds	r3, #8
 800628c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	f023 0301 	bic.w	r3, r3, #1
 800629c:	663b      	str	r3, [r7, #96]	; 0x60
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3308      	adds	r3, #8
 80062a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80062a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e5      	bne.n	8006286 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2220      	movs	r2, #32
 80062be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e069      	b.n	80063aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d051      	beq.n	8006388 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062f2:	d149      	bne.n	8006388 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	e853 3f00 	ldrex	r3, [r3]
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006312:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
 800631e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006324:	e841 2300 	strex	r3, r2, [r1]
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e6      	bne.n	80062fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3308      	adds	r3, #8
 8006336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	e853 3f00 	ldrex	r3, [r3]
 800633e:	613b      	str	r3, [r7, #16]
   return(result);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f023 0301 	bic.w	r3, r3, #1
 8006346:	66bb      	str	r3, [r7, #104]	; 0x68
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006350:	623a      	str	r2, [r7, #32]
 8006352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006354:	69f9      	ldr	r1, [r7, #28]
 8006356:	6a3a      	ldr	r2, [r7, #32]
 8006358:	e841 2300 	strex	r3, r2, [r1]
 800635c:	61bb      	str	r3, [r7, #24]
   return(result);
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e5      	bne.n	8006330 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2220      	movs	r2, #32
 8006368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2220      	movs	r2, #32
 8006370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e010      	b.n	80063aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69da      	ldr	r2, [r3, #28]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4013      	ands	r3, r2
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	429a      	cmp	r2, r3
 8006396:	bf0c      	ite	eq
 8006398:	2301      	moveq	r3, #1
 800639a:	2300      	movne	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	461a      	mov	r2, r3
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	f43f af46 	beq.w	8006234 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3770      	adds	r7, #112	; 0x70
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b096      	sub	sp, #88	; 0x58
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	4613      	mov	r3, r2
 80063c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	88fa      	ldrh	r2, [r7, #6]
 80063cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2222      	movs	r2, #34	; 0x22
 80063dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d02d      	beq.n	8006446 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063f0:	4a40      	ldr	r2, [pc, #256]	; (80064f4 <UART_Start_Receive_DMA+0x140>)
 80063f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063fa:	4a3f      	ldr	r2, [pc, #252]	; (80064f8 <UART_Start_Receive_DMA+0x144>)
 80063fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006404:	4a3d      	ldr	r2, [pc, #244]	; (80064fc <UART_Start_Receive_DMA+0x148>)
 8006406:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800640e:	2200      	movs	r2, #0
 8006410:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3324      	adds	r3, #36	; 0x24
 800641e:	4619      	mov	r1, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006424:	461a      	mov	r2, r3
 8006426:	88fb      	ldrh	r3, [r7, #6]
 8006428:	f7fb feac 	bl	8002184 <HAL_DMA_Start_IT>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2210      	movs	r2, #16
 8006436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e051      	b.n	80064ea <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d018      	beq.n	8006480 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006462:	657b      	str	r3, [r7, #84]	; 0x54
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	461a      	mov	r2, r3
 800646a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800646c:	64bb      	str	r3, [r7, #72]	; 0x48
 800646e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006474:	e841 2300 	strex	r3, r2, [r1]
 8006478:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800647a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e6      	bne.n	800644e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3308      	adds	r3, #8
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	f043 0301 	orr.w	r3, r3, #1
 8006496:	653b      	str	r3, [r7, #80]	; 0x50
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3308      	adds	r3, #8
 800649e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064a0:	637a      	str	r2, [r7, #52]	; 0x34
 80064a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e5      	bne.n	8006480 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	613b      	str	r3, [r7, #16]
   return(result);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064d4:	623a      	str	r2, [r7, #32]
 80064d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	69f9      	ldr	r1, [r7, #28]
 80064da:	6a3a      	ldr	r2, [r7, #32]
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e5      	bne.n	80064b4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3758      	adds	r7, #88	; 0x58
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	0800664b 	.word	0x0800664b
 80064f8:	08006777 	.word	0x08006777
 80064fc:	080067b5 	.word	0x080067b5

08006500 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006500:	b480      	push	{r7}
 8006502:	b08f      	sub	sp, #60	; 0x3c
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	61fb      	str	r3, [r7, #28]
   return(result);
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006528:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800652c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e6      	bne.n	8006508 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3308      	adds	r3, #8
 8006540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	60bb      	str	r3, [r7, #8]
   return(result);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006550:	633b      	str	r3, [r7, #48]	; 0x30
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3308      	adds	r3, #8
 8006558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655a:	61ba      	str	r2, [r7, #24]
 800655c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	6979      	ldr	r1, [r7, #20]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	613b      	str	r3, [r7, #16]
   return(result);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e5      	bne.n	800653a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006576:	bf00      	nop
 8006578:	373c      	adds	r7, #60	; 0x3c
 800657a:	46bd      	mov	sp, r7
 800657c:	bc80      	pop	{r7}
 800657e:	4770      	bx	lr

08006580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b095      	sub	sp, #84	; 0x54
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800659c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a6:	643b      	str	r3, [r7, #64]	; 0x40
 80065a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065ae:	e841 2300 	strex	r3, r2, [r1]
 80065b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1e6      	bne.n	8006588 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3308      	adds	r3, #8
 80065c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3308      	adds	r3, #8
 80065dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e3      	bne.n	80065ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d118      	bne.n	800662c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	60bb      	str	r3, [r7, #8]
   return(result);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f023 0310 	bic.w	r3, r3, #16
 800660e:	647b      	str	r3, [r7, #68]	; 0x44
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	6979      	ldr	r1, [r7, #20]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	613b      	str	r3, [r7, #16]
   return(result);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e6      	bne.n	80065fa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006640:	bf00      	nop
 8006642:	3754      	adds	r7, #84	; 0x54
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr

0800664a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b09c      	sub	sp, #112	; 0x70
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d171      	bne.n	800674a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006668:	2200      	movs	r2, #0
 800666a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800666e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800667c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006682:	66bb      	str	r3, [r7, #104]	; 0x68
 8006684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800668c:	65bb      	str	r3, [r7, #88]	; 0x58
 800668e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006692:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800669a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e6      	bne.n	800666e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3308      	adds	r3, #8
 80066a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b2:	f023 0301 	bic.w	r3, r3, #1
 80066b6:	667b      	str	r3, [r7, #100]	; 0x64
 80066b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3308      	adds	r3, #8
 80066be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80066c0:	647a      	str	r2, [r7, #68]	; 0x44
 80066c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066c8:	e841 2300 	strex	r3, r2, [r1]
 80066cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1e5      	bne.n	80066a0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3308      	adds	r3, #8
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	623b      	str	r3, [r7, #32]
   return(result);
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ea:	663b      	str	r3, [r7, #96]	; 0x60
 80066ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3308      	adds	r3, #8
 80066f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066f4:	633a      	str	r2, [r7, #48]	; 0x30
 80066f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e5      	bne.n	80066d4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670a:	2220      	movs	r2, #32
 800670c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d118      	bne.n	800674a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	60fb      	str	r3, [r7, #12]
   return(result);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f023 0310 	bic.w	r3, r3, #16
 800672c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800672e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006736:	61fb      	str	r3, [r7, #28]
 8006738:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	69b9      	ldr	r1, [r7, #24]
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	617b      	str	r3, [r7, #20]
   return(result);
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e6      	bne.n	8006718 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800674a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674c:	2200      	movs	r2, #0
 800674e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006754:	2b01      	cmp	r3, #1
 8006756:	d107      	bne.n	8006768 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800675a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800675e:	4619      	mov	r1, r3
 8006760:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006762:	f7ff f9f0 	bl	8005b46 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006766:	e002      	b.n	800676e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006768:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800676a:	f7fa faa9 	bl	8000cc0 <HAL_UART_RxCpltCallback>
}
 800676e:	bf00      	nop
 8006770:	3770      	adds	r7, #112	; 0x70
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006782:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2201      	movs	r2, #1
 8006788:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800678e:	2b01      	cmp	r3, #1
 8006790:	d109      	bne.n	80067a6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006798:	085b      	lsrs	r3, r3, #1
 800679a:	b29b      	uxth	r3, r3
 800679c:	4619      	mov	r1, r3
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f7ff f9d1 	bl	8005b46 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067a4:	e002      	b.n	80067ac <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7ff f9bb 	bl	8005b22 <HAL_UART_RxHalfCpltCallback>
}
 80067ac:	bf00      	nop
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067dc:	2b80      	cmp	r3, #128	; 0x80
 80067de:	d109      	bne.n	80067f4 <UART_DMAError+0x40>
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2b21      	cmp	r3, #33	; 0x21
 80067e4:	d106      	bne.n	80067f4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80067ee:	6978      	ldr	r0, [r7, #20]
 80067f0:	f7ff fe86 	bl	8006500 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d109      	bne.n	8006816 <UART_DMAError+0x62>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b22      	cmp	r3, #34	; 0x22
 8006806:	d106      	bne.n	8006816 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2200      	movs	r2, #0
 800680c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006810:	6978      	ldr	r0, [r7, #20]
 8006812:	f7ff feb5 	bl	8006580 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681c:	f043 0210 	orr.w	r2, r3, #16
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006826:	6978      	ldr	r0, [r7, #20]
 8006828:	f7ff f984 	bl	8005b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800682c:	bf00      	nop
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006840:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7ff f96e 	bl	8005b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	60bb      	str	r3, [r7, #8]
   return(result);
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800687c:	61fb      	str	r3, [r7, #28]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	61bb      	str	r3, [r7, #24]
 8006888:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	6979      	ldr	r1, [r7, #20]
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	613b      	str	r3, [r7, #16]
   return(result);
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e6      	bne.n	8006868 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2220      	movs	r2, #32
 800689e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7ff f931 	bl	8005b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ae:	bf00      	nop
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr

080068c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bc80      	pop	{r7}
 80068d8:	4770      	bx	lr

080068da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bc80      	pop	{r7}
 80068ea:	4770      	bx	lr

080068ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d101      	bne.n	8006902 <HAL_UARTEx_DisableFifoMode+0x16>
 80068fe:	2302      	movs	r3, #2
 8006900:	e027      	b.n	8006952 <HAL_UARTEx_DisableFifoMode+0x66>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2224      	movs	r2, #36	; 0x24
 800690e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0201 	bic.w	r2, r2, #1
 8006928:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006930:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr

0800695c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006970:	2302      	movs	r3, #2
 8006972:	e02d      	b.n	80069d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2224      	movs	r2, #36	; 0x24
 8006980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0201 	bic.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f84f 	bl	8006a54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e02d      	b.n	8006a4c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2224      	movs	r2, #36	; 0x24
 80069fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f022 0201 	bic.w	r2, r2, #1
 8006a16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f811 	bl	8006a54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d108      	bne.n	8006a76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a74:	e031      	b.n	8006ada <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a76:	2308      	movs	r3, #8
 8006a78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a7a:	2308      	movs	r3, #8
 8006a7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	0e5b      	lsrs	r3, r3, #25
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	f003 0307 	and.w	r3, r3, #7
 8006a8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	0f5b      	lsrs	r3, r3, #29
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	7b3a      	ldrb	r2, [r7, #12]
 8006aa2:	4910      	ldr	r1, [pc, #64]	; (8006ae4 <UARTEx_SetNbDataToProcess+0x90>)
 8006aa4:	5c8a      	ldrb	r2, [r1, r2]
 8006aa6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006aaa:	7b3a      	ldrb	r2, [r7, #12]
 8006aac:	490e      	ldr	r1, [pc, #56]	; (8006ae8 <UARTEx_SetNbDataToProcess+0x94>)
 8006aae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ab0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	7b7a      	ldrb	r2, [r7, #13]
 8006ac0:	4908      	ldr	r1, [pc, #32]	; (8006ae4 <UARTEx_SetNbDataToProcess+0x90>)
 8006ac2:	5c8a      	ldrb	r2, [r1, r2]
 8006ac4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ac8:	7b7a      	ldrb	r2, [r7, #13]
 8006aca:	4907      	ldr	r1, [pc, #28]	; (8006ae8 <UARTEx_SetNbDataToProcess+0x94>)
 8006acc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ace:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr
 8006ae4:	0800b4fc 	.word	0x0800b4fc
 8006ae8:	0800b504 	.word	0x0800b504

08006aec <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af02      	add	r7, sp, #8
 8006af2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8006af4:	4a24      	ldr	r2, [pc, #144]	; (8006b88 <RadioInit+0x9c>)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8006afa:	4b24      	ldr	r3, [pc, #144]	; (8006b8c <RadioInit+0xa0>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8006b00:	4b22      	ldr	r3, [pc, #136]	; (8006b8c <RadioInit+0xa0>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8006b06:	4b21      	ldr	r3, [pc, #132]	; (8006b8c <RadioInit+0xa0>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8006b0c:	4b1f      	ldr	r3, [pc, #124]	; (8006b8c <RadioInit+0xa0>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8006b12:	481f      	ldr	r0, [pc, #124]	; (8006b90 <RadioInit+0xa4>)
 8006b14:	f001 ff88 	bl	8008a28 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8006b18:	4b1c      	ldr	r3, [pc, #112]	; (8006b8c <RadioInit+0xa0>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8006b1e:	4b1b      	ldr	r3, [pc, #108]	; (8006b8c <RadioInit+0xa0>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8006b24:	f002 fa1c 	bl	8008f60 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8006b28:	2100      	movs	r1, #0
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	f002 fde8 	bl	8009700 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8006b30:	2204      	movs	r2, #4
 8006b32:	2100      	movs	r1, #0
 8006b34:	2001      	movs	r0, #1
 8006b36:	f002 fba5 	bl	8009284 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006b42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006b46:	f002 fad5 	bl	80090f4 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8006b4a:	f000 fe91 	bl	8007870 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <RadioInit+0xa8>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b5a:	480f      	ldr	r0, [pc, #60]	; (8006b98 <RadioInit+0xac>)
 8006b5c:	f003 fb32 	bl	800a1c4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8006b60:	2300      	movs	r3, #0
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <RadioInit+0xb0>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b6c:	480c      	ldr	r0, [pc, #48]	; (8006ba0 <RadioInit+0xb4>)
 8006b6e:	f003 fb29 	bl	800a1c4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8006b72:	4809      	ldr	r0, [pc, #36]	; (8006b98 <RadioInit+0xac>)
 8006b74:	f003 fbca 	bl	800a30c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8006b78:	4809      	ldr	r0, [pc, #36]	; (8006ba0 <RadioInit+0xb4>)
 8006b7a:	f003 fbc7 	bl	800a30c <UTIL_TIMER_Stop>
}
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	200005e8 	.word	0x200005e8
 8006b8c:	200005ec 	.word	0x200005ec
 8006b90:	08007c69 	.word	0x08007c69
 8006b94:	08007bf1 	.word	0x08007bf1
 8006b98:	20000648 	.word	0x20000648
 8006b9c:	08007c05 	.word	0x08007c05
 8006ba0:	20000660 	.word	0x20000660

08006ba4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8006ba8:	f001 ff86 	bl	8008ab8 <SUBGRF_GetOperatingMode>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b07      	cmp	r3, #7
 8006bb0:	d00a      	beq.n	8006bc8 <RadioGetStatus+0x24>
 8006bb2:	2b07      	cmp	r3, #7
 8006bb4:	dc0a      	bgt.n	8006bcc <RadioGetStatus+0x28>
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d002      	beq.n	8006bc0 <RadioGetStatus+0x1c>
 8006bba:	2b05      	cmp	r3, #5
 8006bbc:	d002      	beq.n	8006bc4 <RadioGetStatus+0x20>
 8006bbe:	e005      	b.n	8006bcc <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e004      	b.n	8006bce <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e002      	b.n	8006bce <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e000      	b.n	8006bce <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8006bcc:	2300      	movs	r3, #0
    }
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8006bde:	4a2a      	ldr	r2, [pc, #168]	; (8006c88 <RadioSetModem+0xb4>)
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f003 f95d 	bl	8009ea6 <RFW_SetRadioModem>
    switch( modem )
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	2b05      	cmp	r3, #5
 8006bf0:	d80e      	bhi.n	8006c10 <RadioSetModem+0x3c>
 8006bf2:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <RadioSetModem+0x24>)
 8006bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf8:	08006c1f 	.word	0x08006c1f
 8006bfc:	08006c2d 	.word	0x08006c2d
 8006c00:	08006c11 	.word	0x08006c11
 8006c04:	08006c53 	.word	0x08006c53
 8006c08:	08006c61 	.word	0x08006c61
 8006c0c:	08006c6f 	.word	0x08006c6f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8006c10:	2003      	movs	r0, #3
 8006c12:	f002 fb11 	bl	8009238 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006c16:	4b1c      	ldr	r3, [pc, #112]	; (8006c88 <RadioSetModem+0xb4>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	735a      	strb	r2, [r3, #13]
        break;
 8006c1c:	e02f      	b.n	8006c7e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8006c1e:	2000      	movs	r0, #0
 8006c20:	f002 fb0a 	bl	8009238 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006c24:	4b18      	ldr	r3, [pc, #96]	; (8006c88 <RadioSetModem+0xb4>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	735a      	strb	r2, [r3, #13]
        break;
 8006c2a:	e028      	b.n	8006c7e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8006c2c:	2001      	movs	r0, #1
 8006c2e:	f002 fb03 	bl	8009238 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8006c32:	4b15      	ldr	r3, [pc, #84]	; (8006c88 <RadioSetModem+0xb4>)
 8006c34:	7b5a      	ldrb	r2, [r3, #13]
 8006c36:	4b14      	ldr	r3, [pc, #80]	; (8006c88 <RadioSetModem+0xb4>)
 8006c38:	7b1b      	ldrb	r3, [r3, #12]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d01e      	beq.n	8006c7c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8006c3e:	4b12      	ldr	r3, [pc, #72]	; (8006c88 <RadioSetModem+0xb4>)
 8006c40:	7b1a      	ldrb	r2, [r3, #12]
 8006c42:	4b11      	ldr	r3, [pc, #68]	; (8006c88 <RadioSetModem+0xb4>)
 8006c44:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8006c46:	4b10      	ldr	r3, [pc, #64]	; (8006c88 <RadioSetModem+0xb4>)
 8006c48:	7b5b      	ldrb	r3, [r3, #13]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 ff9a 	bl	8007b84 <RadioSetPublicNetwork>
        }
        break;
 8006c50:	e014      	b.n	8006c7c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006c52:	2002      	movs	r0, #2
 8006c54:	f002 faf0 	bl	8009238 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006c58:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <RadioSetModem+0xb4>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	735a      	strb	r2, [r3, #13]
        break;
 8006c5e:	e00e      	b.n	8006c7e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006c60:	2002      	movs	r0, #2
 8006c62:	f002 fae9 	bl	8009238 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006c66:	4b08      	ldr	r3, [pc, #32]	; (8006c88 <RadioSetModem+0xb4>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	735a      	strb	r2, [r3, #13]
        break;
 8006c6c:	e007      	b.n	8006c7e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8006c6e:	2000      	movs	r0, #0
 8006c70:	f002 fae2 	bl	8009238 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <RadioSetModem+0xb4>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	735a      	strb	r2, [r3, #13]
        break;
 8006c7a:	e000      	b.n	8006c7e <RadioSetModem+0xaa>
        break;
 8006c7c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8006c7e:	bf00      	nop
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	200005ec 	.word	0x200005ec

08006c8c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f002 fa89 	bl	80091ac <SUBGRF_SetRfFrequency>
}
 8006c9a:	bf00      	nop
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b090      	sub	sp, #64	; 0x40
 8006ca6:	af0a      	add	r7, sp, #40	; 0x28
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	603b      	str	r3, [r7, #0]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8006cbe:	f000 fdea 	bl	8007896 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	f7ff ff86 	bl	8006bd4 <RadioSetModem>

    RadioSetChannel( freq );
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f7ff ffdf 	bl	8006c8c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8006cce:	2301      	movs	r3, #1
 8006cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	9308      	str	r3, [sp, #32]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	9307      	str	r3, [sp, #28]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	9306      	str	r3, [sp, #24]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9305      	str	r3, [sp, #20]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	9304      	str	r3, [sp, #16]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9303      	str	r3, [sp, #12]
 8006cea:	2300      	movs	r3, #0
 8006cec:	9302      	str	r3, [sp, #8]
 8006cee:	2303      	movs	r3, #3
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006cfc:	68b9      	ldr	r1, [r7, #8]
 8006cfe:	2000      	movs	r0, #0
 8006d00:	f000 f83c 	bl	8006d7c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8006d04:	2000      	movs	r0, #0
 8006d06:	f000 fdcd 	bl	80078a4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8006d0a:	f000 ff69 	bl	8007be0 <RadioGetWakeupTime>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fa fd77 	bl	8001804 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8006d16:	f003 fb93 	bl	800a440 <UTIL_TIMER_GetCurrentTime>
 8006d1a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006d1c:	e00d      	b.n	8006d3a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8006d1e:	2000      	movs	r0, #0
 8006d20:	f000 feae 	bl	8007a80 <RadioRssi>
 8006d24:	4603      	mov	r3, r0
 8006d26:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8006d28:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006d2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	dd02      	ble.n	8006d3a <RadioIsChannelFree+0x98>
        {
            status = false;
 8006d34:	2300      	movs	r3, #0
 8006d36:	75fb      	strb	r3, [r7, #23]
            break;
 8006d38:	e006      	b.n	8006d48 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006d3a:	6938      	ldr	r0, [r7, #16]
 8006d3c:	f003 fb92 	bl	800a464 <UTIL_TIMER_GetElapsedTime>
 8006d40:	4602      	mov	r2, r0
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d8ea      	bhi.n	8006d1e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8006d48:	f000 fda5 	bl	8007896 <RadioStandby>

    return status;
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b082      	sub	sp, #8
 8006d5a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006d60:	2300      	movs	r3, #0
 8006d62:	2200      	movs	r2, #0
 8006d64:	2100      	movs	r1, #0
 8006d66:	2000      	movs	r0, #0
 8006d68:	f002 f9c4 	bl	80090f4 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8006d6c:	f001 ff75 	bl	8008c5a <SUBGRF_GetRandom>
 8006d70:	6078      	str	r0, [r7, #4]

    return rnd;
 8006d72:	687b      	ldr	r3, [r7, #4]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08a      	sub	sp, #40	; 0x28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	607a      	str	r2, [r7, #4]
 8006d86:	461a      	mov	r2, r3
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73fb      	strb	r3, [r7, #15]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8006d90:	4ab9      	ldr	r2, [pc, #740]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006d92:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006d96:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8006d98:	f003 f843 	bl	8009e22 <RFW_DeInit>
    if( rxContinuous == true )
 8006d9c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8006da8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d004      	beq.n	8006dba <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8006db0:	4ab2      	ldr	r2, [pc, #712]	; (800707c <RadioSetRxConfig+0x300>)
 8006db2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006db6:	7013      	strb	r3, [r2, #0]
 8006db8:	e002      	b.n	8006dc0 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8006dba:	4bb0      	ldr	r3, [pc, #704]	; (800707c <RadioSetRxConfig+0x300>)
 8006dbc:	22ff      	movs	r2, #255	; 0xff
 8006dbe:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	2b05      	cmp	r3, #5
 8006dc4:	d009      	beq.n	8006dda <RadioSetRxConfig+0x5e>
 8006dc6:	2b05      	cmp	r3, #5
 8006dc8:	f300 81d7 	bgt.w	800717a <RadioSetRxConfig+0x3fe>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 80bf 	beq.w	8006f50 <RadioSetRxConfig+0x1d4>
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	f000 8124 	beq.w	8007020 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8006dd8:	e1cf      	b.n	800717a <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8006dda:	2001      	movs	r0, #1
 8006ddc:	f002 f882 	bl	8008ee4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006de0:	4ba5      	ldr	r3, [pc, #660]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006de8:	4aa3      	ldr	r2, [pc, #652]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8006dee:	4ba2      	ldr	r3, [pc, #648]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006df0:	2209      	movs	r2, #9
 8006df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8006df6:	4ba0      	ldr	r3, [pc, #640]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006df8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006dfc:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006dfe:	68b8      	ldr	r0, [r7, #8]
 8006e00:	f002 ff42 	bl	8009c88 <SUBGRF_GetFskBandwidthRegValue>
 8006e04:	4603      	mov	r3, r0
 8006e06:	461a      	mov	r2, r3
 8006e08:	4b9b      	ldr	r3, [pc, #620]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006e0e:	4b9a      	ldr	r3, [pc, #616]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006e14:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	4b97      	ldr	r3, [pc, #604]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006e1c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8006e1e:	4b96      	ldr	r3, [pc, #600]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8006e24:	4b94      	ldr	r3, [pc, #592]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006e26:	2210      	movs	r2, #16
 8006e28:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006e2a:	4b93      	ldr	r3, [pc, #588]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8006e30:	4b91      	ldr	r3, [pc, #580]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006e36:	4b91      	ldr	r3, [pc, #580]	; (800707c <RadioSetRxConfig+0x300>)
 8006e38:	781a      	ldrb	r2, [r3, #0]
 8006e3a:	4b8f      	ldr	r3, [pc, #572]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006e3c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006e3e:	4b8e      	ldr	r3, [pc, #568]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006e40:	2201      	movs	r2, #1
 8006e42:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006e44:	4b8c      	ldr	r3, [pc, #560]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8006e4a:	2005      	movs	r0, #5
 8006e4c:	f7ff fec2 	bl	8006bd4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006e50:	488b      	ldr	r0, [pc, #556]	; (8007080 <RadioSetRxConfig+0x304>)
 8006e52:	f002 fae5 	bl	8009420 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006e56:	488b      	ldr	r0, [pc, #556]	; (8007084 <RadioSetRxConfig+0x308>)
 8006e58:	f002 fbb4 	bl	80095c4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006e5c:	4a8a      	ldr	r2, [pc, #552]	; (8007088 <RadioSetRxConfig+0x30c>)
 8006e5e:	f107 031c 	add.w	r3, r7, #28
 8006e62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e66:	e883 0003 	stmia.w	r3, {r0, r1}
 8006e6a:	f107 031c 	add.w	r3, r7, #28
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f001 fe71 	bl	8008b56 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006e74:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e78:	f001 febc 	bl	8008bf4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8006e7c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006e80:	f000 fe1d 	bl	8007abe <RadioRead>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8006e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e8e:	f023 0310 	bic.w	r3, r3, #16
 8006e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8006e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006ea0:	f000 fdfb 	bl	8007a9a <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8006ea4:	2104      	movs	r1, #4
 8006ea6:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8006eaa:	f000 fdf6 	bl	8007a9a <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8006eae:	f640 009b 	movw	r0, #2203	; 0x89b
 8006eb2:	f000 fe04 	bl	8007abe <RadioRead>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8006ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ec0:	f023 031c 	bic.w	r3, r3, #28
 8006ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8006ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ecc:	f043 0308 	orr.w	r3, r3, #8
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	f640 009b 	movw	r0, #2203	; 0x89b
 8006ed8:	f000 fddf 	bl	8007a9a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8006edc:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006ee0:	f000 fded 	bl	8007abe <RadioRead>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8006eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eee:	f023 0318 	bic.w	r3, r3, #24
 8006ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8006ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006efa:	f043 0318 	orr.w	r3, r3, #24
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	4619      	mov	r1, r3
 8006f02:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006f06:	f000 fdc8 	bl	8007a9a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8006f0a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006f0e:	f000 fdd6 	bl	8007abe <RadioRead>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8006f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8006f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f28:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	4619      	mov	r1, r3
 8006f30:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006f34:	f000 fdb1 	bl	8007a9a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006f38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f3a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006f3e:	fb02 f303 	mul.w	r3, r2, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4a:	4a4b      	ldr	r2, [pc, #300]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006f4c:	6093      	str	r3, [r2, #8]
            break;
 8006f4e:	e115      	b.n	800717c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006f50:	2000      	movs	r0, #0
 8006f52:	f001 ffc7 	bl	8008ee4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006f56:	4b48      	ldr	r3, [pc, #288]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006f5e:	4a46      	ldr	r2, [pc, #280]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006f64:	4b44      	ldr	r3, [pc, #272]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006f66:	220b      	movs	r2, #11
 8006f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006f6c:	68b8      	ldr	r0, [r7, #8]
 8006f6e:	f002 fe8b 	bl	8009c88 <SUBGRF_GetFskBandwidthRegValue>
 8006f72:	4603      	mov	r3, r0
 8006f74:	461a      	mov	r2, r3
 8006f76:	4b40      	ldr	r3, [pc, #256]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006f7c:	4b3e      	ldr	r3, [pc, #248]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006f82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f84:	00db      	lsls	r3, r3, #3
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	4b3b      	ldr	r3, [pc, #236]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006f8a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006f8c:	4b3a      	ldr	r3, [pc, #232]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006f8e:	2204      	movs	r2, #4
 8006f90:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8006f92:	4b39      	ldr	r3, [pc, #228]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006f94:	2218      	movs	r2, #24
 8006f96:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006f98:	4b37      	ldr	r3, [pc, #220]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006f9e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006fa2:	f083 0301 	eor.w	r3, r3, #1
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4b33      	ldr	r3, [pc, #204]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006fac:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006fae:	4b33      	ldr	r3, [pc, #204]	; (800707c <RadioSetRxConfig+0x300>)
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	4b31      	ldr	r3, [pc, #196]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006fb4:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8006fb6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006fbe:	4b2e      	ldr	r3, [pc, #184]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006fc0:	22f2      	movs	r2, #242	; 0xf2
 8006fc2:	75da      	strb	r2, [r3, #23]
 8006fc4:	e002      	b.n	8006fcc <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006fc6:	4b2c      	ldr	r3, [pc, #176]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006fcc:	4b2a      	ldr	r3, [pc, #168]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8006fce:	2201      	movs	r2, #1
 8006fd0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006fd2:	f000 fc60 	bl	8007896 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	f7ff fdfc 	bl	8006bd4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006fdc:	4828      	ldr	r0, [pc, #160]	; (8007080 <RadioSetRxConfig+0x304>)
 8006fde:	f002 fa1f 	bl	8009420 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006fe2:	4828      	ldr	r0, [pc, #160]	; (8007084 <RadioSetRxConfig+0x308>)
 8006fe4:	f002 faee 	bl	80095c4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006fe8:	4a28      	ldr	r2, [pc, #160]	; (800708c <RadioSetRxConfig+0x310>)
 8006fea:	f107 0314 	add.w	r3, r7, #20
 8006fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ff2:	e883 0003 	stmia.w	r3, {r0, r1}
 8006ff6:	f107 0314 	add.w	r3, r7, #20
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 fdab 	bl	8008b56 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007000:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007004:	f001 fdf6 	bl	8008bf4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007008:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800700a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800700e:	fb02 f303 	mul.w	r3, r2, r3
 8007012:	461a      	mov	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	fbb2 f3f3 	udiv	r3, r2, r3
 800701a:	4a17      	ldr	r2, [pc, #92]	; (8007078 <RadioSetRxConfig+0x2fc>)
 800701c:	6093      	str	r3, [r2, #8]
            break;
 800701e:	e0ad      	b.n	800717c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007020:	2000      	movs	r0, #0
 8007022:	f001 ff5f 	bl	8008ee4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007026:	4b14      	ldr	r3, [pc, #80]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	b2da      	uxtb	r2, r3
 8007032:	4b11      	ldr	r3, [pc, #68]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8007034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007038:	4a15      	ldr	r2, [pc, #84]	; (8007090 <RadioSetRxConfig+0x314>)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4413      	add	r3, r2
 800703e:	781a      	ldrb	r2, [r3, #0]
 8007040:	4b0d      	ldr	r3, [pc, #52]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8007042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8007046:	4a0c      	ldr	r2, [pc, #48]	; (8007078 <RadioSetRxConfig+0x2fc>)
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d105      	bne.n	8007060 <RadioSetRxConfig+0x2e4>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b0b      	cmp	r3, #11
 8007058:	d008      	beq.n	800706c <RadioSetRxConfig+0x2f0>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b0c      	cmp	r3, #12
 800705e:	d005      	beq.n	800706c <RadioSetRxConfig+0x2f0>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d116      	bne.n	8007094 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b0c      	cmp	r3, #12
 800706a:	d113      	bne.n	8007094 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800706c:	4b02      	ldr	r3, [pc, #8]	; (8007078 <RadioSetRxConfig+0x2fc>)
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007074:	e012      	b.n	800709c <RadioSetRxConfig+0x320>
 8007076:	bf00      	nop
 8007078:	200005ec 	.word	0x200005ec
 800707c:	2000000d 	.word	0x2000000d
 8007080:	20000624 	.word	0x20000624
 8007084:	200005fa 	.word	0x200005fa
 8007088:	0800b3f4 	.word	0x0800b3f4
 800708c:	0800b3fc 	.word	0x0800b3fc
 8007090:	0800b598 	.word	0x0800b598
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007094:	4b3b      	ldr	r3, [pc, #236]	; (8007184 <RadioSetRxConfig+0x408>)
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800709c:	4b39      	ldr	r3, [pc, #228]	; (8007184 <RadioSetRxConfig+0x408>)
 800709e:	2201      	movs	r2, #1
 80070a0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80070a2:	4b38      	ldr	r3, [pc, #224]	; (8007184 <RadioSetRxConfig+0x408>)
 80070a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070a8:	2b05      	cmp	r3, #5
 80070aa:	d004      	beq.n	80070b6 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80070ac:	4b35      	ldr	r3, [pc, #212]	; (8007184 <RadioSetRxConfig+0x408>)
 80070ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80070b2:	2b06      	cmp	r3, #6
 80070b4:	d10a      	bne.n	80070cc <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80070b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80070b8:	2b0b      	cmp	r3, #11
 80070ba:	d803      	bhi.n	80070c4 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80070bc:	4b31      	ldr	r3, [pc, #196]	; (8007184 <RadioSetRxConfig+0x408>)
 80070be:	220c      	movs	r2, #12
 80070c0:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80070c2:	e006      	b.n	80070d2 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80070c4:	4a2f      	ldr	r2, [pc, #188]	; (8007184 <RadioSetRxConfig+0x408>)
 80070c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80070c8:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80070ca:	e002      	b.n	80070d2 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80070cc:	4a2d      	ldr	r2, [pc, #180]	; (8007184 <RadioSetRxConfig+0x408>)
 80070ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80070d0:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80070d2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80070d6:	4b2b      	ldr	r3, [pc, #172]	; (8007184 <RadioSetRxConfig+0x408>)
 80070d8:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80070da:	4b2b      	ldr	r3, [pc, #172]	; (8007188 <RadioSetRxConfig+0x40c>)
 80070dc:	781a      	ldrb	r2, [r3, #0]
 80070de:	4b29      	ldr	r3, [pc, #164]	; (8007184 <RadioSetRxConfig+0x408>)
 80070e0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80070e2:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80070e6:	4b27      	ldr	r3, [pc, #156]	; (8007184 <RadioSetRxConfig+0x408>)
 80070e8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80070ec:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80070f0:	4b24      	ldr	r3, [pc, #144]	; (8007184 <RadioSetRxConfig+0x408>)
 80070f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80070f6:	f000 fbce 	bl	8007896 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80070fa:	2001      	movs	r0, #1
 80070fc:	f7ff fd6a 	bl	8006bd4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007100:	4822      	ldr	r0, [pc, #136]	; (800718c <RadioSetRxConfig+0x410>)
 8007102:	f002 f98d 	bl	8009420 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007106:	4822      	ldr	r0, [pc, #136]	; (8007190 <RadioSetRxConfig+0x414>)
 8007108:	f002 fa5c 	bl	80095c4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800710c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800710e:	b2db      	uxtb	r3, r3
 8007110:	4618      	mov	r0, r3
 8007112:	f001 fef6 	bl	8008f02 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8007116:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800711a:	f002 fbaf 	bl	800987c <SUBGRF_ReadRegister>
 800711e:	4603      	mov	r3, r0
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	b2db      	uxtb	r3, r3
 8007126:	4619      	mov	r1, r3
 8007128:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800712c:	f002 fb92 	bl	8009854 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007130:	4b14      	ldr	r3, [pc, #80]	; (8007184 <RadioSetRxConfig+0x408>)
 8007132:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007136:	2b01      	cmp	r3, #1
 8007138:	d10d      	bne.n	8007156 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800713a:	f240 7036 	movw	r0, #1846	; 0x736
 800713e:	f002 fb9d 	bl	800987c <SUBGRF_ReadRegister>
 8007142:	4603      	mov	r3, r0
 8007144:	f023 0304 	bic.w	r3, r3, #4
 8007148:	b2db      	uxtb	r3, r3
 800714a:	4619      	mov	r1, r3
 800714c:	f240 7036 	movw	r0, #1846	; 0x736
 8007150:	f002 fb80 	bl	8009854 <SUBGRF_WriteRegister>
 8007154:	e00c      	b.n	8007170 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8007156:	f240 7036 	movw	r0, #1846	; 0x736
 800715a:	f002 fb8f 	bl	800987c <SUBGRF_ReadRegister>
 800715e:	4603      	mov	r3, r0
 8007160:	f043 0304 	orr.w	r3, r3, #4
 8007164:	b2db      	uxtb	r3, r3
 8007166:	4619      	mov	r1, r3
 8007168:	f240 7036 	movw	r0, #1846	; 0x736
 800716c:	f002 fb72 	bl	8009854 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8007170:	4b04      	ldr	r3, [pc, #16]	; (8007184 <RadioSetRxConfig+0x408>)
 8007172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007176:	609a      	str	r2, [r3, #8]
            break;
 8007178:	e000      	b.n	800717c <RadioSetRxConfig+0x400>
            break;
 800717a:	bf00      	nop
    }
}
 800717c:	bf00      	nop
 800717e:	3728      	adds	r7, #40	; 0x28
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	200005ec 	.word	0x200005ec
 8007188:	2000000d 	.word	0x2000000d
 800718c:	20000624 	.word	0x20000624
 8007190:	200005fa 	.word	0x200005fa

08007194 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	60ba      	str	r2, [r7, #8]
 800719c:	607b      	str	r3, [r7, #4]
 800719e:	4603      	mov	r3, r0
 80071a0:	73fb      	strb	r3, [r7, #15]
 80071a2:	460b      	mov	r3, r1
 80071a4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80071a6:	f002 fe3c 	bl	8009e22 <RFW_DeInit>
    switch( modem )
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	f000 80c7 	beq.w	8007340 <RadioSetTxConfig+0x1ac>
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	f300 80d6 	bgt.w	8007364 <RadioSetTxConfig+0x1d0>
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <RadioSetTxConfig+0x2e>
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d059      	beq.n	8007274 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80071c0:	e0d0      	b.n	8007364 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80071c2:	4b77      	ldr	r3, [pc, #476]	; (80073a0 <RadioSetTxConfig+0x20c>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80071ca:	4a75      	ldr	r2, [pc, #468]	; (80073a0 <RadioSetTxConfig+0x20c>)
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80071d0:	4b73      	ldr	r3, [pc, #460]	; (80073a0 <RadioSetTxConfig+0x20c>)
 80071d2:	220b      	movs	r2, #11
 80071d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f002 fd55 	bl	8009c88 <SUBGRF_GetFskBandwidthRegValue>
 80071de:	4603      	mov	r3, r0
 80071e0:	461a      	mov	r2, r3
 80071e2:	4b6f      	ldr	r3, [pc, #444]	; (80073a0 <RadioSetTxConfig+0x20c>)
 80071e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80071e8:	4a6d      	ldr	r2, [pc, #436]	; (80073a0 <RadioSetTxConfig+0x20c>)
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80071ee:	4b6c      	ldr	r3, [pc, #432]	; (80073a0 <RadioSetTxConfig+0x20c>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80071f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	4b69      	ldr	r3, [pc, #420]	; (80073a0 <RadioSetTxConfig+0x20c>)
 80071fc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80071fe:	4b68      	ldr	r3, [pc, #416]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007200:	2204      	movs	r2, #4
 8007202:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007204:	4b66      	ldr	r3, [pc, #408]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007206:	2218      	movs	r2, #24
 8007208:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800720a:	4b65      	ldr	r3, [pc, #404]	; (80073a0 <RadioSetTxConfig+0x20c>)
 800720c:	2200      	movs	r2, #0
 800720e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007210:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007214:	f083 0301 	eor.w	r3, r3, #1
 8007218:	b2db      	uxtb	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	4b60      	ldr	r3, [pc, #384]	; (80073a0 <RadioSetTxConfig+0x20c>)
 800721e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007220:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007228:	4b5d      	ldr	r3, [pc, #372]	; (80073a0 <RadioSetTxConfig+0x20c>)
 800722a:	22f2      	movs	r2, #242	; 0xf2
 800722c:	75da      	strb	r2, [r3, #23]
 800722e:	e002      	b.n	8007236 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007230:	4b5b      	ldr	r3, [pc, #364]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007232:	2201      	movs	r2, #1
 8007234:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007236:	4b5a      	ldr	r3, [pc, #360]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007238:	2201      	movs	r2, #1
 800723a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800723c:	f000 fb2b 	bl	8007896 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8007240:	2000      	movs	r0, #0
 8007242:	f7ff fcc7 	bl	8006bd4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007246:	4857      	ldr	r0, [pc, #348]	; (80073a4 <RadioSetTxConfig+0x210>)
 8007248:	f002 f8ea 	bl	8009420 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800724c:	4856      	ldr	r0, [pc, #344]	; (80073a8 <RadioSetTxConfig+0x214>)
 800724e:	f002 f9b9 	bl	80095c4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007252:	4a56      	ldr	r2, [pc, #344]	; (80073ac <RadioSetTxConfig+0x218>)
 8007254:	f107 0310 	add.w	r3, r7, #16
 8007258:	e892 0003 	ldmia.w	r2, {r0, r1}
 800725c:	e883 0003 	stmia.w	r3, {r0, r1}
 8007260:	f107 0310 	add.w	r3, r7, #16
 8007264:	4618      	mov	r0, r3
 8007266:	f001 fc76 	bl	8008b56 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800726a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800726e:	f001 fcc1 	bl	8008bf4 <SUBGRF_SetWhiteningSeed>
            break;
 8007272:	e078      	b.n	8007366 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007274:	4b4a      	ldr	r3, [pc, #296]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	b2da      	uxtb	r2, r3
 8007280:	4b47      	ldr	r3, [pc, #284]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8007286:	4a4a      	ldr	r2, [pc, #296]	; (80073b0 <RadioSetTxConfig+0x21c>)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4413      	add	r3, r2
 800728c:	781a      	ldrb	r2, [r3, #0]
 800728e:	4b44      	ldr	r3, [pc, #272]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007294:	4a42      	ldr	r2, [pc, #264]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007296:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800729a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d105      	bne.n	80072b0 <RadioSetTxConfig+0x11c>
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	2b0b      	cmp	r3, #11
 80072a8:	d008      	beq.n	80072bc <RadioSetTxConfig+0x128>
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	2b0c      	cmp	r3, #12
 80072ae:	d005      	beq.n	80072bc <RadioSetTxConfig+0x128>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d107      	bne.n	80072c6 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	2b0c      	cmp	r3, #12
 80072ba:	d104      	bne.n	80072c6 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80072bc:	4b38      	ldr	r3, [pc, #224]	; (80073a0 <RadioSetTxConfig+0x20c>)
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80072c4:	e003      	b.n	80072ce <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80072c6:	4b36      	ldr	r3, [pc, #216]	; (80073a0 <RadioSetTxConfig+0x20c>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80072ce:	4b34      	ldr	r3, [pc, #208]	; (80073a0 <RadioSetTxConfig+0x20c>)
 80072d0:	2201      	movs	r2, #1
 80072d2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80072d4:	4b32      	ldr	r3, [pc, #200]	; (80073a0 <RadioSetTxConfig+0x20c>)
 80072d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072da:	2b05      	cmp	r3, #5
 80072dc:	d004      	beq.n	80072e8 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80072de:	4b30      	ldr	r3, [pc, #192]	; (80073a0 <RadioSetTxConfig+0x20c>)
 80072e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80072e4:	2b06      	cmp	r3, #6
 80072e6:	d10a      	bne.n	80072fe <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80072e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80072ea:	2b0b      	cmp	r3, #11
 80072ec:	d803      	bhi.n	80072f6 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80072ee:	4b2c      	ldr	r3, [pc, #176]	; (80073a0 <RadioSetTxConfig+0x20c>)
 80072f0:	220c      	movs	r2, #12
 80072f2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80072f4:	e006      	b.n	8007304 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80072f6:	4a2a      	ldr	r2, [pc, #168]	; (80073a0 <RadioSetTxConfig+0x20c>)
 80072f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80072fa:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80072fc:	e002      	b.n	8007304 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80072fe:	4a28      	ldr	r2, [pc, #160]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007300:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007302:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007304:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007308:	4b25      	ldr	r3, [pc, #148]	; (80073a0 <RadioSetTxConfig+0x20c>)
 800730a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800730c:	4b29      	ldr	r3, [pc, #164]	; (80073b4 <RadioSetTxConfig+0x220>)
 800730e:	781a      	ldrb	r2, [r3, #0]
 8007310:	4b23      	ldr	r3, [pc, #140]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007312:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007314:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007318:	4b21      	ldr	r3, [pc, #132]	; (80073a0 <RadioSetTxConfig+0x20c>)
 800731a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800731e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007322:	4b1f      	ldr	r3, [pc, #124]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007324:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007328:	f000 fab5 	bl	8007896 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800732c:	2001      	movs	r0, #1
 800732e:	f7ff fc51 	bl	8006bd4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007332:	481c      	ldr	r0, [pc, #112]	; (80073a4 <RadioSetTxConfig+0x210>)
 8007334:	f002 f874 	bl	8009420 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007338:	481b      	ldr	r0, [pc, #108]	; (80073a8 <RadioSetTxConfig+0x214>)
 800733a:	f002 f943 	bl	80095c4 <SUBGRF_SetPacketParams>
            break;
 800733e:	e012      	b.n	8007366 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007340:	2004      	movs	r0, #4
 8007342:	f7ff fc47 	bl	8006bd4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007346:	4b16      	ldr	r3, [pc, #88]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007348:	2202      	movs	r2, #2
 800734a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800734e:	4a14      	ldr	r2, [pc, #80]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007354:	4b12      	ldr	r3, [pc, #72]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007356:	2216      	movs	r2, #22
 8007358:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800735c:	4811      	ldr	r0, [pc, #68]	; (80073a4 <RadioSetTxConfig+0x210>)
 800735e:	f002 f85f 	bl	8009420 <SUBGRF_SetModulationParams>
            break;
 8007362:	e000      	b.n	8007366 <RadioSetTxConfig+0x1d2>
            break;
 8007364:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007366:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800736a:	4618      	mov	r0, r3
 800736c:	f002 fb8e 	bl	8009a8c <SUBGRF_SetRfTxPower>
 8007370:	4603      	mov	r3, r0
 8007372:	461a      	mov	r2, r3
 8007374:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007376:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800737a:	210e      	movs	r1, #14
 800737c:	f640 101f 	movw	r0, #2335	; 0x91f
 8007380:	f002 fa68 	bl	8009854 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007386:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800738a:	4618      	mov	r0, r3
 800738c:	f002 fd5d 	bl	8009e4a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007390:	4a03      	ldr	r2, [pc, #12]	; (80073a0 <RadioSetTxConfig+0x20c>)
 8007392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007394:	6053      	str	r3, [r2, #4]
}
 8007396:	bf00      	nop
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	200005ec 	.word	0x200005ec
 80073a4:	20000624 	.word	0x20000624
 80073a8:	200005fa 	.word	0x200005fa
 80073ac:	0800b3fc 	.word	0x0800b3fc
 80073b0:	0800b598 	.word	0x0800b598
 80073b4:	2000000d 	.word	0x2000000d

080073b8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
    return true;
 80073c0:	2301      	movs	r3, #1
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr

080073cc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	2b0a      	cmp	r3, #10
 80073de:	d83e      	bhi.n	800745e <RadioGetLoRaBandwidthInHz+0x92>
 80073e0:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <RadioGetLoRaBandwidthInHz+0x1c>)
 80073e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e6:	bf00      	nop
 80073e8:	08007415 	.word	0x08007415
 80073ec:	08007425 	.word	0x08007425
 80073f0:	08007435 	.word	0x08007435
 80073f4:	08007445 	.word	0x08007445
 80073f8:	0800744d 	.word	0x0800744d
 80073fc:	08007453 	.word	0x08007453
 8007400:	08007459 	.word	0x08007459
 8007404:	0800745f 	.word	0x0800745f
 8007408:	0800741d 	.word	0x0800741d
 800740c:	0800742d 	.word	0x0800742d
 8007410:	0800743d 	.word	0x0800743d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007414:	f641 6384 	movw	r3, #7812	; 0x1e84
 8007418:	60fb      	str	r3, [r7, #12]
        break;
 800741a:	e020      	b.n	800745e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800741c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8007420:	60fb      	str	r3, [r7, #12]
        break;
 8007422:	e01c      	b.n	800745e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007424:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007428:	60fb      	str	r3, [r7, #12]
        break;
 800742a:	e018      	b.n	800745e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800742c:	f245 1361 	movw	r3, #20833	; 0x5161
 8007430:	60fb      	str	r3, [r7, #12]
        break;
 8007432:	e014      	b.n	800745e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007434:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007438:	60fb      	str	r3, [r7, #12]
        break;
 800743a:	e010      	b.n	800745e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800743c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8007440:	60fb      	str	r3, [r7, #12]
        break;
 8007442:	e00c      	b.n	800745e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007444:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007448:	60fb      	str	r3, [r7, #12]
        break;
 800744a:	e008      	b.n	800745e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800744c:	4b07      	ldr	r3, [pc, #28]	; (800746c <RadioGetLoRaBandwidthInHz+0xa0>)
 800744e:	60fb      	str	r3, [r7, #12]
        break;
 8007450:	e005      	b.n	800745e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007452:	4b07      	ldr	r3, [pc, #28]	; (8007470 <RadioGetLoRaBandwidthInHz+0xa4>)
 8007454:	60fb      	str	r3, [r7, #12]
        break;
 8007456:	e002      	b.n	800745e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8007458:	4b06      	ldr	r3, [pc, #24]	; (8007474 <RadioGetLoRaBandwidthInHz+0xa8>)
 800745a:	60fb      	str	r3, [r7, #12]
        break;
 800745c:	bf00      	nop
    }

    return bandwidthInHz;
 800745e:	68fb      	ldr	r3, [r7, #12]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	0001e848 	.word	0x0001e848
 8007470:	0003d090 	.word	0x0003d090
 8007474:	0007a120 	.word	0x0007a120

08007478 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	4608      	mov	r0, r1
 8007482:	4611      	mov	r1, r2
 8007484:	461a      	mov	r2, r3
 8007486:	4603      	mov	r3, r0
 8007488:	70fb      	strb	r3, [r7, #3]
 800748a:	460b      	mov	r3, r1
 800748c:	803b      	strh	r3, [r7, #0]
 800748e:	4613      	mov	r3, r2
 8007490:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8007492:	883b      	ldrh	r3, [r7, #0]
 8007494:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007496:	78ba      	ldrb	r2, [r7, #2]
 8007498:	f082 0201 	eor.w	r2, r2, #1
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	2a00      	cmp	r2, #0
 80074a0:	d001      	beq.n	80074a6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80074a2:	2208      	movs	r2, #8
 80074a4:	e000      	b.n	80074a8 <RadioGetGfskTimeOnAirNumerator+0x30>
 80074a6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80074a8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80074aa:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80074ae:	7c3b      	ldrb	r3, [r7, #16]
 80074b0:	7d39      	ldrb	r1, [r7, #20]
 80074b2:	2900      	cmp	r1, #0
 80074b4:	d001      	beq.n	80074ba <RadioGetGfskTimeOnAirNumerator+0x42>
 80074b6:	2102      	movs	r1, #2
 80074b8:	e000      	b.n	80074bc <RadioGetGfskTimeOnAirNumerator+0x44>
 80074ba:	2100      	movs	r1, #0
 80074bc:	440b      	add	r3, r1
 80074be:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80074c0:	4413      	add	r3, r2
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bc80      	pop	{r7}
 80074ca:	4770      	bx	lr

080074cc <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80074cc:	b480      	push	{r7}
 80074ce:	b08b      	sub	sp, #44	; 0x2c
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	4611      	mov	r1, r2
 80074d8:	461a      	mov	r2, r3
 80074da:	460b      	mov	r3, r1
 80074dc:	71fb      	strb	r3, [r7, #7]
 80074de:	4613      	mov	r3, r2
 80074e0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80074e2:	79fb      	ldrb	r3, [r7, #7]
 80074e4:	3304      	adds	r3, #4
 80074e6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80074e8:	2300      	movs	r3, #0
 80074ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2b05      	cmp	r3, #5
 80074f2:	d002      	beq.n	80074fa <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2b06      	cmp	r3, #6
 80074f8:	d104      	bne.n	8007504 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80074fa:	88bb      	ldrh	r3, [r7, #4]
 80074fc:	2b0b      	cmp	r3, #11
 80074fe:	d801      	bhi.n	8007504 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007500:	230c      	movs	r3, #12
 8007502:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d105      	bne.n	8007516 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b0b      	cmp	r3, #11
 800750e:	d008      	beq.n	8007522 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2b0c      	cmp	r3, #12
 8007514:	d005      	beq.n	8007522 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d105      	bne.n	8007528 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b0c      	cmp	r3, #12
 8007520:	d102      	bne.n	8007528 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007522:	2301      	movs	r3, #1
 8007524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007528:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800752c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800752e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007532:	2a00      	cmp	r2, #0
 8007534:	d001      	beq.n	800753a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007536:	2210      	movs	r2, #16
 8007538:	e000      	b.n	800753c <RadioGetLoRaTimeOnAirNumerator+0x70>
 800753a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800753c:	4413      	add	r3, r2
 800753e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007544:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007546:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800754a:	2a00      	cmp	r2, #0
 800754c:	d001      	beq.n	8007552 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800754e:	2200      	movs	r2, #0
 8007550:	e000      	b.n	8007554 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007552:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007554:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007556:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b06      	cmp	r3, #6
 800755c:	d803      	bhi.n	8007566 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	623b      	str	r3, [r7, #32]
 8007564:	e00e      	b.n	8007584 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	3308      	adds	r3, #8
 800756a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800756c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	3b02      	subs	r3, #2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	623b      	str	r3, [r7, #32]
 800757c:	e002      	b.n	8007584 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	2b00      	cmp	r3, #0
 8007588:	da01      	bge.n	800758e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	4413      	add	r3, r2
 8007594:	1e5a      	subs	r2, r3, #1
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	fb92 f3f3 	sdiv	r3, r2, r3
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	fb03 f202 	mul.w	r2, r3, r2
 80075a2:	88bb      	ldrh	r3, [r7, #4]
 80075a4:	4413      	add	r3, r2
    int32_t intermediate =
 80075a6:	330c      	adds	r3, #12
 80075a8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b06      	cmp	r3, #6
 80075ae:	d802      	bhi.n	80075b6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	3302      	adds	r3, #2
 80075b4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	3b02      	subs	r3, #2
 80075c0:	fa02 f303 	lsl.w	r3, r2, r3
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	372c      	adds	r7, #44	; 0x2c
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bc80      	pop	{r7}
 80075cc:	4770      	bx	lr
	...

080075d0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08a      	sub	sp, #40	; 0x28
 80075d4:	af04      	add	r7, sp, #16
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	607a      	str	r2, [r7, #4]
 80075da:	461a      	mov	r2, r3
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]
 80075e0:	4613      	mov	r3, r2
 80075e2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80075e8:	2301      	movs	r3, #1
 80075ea:	613b      	str	r3, [r7, #16]

    switch( modem )
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <RadioTimeOnAir+0x28>
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d017      	beq.n	8007626 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80075f6:	e035      	b.n	8007664 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80075f8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80075fc:	8c3a      	ldrh	r2, [r7, #32]
 80075fe:	7bb9      	ldrb	r1, [r7, #14]
 8007600:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	4603      	mov	r3, r0
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff ff32 	bl	8007478 <RadioGetGfskTimeOnAirNumerator>
 8007614:	4603      	mov	r3, r0
 8007616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800761a:	fb02 f303 	mul.w	r3, r2, r3
 800761e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	613b      	str	r3, [r7, #16]
        break;
 8007624:	e01e      	b.n	8007664 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007626:	8c39      	ldrh	r1, [r7, #32]
 8007628:	7bba      	ldrb	r2, [r7, #14]
 800762a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800762e:	9302      	str	r3, [sp, #8]
 8007630:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007634:	9301      	str	r3, [sp, #4]
 8007636:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	460b      	mov	r3, r1
 800763e:	6879      	ldr	r1, [r7, #4]
 8007640:	68b8      	ldr	r0, [r7, #8]
 8007642:	f7ff ff43 	bl	80074cc <RadioGetLoRaTimeOnAirNumerator>
 8007646:	4603      	mov	r3, r0
 8007648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800764c:	fb02 f303 	mul.w	r3, r2, r3
 8007650:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007652:	4a0a      	ldr	r2, [pc, #40]	; (800767c <RadioTimeOnAir+0xac>)
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4413      	add	r3, r2
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	4618      	mov	r0, r3
 800765c:	f7ff feb6 	bl	80073cc <RadioGetLoRaBandwidthInHz>
 8007660:	6138      	str	r0, [r7, #16]
        break;
 8007662:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	4413      	add	r3, r2
 800766a:	1e5a      	subs	r2, r3, #1
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	0800b598 	.word	0x0800b598

08007680 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800768c:	2300      	movs	r3, #0
 800768e:	2200      	movs	r2, #0
 8007690:	f240 2101 	movw	r1, #513	; 0x201
 8007694:	f240 2001 	movw	r0, #513	; 0x201
 8007698:	f001 fd2c 	bl	80090f4 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800769c:	4b70      	ldr	r3, [pc, #448]	; (8007860 <RadioSend+0x1e0>)
 800769e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80076a2:	2101      	movs	r1, #1
 80076a4:	4618      	mov	r0, r3
 80076a6:	f002 f9c9 	bl	8009a3c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80076aa:	4b6d      	ldr	r3, [pc, #436]	; (8007860 <RadioSend+0x1e0>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d112      	bne.n	80076d8 <RadioSend+0x58>
 80076b2:	4b6b      	ldr	r3, [pc, #428]	; (8007860 <RadioSend+0x1e0>)
 80076b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b8:	2b06      	cmp	r3, #6
 80076ba:	d10d      	bne.n	80076d8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80076bc:	f640 0089 	movw	r0, #2185	; 0x889
 80076c0:	f002 f8dc 	bl	800987c <SUBGRF_ReadRegister>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f023 0304 	bic.w	r3, r3, #4
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	4619      	mov	r1, r3
 80076ce:	f640 0089 	movw	r0, #2185	; 0x889
 80076d2:	f002 f8bf 	bl	8009854 <SUBGRF_WriteRegister>
 80076d6:	e00c      	b.n	80076f2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80076d8:	f640 0089 	movw	r0, #2185	; 0x889
 80076dc:	f002 f8ce 	bl	800987c <SUBGRF_ReadRegister>
 80076e0:	4603      	mov	r3, r0
 80076e2:	f043 0304 	orr.w	r3, r3, #4
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	4619      	mov	r1, r3
 80076ea:	f640 0089 	movw	r0, #2185	; 0x889
 80076ee:	f002 f8b1 	bl	8009854 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 80076f2:	4b5b      	ldr	r3, [pc, #364]	; (8007860 <RadioSend+0x1e0>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	f200 80a2 	bhi.w	8007840 <RadioSend+0x1c0>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <RadioSend+0x84>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	08007733 	.word	0x08007733
 8007708:	08007719 	.word	0x08007719
 800770c:	08007733 	.word	0x08007733
 8007710:	08007789 	.word	0x08007789
 8007714:	080077a9 	.word	0x080077a9
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007718:	4a51      	ldr	r2, [pc, #324]	; (8007860 <RadioSend+0x1e0>)
 800771a:	78fb      	ldrb	r3, [r7, #3]
 800771c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800771e:	4851      	ldr	r0, [pc, #324]	; (8007864 <RadioSend+0x1e4>)
 8007720:	f001 ff50 	bl	80095c4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	2200      	movs	r2, #0
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f001 fa00 	bl	8008b30 <SUBGRF_SendPayload>
            break;
 8007730:	e087      	b.n	8007842 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007732:	f002 fb7c 	bl	8009e2e <RFW_Is_Init>
 8007736:	4603      	mov	r3, r0
 8007738:	2b01      	cmp	r3, #1
 800773a:	d118      	bne.n	800776e <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800773c:	f107 020d 	add.w	r2, r7, #13
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f002 fb8a 	bl	8009e5e <RFW_TransmitInit>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10c      	bne.n	800776a <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007750:	7b7a      	ldrb	r2, [r7, #13]
 8007752:	4b43      	ldr	r3, [pc, #268]	; (8007860 <RadioSend+0x1e0>)
 8007754:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007756:	4843      	ldr	r0, [pc, #268]	; (8007864 <RadioSend+0x1e4>)
 8007758:	f001 ff34 	bl	80095c4 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800775c:	7b7b      	ldrb	r3, [r7, #13]
 800775e:	2200      	movs	r2, #0
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f001 f9e4 	bl	8008b30 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8007768:	e06b      	b.n	8007842 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 800776a:	2303      	movs	r3, #3
 800776c:	e073      	b.n	8007856 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800776e:	4a3c      	ldr	r2, [pc, #240]	; (8007860 <RadioSend+0x1e0>)
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007774:	483b      	ldr	r0, [pc, #236]	; (8007864 <RadioSend+0x1e4>)
 8007776:	f001 ff25 	bl	80095c4 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	2200      	movs	r2, #0
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 f9d5 	bl	8008b30 <SUBGRF_SendPayload>
            break;
 8007786:	e05c      	b.n	8007842 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007788:	4b35      	ldr	r3, [pc, #212]	; (8007860 <RadioSend+0x1e0>)
 800778a:	2202      	movs	r2, #2
 800778c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800778e:	4a34      	ldr	r2, [pc, #208]	; (8007860 <RadioSend+0x1e0>)
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007794:	4833      	ldr	r0, [pc, #204]	; (8007864 <RadioSend+0x1e4>)
 8007796:	f001 ff15 	bl	80095c4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	2200      	movs	r2, #0
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 f9c5 	bl	8008b30 <SUBGRF_SendPayload>
            break;
 80077a6:	e04c      	b.n	8007842 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80077a8:	78fb      	ldrb	r3, [r7, #3]
 80077aa:	461a      	mov	r2, r3
 80077ac:	6879      	ldr	r1, [r7, #4]
 80077ae:	482e      	ldr	r0, [pc, #184]	; (8007868 <RadioSend+0x1e8>)
 80077b0:	f000 fc98 	bl	80080e4 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80077b4:	4b2a      	ldr	r3, [pc, #168]	; (8007860 <RadioSend+0x1e0>)
 80077b6:	2202      	movs	r2, #2
 80077b8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	3301      	adds	r3, #1
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	4b27      	ldr	r3, [pc, #156]	; (8007860 <RadioSend+0x1e0>)
 80077c2:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80077c4:	4827      	ldr	r0, [pc, #156]	; (8007864 <RadioSend+0x1e4>)
 80077c6:	f001 fefd 	bl	80095c4 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80077ca:	2100      	movs	r1, #0
 80077cc:	20f1      	movs	r0, #241	; 0xf1
 80077ce:	f000 f964 	bl	8007a9a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80077d2:	2100      	movs	r1, #0
 80077d4:	20f0      	movs	r0, #240	; 0xf0
 80077d6:	f000 f960 	bl	8007a9a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80077da:	4b21      	ldr	r3, [pc, #132]	; (8007860 <RadioSend+0x1e0>)
 80077dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077de:	2b64      	cmp	r3, #100	; 0x64
 80077e0:	d108      	bne.n	80077f4 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80077e2:	2170      	movs	r1, #112	; 0x70
 80077e4:	20f3      	movs	r0, #243	; 0xf3
 80077e6:	f000 f958 	bl	8007a9a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80077ea:	211d      	movs	r1, #29
 80077ec:	20f2      	movs	r0, #242	; 0xf2
 80077ee:	f000 f954 	bl	8007a9a <RadioWrite>
 80077f2:	e007      	b.n	8007804 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80077f4:	21e1      	movs	r1, #225	; 0xe1
 80077f6:	20f3      	movs	r0, #243	; 0xf3
 80077f8:	f000 f94f 	bl	8007a9a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80077fc:	2104      	movs	r1, #4
 80077fe:	20f2      	movs	r0, #242	; 0xf2
 8007800:	f000 f94b 	bl	8007a9a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	b29b      	uxth	r3, r3
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	b29b      	uxth	r3, r3
 800780c:	3302      	adds	r3, #2
 800780e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007810:	89fb      	ldrh	r3, [r7, #14]
 8007812:	0a1b      	lsrs	r3, r3, #8
 8007814:	b29b      	uxth	r3, r3
 8007816:	b2db      	uxtb	r3, r3
 8007818:	4619      	mov	r1, r3
 800781a:	20f4      	movs	r0, #244	; 0xf4
 800781c:	f000 f93d 	bl	8007a9a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8007820:	89fb      	ldrh	r3, [r7, #14]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	4619      	mov	r1, r3
 8007826:	20f5      	movs	r0, #245	; 0xf5
 8007828:	f000 f937 	bl	8007a9a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	3301      	adds	r3, #1
 8007830:	b2db      	uxtb	r3, r3
 8007832:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007836:	4619      	mov	r1, r3
 8007838:	480b      	ldr	r0, [pc, #44]	; (8007868 <RadioSend+0x1e8>)
 800783a:	f001 f979 	bl	8008b30 <SUBGRF_SendPayload>
            break;
 800783e:	e000      	b.n	8007842 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007840:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8007842:	4b07      	ldr	r3, [pc, #28]	; (8007860 <RadioSend+0x1e0>)
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	4619      	mov	r1, r3
 8007848:	4808      	ldr	r0, [pc, #32]	; (800786c <RadioSend+0x1ec>)
 800784a:	f002 fdcf 	bl	800a3ec <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800784e:	4807      	ldr	r0, [pc, #28]	; (800786c <RadioSend+0x1ec>)
 8007850:	f002 fcee 	bl	800a230 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	200005ec 	.word	0x200005ec
 8007864:	200005fa 	.word	0x200005fa
 8007868:	200004e8 	.word	0x200004e8
 800786c:	20000648 	.word	0x20000648

08007870 <RadioSleep>:

static void RadioSleep( void )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8007876:	2300      	movs	r3, #0
 8007878:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800787a:	793b      	ldrb	r3, [r7, #4]
 800787c:	f043 0304 	orr.w	r3, r3, #4
 8007880:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8007882:	7938      	ldrb	r0, [r7, #4]
 8007884:	f001 fa30 	bl	8008ce8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8007888:	2002      	movs	r0, #2
 800788a:	f7f9 ffbb 	bl	8001804 <HAL_Delay>
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <RadioStandby>:

static void RadioStandby( void )
{
 8007896:	b580      	push	{r7, lr}
 8007898:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800789a:	2000      	movs	r0, #0
 800789c:	f001 fa56 	bl	8008d4c <SUBGRF_SetStandby>
}
 80078a0:	bf00      	nop
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80078ac:	f002 fabf 	bl	8009e2e <RFW_Is_Init>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d102      	bne.n	80078bc <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80078b6:	f002 fae2 	bl	8009e7e <RFW_ReceiveInit>
 80078ba:	e007      	b.n	80078cc <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80078bc:	2300      	movs	r3, #0
 80078be:	2200      	movs	r2, #0
 80078c0:	f240 2162 	movw	r1, #610	; 0x262
 80078c4:	f240 2062 	movw	r0, #610	; 0x262
 80078c8:	f001 fc14 	bl	80090f4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d006      	beq.n	80078e0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	4811      	ldr	r0, [pc, #68]	; (800791c <RadioRx+0x78>)
 80078d6:	f002 fd89 	bl	800a3ec <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80078da:	4810      	ldr	r0, [pc, #64]	; (800791c <RadioRx+0x78>)
 80078dc:	f002 fca8 	bl	800a230 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80078e0:	4b0f      	ldr	r3, [pc, #60]	; (8007920 <RadioRx+0x7c>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80078e6:	4b0e      	ldr	r3, [pc, #56]	; (8007920 <RadioRx+0x7c>)
 80078e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80078ec:	2100      	movs	r1, #0
 80078ee:	4618      	mov	r0, r3
 80078f0:	f002 f8a4 	bl	8009a3c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80078f4:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <RadioRx+0x7c>)
 80078f6:	785b      	ldrb	r3, [r3, #1]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80078fc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007900:	f001 fa60 	bl	8008dc4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8007904:	e005      	b.n	8007912 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8007906:	4b06      	ldr	r3, [pc, #24]	; (8007920 <RadioRx+0x7c>)
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	019b      	lsls	r3, r3, #6
 800790c:	4618      	mov	r0, r3
 800790e:	f001 fa59 	bl	8008dc4 <SUBGRF_SetRx>
}
 8007912:	bf00      	nop
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20000660 	.word	0x20000660
 8007920:	200005ec 	.word	0x200005ec

08007924 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 800792c:	f002 fa7f 	bl	8009e2e <RFW_Is_Init>
 8007930:	4603      	mov	r3, r0
 8007932:	2b01      	cmp	r3, #1
 8007934:	d102      	bne.n	800793c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8007936:	f002 faa2 	bl	8009e7e <RFW_ReceiveInit>
 800793a:	e007      	b.n	800794c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800793c:	2300      	movs	r3, #0
 800793e:	2200      	movs	r2, #0
 8007940:	f240 2162 	movw	r1, #610	; 0x262
 8007944:	f240 2062 	movw	r0, #610	; 0x262
 8007948:	f001 fbd4 	bl	80090f4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d006      	beq.n	8007960 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	4811      	ldr	r0, [pc, #68]	; (800799c <RadioRxBoosted+0x78>)
 8007956:	f002 fd49 	bl	800a3ec <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800795a:	4810      	ldr	r0, [pc, #64]	; (800799c <RadioRxBoosted+0x78>)
 800795c:	f002 fc68 	bl	800a230 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007960:	4b0f      	ldr	r3, [pc, #60]	; (80079a0 <RadioRxBoosted+0x7c>)
 8007962:	2200      	movs	r2, #0
 8007964:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007966:	4b0e      	ldr	r3, [pc, #56]	; (80079a0 <RadioRxBoosted+0x7c>)
 8007968:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800796c:	2100      	movs	r1, #0
 800796e:	4618      	mov	r0, r3
 8007970:	f002 f864 	bl	8009a3c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007974:	4b0a      	ldr	r3, [pc, #40]	; (80079a0 <RadioRxBoosted+0x7c>)
 8007976:	785b      	ldrb	r3, [r3, #1]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d004      	beq.n	8007986 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800797c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007980:	f001 fa40 	bl	8008e04 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8007984:	e005      	b.n	8007992 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8007986:	4b06      	ldr	r3, [pc, #24]	; (80079a0 <RadioRxBoosted+0x7c>)
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	019b      	lsls	r3, r3, #6
 800798c:	4618      	mov	r0, r3
 800798e:	f001 fa39 	bl	8008e04 <SUBGRF_SetRxBoosted>
}
 8007992:	bf00      	nop
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20000660 	.word	0x20000660
 80079a0:	200005ec 	.word	0x200005ec

080079a4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	005a      	lsls	r2, r3, #1
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	4413      	add	r3, r2
 80079b6:	4a0c      	ldr	r2, [pc, #48]	; (80079e8 <RadioSetRxDutyCycle+0x44>)
 80079b8:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80079ba:	2300      	movs	r3, #0
 80079bc:	2200      	movs	r2, #0
 80079be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80079c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80079c6:	f001 fb95 	bl	80090f4 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80079ca:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <RadioSetRxDutyCycle+0x44>)
 80079cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80079d0:	2100      	movs	r1, #0
 80079d2:	4618      	mov	r0, r3
 80079d4:	f002 f832 	bl	8009a3c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f001 fa36 	bl	8008e4c <SUBGRF_SetRxDutyCycle>
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	200005ec 	.word	0x200005ec

080079ec <RadioStartCad>:

static void RadioStartCad( void )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80079f0:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <RadioStartCad+0x2c>)
 80079f2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80079f6:	2100      	movs	r1, #0
 80079f8:	4618      	mov	r0, r3
 80079fa:	f002 f81f 	bl	8009a3c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80079fe:	2300      	movs	r3, #0
 8007a00:	2200      	movs	r2, #0
 8007a02:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8007a06:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8007a0a:	f001 fb73 	bl	80090f4 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8007a0e:	f001 fa49 	bl	8008ea4 <SUBGRF_SetCad>
}
 8007a12:	bf00      	nop
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	200005ec 	.word	0x200005ec

08007a1c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8007a2c:	883b      	ldrh	r3, [r7, #0]
 8007a2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a32:	fb02 f303 	mul.w	r3, r2, r3
 8007a36:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 fbb7 	bl	80091ac <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8007a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f002 f822 	bl	8009a8c <SUBGRF_SetRfTxPower>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007a4c:	210e      	movs	r1, #14
 8007a4e:	f640 101f 	movw	r0, #2335	; 0x91f
 8007a52:	f001 feff 	bl	8009854 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8007a56:	7afb      	ldrb	r3, [r7, #11]
 8007a58:	2101      	movs	r1, #1
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f001 ffee 	bl	8009a3c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8007a60:	f001 fa2e 	bl	8008ec0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8007a64:	68f9      	ldr	r1, [r7, #12]
 8007a66:	4805      	ldr	r0, [pc, #20]	; (8007a7c <RadioSetTxContinuousWave+0x60>)
 8007a68:	f002 fcc0 	bl	800a3ec <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8007a6c:	4803      	ldr	r0, [pc, #12]	; (8007a7c <RadioSetTxContinuousWave+0x60>)
 8007a6e:	f002 fbdf 	bl	800a230 <UTIL_TIMER_Start>
}
 8007a72:	bf00      	nop
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000648 	.word	0x20000648

08007a80 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8007a8a:	f001 fe50 	bl	800972e <SUBGRF_GetRssiInst>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	b21b      	sxth	r3, r3
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	460a      	mov	r2, r1
 8007aa4:	80fb      	strh	r3, [r7, #6]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8007aaa:	797a      	ldrb	r2, [r7, #5]
 8007aac:	88fb      	ldrh	r3, [r7, #6]
 8007aae:	4611      	mov	r1, r2
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f001 fecf 	bl	8009854 <SUBGRF_WriteRegister>
}
 8007ab6:	bf00      	nop
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8007ac8:	88fb      	ldrh	r3, [r7, #6]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f001 fed6 	bl	800987c <SUBGRF_ReadRegister>
 8007ad0:	4603      	mov	r3, r0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b082      	sub	sp, #8
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	6039      	str	r1, [r7, #0]
 8007ae4:	80fb      	strh	r3, [r7, #6]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8007aea:	797b      	ldrb	r3, [r7, #5]
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	88fb      	ldrh	r3, [r7, #6]
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f001 fed6 	bl	80098a4 <SUBGRF_WriteRegisters>
}
 8007af8:	bf00      	nop
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	6039      	str	r1, [r7, #0]
 8007b0a:	80fb      	strh	r3, [r7, #6]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8007b10:	797b      	ldrb	r3, [r7, #5]
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	88fb      	ldrh	r3, [r7, #6]
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f001 fee5 	bl	80098e8 <SUBGRF_ReadRegisters>
}
 8007b1e:	bf00      	nop
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	460a      	mov	r2, r1
 8007b32:	71fb      	strb	r3, [r7, #7]
 8007b34:	4613      	mov	r3, r2
 8007b36:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d10a      	bne.n	8007b54 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8007b3e:	4a0e      	ldr	r2, [pc, #56]	; (8007b78 <RadioSetMaxPayloadLength+0x50>)
 8007b40:	79bb      	ldrb	r3, [r7, #6]
 8007b42:	7013      	strb	r3, [r2, #0]
 8007b44:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <RadioSetMaxPayloadLength+0x50>)
 8007b46:	781a      	ldrb	r2, [r3, #0]
 8007b48:	4b0c      	ldr	r3, [pc, #48]	; (8007b7c <RadioSetMaxPayloadLength+0x54>)
 8007b4a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b4c:	480c      	ldr	r0, [pc, #48]	; (8007b80 <RadioSetMaxPayloadLength+0x58>)
 8007b4e:	f001 fd39 	bl	80095c4 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8007b52:	e00d      	b.n	8007b70 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8007b54:	4b09      	ldr	r3, [pc, #36]	; (8007b7c <RadioSetMaxPayloadLength+0x54>)
 8007b56:	7d5b      	ldrb	r3, [r3, #21]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d109      	bne.n	8007b70 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8007b5c:	4a06      	ldr	r2, [pc, #24]	; (8007b78 <RadioSetMaxPayloadLength+0x50>)
 8007b5e:	79bb      	ldrb	r3, [r7, #6]
 8007b60:	7013      	strb	r3, [r2, #0]
 8007b62:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <RadioSetMaxPayloadLength+0x50>)
 8007b64:	781a      	ldrb	r2, [r3, #0]
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <RadioSetMaxPayloadLength+0x54>)
 8007b68:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b6a:	4805      	ldr	r0, [pc, #20]	; (8007b80 <RadioSetMaxPayloadLength+0x58>)
 8007b6c:	f001 fd2a 	bl	80095c4 <SUBGRF_SetPacketParams>
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	2000000d 	.word	0x2000000d
 8007b7c:	200005ec 	.word	0x200005ec
 8007b80:	200005fa 	.word	0x200005fa

08007b84 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8007b8e:	4a13      	ldr	r2, [pc, #76]	; (8007bdc <RadioSetPublicNetwork+0x58>)
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	7313      	strb	r3, [r2, #12]
 8007b94:	4b11      	ldr	r3, [pc, #68]	; (8007bdc <RadioSetPublicNetwork+0x58>)
 8007b96:	7b1a      	ldrb	r2, [r3, #12]
 8007b98:	4b10      	ldr	r3, [pc, #64]	; (8007bdc <RadioSetPublicNetwork+0x58>)
 8007b9a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8007b9c:	2001      	movs	r0, #1
 8007b9e:	f7ff f819 	bl	8006bd4 <RadioSetModem>
    if( enable == true )
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00a      	beq.n	8007bbe <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8007ba8:	2134      	movs	r1, #52	; 0x34
 8007baa:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8007bae:	f001 fe51 	bl	8009854 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8007bb2:	2144      	movs	r1, #68	; 0x44
 8007bb4:	f240 7041 	movw	r0, #1857	; 0x741
 8007bb8:	f001 fe4c 	bl	8009854 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8007bbc:	e009      	b.n	8007bd2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8007bbe:	2114      	movs	r1, #20
 8007bc0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8007bc4:	f001 fe46 	bl	8009854 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8007bc8:	2124      	movs	r1, #36	; 0x24
 8007bca:	f240 7041 	movw	r0, #1857	; 0x741
 8007bce:	f001 fe41 	bl	8009854 <SUBGRF_WriteRegister>
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	200005ec 	.word	0x200005ec

08007be0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8007be4:	f001 ff86 	bl	8009af4 <SUBGRF_GetRadioWakeUpTime>
 8007be8:	4603      	mov	r3, r0
 8007bea:	3303      	adds	r3, #3
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8007bf8:	f000 f80e 	bl	8007c18 <RadioOnTxTimeoutProcess>
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8007c0c:	f000 f818 	bl	8007c40 <RadioOnRxTimeoutProcess>
}
 8007c10:	bf00      	nop
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007c1c:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <RadioOnTxTimeoutProcess+0x24>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d008      	beq.n	8007c36 <RadioOnTxTimeoutProcess+0x1e>
 8007c24:	4b05      	ldr	r3, [pc, #20]	; (8007c3c <RadioOnTxTimeoutProcess+0x24>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8007c2e:	4b03      	ldr	r3, [pc, #12]	; (8007c3c <RadioOnTxTimeoutProcess+0x24>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	4798      	blx	r3
    }
}
 8007c36:	bf00      	nop
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	200005e8 	.word	0x200005e8

08007c40 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007c44:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <RadioOnRxTimeoutProcess+0x24>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d008      	beq.n	8007c5e <RadioOnRxTimeoutProcess+0x1e>
 8007c4c:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <RadioOnRxTimeoutProcess+0x24>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8007c56:	4b03      	ldr	r3, [pc, #12]	; (8007c64 <RadioOnRxTimeoutProcess+0x24>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	4798      	blx	r3
    }
}
 8007c5e:	bf00      	nop
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	200005e8 	.word	0x200005e8

08007c68 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8007c72:	4a05      	ldr	r2, [pc, #20]	; (8007c88 <RadioOnDioIrq+0x20>)
 8007c74:	88fb      	ldrh	r3, [r7, #6]
 8007c76:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8007c7a:	f000 f807 	bl	8007c8c <RadioIrqProcess>
}
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	200005ec 	.word	0x200005ec

08007c8c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8007c8c:	b5b0      	push	{r4, r5, r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8007c9a:	4ba5      	ldr	r3, [pc, #660]	; (8007f30 <RadioIrqProcess+0x2a4>)
 8007c9c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ca4:	f000 810d 	beq.w	8007ec2 <RadioIrqProcess+0x236>
 8007ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cac:	f300 81c0 	bgt.w	8008030 <RadioIrqProcess+0x3a4>
 8007cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cb4:	f000 80f1 	beq.w	8007e9a <RadioIrqProcess+0x20e>
 8007cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cbc:	f300 81b8 	bgt.w	8008030 <RadioIrqProcess+0x3a4>
 8007cc0:	2b80      	cmp	r3, #128	; 0x80
 8007cc2:	f000 80d6 	beq.w	8007e72 <RadioIrqProcess+0x1e6>
 8007cc6:	2b80      	cmp	r3, #128	; 0x80
 8007cc8:	f300 81b2 	bgt.w	8008030 <RadioIrqProcess+0x3a4>
 8007ccc:	2b20      	cmp	r3, #32
 8007cce:	dc49      	bgt.n	8007d64 <RadioIrqProcess+0xd8>
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f340 81ad 	ble.w	8008030 <RadioIrqProcess+0x3a4>
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	2b1f      	cmp	r3, #31
 8007cda:	f200 81a9 	bhi.w	8008030 <RadioIrqProcess+0x3a4>
 8007cde:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <RadioIrqProcess+0x58>)
 8007ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce4:	08007d6d 	.word	0x08007d6d
 8007ce8:	08007da7 	.word	0x08007da7
 8007cec:	08008031 	.word	0x08008031
 8007cf0:	08007f4d 	.word	0x08007f4d
 8007cf4:	08008031 	.word	0x08008031
 8007cf8:	08008031 	.word	0x08008031
 8007cfc:	08008031 	.word	0x08008031
 8007d00:	08007fbb 	.word	0x08007fbb
 8007d04:	08008031 	.word	0x08008031
 8007d08:	08008031 	.word	0x08008031
 8007d0c:	08008031 	.word	0x08008031
 8007d10:	08008031 	.word	0x08008031
 8007d14:	08008031 	.word	0x08008031
 8007d18:	08008031 	.word	0x08008031
 8007d1c:	08008031 	.word	0x08008031
 8007d20:	08008031 	.word	0x08008031
 8007d24:	08008031 	.word	0x08008031
 8007d28:	08008031 	.word	0x08008031
 8007d2c:	08008031 	.word	0x08008031
 8007d30:	08008031 	.word	0x08008031
 8007d34:	08008031 	.word	0x08008031
 8007d38:	08008031 	.word	0x08008031
 8007d3c:	08008031 	.word	0x08008031
 8007d40:	08008031 	.word	0x08008031
 8007d44:	08008031 	.word	0x08008031
 8007d48:	08008031 	.word	0x08008031
 8007d4c:	08008031 	.word	0x08008031
 8007d50:	08008031 	.word	0x08008031
 8007d54:	08008031 	.word	0x08008031
 8007d58:	08008031 	.word	0x08008031
 8007d5c:	08008031 	.word	0x08008031
 8007d60:	08007fcb 	.word	0x08007fcb
 8007d64:	2b40      	cmp	r3, #64	; 0x40
 8007d66:	f000 814b 	beq.w	8008000 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8007d6a:	e161      	b.n	8008030 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8007d6c:	4871      	ldr	r0, [pc, #452]	; (8007f34 <RadioIrqProcess+0x2a8>)
 8007d6e:	f002 facd 	bl	800a30c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8007d72:	2000      	movs	r0, #0
 8007d74:	f000 ffea 	bl	8008d4c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8007d78:	f002 f860 	bl	8009e3c <RFW_Is_LongPacketModeEnabled>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8007d82:	f002 f884 	bl	8009e8e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8007d86:	4b6c      	ldr	r3, [pc, #432]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 8152 	beq.w	8008034 <RadioIrqProcess+0x3a8>
 8007d90:	4b69      	ldr	r3, [pc, #420]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 814c 	beq.w	8008034 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8007d9c:	4b66      	ldr	r3, [pc, #408]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4798      	blx	r3
        break;
 8007da4:	e146      	b.n	8008034 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8007da6:	4865      	ldr	r0, [pc, #404]	; (8007f3c <RadioIrqProcess+0x2b0>)
 8007da8:	f002 fab0 	bl	800a30c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8007dac:	4b60      	ldr	r3, [pc, #384]	; (8007f30 <RadioIrqProcess+0x2a4>)
 8007dae:	785b      	ldrb	r3, [r3, #1]
 8007db0:	f083 0301 	eor.w	r3, r3, #1
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d014      	beq.n	8007de4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8007dba:	2000      	movs	r0, #0
 8007dbc:	f000 ffc6 	bl	8008d4c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	f640 1002 	movw	r0, #2306	; 0x902
 8007dc6:	f001 fd45 	bl	8009854 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8007dca:	f640 1044 	movw	r0, #2372	; 0x944
 8007dce:	f001 fd55 	bl	800987c <SUBGRF_ReadRegister>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	f043 0302 	orr.w	r3, r3, #2
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	4619      	mov	r1, r3
 8007ddc:	f640 1044 	movw	r0, #2372	; 0x944
 8007de0:	f001 fd38 	bl	8009854 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8007de4:	1dfb      	adds	r3, r7, #7
 8007de6:	22ff      	movs	r2, #255	; 0xff
 8007de8:	4619      	mov	r1, r3
 8007dea:	4855      	ldr	r0, [pc, #340]	; (8007f40 <RadioIrqProcess+0x2b4>)
 8007dec:	f000 fe7e 	bl	8008aec <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8007df0:	4854      	ldr	r0, [pc, #336]	; (8007f44 <RadioIrqProcess+0x2b8>)
 8007df2:	f001 fcdd 	bl	80097b0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8007df6:	4b50      	ldr	r3, [pc, #320]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 811c 	beq.w	8008038 <RadioIrqProcess+0x3ac>
 8007e00:	4b4d      	ldr	r3, [pc, #308]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 8116 	beq.w	8008038 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8007e0c:	4b48      	ldr	r3, [pc, #288]	; (8007f30 <RadioIrqProcess+0x2a4>)
 8007e0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d10e      	bne.n	8007e34 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8007e16:	4b48      	ldr	r3, [pc, #288]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689c      	ldr	r4, [r3, #8]
 8007e1c:	79fb      	ldrb	r3, [r7, #7]
 8007e1e:	b299      	uxth	r1, r3
 8007e20:	4b43      	ldr	r3, [pc, #268]	; (8007f30 <RadioIrqProcess+0x2a4>)
 8007e22:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8007e26:	b21a      	sxth	r2, r3
 8007e28:	4b41      	ldr	r3, [pc, #260]	; (8007f30 <RadioIrqProcess+0x2a4>)
 8007e2a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8007e2e:	4844      	ldr	r0, [pc, #272]	; (8007f40 <RadioIrqProcess+0x2b4>)
 8007e30:	47a0      	blx	r4
                break;
 8007e32:	e01d      	b.n	8007e70 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8007e34:	4b3e      	ldr	r3, [pc, #248]	; (8007f30 <RadioIrqProcess+0x2a4>)
 8007e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e38:	463a      	mov	r2, r7
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f001 ff4b 	bl	8009cd8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8007e42:	4b3d      	ldr	r3, [pc, #244]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689c      	ldr	r4, [r3, #8]
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	b299      	uxth	r1, r3
 8007e4c:	4b38      	ldr	r3, [pc, #224]	; (8007f30 <RadioIrqProcess+0x2a4>)
 8007e4e:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8007e52:	b218      	sxth	r0, r3
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007e5a:	4a3b      	ldr	r2, [pc, #236]	; (8007f48 <RadioIrqProcess+0x2bc>)
 8007e5c:	fb82 5203 	smull	r5, r2, r2, r3
 8007e60:	1192      	asrs	r2, r2, #6
 8007e62:	17db      	asrs	r3, r3, #31
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	b25b      	sxtb	r3, r3
 8007e68:	4602      	mov	r2, r0
 8007e6a:	4835      	ldr	r0, [pc, #212]	; (8007f40 <RadioIrqProcess+0x2b4>)
 8007e6c:	47a0      	blx	r4
                break;
 8007e6e:	bf00      	nop
        break;
 8007e70:	e0e2      	b.n	8008038 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8007e72:	2000      	movs	r0, #0
 8007e74:	f000 ff6a 	bl	8008d4c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007e78:	4b2f      	ldr	r3, [pc, #188]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 80dd 	beq.w	800803c <RadioIrqProcess+0x3b0>
 8007e82:	4b2d      	ldr	r3, [pc, #180]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 80d7 	beq.w	800803c <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8007e8e:	4b2a      	ldr	r3, [pc, #168]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	2000      	movs	r0, #0
 8007e96:	4798      	blx	r3
        break;
 8007e98:	e0d0      	b.n	800803c <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	f000 ff56 	bl	8008d4c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007ea0:	4b25      	ldr	r3, [pc, #148]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 80cb 	beq.w	8008040 <RadioIrqProcess+0x3b4>
 8007eaa:	4b23      	ldr	r3, [pc, #140]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 80c5 	beq.w	8008040 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8007eb6:	4b20      	ldr	r3, [pc, #128]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	2001      	movs	r0, #1
 8007ebe:	4798      	blx	r3
        break;
 8007ec0:	e0be      	b.n	8008040 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8007ec2:	f000 fdf9 	bl	8008ab8 <SUBGRF_GetOperatingMode>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	d115      	bne.n	8007ef8 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8007ecc:	4819      	ldr	r0, [pc, #100]	; (8007f34 <RadioIrqProcess+0x2a8>)
 8007ece:	f002 fa1d 	bl	800a30c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	f000 ff3a 	bl	8008d4c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007ed8:	4b17      	ldr	r3, [pc, #92]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 80b1 	beq.w	8008044 <RadioIrqProcess+0x3b8>
 8007ee2:	4b15      	ldr	r3, [pc, #84]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80ab 	beq.w	8008044 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8007eee:	4b12      	ldr	r3, [pc, #72]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	4798      	blx	r3
        break;
 8007ef6:	e0a5      	b.n	8008044 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8007ef8:	f000 fdde 	bl	8008ab8 <SUBGRF_GetOperatingMode>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b05      	cmp	r3, #5
 8007f00:	f040 80a0 	bne.w	8008044 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8007f04:	480d      	ldr	r0, [pc, #52]	; (8007f3c <RadioIrqProcess+0x2b0>)
 8007f06:	f002 fa01 	bl	800a30c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	f000 ff1e 	bl	8008d4c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007f10:	4b09      	ldr	r3, [pc, #36]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 8095 	beq.w	8008044 <RadioIrqProcess+0x3b8>
 8007f1a:	4b07      	ldr	r3, [pc, #28]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 808f 	beq.w	8008044 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 8007f26:	4b04      	ldr	r3, [pc, #16]	; (8007f38 <RadioIrqProcess+0x2ac>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	4798      	blx	r3
        break;
 8007f2e:	e089      	b.n	8008044 <RadioIrqProcess+0x3b8>
 8007f30:	200005ec 	.word	0x200005ec
 8007f34:	20000648 	.word	0x20000648
 8007f38:	200005e8 	.word	0x200005e8
 8007f3c:	20000660 	.word	0x20000660
 8007f40:	200004e8 	.word	0x200004e8
 8007f44:	20000610 	.word	0x20000610
 8007f48:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8007f4c:	4b44      	ldr	r3, [pc, #272]	; (8008060 <RadioIrqProcess+0x3d4>)
 8007f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d079      	beq.n	8008048 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8007f54:	4a43      	ldr	r2, [pc, #268]	; (8008064 <RadioIrqProcess+0x3d8>)
 8007f56:	4b42      	ldr	r3, [pc, #264]	; (8008060 <RadioIrqProcess+0x3d4>)
 8007f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f5a:	0c1b      	lsrs	r3, r3, #16
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	4619      	mov	r1, r3
 8007f60:	f640 1003 	movw	r0, #2307	; 0x903
 8007f64:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8007f66:	4a3f      	ldr	r2, [pc, #252]	; (8008064 <RadioIrqProcess+0x3d8>)
 8007f68:	4b3d      	ldr	r3, [pc, #244]	; (8008060 <RadioIrqProcess+0x3d4>)
 8007f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6c:	0a1b      	lsrs	r3, r3, #8
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	4619      	mov	r1, r3
 8007f72:	f640 1004 	movw	r0, #2308	; 0x904
 8007f76:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8007f78:	4a3a      	ldr	r2, [pc, #232]	; (8008064 <RadioIrqProcess+0x3d8>)
 8007f7a:	4b39      	ldr	r3, [pc, #228]	; (8008060 <RadioIrqProcess+0x3d4>)
 8007f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	4619      	mov	r1, r3
 8007f82:	f640 1005 	movw	r0, #2309	; 0x905
 8007f86:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8007f88:	4c36      	ldr	r4, [pc, #216]	; (8008064 <RadioIrqProcess+0x3d8>)
 8007f8a:	4b37      	ldr	r3, [pc, #220]	; (8008068 <RadioIrqProcess+0x3dc>)
 8007f8c:	f640 1002 	movw	r0, #2306	; 0x902
 8007f90:	4798      	blx	r3
 8007f92:	4603      	mov	r3, r0
 8007f94:	f043 0301 	orr.w	r3, r3, #1
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	f640 1002 	movw	r0, #2306	; 0x902
 8007fa0:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8007fa2:	4b2f      	ldr	r3, [pc, #188]	; (8008060 <RadioIrqProcess+0x3d4>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007fa8:	2300      	movs	r3, #0
 8007faa:	2200      	movs	r2, #0
 8007fac:	f240 2162 	movw	r1, #610	; 0x262
 8007fb0:	f240 2062 	movw	r0, #610	; 0x262
 8007fb4:	f001 f89e 	bl	80090f4 <SUBGRF_SetDioIrqParams>
        break;
 8007fb8:	e046      	b.n	8008048 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8007fba:	f001 ff38 	bl	8009e2e <RFW_Is_Init>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d143      	bne.n	800804c <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8007fc4:	f001 ff69 	bl	8009e9a <RFW_ReceivePayload>
        break;
 8007fc8:	e040      	b.n	800804c <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8007fca:	4828      	ldr	r0, [pc, #160]	; (800806c <RadioIrqProcess+0x3e0>)
 8007fcc:	f002 f99e 	bl	800a30c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8007fd0:	4b23      	ldr	r3, [pc, #140]	; (8008060 <RadioIrqProcess+0x3d4>)
 8007fd2:	785b      	ldrb	r3, [r3, #1]
 8007fd4:	f083 0301 	eor.w	r3, r3, #1
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8007fde:	2000      	movs	r0, #0
 8007fe0:	f000 feb4 	bl	8008d4c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007fe4:	4b22      	ldr	r3, [pc, #136]	; (8008070 <RadioIrqProcess+0x3e4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d031      	beq.n	8008050 <RadioIrqProcess+0x3c4>
 8007fec:	4b20      	ldr	r3, [pc, #128]	; (8008070 <RadioIrqProcess+0x3e4>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d02c      	beq.n	8008050 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 8007ff6:	4b1e      	ldr	r3, [pc, #120]	; (8008070 <RadioIrqProcess+0x3e4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	4798      	blx	r3
        break;
 8007ffe:	e027      	b.n	8008050 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8008000:	4b17      	ldr	r3, [pc, #92]	; (8008060 <RadioIrqProcess+0x3d4>)
 8008002:	785b      	ldrb	r3, [r3, #1]
 8008004:	f083 0301 	eor.w	r3, r3, #1
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800800e:	2000      	movs	r0, #0
 8008010:	f000 fe9c 	bl	8008d4c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008014:	4b16      	ldr	r3, [pc, #88]	; (8008070 <RadioIrqProcess+0x3e4>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d01b      	beq.n	8008054 <RadioIrqProcess+0x3c8>
 800801c:	4b14      	ldr	r3, [pc, #80]	; (8008070 <RadioIrqProcess+0x3e4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d016      	beq.n	8008054 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 8008026:	4b12      	ldr	r3, [pc, #72]	; (8008070 <RadioIrqProcess+0x3e4>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	4798      	blx	r3
        break;
 800802e:	e011      	b.n	8008054 <RadioIrqProcess+0x3c8>
        break;
 8008030:	bf00      	nop
 8008032:	e010      	b.n	8008056 <RadioIrqProcess+0x3ca>
        break;
 8008034:	bf00      	nop
 8008036:	e00e      	b.n	8008056 <RadioIrqProcess+0x3ca>
        break;
 8008038:	bf00      	nop
 800803a:	e00c      	b.n	8008056 <RadioIrqProcess+0x3ca>
        break;
 800803c:	bf00      	nop
 800803e:	e00a      	b.n	8008056 <RadioIrqProcess+0x3ca>
        break;
 8008040:	bf00      	nop
 8008042:	e008      	b.n	8008056 <RadioIrqProcess+0x3ca>
        break;
 8008044:	bf00      	nop
 8008046:	e006      	b.n	8008056 <RadioIrqProcess+0x3ca>
        break;
 8008048:	bf00      	nop
 800804a:	e004      	b.n	8008056 <RadioIrqProcess+0x3ca>
        break;
 800804c:	bf00      	nop
 800804e:	e002      	b.n	8008056 <RadioIrqProcess+0x3ca>
        break;
 8008050:	bf00      	nop
 8008052:	e000      	b.n	8008056 <RadioIrqProcess+0x3ca>
        break;
 8008054:	bf00      	nop
    }
}
 8008056:	bf00      	nop
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bdb0      	pop	{r4, r5, r7, pc}
 800805e:	bf00      	nop
 8008060:	200005ec 	.word	0x200005ec
 8008064:	08007a9b 	.word	0x08007a9b
 8008068:	08007abf 	.word	0x08007abf
 800806c:	20000660 	.word	0x20000660
 8008070:	200005e8 	.word	0x200005e8

08008074 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008078:	4b09      	ldr	r3, [pc, #36]	; (80080a0 <RadioTxPrbs+0x2c>)
 800807a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800807e:	2101      	movs	r1, #1
 8008080:	4618      	mov	r0, r3
 8008082:	f001 fcdb 	bl	8009a3c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8008086:	4b07      	ldr	r3, [pc, #28]	; (80080a4 <RadioTxPrbs+0x30>)
 8008088:	212d      	movs	r1, #45	; 0x2d
 800808a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800808e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8008090:	f000 ff1f 	bl	8008ed2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8008094:	4804      	ldr	r0, [pc, #16]	; (80080a8 <RadioTxPrbs+0x34>)
 8008096:	f000 fe75 	bl	8008d84 <SUBGRF_SetTx>
}
 800809a:	bf00      	nop
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	200005ec 	.word	0x200005ec
 80080a4:	08007a9b 	.word	0x08007a9b
 80080a8:	000fffff 	.word	0x000fffff

080080ac <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	4603      	mov	r3, r0
 80080b4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80080b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f001 fce6 	bl	8009a8c <SUBGRF_SetRfTxPower>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80080c4:	210e      	movs	r1, #14
 80080c6:	f640 101f 	movw	r0, #2335	; 0x91f
 80080ca:	f001 fbc3 	bl	8009854 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	2101      	movs	r1, #1
 80080d2:	4618      	mov	r0, r3
 80080d4:	f001 fcb2 	bl	8009a3c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80080d8:	f000 fef2 	bl	8008ec0 <SUBGRF_SetTxContinuousWave>
}
 80080dc:	bf00      	nop
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b089      	sub	sp, #36	; 0x24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	4613      	mov	r3, r2
 80080f0:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80080f2:	2300      	movs	r3, #0
 80080f4:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80080fa:	2300      	movs	r3, #0
 80080fc:	61bb      	str	r3, [r7, #24]
 80080fe:	e011      	b.n	8008124 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	4413      	add	r3, r2
 8008106:	781a      	ldrb	r2, [r3, #0]
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	68b9      	ldr	r1, [r7, #8]
 800810c:	440b      	add	r3, r1
 800810e:	43d2      	mvns	r2, r2
 8008110:	b2d2      	uxtb	r2, r2
 8008112:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4413      	add	r3, r2
 800811a:	2200      	movs	r2, #0
 800811c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	3301      	adds	r3, #1
 8008122:	61bb      	str	r3, [r7, #24]
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	429a      	cmp	r2, r3
 800812a:	dbe9      	blt.n	8008100 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800812c:	2300      	movs	r3, #0
 800812e:	61bb      	str	r3, [r7, #24]
 8008130:	e049      	b.n	80081c6 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	425a      	negs	r2, r3
 8008136:	f003 0307 	and.w	r3, r3, #7
 800813a:	f002 0207 	and.w	r2, r2, #7
 800813e:	bf58      	it	pl
 8008140:	4253      	negpl	r3, r2
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f1c3 0307 	rsb	r3, r3, #7
 8008148:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	da00      	bge.n	8008152 <payload_integration+0x6e>
 8008150:	3307      	adds	r3, #7
 8008152:	10db      	asrs	r3, r3, #3
 8008154:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	3301      	adds	r3, #1
 800815a:	425a      	negs	r2, r3
 800815c:	f003 0307 	and.w	r3, r3, #7
 8008160:	f002 0207 	and.w	r2, r2, #7
 8008164:	bf58      	it	pl
 8008166:	4253      	negpl	r3, r2
 8008168:	b2db      	uxtb	r3, r3
 800816a:	f1c3 0307 	rsb	r3, r3, #7
 800816e:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	3301      	adds	r3, #1
 8008174:	2b00      	cmp	r3, #0
 8008176:	da00      	bge.n	800817a <payload_integration+0x96>
 8008178:	3307      	adds	r3, #7
 800817a:	10db      	asrs	r3, r3, #3
 800817c:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800817e:	7dbb      	ldrb	r3, [r7, #22]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	4413      	add	r3, r2
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	7dfb      	ldrb	r3, [r7, #23]
 800818a:	fa42 f303 	asr.w	r3, r2, r3
 800818e:	b2db      	uxtb	r3, r3
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8008196:	7ffa      	ldrb	r2, [r7, #31]
 8008198:	7cfb      	ldrb	r3, [r7, #19]
 800819a:	4053      	eors	r3, r2
 800819c:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800819e:	7d3b      	ldrb	r3, [r7, #20]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	b25a      	sxtb	r2, r3
 80081a8:	7ff9      	ldrb	r1, [r7, #31]
 80081aa:	7d7b      	ldrb	r3, [r7, #21]
 80081ac:	fa01 f303 	lsl.w	r3, r1, r3
 80081b0:	b25b      	sxtb	r3, r3
 80081b2:	4313      	orrs	r3, r2
 80081b4:	b259      	sxtb	r1, r3
 80081b6:	7d3b      	ldrb	r3, [r7, #20]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4413      	add	r3, r2
 80081bc:	b2ca      	uxtb	r2, r1
 80081be:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	3301      	adds	r3, #1
 80081c4:	61bb      	str	r3, [r7, #24]
 80081c6:	79fb      	ldrb	r3, [r7, #7]
 80081c8:	00db      	lsls	r3, r3, #3
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	dbb0      	blt.n	8008132 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80081d0:	7ffb      	ldrb	r3, [r7, #31]
 80081d2:	01db      	lsls	r3, r3, #7
 80081d4:	b25a      	sxtb	r2, r3
 80081d6:	7ffb      	ldrb	r3, [r7, #31]
 80081d8:	019b      	lsls	r3, r3, #6
 80081da:	b25b      	sxtb	r3, r3
 80081dc:	4313      	orrs	r3, r2
 80081de:	b25b      	sxtb	r3, r3
 80081e0:	7ffa      	ldrb	r2, [r7, #31]
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	d101      	bne.n	80081ea <payload_integration+0x106>
 80081e6:	2220      	movs	r2, #32
 80081e8:	e000      	b.n	80081ec <payload_integration+0x108>
 80081ea:	2200      	movs	r2, #0
 80081ec:	4313      	orrs	r3, r2
 80081ee:	b259      	sxtb	r1, r3
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4413      	add	r3, r2
 80081f6:	b2ca      	uxtb	r2, r1
 80081f8:	701a      	strb	r2, [r3, #0]
}
 80081fa:	bf00      	nop
 80081fc:	3724      	adds	r7, #36	; 0x24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bc80      	pop	{r7}
 8008202:	4770      	bx	lr

08008204 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08c      	sub	sp, #48	; 0x30
 8008208:	af00      	add	r7, sp, #0
 800820a:	60b9      	str	r1, [r7, #8]
 800820c:	607a      	str	r2, [r7, #4]
 800820e:	603b      	str	r3, [r7, #0]
 8008210:	4603      	mov	r3, r0
 8008212:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8008218:	2300      	movs	r3, #0
 800821a:	623b      	str	r3, [r7, #32]
 800821c:	2300      	movs	r3, #0
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008220:	f001 fdff 	bl	8009e22 <RFW_DeInit>

    if( rxContinuous != 0 )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800822a:	2300      	movs	r3, #0
 800822c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	bf14      	ite	ne
 8008234:	2301      	movne	r3, #1
 8008236:	2300      	moveq	r3, #0
 8008238:	b2da      	uxtb	r2, r3
 800823a:	4ba3      	ldr	r3, [pc, #652]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 800823c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d003      	beq.n	800824c <RadioSetRxGenericConfig+0x48>
 8008244:	2b01      	cmp	r3, #1
 8008246:	f000 80dc 	beq.w	8008402 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800824a:	e194      	b.n	8008576 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <RadioSetRxGenericConfig+0x58>
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d102      	bne.n	8008262 <RadioSetRxGenericConfig+0x5e>
            return -1;
 800825c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008260:	e18a      	b.n	8008578 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	7f9b      	ldrb	r3, [r3, #30]
 8008266:	2b08      	cmp	r3, #8
 8008268:	d902      	bls.n	8008270 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800826a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800826e:	e183      	b.n	8008578 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	6919      	ldr	r1, [r3, #16]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	7f9b      	ldrb	r3, [r3, #30]
 8008278:	b29a      	uxth	r2, r3
 800827a:	f107 0320 	add.w	r3, r7, #32
 800827e:	4618      	mov	r0, r3
 8008280:	f001 ff66 	bl	800a150 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	bf14      	ite	ne
 800828c:	2301      	movne	r3, #1
 800828e:	2300      	moveq	r3, #0
 8008290:	b2db      	uxtb	r3, r3
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fe26 	bl	8008ee4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008298:	4b8b      	ldr	r3, [pc, #556]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	4a88      	ldr	r2, [pc, #544]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 80082a6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f893 2020 	ldrb.w	r2, [r3, #32]
 80082ae:	4b86      	ldr	r3, [pc, #536]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 80082b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 fce5 	bl	8009c88 <SUBGRF_GetFskBandwidthRegValue>
 80082be:	4603      	mov	r3, r0
 80082c0:	461a      	mov	r2, r3
 80082c2:	4b81      	ldr	r3, [pc, #516]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 80082c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80082c8:	4b7f      	ldr	r3, [pc, #508]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	00db      	lsls	r3, r3, #3
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	4b7b      	ldr	r3, [pc, #492]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 80082da:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	7fda      	ldrb	r2, [r3, #31]
 80082e0:	4b79      	ldr	r3, [pc, #484]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 80082e2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	7f9b      	ldrb	r3, [r3, #30]
 80082e8:	00db      	lsls	r3, r3, #3
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	4b76      	ldr	r3, [pc, #472]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 80082ee:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80082f6:	4b74      	ldr	r3, [pc, #464]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 80082f8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008300:	2b00      	cmp	r3, #0
 8008302:	d105      	bne.n	8008310 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	b2da      	uxtb	r2, r3
 800830a:	4b6f      	ldr	r3, [pc, #444]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 800830c:	759a      	strb	r2, [r3, #22]
 800830e:	e00b      	b.n	8008328 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008316:	2b02      	cmp	r3, #2
 8008318:	d103      	bne.n	8008322 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800831a:	4b6b      	ldr	r3, [pc, #428]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 800831c:	22ff      	movs	r2, #255	; 0xff
 800831e:	759a      	strb	r2, [r3, #22]
 8008320:	e002      	b.n	8008328 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008322:	4b69      	ldr	r3, [pc, #420]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 8008324:	22ff      	movs	r2, #255	; 0xff
 8008326:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800832e:	2b02      	cmp	r3, #2
 8008330:	d004      	beq.n	800833c <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008338:	2b02      	cmp	r3, #2
 800833a:	d12d      	bne.n	8008398 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008342:	2bf1      	cmp	r3, #241	; 0xf1
 8008344:	d00c      	beq.n	8008360 <RadioSetRxGenericConfig+0x15c>
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800834c:	2bf2      	cmp	r3, #242	; 0xf2
 800834e:	d007      	beq.n	8008360 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008356:	2b01      	cmp	r3, #1
 8008358:	d002      	beq.n	8008360 <RadioSetRxGenericConfig+0x15c>
                return -1;
 800835a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800835e:	e10b      	b.n	8008578 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8008360:	2300      	movs	r3, #0
 8008362:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8008368:	4b58      	ldr	r3, [pc, #352]	; (80084cc <RadioSetRxGenericConfig+0x2c8>)
 800836a:	6819      	ldr	r1, [r3, #0]
 800836c:	f107 0314 	add.w	r3, r7, #20
 8008370:	4a57      	ldr	r2, [pc, #348]	; (80084d0 <RadioSetRxGenericConfig+0x2cc>)
 8008372:	4618      	mov	r0, r3
 8008374:	f001 fd48 	bl	8009e08 <RFW_Init>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <RadioSetRxGenericConfig+0x180>
                return -1;
 800837e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008382:	e0f9      	b.n	8008578 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008384:	4b50      	ldr	r3, [pc, #320]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 8008386:	2200      	movs	r2, #0
 8008388:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800838a:	4b4f      	ldr	r3, [pc, #316]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 800838c:	2201      	movs	r2, #1
 800838e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008390:	4b4d      	ldr	r3, [pc, #308]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 8008392:	2200      	movs	r2, #0
 8008394:	755a      	strb	r2, [r3, #21]
        {
 8008396:	e00e      	b.n	80083b6 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800839e:	4b4a      	ldr	r3, [pc, #296]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 80083a0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80083a8:	4b47      	ldr	r3, [pc, #284]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 80083aa:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80083b2:	4b45      	ldr	r3, [pc, #276]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 80083b4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80083b6:	f7ff fa6e 	bl	8007896 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80083ba:	2000      	movs	r0, #0
 80083bc:	f7fe fc0a 	bl	8006bd4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80083c0:	4844      	ldr	r0, [pc, #272]	; (80084d4 <RadioSetRxGenericConfig+0x2d0>)
 80083c2:	f001 f82d 	bl	8009420 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80083c6:	4844      	ldr	r0, [pc, #272]	; (80084d8 <RadioSetRxGenericConfig+0x2d4>)
 80083c8:	f001 f8fc 	bl	80095c4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80083cc:	f107 0320 	add.w	r3, r7, #32
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 fbc0 	bl	8008b56 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	8b9b      	ldrh	r3, [r3, #28]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fc0a 	bl	8008bf4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	8b1b      	ldrh	r3, [r3, #24]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 fbe5 	bl	8008bb4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80083f0:	fb03 f202 	mul.w	r2, r3, r2
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fc:	4a32      	ldr	r2, [pc, #200]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 80083fe:	6093      	str	r3, [r2, #8]
        break;
 8008400:	e0b9      	b.n	8008576 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800840a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800840e:	e0b3      	b.n	8008578 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008416:	2b01      	cmp	r3, #1
 8008418:	d104      	bne.n	8008424 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008422:	e002      	b.n	800842a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008424:	23ff      	movs	r3, #255	; 0xff
 8008426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842e:	2b00      	cmp	r3, #0
 8008430:	bf14      	ite	ne
 8008432:	2301      	movne	r3, #1
 8008434:	2300      	moveq	r3, #0
 8008436:	b2db      	uxtb	r3, r3
 8008438:	4618      	mov	r0, r3
 800843a:	f000 fd53 	bl	8008ee4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	b2db      	uxtb	r3, r3
 8008442:	4618      	mov	r0, r3
 8008444:	f000 fd5d 	bl	8008f02 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008448:	4b1f      	ldr	r3, [pc, #124]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008456:	4b1c      	ldr	r3, [pc, #112]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 8008458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8008462:	4b19      	ldr	r3, [pc, #100]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 8008464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800846e:	4b16      	ldr	r3, [pc, #88]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 8008470:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800847a:	2b02      	cmp	r3, #2
 800847c:	d010      	beq.n	80084a0 <RadioSetRxGenericConfig+0x29c>
 800847e:	2b02      	cmp	r3, #2
 8008480:	dc2c      	bgt.n	80084dc <RadioSetRxGenericConfig+0x2d8>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <RadioSetRxGenericConfig+0x288>
 8008486:	2b01      	cmp	r3, #1
 8008488:	d005      	beq.n	8008496 <RadioSetRxGenericConfig+0x292>
            break;
 800848a:	e027      	b.n	80084dc <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800848c:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008494:	e023      	b.n	80084de <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008496:	4b0c      	ldr	r3, [pc, #48]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800849e:	e01e      	b.n	80084de <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084a6:	2b0b      	cmp	r3, #11
 80084a8:	d004      	beq.n	80084b4 <RadioSetRxGenericConfig+0x2b0>
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084b0:	2b0c      	cmp	r3, #12
 80084b2:	d104      	bne.n	80084be <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80084b4:	4b04      	ldr	r3, [pc, #16]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80084bc:	e00f      	b.n	80084de <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80084be:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <RadioSetRxGenericConfig+0x2c4>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80084c6:	e00a      	b.n	80084de <RadioSetRxGenericConfig+0x2da>
 80084c8:	200005ec 	.word	0x200005ec
 80084cc:	200005e8 	.word	0x200005e8
 80084d0:	20000660 	.word	0x20000660
 80084d4:	20000624 	.word	0x20000624
 80084d8:	200005fa 	.word	0x200005fa
            break;
 80084dc:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80084de:	4b28      	ldr	r3, [pc, #160]	; (8008580 <RadioSetRxGenericConfig+0x37c>)
 80084e0:	2201      	movs	r2, #1
 80084e2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80084e8:	4b25      	ldr	r3, [pc, #148]	; (8008580 <RadioSetRxGenericConfig+0x37c>)
 80084ea:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80084f2:	4b23      	ldr	r3, [pc, #140]	; (8008580 <RadioSetRxGenericConfig+0x37c>)
 80084f4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80084f6:	4a22      	ldr	r2, [pc, #136]	; (8008580 <RadioSetRxGenericConfig+0x37c>)
 80084f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084fc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008504:	4b1e      	ldr	r3, [pc, #120]	; (8008580 <RadioSetRxGenericConfig+0x37c>)
 8008506:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008510:	4b1b      	ldr	r3, [pc, #108]	; (8008580 <RadioSetRxGenericConfig+0x37c>)
 8008512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8008516:	f7ff f9be 	bl	8007896 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800851a:	2001      	movs	r0, #1
 800851c:	f7fe fb5a 	bl	8006bd4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008520:	4818      	ldr	r0, [pc, #96]	; (8008584 <RadioSetRxGenericConfig+0x380>)
 8008522:	f000 ff7d 	bl	8009420 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008526:	4818      	ldr	r0, [pc, #96]	; (8008588 <RadioSetRxGenericConfig+0x384>)
 8008528:	f001 f84c 	bl	80095c4 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800852c:	4b14      	ldr	r3, [pc, #80]	; (8008580 <RadioSetRxGenericConfig+0x37c>)
 800852e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008532:	2b01      	cmp	r3, #1
 8008534:	d10d      	bne.n	8008552 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008536:	f240 7036 	movw	r0, #1846	; 0x736
 800853a:	f001 f99f 	bl	800987c <SUBGRF_ReadRegister>
 800853e:	4603      	mov	r3, r0
 8008540:	f023 0304 	bic.w	r3, r3, #4
 8008544:	b2db      	uxtb	r3, r3
 8008546:	4619      	mov	r1, r3
 8008548:	f240 7036 	movw	r0, #1846	; 0x736
 800854c:	f001 f982 	bl	8009854 <SUBGRF_WriteRegister>
 8008550:	e00c      	b.n	800856c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008552:	f240 7036 	movw	r0, #1846	; 0x736
 8008556:	f001 f991 	bl	800987c <SUBGRF_ReadRegister>
 800855a:	4603      	mov	r3, r0
 800855c:	f043 0304 	orr.w	r3, r3, #4
 8008560:	b2db      	uxtb	r3, r3
 8008562:	4619      	mov	r1, r3
 8008564:	f240 7036 	movw	r0, #1846	; 0x736
 8008568:	f001 f974 	bl	8009854 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800856c:	4b04      	ldr	r3, [pc, #16]	; (8008580 <RadioSetRxGenericConfig+0x37c>)
 800856e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008572:	609a      	str	r2, [r3, #8]
        break;
 8008574:	bf00      	nop
    }
    return status;
 8008576:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008578:	4618      	mov	r0, r3
 800857a:	3730      	adds	r7, #48	; 0x30
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	200005ec 	.word	0x200005ec
 8008584:	20000624 	.word	0x20000624
 8008588:	200005fa 	.word	0x200005fa

0800858c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08e      	sub	sp, #56	; 0x38
 8008590:	af00      	add	r7, sp, #0
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	607b      	str	r3, [r7, #4]
 8008596:	4603      	mov	r3, r0
 8008598:	73fb      	strb	r3, [r7, #15]
 800859a:	4613      	mov	r3, r2
 800859c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800859e:	2300      	movs	r3, #0
 80085a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085a2:	2300      	movs	r3, #0
 80085a4:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80085a6:	f001 fc3c 	bl	8009e22 <RFW_DeInit>
    switch( modem )
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	f200 8204 	bhi.w	80089ba <RadioSetTxGenericConfig+0x42e>
 80085b2:	a201      	add	r2, pc, #4	; (adr r2, 80085b8 <RadioSetTxGenericConfig+0x2c>)
 80085b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b8:	0800873d 	.word	0x0800873d
 80085bc:	08008885 	.word	0x08008885
 80085c0:	0800897d 	.word	0x0800897d
 80085c4:	080085c9 	.word	0x080085c9
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	7c9b      	ldrb	r3, [r3, #18]
 80085cc:	2b08      	cmp	r3, #8
 80085ce:	d902      	bls.n	80085d6 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 80085d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085d4:	e206      	b.n	80089e4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	6899      	ldr	r1, [r3, #8]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	7c9b      	ldrb	r3, [r3, #18]
 80085de:	b29a      	uxth	r2, r3
 80085e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 fdb3 	bl	800a150 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d102      	bne.n	80085f8 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80085f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085f6:	e1f5      	b.n	80089e4 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8008600:	4293      	cmp	r3, r2
 8008602:	d813      	bhi.n	800862c <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008604:	2302      	movs	r3, #2
 8008606:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800860a:	4b99      	ldr	r3, [pc, #612]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 800860c:	2203      	movs	r2, #3
 800860e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008610:	4b97      	ldr	r3, [pc, #604]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 8008612:	2203      	movs	r2, #3
 8008614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a94      	ldr	r2, [pc, #592]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 800861e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	7cda      	ldrb	r2, [r3, #19]
 8008624:	4b92      	ldr	r3, [pc, #584]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 8008626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800862a:	e017      	b.n	800865c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 800862c:	2300      	movs	r3, #0
 800862e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008632:	4b8f      	ldr	r3, [pc, #572]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 8008634:	2200      	movs	r2, #0
 8008636:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008638:	4b8d      	ldr	r3, [pc, #564]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 800863a:	2200      	movs	r2, #0
 800863c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a8a      	ldr	r2, [pc, #552]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 8008646:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	7cda      	ldrb	r2, [r3, #19]
 800864c:	4b88      	ldr	r3, [pc, #544]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 800864e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	089b      	lsrs	r3, r3, #2
 8008658:	4a85      	ldr	r2, [pc, #532]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 800865a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	b29b      	uxth	r3, r3
 8008662:	00db      	lsls	r3, r3, #3
 8008664:	b29a      	uxth	r2, r3
 8008666:	4b82      	ldr	r3, [pc, #520]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 8008668:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800866a:	4b81      	ldr	r3, [pc, #516]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 800866c:	2204      	movs	r2, #4
 800866e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	7c9b      	ldrb	r3, [r3, #18]
 8008674:	00db      	lsls	r3, r3, #3
 8008676:	b2da      	uxtb	r2, r3
 8008678:	4b7d      	ldr	r3, [pc, #500]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 800867a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800867c:	4b7c      	ldr	r3, [pc, #496]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 800867e:	2200      	movs	r2, #0
 8008680:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	7d9b      	ldrb	r3, [r3, #22]
 8008686:	2b02      	cmp	r3, #2
 8008688:	d003      	beq.n	8008692 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	7d1b      	ldrb	r3, [r3, #20]
 800868e:	2b02      	cmp	r3, #2
 8008690:	d12b      	bne.n	80086ea <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	7d5b      	ldrb	r3, [r3, #21]
 8008696:	2bf1      	cmp	r3, #241	; 0xf1
 8008698:	d00a      	beq.n	80086b0 <RadioSetTxGenericConfig+0x124>
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	7d5b      	ldrb	r3, [r3, #21]
 800869e:	2bf2      	cmp	r3, #242	; 0xf2
 80086a0:	d006      	beq.n	80086b0 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	7d5b      	ldrb	r3, [r3, #21]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d002      	beq.n	80086b0 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 80086aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086ae:	e199      	b.n	80089e4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 80086b4:	2301      	movs	r3, #1
 80086b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80086ba:	4b6e      	ldr	r3, [pc, #440]	; (8008874 <RadioSetTxGenericConfig+0x2e8>)
 80086bc:	6819      	ldr	r1, [r3, #0]
 80086be:	f107 0320 	add.w	r3, r7, #32
 80086c2:	4a6d      	ldr	r2, [pc, #436]	; (8008878 <RadioSetTxGenericConfig+0x2ec>)
 80086c4:	4618      	mov	r0, r3
 80086c6:	f001 fb9f 	bl	8009e08 <RFW_Init>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 80086d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086d4:	e186      	b.n	80089e4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80086d6:	4b66      	ldr	r3, [pc, #408]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 80086d8:	2200      	movs	r2, #0
 80086da:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80086dc:	4b64      	ldr	r3, [pc, #400]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 80086de:	2201      	movs	r2, #1
 80086e0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80086e2:	4b63      	ldr	r3, [pc, #396]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	755a      	strb	r2, [r3, #21]
        {
 80086e8:	e00b      	b.n	8008702 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	7d5a      	ldrb	r2, [r3, #21]
 80086ee:	4b60      	ldr	r3, [pc, #384]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 80086f0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	7d9a      	ldrb	r2, [r3, #22]
 80086f6:	4b5e      	ldr	r3, [pc, #376]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 80086f8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	7d1a      	ldrb	r2, [r3, #20]
 80086fe:	4b5c      	ldr	r3, [pc, #368]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 8008700:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008702:	f7ff f8c8 	bl	8007896 <RadioStandby>
        RadioSetModem( radio_modem );
 8008706:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe fa62 	bl	8006bd4 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008710:	485a      	ldr	r0, [pc, #360]	; (800887c <RadioSetTxGenericConfig+0x2f0>)
 8008712:	f000 fe85 	bl	8009420 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008716:	485a      	ldr	r0, [pc, #360]	; (8008880 <RadioSetTxGenericConfig+0x2f4>)
 8008718:	f000 ff54 	bl	80095c4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800871c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008720:	4618      	mov	r0, r3
 8008722:	f000 fa18 	bl	8008b56 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	8a1b      	ldrh	r3, [r3, #16]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 fa62 	bl	8008bf4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	899b      	ldrh	r3, [r3, #12]
 8008734:	4618      	mov	r0, r3
 8008736:	f000 fa3d 	bl	8008bb4 <SUBGRF_SetCrcPolynomial>
        break;
 800873a:	e13f      	b.n	80089bc <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d102      	bne.n	800874a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8008744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008748:	e14c      	b.n	80089e4 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	7c9b      	ldrb	r3, [r3, #18]
 800874e:	2b08      	cmp	r3, #8
 8008750:	d902      	bls.n	8008758 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8008752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008756:	e145      	b.n	80089e4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	6899      	ldr	r1, [r3, #8]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	7c9b      	ldrb	r3, [r3, #18]
 8008760:	b29a      	uxth	r2, r3
 8008762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008766:	4618      	mov	r0, r3
 8008768:	f001 fcf2 	bl	800a150 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800876c:	4b40      	ldr	r3, [pc, #256]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 800876e:	2200      	movs	r2, #0
 8008770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a3d      	ldr	r2, [pc, #244]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 800877a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	7cda      	ldrb	r2, [r3, #19]
 8008780:	4b3b      	ldr	r3, [pc, #236]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 8008782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	4a39      	ldr	r2, [pc, #228]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 800878c:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800878e:	4b38      	ldr	r3, [pc, #224]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 8008790:	2200      	movs	r2, #0
 8008792:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	b29b      	uxth	r3, r3
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	b29a      	uxth	r2, r3
 800879e:	4b34      	ldr	r3, [pc, #208]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 80087a0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80087a2:	4b33      	ldr	r3, [pc, #204]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 80087a4:	2204      	movs	r2, #4
 80087a6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	7c9b      	ldrb	r3, [r3, #18]
 80087ac:	00db      	lsls	r3, r3, #3
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	4b2f      	ldr	r3, [pc, #188]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 80087b2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80087b4:	4b2e      	ldr	r3, [pc, #184]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	7d9b      	ldrb	r3, [r3, #22]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d003      	beq.n	80087ca <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	7d1b      	ldrb	r3, [r3, #20]
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d12a      	bne.n	8008820 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	7d5b      	ldrb	r3, [r3, #21]
 80087ce:	2bf1      	cmp	r3, #241	; 0xf1
 80087d0:	d00a      	beq.n	80087e8 <RadioSetTxGenericConfig+0x25c>
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	7d5b      	ldrb	r3, [r3, #21]
 80087d6:	2bf2      	cmp	r3, #242	; 0xf2
 80087d8:	d006      	beq.n	80087e8 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	7d5b      	ldrb	r3, [r3, #21]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d002      	beq.n	80087e8 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 80087e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087e6:	e0fd      	b.n	80089e4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80087e8:	2301      	movs	r3, #1
 80087ea:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80087f0:	4b20      	ldr	r3, [pc, #128]	; (8008874 <RadioSetTxGenericConfig+0x2e8>)
 80087f2:	6819      	ldr	r1, [r3, #0]
 80087f4:	f107 0314 	add.w	r3, r7, #20
 80087f8:	4a1f      	ldr	r2, [pc, #124]	; (8008878 <RadioSetTxGenericConfig+0x2ec>)
 80087fa:	4618      	mov	r0, r3
 80087fc:	f001 fb04 	bl	8009e08 <RFW_Init>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8008806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800880a:	e0eb      	b.n	80089e4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800880c:	4b18      	ldr	r3, [pc, #96]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 800880e:	2200      	movs	r2, #0
 8008810:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008812:	4b17      	ldr	r3, [pc, #92]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 8008814:	2201      	movs	r2, #1
 8008816:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008818:	4b15      	ldr	r3, [pc, #84]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 800881a:	2200      	movs	r2, #0
 800881c:	755a      	strb	r2, [r3, #21]
        {
 800881e:	e00b      	b.n	8008838 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	7d5a      	ldrb	r2, [r3, #21]
 8008824:	4b12      	ldr	r3, [pc, #72]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 8008826:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	7d9a      	ldrb	r2, [r3, #22]
 800882c:	4b10      	ldr	r3, [pc, #64]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 800882e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	7d1a      	ldrb	r2, [r3, #20]
 8008834:	4b0e      	ldr	r3, [pc, #56]	; (8008870 <RadioSetTxGenericConfig+0x2e4>)
 8008836:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008838:	f7ff f82d 	bl	8007896 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800883c:	2000      	movs	r0, #0
 800883e:	f7fe f9c9 	bl	8006bd4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008842:	480e      	ldr	r0, [pc, #56]	; (800887c <RadioSetTxGenericConfig+0x2f0>)
 8008844:	f000 fdec 	bl	8009420 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008848:	480d      	ldr	r0, [pc, #52]	; (8008880 <RadioSetTxGenericConfig+0x2f4>)
 800884a:	f000 febb 	bl	80095c4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800884e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008852:	4618      	mov	r0, r3
 8008854:	f000 f97f 	bl	8008b56 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	8a1b      	ldrh	r3, [r3, #16]
 800885c:	4618      	mov	r0, r3
 800885e:	f000 f9c9 	bl	8008bf4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	899b      	ldrh	r3, [r3, #12]
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f9a4 	bl	8008bb4 <SUBGRF_SetCrcPolynomial>
        break;
 800886c:	e0a6      	b.n	80089bc <RadioSetTxGenericConfig+0x430>
 800886e:	bf00      	nop
 8008870:	200005ec 	.word	0x200005ec
 8008874:	200005e8 	.word	0x200005e8
 8008878:	20000648 	.word	0x20000648
 800887c:	20000624 	.word	0x20000624
 8008880:	200005fa 	.word	0x200005fa
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008884:	4b59      	ldr	r3, [pc, #356]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	781a      	ldrb	r2, [r3, #0]
 8008890:	4b56      	ldr	r3, [pc, #344]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 8008892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	785a      	ldrb	r2, [r3, #1]
 800889a:	4b54      	ldr	r3, [pc, #336]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 800889c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	789a      	ldrb	r2, [r3, #2]
 80088a4:	4b51      	ldr	r3, [pc, #324]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 80088a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	78db      	ldrb	r3, [r3, #3]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d010      	beq.n	80088d4 <RadioSetTxGenericConfig+0x348>
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	dc20      	bgt.n	80088f8 <RadioSetTxGenericConfig+0x36c>
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <RadioSetTxGenericConfig+0x334>
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d005      	beq.n	80088ca <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 80088be:	e01b      	b.n	80088f8 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80088c0:	4b4a      	ldr	r3, [pc, #296]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80088c8:	e017      	b.n	80088fa <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80088ca:	4b48      	ldr	r3, [pc, #288]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80088d2:	e012      	b.n	80088fa <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b0b      	cmp	r3, #11
 80088da:	d003      	beq.n	80088e4 <RadioSetTxGenericConfig+0x358>
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	2b0c      	cmp	r3, #12
 80088e2:	d104      	bne.n	80088ee <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80088e4:	4b41      	ldr	r3, [pc, #260]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80088ec:	e005      	b.n	80088fa <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80088ee:	4b3f      	ldr	r3, [pc, #252]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80088f6:	e000      	b.n	80088fa <RadioSetTxGenericConfig+0x36e>
            break;
 80088f8:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80088fa:	4b3c      	ldr	r3, [pc, #240]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 80088fc:	2201      	movs	r2, #1
 80088fe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	889a      	ldrh	r2, [r3, #4]
 8008904:	4b39      	ldr	r3, [pc, #228]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 8008906:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	799a      	ldrb	r2, [r3, #6]
 800890c:	4b37      	ldr	r3, [pc, #220]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 800890e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	79da      	ldrb	r2, [r3, #7]
 8008914:	4b35      	ldr	r3, [pc, #212]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 8008916:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	7a1a      	ldrb	r2, [r3, #8]
 800891e:	4b33      	ldr	r3, [pc, #204]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 8008920:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8008924:	f7fe ffb7 	bl	8007896 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008928:	2001      	movs	r0, #1
 800892a:	f7fe f953 	bl	8006bd4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800892e:	4830      	ldr	r0, [pc, #192]	; (80089f0 <RadioSetTxGenericConfig+0x464>)
 8008930:	f000 fd76 	bl	8009420 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008934:	482f      	ldr	r0, [pc, #188]	; (80089f4 <RadioSetTxGenericConfig+0x468>)
 8008936:	f000 fe45 	bl	80095c4 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800893a:	4b2c      	ldr	r3, [pc, #176]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 800893c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008940:	2b06      	cmp	r3, #6
 8008942:	d10d      	bne.n	8008960 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008944:	f640 0089 	movw	r0, #2185	; 0x889
 8008948:	f000 ff98 	bl	800987c <SUBGRF_ReadRegister>
 800894c:	4603      	mov	r3, r0
 800894e:	f023 0304 	bic.w	r3, r3, #4
 8008952:	b2db      	uxtb	r3, r3
 8008954:	4619      	mov	r1, r3
 8008956:	f640 0089 	movw	r0, #2185	; 0x889
 800895a:	f000 ff7b 	bl	8009854 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800895e:	e02d      	b.n	80089bc <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008960:	f640 0089 	movw	r0, #2185	; 0x889
 8008964:	f000 ff8a 	bl	800987c <SUBGRF_ReadRegister>
 8008968:	4603      	mov	r3, r0
 800896a:	f043 0304 	orr.w	r3, r3, #4
 800896e:	b2db      	uxtb	r3, r3
 8008970:	4619      	mov	r1, r3
 8008972:	f640 0089 	movw	r0, #2185	; 0x889
 8008976:	f000 ff6d 	bl	8009854 <SUBGRF_WriteRegister>
        break;
 800897a:	e01f      	b.n	80089bc <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d004      	beq.n	800898e <RadioSetTxGenericConfig+0x402>
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800898c:	d902      	bls.n	8008994 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800898e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008992:	e027      	b.n	80089e4 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8008994:	2003      	movs	r0, #3
 8008996:	f7fe f91d 	bl	8006bd4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800899a:	4b14      	ldr	r3, [pc, #80]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 800899c:	2202      	movs	r2, #2
 800899e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a11      	ldr	r2, [pc, #68]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 80089a8:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80089aa:	4b10      	ldr	r3, [pc, #64]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 80089ac:	2216      	movs	r2, #22
 80089ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80089b2:	480f      	ldr	r0, [pc, #60]	; (80089f0 <RadioSetTxGenericConfig+0x464>)
 80089b4:	f000 fd34 	bl	8009420 <SUBGRF_SetModulationParams>
        break;
 80089b8:	e000      	b.n	80089bc <RadioSetTxGenericConfig+0x430>
    default:
        break;
 80089ba:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80089bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f001 f863 	bl	8009a8c <SUBGRF_SetRfTxPower>
 80089c6:	4603      	mov	r3, r0
 80089c8:	461a      	mov	r2, r3
 80089ca:	4b08      	ldr	r3, [pc, #32]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 80089cc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80089d0:	4b06      	ldr	r3, [pc, #24]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 80089d2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80089d6:	4618      	mov	r0, r3
 80089d8:	f001 fa37 	bl	8009e4a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80089dc:	4a03      	ldr	r2, [pc, #12]	; (80089ec <RadioSetTxGenericConfig+0x460>)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6053      	str	r3, [r2, #4]
    return 0;
 80089e2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3738      	adds	r7, #56	; 0x38
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	200005ec 	.word	0x200005ec
 80089f0:	20000624 	.word	0x20000624
 80089f4:	200005fa 	.word	0x200005fa

080089f8 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008a00:	2301      	movs	r3, #1
 8008a02:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bc80      	pop	{r7}
 8008a0e:	4770      	bx	lr

08008a10 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008a1a:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr
	...

08008a28 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d002      	beq.n	8008a3c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8008a36:	4a1d      	ldr	r2, [pc, #116]	; (8008aac <SUBGRF_Init+0x84>)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8008a3c:	f7f8 fea2 	bl	8001784 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008a40:	2002      	movs	r0, #2
 8008a42:	f001 f8ff 	bl	8009c44 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8008a46:	4b1a      	ldr	r3, [pc, #104]	; (8008ab0 <SUBGRF_Init+0x88>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	f000 f97d 	bl	8008d4c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8008a52:	f001 fb52 	bl	800a0fa <RBI_IsTCXO>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d10e      	bne.n	8008a7a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8008a5c:	2140      	movs	r1, #64	; 0x40
 8008a5e:	2001      	movs	r0, #1
 8008a60:	f000 fb82 	bl	8009168 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8008a64:	2100      	movs	r1, #0
 8008a66:	f640 1011 	movw	r0, #2321	; 0x911
 8008a6a:	f000 fef3 	bl	8009854 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8008a6e:	237f      	movs	r3, #127	; 0x7f
 8008a70:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8008a72:	7b38      	ldrb	r0, [r7, #12]
 8008a74:	f000 fa8b 	bl	8008f8e <SUBGRF_Calibrate>
 8008a78:	e009      	b.n	8008a8e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008a7a:	2120      	movs	r1, #32
 8008a7c:	f640 1011 	movw	r0, #2321	; 0x911
 8008a80:	f000 fee8 	bl	8009854 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008a84:	2120      	movs	r1, #32
 8008a86:	f640 1012 	movw	r0, #2322	; 0x912
 8008a8a:	f000 fee3 	bl	8009854 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008a8e:	210e      	movs	r1, #14
 8008a90:	f640 101f 	movw	r0, #2335	; 0x91f
 8008a94:	f000 fede 	bl	8009854 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8008a98:	f001 fa86 	bl	8009fa8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8008a9c:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <SUBGRF_Init+0x8c>)
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	701a      	strb	r2, [r3, #0]
}
 8008aa2:	bf00      	nop
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	20000684 	.word	0x20000684
 8008ab0:	20000680 	.word	0x20000680
 8008ab4:	20000678 	.word	0x20000678

08008ab8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0
    return OperatingMode;
 8008abc:	4b02      	ldr	r3, [pc, #8]	; (8008ac8 <SUBGRF_GetOperatingMode+0x10>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bc80      	pop	{r7}
 8008ac6:	4770      	bx	lr
 8008ac8:	20000678 	.word	0x20000678

08008acc <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	461a      	mov	r2, r3
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	2000      	movs	r0, #0
 8008ae0:	f000 ff24 	bl	800992c <SUBGRF_WriteBuffer>
}
 8008ae4:	bf00      	nop
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	4613      	mov	r3, r2
 8008af8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8008afe:	f107 0317 	add.w	r3, r7, #23
 8008b02:	4619      	mov	r1, r3
 8008b04:	68b8      	ldr	r0, [r7, #8]
 8008b06:	f000 fe27 	bl	8009758 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	79fa      	ldrb	r2, [r7, #7]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d201      	bcs.n	8008b18 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e007      	b.n	8008b28 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8008b18:	7df8      	ldrb	r0, [r7, #23]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	68f9      	ldr	r1, [r7, #12]
 8008b22:	f000 ff25 	bl	8009970 <SUBGRF_ReadBuffer>

    return 0;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8008b3e:	7afb      	ldrb	r3, [r7, #11]
 8008b40:	4619      	mov	r1, r3
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f7ff ffc2 	bl	8008acc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f91b 	bl	8008d84 <SUBGRF_SetTx>
}
 8008b4e:	bf00      	nop
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b082      	sub	sp, #8
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8008b5e:	2208      	movs	r2, #8
 8008b60:	6879      	ldr	r1, [r7, #4]
 8008b62:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8008b66:	f000 fe9d 	bl	80098a4 <SUBGRF_WriteRegisters>
    return 0;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8008b7e:	88fb      	ldrh	r3, [r7, #6]
 8008b80:	0a1b      	lsrs	r3, r3, #8
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8008b88:	88fb      	ldrh	r3, [r7, #6]
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8008b8e:	f000 fb6f 	bl	8009270 <SUBGRF_GetPacketType>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d108      	bne.n	8008baa <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8008b98:	f107 030c 	add.w	r3, r7, #12
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8008ba4:	f000 fe7e 	bl	80098a4 <SUBGRF_WriteRegisters>
            break;
 8008ba8:	e000      	b.n	8008bac <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8008baa:	bf00      	nop
    }
}
 8008bac:	bf00      	nop
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8008bbe:	88fb      	ldrh	r3, [r7, #6]
 8008bc0:	0a1b      	lsrs	r3, r3, #8
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8008bc8:	88fb      	ldrh	r3, [r7, #6]
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8008bce:	f000 fb4f 	bl	8009270 <SUBGRF_GetPacketType>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d108      	bne.n	8008bea <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8008bd8:	f107 030c 	add.w	r3, r7, #12
 8008bdc:	2202      	movs	r2, #2
 8008bde:	4619      	mov	r1, r3
 8008be0:	f240 60be 	movw	r0, #1726	; 0x6be
 8008be4:	f000 fe5e 	bl	80098a4 <SUBGRF_WriteRegisters>
            break;
 8008be8:	e000      	b.n	8008bec <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8008bea:	bf00      	nop
    }
}
 8008bec:	bf00      	nop
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8008c02:	f000 fb35 	bl	8009270 <SUBGRF_GetPacketType>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d121      	bne.n	8008c50 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8008c0c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008c10:	f000 fe34 	bl	800987c <SUBGRF_ReadRegister>
 8008c14:	4603      	mov	r3, r0
 8008c16:	f023 0301 	bic.w	r3, r3, #1
 8008c1a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8008c1c:	88fb      	ldrh	r3, [r7, #6]
 8008c1e:	0a1b      	lsrs	r3, r3, #8
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	b25b      	sxtb	r3, r3
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	b25a      	sxtb	r2, r3
 8008c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	b25b      	sxtb	r3, r3
 8008c32:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	4619      	mov	r1, r3
 8008c38:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008c3c:	f000 fe0a 	bl	8009854 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8008c40:	88fb      	ldrh	r3, [r7, #6]
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	4619      	mov	r1, r3
 8008c46:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8008c4a:	f000 fe03 	bl	8009854 <SUBGRF_WriteRegister>
            break;
 8008c4e:	e000      	b.n	8008c52 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8008c50:	bf00      	nop
    }
}
 8008c52:	bf00      	nop
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8008c6c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008c70:	f000 fe04 	bl	800987c <SUBGRF_ReadRegister>
 8008c74:	4603      	mov	r3, r0
 8008c76:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8008c78:	79fb      	ldrb	r3, [r7, #7]
 8008c7a:	f023 0301 	bic.w	r3, r3, #1
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	4619      	mov	r1, r3
 8008c82:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008c86:	f000 fde5 	bl	8009854 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8008c8a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008c8e:	f000 fdf5 	bl	800987c <SUBGRF_ReadRegister>
 8008c92:	4603      	mov	r3, r0
 8008c94:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8008c96:	79bb      	ldrb	r3, [r7, #6]
 8008c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008ca4:	f000 fdd6 	bl	8009854 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008ca8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008cac:	f000 f88a 	bl	8008dc4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8008cb0:	463b      	mov	r3, r7
 8008cb2:	2204      	movs	r2, #4
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	f640 0019 	movw	r0, #2073	; 0x819
 8008cba:	f000 fe15 	bl	80098e8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	f000 f844 	bl	8008d4c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8008cc4:	79fb      	ldrb	r3, [r7, #7]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008ccc:	f000 fdc2 	bl	8009854 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8008cd0:	79bb      	ldrb	r3, [r7, #6]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008cd8:	f000 fdbc 	bl	8009854 <SUBGRF_WriteRegister>

    return number;
 8008cdc:	683b      	ldr	r3, [r7, #0]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	f001 f999 	bl	800a028 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008cf6:	2002      	movs	r0, #2
 8008cf8:	f000 ffa4 	bl	8009c44 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008cfc:	793b      	ldrb	r3, [r7, #4]
 8008cfe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008d08:	793b      	ldrb	r3, [r7, #4]
 8008d0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008d12:	b25b      	sxtb	r3, r3
 8008d14:	4313      	orrs	r3, r2
 8008d16:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8008d18:	793b      	ldrb	r3, [r7, #4]
 8008d1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008d22:	4313      	orrs	r3, r2
 8008d24:	b25b      	sxtb	r3, r3
 8008d26:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008d28:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8008d2a:	f107 030f 	add.w	r3, r7, #15
 8008d2e:	2201      	movs	r2, #1
 8008d30:	4619      	mov	r1, r3
 8008d32:	2084      	movs	r0, #132	; 0x84
 8008d34:	f000 fe3e 	bl	80099b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8008d38:	4b03      	ldr	r3, [pc, #12]	; (8008d48 <SUBGRF_SetSleep+0x60>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	701a      	strb	r2, [r3, #0]
}
 8008d3e:	bf00      	nop
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000678 	.word	0x20000678

08008d4c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8008d56:	1dfb      	adds	r3, r7, #7
 8008d58:	2201      	movs	r2, #1
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	2080      	movs	r0, #128	; 0x80
 8008d5e:	f000 fe29 	bl	80099b4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d103      	bne.n	8008d70 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <SUBGRF_SetStandby+0x34>)
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8008d6e:	e002      	b.n	8008d76 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8008d70:	4b03      	ldr	r3, [pc, #12]	; (8008d80 <SUBGRF_SetStandby+0x34>)
 8008d72:	2202      	movs	r2, #2
 8008d74:	701a      	strb	r2, [r3, #0]
}
 8008d76:	bf00      	nop
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000678 	.word	0x20000678

08008d84 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8008d8c:	4b0c      	ldr	r3, [pc, #48]	; (8008dc0 <SUBGRF_SetTx+0x3c>)
 8008d8e:	2204      	movs	r2, #4
 8008d90:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	0c1b      	lsrs	r3, r3, #16
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	0a1b      	lsrs	r3, r3, #8
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8008da8:	f107 030c 	add.w	r3, r7, #12
 8008dac:	2203      	movs	r2, #3
 8008dae:	4619      	mov	r1, r3
 8008db0:	2083      	movs	r0, #131	; 0x83
 8008db2:	f000 fdff 	bl	80099b4 <SUBGRF_WriteCommand>
}
 8008db6:	bf00      	nop
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20000678 	.word	0x20000678

08008dc4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008dcc:	4b0c      	ldr	r3, [pc, #48]	; (8008e00 <SUBGRF_SetRx+0x3c>)
 8008dce:	2205      	movs	r2, #5
 8008dd0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	0c1b      	lsrs	r3, r3, #16
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	0a1b      	lsrs	r3, r3, #8
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008de8:	f107 030c 	add.w	r3, r7, #12
 8008dec:	2203      	movs	r2, #3
 8008dee:	4619      	mov	r1, r3
 8008df0:	2082      	movs	r0, #130	; 0x82
 8008df2:	f000 fddf 	bl	80099b4 <SUBGRF_WriteCommand>
}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20000678 	.word	0x20000678

08008e04 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008e0c:	4b0e      	ldr	r3, [pc, #56]	; (8008e48 <SUBGRF_SetRxBoosted+0x44>)
 8008e0e:	2205      	movs	r2, #5
 8008e10:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8008e12:	2197      	movs	r1, #151	; 0x97
 8008e14:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8008e18:	f000 fd1c 	bl	8009854 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	0c1b      	lsrs	r3, r3, #16
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	0a1b      	lsrs	r3, r3, #8
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008e32:	f107 030c 	add.w	r3, r7, #12
 8008e36:	2203      	movs	r2, #3
 8008e38:	4619      	mov	r1, r3
 8008e3a:	2082      	movs	r0, #130	; 0x82
 8008e3c:	f000 fdba 	bl	80099b4 <SUBGRF_WriteCommand>
}
 8008e40:	bf00      	nop
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	20000678 	.word	0x20000678

08008e4c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	0c1b      	lsrs	r3, r3, #16
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	0a1b      	lsrs	r3, r3, #8
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	0c1b      	lsrs	r3, r3, #16
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	0a1b      	lsrs	r3, r3, #8
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8008e82:	f107 0308 	add.w	r3, r7, #8
 8008e86:	2206      	movs	r2, #6
 8008e88:	4619      	mov	r1, r3
 8008e8a:	2094      	movs	r0, #148	; 0x94
 8008e8c:	f000 fd92 	bl	80099b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8008e90:	4b03      	ldr	r3, [pc, #12]	; (8008ea0 <SUBGRF_SetRxDutyCycle+0x54>)
 8008e92:	2206      	movs	r2, #6
 8008e94:	701a      	strb	r2, [r3, #0]
}
 8008e96:	bf00      	nop
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20000678 	.word	0x20000678

08008ea4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	2100      	movs	r1, #0
 8008eac:	20c5      	movs	r0, #197	; 0xc5
 8008eae:	f000 fd81 	bl	80099b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8008eb2:	4b02      	ldr	r3, [pc, #8]	; (8008ebc <SUBGRF_SetCad+0x18>)
 8008eb4:	2207      	movs	r2, #7
 8008eb6:	701a      	strb	r2, [r3, #0]
}
 8008eb8:	bf00      	nop
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20000678 	.word	0x20000678

08008ec0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	20d1      	movs	r0, #209	; 0xd1
 8008eca:	f000 fd73 	bl	80099b4 <SUBGRF_WriteCommand>
}
 8008ece:	bf00      	nop
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	2100      	movs	r1, #0
 8008eda:	20d2      	movs	r0, #210	; 0xd2
 8008edc:	f000 fd6a 	bl	80099b4 <SUBGRF_WriteCommand>
}
 8008ee0:	bf00      	nop
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	4603      	mov	r3, r0
 8008eec:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8008eee:	1dfb      	adds	r3, r7, #7
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	209f      	movs	r0, #159	; 0x9f
 8008ef6:	f000 fd5d 	bl	80099b4 <SUBGRF_WriteCommand>
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b084      	sub	sp, #16
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	4603      	mov	r3, r0
 8008f0a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8008f0c:	1dfb      	adds	r3, r7, #7
 8008f0e:	2201      	movs	r2, #1
 8008f10:	4619      	mov	r1, r3
 8008f12:	20a0      	movs	r0, #160	; 0xa0
 8008f14:	f000 fd4e 	bl	80099b4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8008f18:	79fb      	ldrb	r3, [r7, #7]
 8008f1a:	2b3f      	cmp	r3, #63	; 0x3f
 8008f1c:	d91c      	bls.n	8008f58 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8008f1e:	79fb      	ldrb	r3, [r7, #7]
 8008f20:	085b      	lsrs	r3, r3, #1
 8008f22:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8008f2c:	e005      	b.n	8008f3a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	089b      	lsrs	r3, r3, #2
 8008f32:	73fb      	strb	r3, [r7, #15]
            exp++;
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	3301      	adds	r3, #1
 8008f38:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	2b1f      	cmp	r3, #31
 8008f3e:	d8f6      	bhi.n	8008f2e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	00db      	lsls	r3, r3, #3
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	4413      	add	r3, r2
 8008f4a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8008f4c:	7b7b      	ldrb	r3, [r7, #13]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	f240 7006 	movw	r0, #1798	; 0x706
 8008f54:	f000 fc7e 	bl	8009854 <SUBGRF_WriteRegister>
    }
}
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8008f66:	f001 f8d3 	bl	800a110 <RBI_IsDCDC>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d102      	bne.n	8008f76 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8008f70:	2301      	movs	r3, #1
 8008f72:	71fb      	strb	r3, [r7, #7]
 8008f74:	e001      	b.n	8008f7a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8008f76:	2300      	movs	r3, #0
 8008f78:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8008f7a:	1dfb      	adds	r3, r7, #7
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	4619      	mov	r1, r3
 8008f80:	2096      	movs	r0, #150	; 0x96
 8008f82:	f000 fd17 	bl	80099b4 <SUBGRF_WriteCommand>
}
 8008f86:	bf00      	nop
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008f96:	793b      	ldrb	r3, [r7, #4]
 8008f98:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	019b      	lsls	r3, r3, #6
 8008fa0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8008fa2:	793b      	ldrb	r3, [r7, #4]
 8008fa4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008fac:	b25b      	sxtb	r3, r3
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8008fb2:	793b      	ldrb	r3, [r7, #4]
 8008fb4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8008fbc:	b25b      	sxtb	r3, r3
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8008fc2:	793b      	ldrb	r3, [r7, #4]
 8008fc4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8008fcc:	b25b      	sxtb	r3, r3
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8008fd2:	793b      	ldrb	r3, [r7, #4]
 8008fd4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8008fdc:	b25b      	sxtb	r3, r3
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8008fe2:	793b      	ldrb	r3, [r7, #4]
 8008fe4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8008fec:	b25b      	sxtb	r3, r3
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8008ff2:	793b      	ldrb	r3, [r7, #4]
 8008ff4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	b25b      	sxtb	r3, r3
 8009000:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009002:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009004:	f107 030f 	add.w	r3, r7, #15
 8009008:	2201      	movs	r2, #1
 800900a:	4619      	mov	r1, r3
 800900c:	2089      	movs	r0, #137	; 0x89
 800900e:	f000 fcd1 	bl	80099b4 <SUBGRF_WriteCommand>
}
 8009012:	bf00      	nop
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
	...

0800901c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a1d      	ldr	r2, [pc, #116]	; (800909c <SUBGRF_CalibrateImage+0x80>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d904      	bls.n	8009036 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800902c:	23e1      	movs	r3, #225	; 0xe1
 800902e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8009030:	23e9      	movs	r3, #233	; 0xe9
 8009032:	737b      	strb	r3, [r7, #13]
 8009034:	e027      	b.n	8009086 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a19      	ldr	r2, [pc, #100]	; (80090a0 <SUBGRF_CalibrateImage+0x84>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d904      	bls.n	8009048 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800903e:	23d7      	movs	r3, #215	; 0xd7
 8009040:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8009042:	23db      	movs	r3, #219	; 0xdb
 8009044:	737b      	strb	r3, [r7, #13]
 8009046:	e01e      	b.n	8009086 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a16      	ldr	r2, [pc, #88]	; (80090a4 <SUBGRF_CalibrateImage+0x88>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d904      	bls.n	800905a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8009050:	23c1      	movs	r3, #193	; 0xc1
 8009052:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8009054:	23c5      	movs	r3, #197	; 0xc5
 8009056:	737b      	strb	r3, [r7, #13]
 8009058:	e015      	b.n	8009086 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a12      	ldr	r2, [pc, #72]	; (80090a8 <SUBGRF_CalibrateImage+0x8c>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d904      	bls.n	800906c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8009062:	2375      	movs	r3, #117	; 0x75
 8009064:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8009066:	2381      	movs	r3, #129	; 0x81
 8009068:	737b      	strb	r3, [r7, #13]
 800906a:	e00c      	b.n	8009086 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a0f      	ldr	r2, [pc, #60]	; (80090ac <SUBGRF_CalibrateImage+0x90>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d904      	bls.n	800907e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8009074:	236b      	movs	r3, #107	; 0x6b
 8009076:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8009078:	236f      	movs	r3, #111	; 0x6f
 800907a:	737b      	strb	r3, [r7, #13]
 800907c:	e003      	b.n	8009086 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800907e:	2329      	movs	r3, #41	; 0x29
 8009080:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8009082:	232b      	movs	r3, #43	; 0x2b
 8009084:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8009086:	f107 030c 	add.w	r3, r7, #12
 800908a:	2202      	movs	r2, #2
 800908c:	4619      	mov	r1, r3
 800908e:	2098      	movs	r0, #152	; 0x98
 8009090:	f000 fc90 	bl	80099b4 <SUBGRF_WriteCommand>
}
 8009094:	bf00      	nop
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	35a4e900 	.word	0x35a4e900
 80090a0:	32a9f880 	.word	0x32a9f880
 80090a4:	2de54480 	.word	0x2de54480
 80090a8:	1b6b0b00 	.word	0x1b6b0b00
 80090ac:	1954fc40 	.word	0x1954fc40

080090b0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80090b0:	b590      	push	{r4, r7, lr}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	4604      	mov	r4, r0
 80090b8:	4608      	mov	r0, r1
 80090ba:	4611      	mov	r1, r2
 80090bc:	461a      	mov	r2, r3
 80090be:	4623      	mov	r3, r4
 80090c0:	71fb      	strb	r3, [r7, #7]
 80090c2:	4603      	mov	r3, r0
 80090c4:	71bb      	strb	r3, [r7, #6]
 80090c6:	460b      	mov	r3, r1
 80090c8:	717b      	strb	r3, [r7, #5]
 80090ca:	4613      	mov	r3, r2
 80090cc:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80090d2:	79bb      	ldrb	r3, [r7, #6]
 80090d4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80090d6:	797b      	ldrb	r3, [r7, #5]
 80090d8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80090da:	793b      	ldrb	r3, [r7, #4]
 80090dc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80090de:	f107 030c 	add.w	r3, r7, #12
 80090e2:	2204      	movs	r2, #4
 80090e4:	4619      	mov	r1, r3
 80090e6:	2095      	movs	r0, #149	; 0x95
 80090e8:	f000 fc64 	bl	80099b4 <SUBGRF_WriteCommand>
}
 80090ec:	bf00      	nop
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd90      	pop	{r4, r7, pc}

080090f4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80090f4:	b590      	push	{r4, r7, lr}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4604      	mov	r4, r0
 80090fc:	4608      	mov	r0, r1
 80090fe:	4611      	mov	r1, r2
 8009100:	461a      	mov	r2, r3
 8009102:	4623      	mov	r3, r4
 8009104:	80fb      	strh	r3, [r7, #6]
 8009106:	4603      	mov	r3, r0
 8009108:	80bb      	strh	r3, [r7, #4]
 800910a:	460b      	mov	r3, r1
 800910c:	807b      	strh	r3, [r7, #2]
 800910e:	4613      	mov	r3, r2
 8009110:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8009112:	88fb      	ldrh	r3, [r7, #6]
 8009114:	0a1b      	lsrs	r3, r3, #8
 8009116:	b29b      	uxth	r3, r3
 8009118:	b2db      	uxtb	r3, r3
 800911a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800911c:	88fb      	ldrh	r3, [r7, #6]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8009122:	88bb      	ldrh	r3, [r7, #4]
 8009124:	0a1b      	lsrs	r3, r3, #8
 8009126:	b29b      	uxth	r3, r3
 8009128:	b2db      	uxtb	r3, r3
 800912a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800912c:	88bb      	ldrh	r3, [r7, #4]
 800912e:	b2db      	uxtb	r3, r3
 8009130:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8009132:	887b      	ldrh	r3, [r7, #2]
 8009134:	0a1b      	lsrs	r3, r3, #8
 8009136:	b29b      	uxth	r3, r3
 8009138:	b2db      	uxtb	r3, r3
 800913a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800913c:	887b      	ldrh	r3, [r7, #2]
 800913e:	b2db      	uxtb	r3, r3
 8009140:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8009142:	883b      	ldrh	r3, [r7, #0]
 8009144:	0a1b      	lsrs	r3, r3, #8
 8009146:	b29b      	uxth	r3, r3
 8009148:	b2db      	uxtb	r3, r3
 800914a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800914c:	883b      	ldrh	r3, [r7, #0]
 800914e:	b2db      	uxtb	r3, r3
 8009150:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8009152:	f107 0308 	add.w	r3, r7, #8
 8009156:	2208      	movs	r2, #8
 8009158:	4619      	mov	r1, r3
 800915a:	2008      	movs	r0, #8
 800915c:	f000 fc2a 	bl	80099b4 <SUBGRF_WriteCommand>
}
 8009160:	bf00      	nop
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	bd90      	pop	{r4, r7, pc}

08009168 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	6039      	str	r1, [r7, #0]
 8009172:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	b2db      	uxtb	r3, r3
 800917c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	0c1b      	lsrs	r3, r3, #16
 8009182:	b2db      	uxtb	r3, r3
 8009184:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	0a1b      	lsrs	r3, r3, #8
 800918a:	b2db      	uxtb	r3, r3
 800918c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	b2db      	uxtb	r3, r3
 8009192:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8009194:	f107 030c 	add.w	r3, r7, #12
 8009198:	2204      	movs	r2, #4
 800919a:	4619      	mov	r1, r3
 800919c:	2097      	movs	r0, #151	; 0x97
 800919e:	f000 fc09 	bl	80099b4 <SUBGRF_WriteCommand>
}
 80091a2:	bf00      	nop
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80091ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80091ba:	4b1d      	ldr	r3, [pc, #116]	; (8009230 <SUBGRF_SetRfFrequency+0x84>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	f083 0301 	eor.w	r3, r3, #1
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d005      	beq.n	80091d4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff ff27 	bl	800901c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80091ce:	4b18      	ldr	r3, [pc, #96]	; (8009230 <SUBGRF_SetRfFrequency+0x84>)
 80091d0:	2201      	movs	r2, #1
 80091d2:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	461c      	mov	r4, r3
 80091da:	4615      	mov	r5, r2
 80091dc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80091e0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80091e4:	4a13      	ldr	r2, [pc, #76]	; (8009234 <SUBGRF_SetRfFrequency+0x88>)
 80091e6:	f04f 0300 	mov.w	r3, #0
 80091ea:	4640      	mov	r0, r8
 80091ec:	4649      	mov	r1, r9
 80091ee:	f7f7 f817 	bl	8000220 <__aeabi_uldivmod>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4613      	mov	r3, r2
 80091f8:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	0e1b      	lsrs	r3, r3, #24
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	0c1b      	lsrs	r3, r3, #16
 8009206:	b2db      	uxtb	r3, r3
 8009208:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	0a1b      	lsrs	r3, r3, #8
 800920e:	b2db      	uxtb	r3, r3
 8009210:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8009218:	f107 0308 	add.w	r3, r7, #8
 800921c:	2204      	movs	r2, #4
 800921e:	4619      	mov	r1, r3
 8009220:	2086      	movs	r0, #134	; 0x86
 8009222:	f000 fbc7 	bl	80099b4 <SUBGRF_WriteCommand>
}
 8009226:	bf00      	nop
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009230:	20000680 	.word	0x20000680
 8009234:	01e84800 	.word	0x01e84800

08009238 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8009242:	79fa      	ldrb	r2, [r7, #7]
 8009244:	4b09      	ldr	r3, [pc, #36]	; (800926c <SUBGRF_SetPacketType+0x34>)
 8009246:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8009248:	79fb      	ldrb	r3, [r7, #7]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800924e:	2100      	movs	r1, #0
 8009250:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8009254:	f000 fafe 	bl	8009854 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8009258:	1dfb      	adds	r3, r7, #7
 800925a:	2201      	movs	r2, #1
 800925c:	4619      	mov	r1, r3
 800925e:	208a      	movs	r0, #138	; 0x8a
 8009260:	f000 fba8 	bl	80099b4 <SUBGRF_WriteCommand>
}
 8009264:	bf00      	nop
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20000679 	.word	0x20000679

08009270 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
    return PacketType;
 8009274:	4b02      	ldr	r3, [pc, #8]	; (8009280 <SUBGRF_GetPacketType+0x10>)
 8009276:	781b      	ldrb	r3, [r3, #0]
}
 8009278:	4618      	mov	r0, r3
 800927a:	46bd      	mov	sp, r7
 800927c:	bc80      	pop	{r7}
 800927e:	4770      	bx	lr
 8009280:	20000679 	.word	0x20000679

08009284 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	71fb      	strb	r3, [r7, #7]
 800928e:	460b      	mov	r3, r1
 8009290:	71bb      	strb	r3, [r7, #6]
 8009292:	4613      	mov	r3, r2
 8009294:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d149      	bne.n	8009330 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800929c:	2000      	movs	r0, #0
 800929e:	f000 ff42 	bl	800a126 <RBI_GetRFOMaxPowerConfig>
 80092a2:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80092a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	da01      	bge.n	80092b2 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2b0e      	cmp	r3, #14
 80092b6:	d10e      	bne.n	80092d6 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80092b8:	2301      	movs	r3, #1
 80092ba:	2201      	movs	r2, #1
 80092bc:	2100      	movs	r1, #0
 80092be:	2004      	movs	r0, #4
 80092c0:	f7ff fef6 	bl	80090b0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80092c4:	79ba      	ldrb	r2, [r7, #6]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	330e      	adds	r3, #14
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	71bb      	strb	r3, [r7, #6]
 80092d4:	e01f      	b.n	8009316 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b0a      	cmp	r3, #10
 80092da:	d10e      	bne.n	80092fa <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80092dc:	2301      	movs	r3, #1
 80092de:	2201      	movs	r2, #1
 80092e0:	2100      	movs	r1, #0
 80092e2:	2001      	movs	r0, #1
 80092e4:	f7ff fee4 	bl	80090b0 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80092e8:	79ba      	ldrb	r2, [r7, #6]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	330d      	adds	r3, #13
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	71bb      	strb	r3, [r7, #6]
 80092f8:	e00d      	b.n	8009316 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80092fa:	2301      	movs	r3, #1
 80092fc:	2201      	movs	r2, #1
 80092fe:	2100      	movs	r1, #0
 8009300:	2007      	movs	r0, #7
 8009302:	f7ff fed5 	bl	80090b0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009306:	79ba      	ldrb	r2, [r7, #6]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	b2db      	uxtb	r3, r3
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	b2db      	uxtb	r3, r3
 8009310:	330e      	adds	r3, #14
 8009312:	b2db      	uxtb	r3, r3
 8009314:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8009316:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800931a:	f113 0f11 	cmn.w	r3, #17
 800931e:	da01      	bge.n	8009324 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009320:	23ef      	movs	r3, #239	; 0xef
 8009322:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009324:	2118      	movs	r1, #24
 8009326:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800932a:	f000 fa93 	bl	8009854 <SUBGRF_WriteRegister>
 800932e:	e067      	b.n	8009400 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8009330:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009334:	f000 faa2 	bl	800987c <SUBGRF_ReadRegister>
 8009338:	4603      	mov	r3, r0
 800933a:	f043 031e 	orr.w	r3, r3, #30
 800933e:	b2db      	uxtb	r3, r3
 8009340:	4619      	mov	r1, r3
 8009342:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009346:	f000 fa85 	bl	8009854 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800934a:	2001      	movs	r0, #1
 800934c:	f000 feeb 	bl	800a126 <RBI_GetRFOMaxPowerConfig>
 8009350:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8009352:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	429a      	cmp	r2, r3
 800935a:	da01      	bge.n	8009360 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b14      	cmp	r3, #20
 8009364:	d10e      	bne.n	8009384 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8009366:	2301      	movs	r3, #1
 8009368:	2200      	movs	r2, #0
 800936a:	2105      	movs	r1, #5
 800936c:	2003      	movs	r0, #3
 800936e:	f7ff fe9f 	bl	80090b0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009372:	79ba      	ldrb	r2, [r7, #6]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	b2db      	uxtb	r3, r3
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	b2db      	uxtb	r3, r3
 800937c:	3316      	adds	r3, #22
 800937e:	b2db      	uxtb	r3, r3
 8009380:	71bb      	strb	r3, [r7, #6]
 8009382:	e031      	b.n	80093e8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b11      	cmp	r3, #17
 8009388:	d10e      	bne.n	80093a8 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800938a:	2301      	movs	r3, #1
 800938c:	2200      	movs	r2, #0
 800938e:	2103      	movs	r1, #3
 8009390:	2002      	movs	r0, #2
 8009392:	f7ff fe8d 	bl	80090b0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009396:	79ba      	ldrb	r2, [r7, #6]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	b2db      	uxtb	r3, r3
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	3316      	adds	r3, #22
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	71bb      	strb	r3, [r7, #6]
 80093a6:	e01f      	b.n	80093e8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2b0e      	cmp	r3, #14
 80093ac:	d10e      	bne.n	80093cc <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80093ae:	2301      	movs	r3, #1
 80093b0:	2200      	movs	r2, #0
 80093b2:	2102      	movs	r1, #2
 80093b4:	2002      	movs	r0, #2
 80093b6:	f7ff fe7b 	bl	80090b0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80093ba:	79ba      	ldrb	r2, [r7, #6]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	330e      	adds	r3, #14
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	71bb      	strb	r3, [r7, #6]
 80093ca:	e00d      	b.n	80093e8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80093cc:	2301      	movs	r3, #1
 80093ce:	2200      	movs	r2, #0
 80093d0:	2107      	movs	r1, #7
 80093d2:	2004      	movs	r0, #4
 80093d4:	f7ff fe6c 	bl	80090b0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80093d8:	79ba      	ldrb	r2, [r7, #6]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	3316      	adds	r3, #22
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80093e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80093ec:	f113 0f09 	cmn.w	r3, #9
 80093f0:	da01      	bge.n	80093f6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80093f2:	23f7      	movs	r3, #247	; 0xf7
 80093f4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80093f6:	2138      	movs	r1, #56	; 0x38
 80093f8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80093fc:	f000 fa2a 	bl	8009854 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009400:	79bb      	ldrb	r3, [r7, #6]
 8009402:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009404:	797b      	ldrb	r3, [r7, #5]
 8009406:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009408:	f107 0308 	add.w	r3, r7, #8
 800940c:	2202      	movs	r2, #2
 800940e:	4619      	mov	r1, r3
 8009410:	208e      	movs	r0, #142	; 0x8e
 8009412:	f000 facf 	bl	80099b4 <SUBGRF_WriteCommand>
}
 8009416:	bf00      	nop
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
	...

08009420 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009420:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009424:	b086      	sub	sp, #24
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800942e:	4a61      	ldr	r2, [pc, #388]	; (80095b4 <SUBGRF_SetModulationParams+0x194>)
 8009430:	f107 0308 	add.w	r3, r7, #8
 8009434:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009438:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	781a      	ldrb	r2, [r3, #0]
 8009440:	4b5d      	ldr	r3, [pc, #372]	; (80095b8 <SUBGRF_SetModulationParams+0x198>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	429a      	cmp	r2, r3
 8009446:	d004      	beq.n	8009452 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	4618      	mov	r0, r3
 800944e:	f7ff fef3 	bl	8009238 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	2b03      	cmp	r3, #3
 8009458:	f200 80a5 	bhi.w	80095a6 <SUBGRF_SetModulationParams+0x186>
 800945c:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <SUBGRF_SetModulationParams+0x44>)
 800945e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009462:	bf00      	nop
 8009464:	08009475 	.word	0x08009475
 8009468:	08009535 	.word	0x08009535
 800946c:	080094f7 	.word	0x080094f7
 8009470:	08009563 	.word	0x08009563
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8009474:	2308      	movs	r3, #8
 8009476:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	4a4f      	ldr	r2, [pc, #316]	; (80095bc <SUBGRF_SetModulationParams+0x19c>)
 800947e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009482:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	0c1b      	lsrs	r3, r3, #16
 8009488:	b2db      	uxtb	r3, r3
 800948a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	0a1b      	lsrs	r3, r3, #8
 8009490:	b2db      	uxtb	r3, r3
 8009492:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	b2db      	uxtb	r3, r3
 8009498:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	7b1b      	ldrb	r3, [r3, #12]
 800949e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	7b5b      	ldrb	r3, [r3, #13]
 80094a4:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	2200      	movs	r2, #0
 80094ac:	461c      	mov	r4, r3
 80094ae:	4615      	mov	r5, r2
 80094b0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80094b4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80094b8:	4a41      	ldr	r2, [pc, #260]	; (80095c0 <SUBGRF_SetModulationParams+0x1a0>)
 80094ba:	f04f 0300 	mov.w	r3, #0
 80094be:	4640      	mov	r0, r8
 80094c0:	4649      	mov	r1, r9
 80094c2:	f7f6 fead 	bl	8000220 <__aeabi_uldivmod>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4613      	mov	r3, r2
 80094cc:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	0c1b      	lsrs	r3, r3, #16
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	0a1b      	lsrs	r3, r3, #8
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80094e4:	7cfb      	ldrb	r3, [r7, #19]
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	f107 0308 	add.w	r3, r7, #8
 80094ec:	4619      	mov	r1, r3
 80094ee:	208b      	movs	r0, #139	; 0x8b
 80094f0:	f000 fa60 	bl	80099b4 <SUBGRF_WriteCommand>
        break;
 80094f4:	e058      	b.n	80095a8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 80094f6:	2304      	movs	r3, #4
 80094f8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	4a2f      	ldr	r2, [pc, #188]	; (80095bc <SUBGRF_SetModulationParams+0x19c>)
 8009500:	fbb2 f3f3 	udiv	r3, r2, r3
 8009504:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	0c1b      	lsrs	r3, r3, #16
 800950a:	b2db      	uxtb	r3, r3
 800950c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	0a1b      	lsrs	r3, r3, #8
 8009512:	b2db      	uxtb	r3, r3
 8009514:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	b2db      	uxtb	r3, r3
 800951a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	7d1b      	ldrb	r3, [r3, #20]
 8009520:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009522:	7cfb      	ldrb	r3, [r7, #19]
 8009524:	b29a      	uxth	r2, r3
 8009526:	f107 0308 	add.w	r3, r7, #8
 800952a:	4619      	mov	r1, r3
 800952c:	208b      	movs	r0, #139	; 0x8b
 800952e:	f000 fa41 	bl	80099b4 <SUBGRF_WriteCommand>
        break;
 8009532:	e039      	b.n	80095a8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009534:	2304      	movs	r3, #4
 8009536:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	7e1b      	ldrb	r3, [r3, #24]
 800953c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7e5b      	ldrb	r3, [r3, #25]
 8009542:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	7e9b      	ldrb	r3, [r3, #26]
 8009548:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	7edb      	ldrb	r3, [r3, #27]
 800954e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009550:	7cfb      	ldrb	r3, [r7, #19]
 8009552:	b29a      	uxth	r2, r3
 8009554:	f107 0308 	add.w	r3, r7, #8
 8009558:	4619      	mov	r1, r3
 800955a:	208b      	movs	r0, #139	; 0x8b
 800955c:	f000 fa2a 	bl	80099b4 <SUBGRF_WriteCommand>

        break;
 8009560:	e022      	b.n	80095a8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009562:	2305      	movs	r3, #5
 8009564:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	4a14      	ldr	r2, [pc, #80]	; (80095bc <SUBGRF_SetModulationParams+0x19c>)
 800956c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009570:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	0c1b      	lsrs	r3, r3, #16
 8009576:	b2db      	uxtb	r3, r3
 8009578:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	0a1b      	lsrs	r3, r3, #8
 800957e:	b2db      	uxtb	r3, r3
 8009580:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	7b1b      	ldrb	r3, [r3, #12]
 800958c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7b5b      	ldrb	r3, [r3, #13]
 8009592:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009594:	7cfb      	ldrb	r3, [r7, #19]
 8009596:	b29a      	uxth	r2, r3
 8009598:	f107 0308 	add.w	r3, r7, #8
 800959c:	4619      	mov	r1, r3
 800959e:	208b      	movs	r0, #139	; 0x8b
 80095a0:	f000 fa08 	bl	80099b4 <SUBGRF_WriteCommand>
        break;
 80095a4:	e000      	b.n	80095a8 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 80095a6:	bf00      	nop
    }
}
 80095a8:	bf00      	nop
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80095b2:	bf00      	nop
 80095b4:	0800b404 	.word	0x0800b404
 80095b8:	20000679 	.word	0x20000679
 80095bc:	3d090000 	.word	0x3d090000
 80095c0:	01e84800 	.word	0x01e84800

080095c4 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80095cc:	2300      	movs	r3, #0
 80095ce:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80095d0:	4a48      	ldr	r2, [pc, #288]	; (80096f4 <SUBGRF_SetPacketParams+0x130>)
 80095d2:	f107 030c 	add.w	r3, r7, #12
 80095d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80095d8:	c303      	stmia	r3!, {r0, r1}
 80095da:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	781a      	ldrb	r2, [r3, #0]
 80095e0:	4b45      	ldr	r3, [pc, #276]	; (80096f8 <SUBGRF_SetPacketParams+0x134>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d004      	beq.n	80095f2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff fe23 	bl	8009238 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d878      	bhi.n	80096ec <SUBGRF_SetPacketParams+0x128>
 80095fa:	a201      	add	r2, pc, #4	; (adr r2, 8009600 <SUBGRF_SetPacketParams+0x3c>)
 80095fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009600:	08009611 	.word	0x08009611
 8009604:	080096a1 	.word	0x080096a1
 8009608:	08009695 	.word	0x08009695
 800960c:	08009611 	.word	0x08009611
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	7a5b      	ldrb	r3, [r3, #9]
 8009614:	2bf1      	cmp	r3, #241	; 0xf1
 8009616:	d10a      	bne.n	800962e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009618:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800961c:	f7ff faaa 	bl	8008b74 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009620:	f248 0005 	movw	r0, #32773	; 0x8005
 8009624:	f7ff fac6 	bl	8008bb4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009628:	2302      	movs	r3, #2
 800962a:	75bb      	strb	r3, [r7, #22]
 800962c:	e011      	b.n	8009652 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	7a5b      	ldrb	r3, [r3, #9]
 8009632:	2bf2      	cmp	r3, #242	; 0xf2
 8009634:	d10a      	bne.n	800964c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009636:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800963a:	f7ff fa9b 	bl	8008b74 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800963e:	f241 0021 	movw	r0, #4129	; 0x1021
 8009642:	f7ff fab7 	bl	8008bb4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009646:	2306      	movs	r3, #6
 8009648:	75bb      	strb	r3, [r7, #22]
 800964a:	e002      	b.n	8009652 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	7a5b      	ldrb	r3, [r3, #9]
 8009650:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009652:	2309      	movs	r3, #9
 8009654:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	885b      	ldrh	r3, [r3, #2]
 800965a:	0a1b      	lsrs	r3, r3, #8
 800965c:	b29b      	uxth	r3, r3
 800965e:	b2db      	uxtb	r3, r3
 8009660:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	885b      	ldrh	r3, [r3, #2]
 8009666:	b2db      	uxtb	r3, r3
 8009668:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	791b      	ldrb	r3, [r3, #4]
 800966e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	795b      	ldrb	r3, [r3, #5]
 8009674:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	799b      	ldrb	r3, [r3, #6]
 800967a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	79db      	ldrb	r3, [r3, #7]
 8009680:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	7a1b      	ldrb	r3, [r3, #8]
 8009686:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8009688:	7dbb      	ldrb	r3, [r7, #22]
 800968a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	7a9b      	ldrb	r3, [r3, #10]
 8009690:	753b      	strb	r3, [r7, #20]
        break;
 8009692:	e022      	b.n	80096da <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8009694:	2301      	movs	r3, #1
 8009696:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	7b1b      	ldrb	r3, [r3, #12]
 800969c:	733b      	strb	r3, [r7, #12]
        break;
 800969e:	e01c      	b.n	80096da <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80096a0:	2306      	movs	r3, #6
 80096a2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	89db      	ldrh	r3, [r3, #14]
 80096a8:	0a1b      	lsrs	r3, r3, #8
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	89db      	ldrh	r3, [r3, #14]
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	7c1a      	ldrb	r2, [r3, #16]
 80096bc:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <SUBGRF_SetPacketParams+0x138>)
 80096be:	4611      	mov	r1, r2
 80096c0:	7019      	strb	r1, [r3, #0]
 80096c2:	4613      	mov	r3, r2
 80096c4:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	7c5b      	ldrb	r3, [r3, #17]
 80096ca:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	7c9b      	ldrb	r3, [r3, #18]
 80096d0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	7cdb      	ldrb	r3, [r3, #19]
 80096d6:	747b      	strb	r3, [r7, #17]
        break;
 80096d8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80096da:	7dfb      	ldrb	r3, [r7, #23]
 80096dc:	b29a      	uxth	r2, r3
 80096de:	f107 030c 	add.w	r3, r7, #12
 80096e2:	4619      	mov	r1, r3
 80096e4:	208c      	movs	r0, #140	; 0x8c
 80096e6:	f000 f965 	bl	80099b4 <SUBGRF_WriteCommand>
 80096ea:	e000      	b.n	80096ee <SUBGRF_SetPacketParams+0x12a>
        return;
 80096ec:	bf00      	nop
}
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	0800b40c 	.word	0x0800b40c
 80096f8:	20000679 	.word	0x20000679
 80096fc:	2000067a 	.word	0x2000067a

08009700 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	460a      	mov	r2, r1
 800970a:	71fb      	strb	r3, [r7, #7]
 800970c:	4613      	mov	r3, r2
 800970e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8009710:	79fb      	ldrb	r3, [r7, #7]
 8009712:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009714:	79bb      	ldrb	r3, [r7, #6]
 8009716:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009718:	f107 030c 	add.w	r3, r7, #12
 800971c:	2202      	movs	r2, #2
 800971e:	4619      	mov	r1, r3
 8009720:	208f      	movs	r0, #143	; 0x8f
 8009722:	f000 f947 	bl	80099b4 <SUBGRF_WriteCommand>
}
 8009726:	bf00      	nop
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009738:	1d3b      	adds	r3, r7, #4
 800973a:	2201      	movs	r2, #1
 800973c:	4619      	mov	r1, r3
 800973e:	2015      	movs	r0, #21
 8009740:	f000 f95a 	bl	80099f8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009744:	793b      	ldrb	r3, [r7, #4]
 8009746:	425b      	negs	r3, r3
 8009748:	105b      	asrs	r3, r3, #1
 800974a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800974c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8009762:	f107 030c 	add.w	r3, r7, #12
 8009766:	2202      	movs	r2, #2
 8009768:	4619      	mov	r1, r3
 800976a:	2013      	movs	r0, #19
 800976c:	f000 f944 	bl	80099f8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8009770:	f7ff fd7e 	bl	8009270 <SUBGRF_GetPacketType>
 8009774:	4603      	mov	r3, r0
 8009776:	2b01      	cmp	r3, #1
 8009778:	d10d      	bne.n	8009796 <SUBGRF_GetRxBufferStatus+0x3e>
 800977a:	4b0c      	ldr	r3, [pc, #48]	; (80097ac <SUBGRF_GetRxBufferStatus+0x54>)
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b01      	cmp	r3, #1
 8009782:	d108      	bne.n	8009796 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8009784:	f240 7002 	movw	r0, #1794	; 0x702
 8009788:	f000 f878 	bl	800987c <SUBGRF_ReadRegister>
 800978c:	4603      	mov	r3, r0
 800978e:	461a      	mov	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	701a      	strb	r2, [r3, #0]
 8009794:	e002      	b.n	800979c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8009796:	7b3a      	ldrb	r2, [r7, #12]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800979c:	7b7a      	ldrb	r2, [r7, #13]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	701a      	strb	r2, [r3, #0]
}
 80097a2:	bf00      	nop
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	2000067a 	.word	0x2000067a

080097b0 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80097b8:	f107 030c 	add.w	r3, r7, #12
 80097bc:	2203      	movs	r2, #3
 80097be:	4619      	mov	r1, r3
 80097c0:	2014      	movs	r0, #20
 80097c2:	f000 f919 	bl	80099f8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80097c6:	f7ff fd53 	bl	8009270 <SUBGRF_GetPacketType>
 80097ca:	4603      	mov	r3, r0
 80097cc:	461a      	mov	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <SUBGRF_GetPacketStatus+0x30>
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d013      	beq.n	8009806 <SUBGRF_GetPacketStatus+0x56>
 80097de:	e02a      	b.n	8009836 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80097e0:	7b3a      	ldrb	r2, [r7, #12]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80097e6:	7b7b      	ldrb	r3, [r7, #13]
 80097e8:	425b      	negs	r3, r3
 80097ea:	105b      	asrs	r3, r3, #1
 80097ec:	b25a      	sxtb	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	425b      	negs	r3, r3
 80097f6:	105b      	asrs	r3, r3, #1
 80097f8:	b25a      	sxtb	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	609a      	str	r2, [r3, #8]
            break;
 8009804:	e020      	b.n	8009848 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8009806:	7b3b      	ldrb	r3, [r7, #12]
 8009808:	425b      	negs	r3, r3
 800980a:	105b      	asrs	r3, r3, #1
 800980c:	b25a      	sxtb	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8009812:	7b7b      	ldrb	r3, [r7, #13]
 8009814:	b25b      	sxtb	r3, r3
 8009816:	3302      	adds	r3, #2
 8009818:	109b      	asrs	r3, r3, #2
 800981a:	b25a      	sxtb	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8009820:	7bbb      	ldrb	r3, [r7, #14]
 8009822:	425b      	negs	r3, r3
 8009824:	105b      	asrs	r3, r3, #1
 8009826:	b25a      	sxtb	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800982c:	4b08      	ldr	r3, [pc, #32]	; (8009850 <SUBGRF_GetPacketStatus+0xa0>)
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	611a      	str	r2, [r3, #16]
            break;
 8009834:	e008      	b.n	8009848 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8009836:	2214      	movs	r2, #20
 8009838:	2100      	movs	r1, #0
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fca7 	bl	800a18e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	220f      	movs	r2, #15
 8009844:	701a      	strb	r2, [r3, #0]
            break;
 8009846:	bf00      	nop
    }
}
 8009848:	bf00      	nop
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	2000067c 	.word	0x2000067c

08009854 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	460a      	mov	r2, r1
 800985e:	80fb      	strh	r3, [r7, #6]
 8009860:	4613      	mov	r3, r2
 8009862:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8009864:	1d7a      	adds	r2, r7, #5
 8009866:	88f9      	ldrh	r1, [r7, #6]
 8009868:	2301      	movs	r3, #1
 800986a:	4803      	ldr	r0, [pc, #12]	; (8009878 <SUBGRF_WriteRegister+0x24>)
 800986c:	f7fa fd08 	bl	8004280 <HAL_SUBGHZ_WriteRegisters>
}
 8009870:	bf00      	nop
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	2000032c 	.word	0x2000032c

0800987c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	4603      	mov	r3, r0
 8009884:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8009886:	f107 020f 	add.w	r2, r7, #15
 800988a:	88f9      	ldrh	r1, [r7, #6]
 800988c:	2301      	movs	r3, #1
 800988e:	4804      	ldr	r0, [pc, #16]	; (80098a0 <SUBGRF_ReadRegister+0x24>)
 8009890:	f7fa fd55 	bl	800433e <HAL_SUBGHZ_ReadRegisters>
    return data;
 8009894:	7bfb      	ldrb	r3, [r7, #15]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	2000032c 	.word	0x2000032c

080098a4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	6039      	str	r1, [r7, #0]
 80098ae:	80fb      	strh	r3, [r7, #6]
 80098b0:	4613      	mov	r3, r2
 80098b2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098b4:	f3ef 8310 	mrs	r3, PRIMASK
 80098b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80098ba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80098bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80098be:	b672      	cpsid	i
}
 80098c0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80098c2:	88bb      	ldrh	r3, [r7, #4]
 80098c4:	88f9      	ldrh	r1, [r7, #6]
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	4806      	ldr	r0, [pc, #24]	; (80098e4 <SUBGRF_WriteRegisters+0x40>)
 80098ca:	f7fa fcd9 	bl	8004280 <HAL_SUBGHZ_WriteRegisters>
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	f383 8810 	msr	PRIMASK, r3
}
 80098d8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80098da:	bf00      	nop
 80098dc:	3718      	adds	r7, #24
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	2000032c 	.word	0x2000032c

080098e8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	4603      	mov	r3, r0
 80098f0:	6039      	str	r1, [r7, #0]
 80098f2:	80fb      	strh	r3, [r7, #6]
 80098f4:	4613      	mov	r3, r2
 80098f6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098f8:	f3ef 8310 	mrs	r3, PRIMASK
 80098fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80098fe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009900:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009902:	b672      	cpsid	i
}
 8009904:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8009906:	88bb      	ldrh	r3, [r7, #4]
 8009908:	88f9      	ldrh	r1, [r7, #6]
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	4806      	ldr	r0, [pc, #24]	; (8009928 <SUBGRF_ReadRegisters+0x40>)
 800990e:	f7fa fd16 	bl	800433e <HAL_SUBGHZ_ReadRegisters>
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f383 8810 	msr	PRIMASK, r3
}
 800991c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800991e:	bf00      	nop
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	2000032c 	.word	0x2000032c

0800992c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	4603      	mov	r3, r0
 8009934:	6039      	str	r1, [r7, #0]
 8009936:	71fb      	strb	r3, [r7, #7]
 8009938:	4613      	mov	r3, r2
 800993a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800993c:	f3ef 8310 	mrs	r3, PRIMASK
 8009940:	60fb      	str	r3, [r7, #12]
  return(result);
 8009942:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009944:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009946:	b672      	cpsid	i
}
 8009948:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800994a:	79bb      	ldrb	r3, [r7, #6]
 800994c:	b29b      	uxth	r3, r3
 800994e:	79f9      	ldrb	r1, [r7, #7]
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	4806      	ldr	r0, [pc, #24]	; (800996c <SUBGRF_WriteBuffer+0x40>)
 8009954:	f7fa fe07 	bl	8004566 <HAL_SUBGHZ_WriteBuffer>
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	f383 8810 	msr	PRIMASK, r3
}
 8009962:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009964:	bf00      	nop
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	2000032c 	.word	0x2000032c

08009970 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	6039      	str	r1, [r7, #0]
 800997a:	71fb      	strb	r3, [r7, #7]
 800997c:	4613      	mov	r3, r2
 800997e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009980:	f3ef 8310 	mrs	r3, PRIMASK
 8009984:	60fb      	str	r3, [r7, #12]
  return(result);
 8009986:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009988:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800998a:	b672      	cpsid	i
}
 800998c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800998e:	79bb      	ldrb	r3, [r7, #6]
 8009990:	b29b      	uxth	r3, r3
 8009992:	79f9      	ldrb	r1, [r7, #7]
 8009994:	683a      	ldr	r2, [r7, #0]
 8009996:	4806      	ldr	r0, [pc, #24]	; (80099b0 <SUBGRF_ReadBuffer+0x40>)
 8009998:	f7fa fe38 	bl	800460c <HAL_SUBGHZ_ReadBuffer>
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f383 8810 	msr	PRIMASK, r3
}
 80099a6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80099a8:	bf00      	nop
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	2000032c 	.word	0x2000032c

080099b4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	4603      	mov	r3, r0
 80099bc:	6039      	str	r1, [r7, #0]
 80099be:	71fb      	strb	r3, [r7, #7]
 80099c0:	4613      	mov	r3, r2
 80099c2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099c4:	f3ef 8310 	mrs	r3, PRIMASK
 80099c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80099ca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80099cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80099ce:	b672      	cpsid	i
}
 80099d0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80099d2:	88bb      	ldrh	r3, [r7, #4]
 80099d4:	79f9      	ldrb	r1, [r7, #7]
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	4806      	ldr	r0, [pc, #24]	; (80099f4 <SUBGRF_WriteCommand+0x40>)
 80099da:	f7fa fd11 	bl	8004400 <HAL_SUBGHZ_ExecSetCmd>
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	f383 8810 	msr	PRIMASK, r3
}
 80099e8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80099ea:	bf00      	nop
 80099ec:	3718      	adds	r7, #24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	2000032c 	.word	0x2000032c

080099f8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	71fb      	strb	r3, [r7, #7]
 8009a04:	4613      	mov	r3, r2
 8009a06:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a08:	f3ef 8310 	mrs	r3, PRIMASK
 8009a0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009a10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a12:	b672      	cpsid	i
}
 8009a14:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8009a16:	88bb      	ldrh	r3, [r7, #4]
 8009a18:	79f9      	ldrb	r1, [r7, #7]
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	4806      	ldr	r0, [pc, #24]	; (8009a38 <SUBGRF_ReadCommand+0x40>)
 8009a1e:	f7fa fd4e 	bl	80044be <HAL_SUBGHZ_ExecGetCmd>
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	f383 8810 	msr	PRIMASK, r3
}
 8009a2c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009a2e:	bf00      	nop
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	2000032c 	.word	0x2000032c

08009a3c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	460a      	mov	r2, r1
 8009a46:	71fb      	strb	r3, [r7, #7]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8009a50:	79bb      	ldrb	r3, [r7, #6]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d10d      	bne.n	8009a72 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d104      	bne.n	8009a66 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8009a60:	2004      	movs	r0, #4
 8009a62:	f000 f8ef 	bl	8009c44 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8009a66:	79fb      	ldrb	r3, [r7, #7]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d107      	bne.n	8009a7c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	73fb      	strb	r3, [r7, #15]
 8009a70:	e004      	b.n	8009a7c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8009a72:	79bb      	ldrb	r3, [r7, #6]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fad2 	bl	800a028 <RBI_ConfigRFSwitch>
}
 8009a84:	bf00      	nop
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8009a96:	2301      	movs	r3, #1
 8009a98:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8009a9a:	f000 fb23 	bl	800a0e4 <RBI_GetTxConfig>
 8009a9e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d016      	beq.n	8009ad4 <SUBGRF_SetRfTxPower+0x48>
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	dc16      	bgt.n	8009ada <SUBGRF_SetRfTxPower+0x4e>
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <SUBGRF_SetRfTxPower+0x2e>
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d00a      	beq.n	8009ace <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8009ab8:	e00f      	b.n	8009ada <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8009aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009abe:	2b0f      	cmp	r3, #15
 8009ac0:	dd02      	ble.n	8009ac8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	73fb      	strb	r3, [r7, #15]
            break;
 8009ac6:	e009      	b.n	8009adc <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	73fb      	strb	r3, [r7, #15]
            break;
 8009acc:	e006      	b.n	8009adc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	73fb      	strb	r3, [r7, #15]
            break;
 8009ad2:	e003      	b.n	8009adc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	73fb      	strb	r3, [r7, #15]
            break;
 8009ad8:	e000      	b.n	8009adc <SUBGRF_SetRfTxPower+0x50>
            break;
 8009ada:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8009adc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7ff fbcd 	bl	8009284 <SUBGRF_SetTxParams>

    return paSelect;
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8009af4:	b480      	push	{r7}
 8009af6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8009af8:	2301      	movs	r3, #1
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bc80      	pop	{r7}
 8009b00:	4770      	bx	lr
	...

08009b04 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8009b0c:	4b03      	ldr	r3, [pc, #12]	; (8009b1c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2001      	movs	r0, #1
 8009b12:	4798      	blx	r3
}
 8009b14:	bf00      	nop
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	20000684 	.word	0x20000684

08009b20 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8009b28:	4b03      	ldr	r3, [pc, #12]	; (8009b38 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2002      	movs	r0, #2
 8009b2e:	4798      	blx	r3
}
 8009b30:	bf00      	nop
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	20000684 	.word	0x20000684

08009b3c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8009b44:	4b03      	ldr	r3, [pc, #12]	; (8009b54 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2040      	movs	r0, #64	; 0x40
 8009b4a:	4798      	blx	r3
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	20000684 	.word	0x20000684

08009b58 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	460b      	mov	r3, r1
 8009b62:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8009b64:	78fb      	ldrb	r3, [r7, #3]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d002      	beq.n	8009b70 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d005      	beq.n	8009b7a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8009b6e:	e00a      	b.n	8009b86 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8009b70:	4b07      	ldr	r3, [pc, #28]	; (8009b90 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2080      	movs	r0, #128	; 0x80
 8009b76:	4798      	blx	r3
            break;
 8009b78:	e005      	b.n	8009b86 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8009b7a:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009b82:	4798      	blx	r3
            break;
 8009b84:	bf00      	nop
    }
}
 8009b86:	bf00      	nop
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	20000684 	.word	0x20000684

08009b94 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8009b9c:	4b04      	ldr	r3, [pc, #16]	; (8009bb0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009ba4:	4798      	blx	r3
}
 8009ba6:	bf00      	nop
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20000684 	.word	0x20000684

08009bb4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8009bbc:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2020      	movs	r0, #32
 8009bc2:	4798      	blx	r3
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20000684 	.word	0x20000684

08009bd0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8009bd8:	4b03      	ldr	r3, [pc, #12]	; (8009be8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2004      	movs	r0, #4
 8009bde:	4798      	blx	r3
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	20000684 	.word	0x20000684

08009bec <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8009bf4:	4b03      	ldr	r3, [pc, #12]	; (8009c04 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2008      	movs	r0, #8
 8009bfa:	4798      	blx	r3
}
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20000684 	.word	0x20000684

08009c08 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8009c10:	4b03      	ldr	r3, [pc, #12]	; (8009c20 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2010      	movs	r0, #16
 8009c16:	4798      	blx	r3
}
 8009c18:	bf00      	nop
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	20000684 	.word	0x20000684

08009c24 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8009c2c:	4b04      	ldr	r3, [pc, #16]	; (8009c40 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009c34:	4798      	blx	r3
}
 8009c36:	bf00      	nop
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20000684 	.word	0x20000684

08009c44 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8009c4e:	f000 fa5f 	bl	800a110 <RBI_IsDCDC>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d112      	bne.n	8009c7e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8009c58:	f640 1023 	movw	r0, #2339	; 0x923
 8009c5c:	f7ff fe0e 	bl	800987c <SUBGRF_ReadRegister>
 8009c60:	4603      	mov	r3, r0
 8009c62:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	f023 0306 	bic.w	r3, r3, #6
 8009c6a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8009c6c:	7bfa      	ldrb	r2, [r7, #15]
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	4619      	mov	r1, r3
 8009c76:	f640 1023 	movw	r0, #2339	; 0x923
 8009c7a:	f7ff fdeb 	bl	8009854 <SUBGRF_WriteRegister>
  }
}
 8009c7e:	bf00      	nop
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
	...

08009c88 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d101      	bne.n	8009c9a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8009c96:	231f      	movs	r3, #31
 8009c98:	e016      	b.n	8009cc8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73fb      	strb	r3, [r7, #15]
 8009c9e:	e00f      	b.n	8009cc0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
 8009ca2:	4a0c      	ldr	r2, [pc, #48]	; (8009cd4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009ca4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d205      	bcs.n	8009cba <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
 8009cb0:	4a08      	ldr	r2, [pc, #32]	; (8009cd4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009cb2:	00db      	lsls	r3, r3, #3
 8009cb4:	4413      	add	r3, r2
 8009cb6:	791b      	ldrb	r3, [r3, #4]
 8009cb8:	e006      	b.n	8009cc8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	73fb      	strb	r3, [r7, #15]
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	2b15      	cmp	r3, #21
 8009cc4:	d9ec      	bls.n	8009ca0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8009cc6:	e7fe      	b.n	8009cc6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bc80      	pop	{r7}
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	0800b59c 	.word	0x0800b59c

08009cd8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b08a      	sub	sp, #40	; 0x28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8009ce2:	4b35      	ldr	r3, [pc, #212]	; (8009db8 <SUBGRF_GetCFO+0xe0>)
 8009ce4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8009ce6:	f640 0007 	movw	r0, #2055	; 0x807
 8009cea:	f7ff fdc7 	bl	800987c <SUBGRF_ReadRegister>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8009cf2:	7ffb      	ldrb	r3, [r7, #31]
 8009cf4:	08db      	lsrs	r3, r3, #3
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	f003 0303 	and.w	r3, r3, #3
 8009cfc:	3328      	adds	r3, #40	; 0x28
 8009cfe:	443b      	add	r3, r7
 8009d00:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8009d04:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8009d06:	7ffb      	ldrb	r3, [r7, #31]
 8009d08:	f003 0307 	and.w	r3, r3, #7
 8009d0c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8009d0e:	7fba      	ldrb	r2, [r7, #30]
 8009d10:	7f7b      	ldrb	r3, [r7, #29]
 8009d12:	3301      	adds	r3, #1
 8009d14:	fa02 f303 	lsl.w	r3, r2, r3
 8009d18:	461a      	mov	r2, r3
 8009d1a:	4b28      	ldr	r3, [pc, #160]	; (8009dbc <SUBGRF_GetCFO+0xe4>)
 8009d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d20:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8009d22:	69ba      	ldr	r2, [r7, #24]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d2a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8009d32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	fb02 f303 	mul.w	r3, r2, r3
 8009d3c:	2b07      	cmp	r3, #7
 8009d3e:	d802      	bhi.n	8009d46 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8009d40:	2302      	movs	r3, #2
 8009d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8009d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d4a:	697a      	ldr	r2, [r7, #20]
 8009d4c:	fb02 f303 	mul.w	r3, r2, r3
 8009d50:	2b03      	cmp	r3, #3
 8009d52:	d802      	bhi.n	8009d5a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8009d54:	2304      	movs	r3, #4
 8009d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8009d5a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	fb02 f303 	mul.w	r3, r2, r3
 8009d64:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8009d66:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8009d6a:	f7ff fd87 	bl	800987c <SUBGRF_ReadRegister>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	021b      	lsls	r3, r3, #8
 8009d72:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009d76:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8009d78:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8009d7c:	f7ff fd7e 	bl	800987c <SUBGRF_ReadRegister>
 8009d80:	4603      	mov	r3, r0
 8009d82:	461a      	mov	r2, r3
 8009d84:	6a3b      	ldr	r3, [r7, #32]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d005      	beq.n	8009da0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8009d9a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8009d9e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	095b      	lsrs	r3, r3, #5
 8009da4:	6a3a      	ldr	r2, [r7, #32]
 8009da6:	fb02 f303 	mul.w	r3, r2, r3
 8009daa:	11da      	asrs	r2, r3, #7
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	601a      	str	r2, [r3, #0]
}
 8009db0:	bf00      	nop
 8009db2:	3728      	adds	r7, #40	; 0x28
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	0c0a0804 	.word	0x0c0a0804
 8009dbc:	01e84800 	.word	0x01e84800

08009dc0 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 8009dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dd6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8009dd8:	697b      	ldr	r3, [r7, #20]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	371c      	adds	r7, #28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bc80      	pop	{r7}
 8009de2:	4770      	bx	lr

08009de4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8009df2:	2300      	movs	r3, #0
 8009df4:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8009df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dfa:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8009dfc:	697b      	ldr	r3, [r7, #20]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bc80      	pop	{r7}
 8009e06:	4770      	bx	lr

08009e08 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8009e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bc80      	pop	{r7}
 8009e20:	4770      	bx	lr

08009e22 <RFW_DeInit>:

void RFW_DeInit( void )
{
 8009e22:	b480      	push	{r7}
 8009e24:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8009e26:	bf00      	nop
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bc80      	pop	{r7}
 8009e2c:	4770      	bx	lr

08009e2e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 8009e2e:	b480      	push	{r7}
 8009e30:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8009e32:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bc80      	pop	{r7}
 8009e3a:	4770      	bx	lr

08009e3c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8009e40:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bc80      	pop	{r7}
 8009e48:	4770      	bx	lr

08009e4a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b083      	sub	sp, #12
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	4603      	mov	r3, r0
 8009e52:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bc80      	pop	{r7}
 8009e5c:	4770      	bx	lr

08009e5e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b087      	sub	sp, #28
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	60f8      	str	r0, [r7, #12]
 8009e66:	460b      	mov	r3, r1
 8009e68:	607a      	str	r2, [r7, #4]
 8009e6a:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8009e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e70:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8009e72:	697b      	ldr	r3, [r7, #20]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	371c      	adds	r7, #28
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bc80      	pop	{r7}
 8009e7c:	4770      	bx	lr

08009e7e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8009e7e:	b480      	push	{r7}
 8009e80:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8009e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bc80      	pop	{r7}
 8009e8c:	4770      	bx	lr

08009e8e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 8009e8e:	b480      	push	{r7}
 8009e90:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8009e92:	bf00      	nop
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bc80      	pop	{r7}
 8009e98:	4770      	bx	lr

08009e9a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8009e9e:	bf00      	nop
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bc80      	pop	{r7}
 8009ea4:	4770      	bx	lr

08009ea6 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b083      	sub	sp, #12
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	4603      	mov	r3, r0
 8009eae:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bc80      	pop	{r7}
 8009eb8:	4770      	bx	lr

08009eba <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8009ebe:	f7f7 fc86 	bl	80017ce <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8009ec2:	f000 f809 	bl	8009ed8 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8009ec6:	bf00      	nop
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 8009ece:	bf00      	nop
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bc80      	pop	{r7}
 8009ed4:	4770      	bx	lr
	...

08009ed8 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8009edc:	4b0a      	ldr	r3, [pc, #40]	; (8009f08 <SubghzApp_Init+0x30>)
 8009ede:	4a0b      	ldr	r2, [pc, #44]	; (8009f0c <SubghzApp_Init+0x34>)
 8009ee0:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8009ee2:	4b09      	ldr	r3, [pc, #36]	; (8009f08 <SubghzApp_Init+0x30>)
 8009ee4:	4a0a      	ldr	r2, [pc, #40]	; (8009f10 <SubghzApp_Init+0x38>)
 8009ee6:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8009ee8:	4b07      	ldr	r3, [pc, #28]	; (8009f08 <SubghzApp_Init+0x30>)
 8009eea:	4a0a      	ldr	r2, [pc, #40]	; (8009f14 <SubghzApp_Init+0x3c>)
 8009eec:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8009eee:	4b06      	ldr	r3, [pc, #24]	; (8009f08 <SubghzApp_Init+0x30>)
 8009ef0:	4a09      	ldr	r2, [pc, #36]	; (8009f18 <SubghzApp_Init+0x40>)
 8009ef2:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8009ef4:	4b04      	ldr	r3, [pc, #16]	; (8009f08 <SubghzApp_Init+0x30>)
 8009ef6:	4a09      	ldr	r2, [pc, #36]	; (8009f1c <SubghzApp_Init+0x44>)
 8009ef8:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8009efa:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <SubghzApp_Init+0x48>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4802      	ldr	r0, [pc, #8]	; (8009f08 <SubghzApp_Init+0x30>)
 8009f00:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 8009f02:	bf00      	nop
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	20000688 	.word	0x20000688
 8009f0c:	08009f25 	.word	0x08009f25
 8009f10:	08009f31 	.word	0x08009f31
 8009f14:	08009f55 	.word	0x08009f55
 8009f18:	08009f61 	.word	0x08009f61
 8009f1c:	08009f6d 	.word	0x08009f6d
 8009f20:	0800b50c 	.word	0x0800b50c

08009f24 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 8009f24:	b480      	push	{r7}
 8009f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 8009f28:	bf00      	nop
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bc80      	pop	{r7}
 8009f2e:	4770      	bx	lr

08009f30 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	4608      	mov	r0, r1
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	4603      	mov	r3, r0
 8009f40:	817b      	strh	r3, [r7, #10]
 8009f42:	460b      	mov	r3, r1
 8009f44:	813b      	strh	r3, [r7, #8]
 8009f46:	4613      	mov	r3, r2
 8009f48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 8009f4a:	bf00      	nop
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bc80      	pop	{r7}
 8009f52:	4770      	bx	lr

08009f54 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8009f54:	b480      	push	{r7}
 8009f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 8009f58:	bf00      	nop
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bc80      	pop	{r7}
 8009f5e:	4770      	bx	lr

08009f60 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8009f60:	b480      	push	{r7}
 8009f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 8009f64:	bf00      	nop
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bc80      	pop	{r7}
 8009f6a:	4770      	bx	lr

08009f6c <OnRxError>:

static void OnRxError(void)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 8009f70:	bf00      	nop
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bc80      	pop	{r7}
 8009f76:	4770      	bx	lr

08009f78 <LL_AHB2_GRP1_EnableClock>:
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4013      	ands	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
}
 8009f9e:	bf00      	nop
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bc80      	pop	{r7}
 8009fa6:	4770      	bx	lr

08009fa8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 8009fb2:	463b      	mov	r3, r7
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	605a      	str	r2, [r3, #4]
 8009fba:	609a      	str	r2, [r3, #8]
 8009fbc:	60da      	str	r2, [r3, #12]
 8009fbe:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8009fc0:	2004      	movs	r0, #4
 8009fc2:	f7ff ffd9 	bl	8009f78 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 8009fc6:	2310      	movs	r3, #16
 8009fc8:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8009fd6:	463b      	mov	r3, r7
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4812      	ldr	r0, [pc, #72]	; (800a024 <RBI_Init+0x7c>)
 8009fdc:	f7f8 fbac 	bl	8002738 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8009fe0:	2320      	movs	r3, #32
 8009fe2:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8009fe4:	463b      	mov	r3, r7
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	480e      	ldr	r0, [pc, #56]	; (800a024 <RBI_Init+0x7c>)
 8009fea:	f7f8 fba5 	bl	8002738 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8009fee:	2308      	movs	r3, #8
 8009ff0:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8009ff2:	463b      	mov	r3, r7
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	480b      	ldr	r0, [pc, #44]	; (800a024 <RBI_Init+0x7c>)
 8009ff8:	f7f8 fb9e 	bl	8002738 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2120      	movs	r1, #32
 800a000:	4808      	ldr	r0, [pc, #32]	; (800a024 <RBI_Init+0x7c>)
 800a002:	f7f8 fcf9 	bl	80029f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800a006:	2200      	movs	r2, #0
 800a008:	2110      	movs	r1, #16
 800a00a:	4806      	ldr	r0, [pc, #24]	; (800a024 <RBI_Init+0x7c>)
 800a00c:	f7f8 fcf4 	bl	80029f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800a010:	2200      	movs	r2, #0
 800a012:	2108      	movs	r1, #8
 800a014:	4803      	ldr	r0, [pc, #12]	; (800a024 <RBI_Init+0x7c>)
 800a016:	f7f8 fcef 	bl	80029f8 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800a01a:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3718      	adds	r7, #24
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	48000800 	.word	0x48000800

0800a028 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	4603      	mov	r3, r0
 800a030:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	2b03      	cmp	r3, #3
 800a03a:	d84b      	bhi.n	800a0d4 <RBI_ConfigRFSwitch+0xac>
 800a03c:	a201      	add	r2, pc, #4	; (adr r2, 800a044 <RBI_ConfigRFSwitch+0x1c>)
 800a03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a042:	bf00      	nop
 800a044:	0800a055 	.word	0x0800a055
 800a048:	0800a075 	.word	0x0800a075
 800a04c:	0800a095 	.word	0x0800a095
 800a050:	0800a0b5 	.word	0x0800a0b5
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 800a054:	2200      	movs	r2, #0
 800a056:	2108      	movs	r1, #8
 800a058:	4821      	ldr	r0, [pc, #132]	; (800a0e0 <RBI_ConfigRFSwitch+0xb8>)
 800a05a:	f7f8 fccd 	bl	80029f8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800a05e:	2200      	movs	r2, #0
 800a060:	2110      	movs	r1, #16
 800a062:	481f      	ldr	r0, [pc, #124]	; (800a0e0 <RBI_ConfigRFSwitch+0xb8>)
 800a064:	f7f8 fcc8 	bl	80029f8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800a068:	2200      	movs	r2, #0
 800a06a:	2120      	movs	r1, #32
 800a06c:	481c      	ldr	r0, [pc, #112]	; (800a0e0 <RBI_ConfigRFSwitch+0xb8>)
 800a06e:	f7f8 fcc3 	bl	80029f8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800a072:	e030      	b.n	800a0d6 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a074:	2201      	movs	r2, #1
 800a076:	2108      	movs	r1, #8
 800a078:	4819      	ldr	r0, [pc, #100]	; (800a0e0 <RBI_ConfigRFSwitch+0xb8>)
 800a07a:	f7f8 fcbd 	bl	80029f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800a07e:	2201      	movs	r2, #1
 800a080:	2110      	movs	r1, #16
 800a082:	4817      	ldr	r0, [pc, #92]	; (800a0e0 <RBI_ConfigRFSwitch+0xb8>)
 800a084:	f7f8 fcb8 	bl	80029f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800a088:	2200      	movs	r2, #0
 800a08a:	2120      	movs	r1, #32
 800a08c:	4814      	ldr	r0, [pc, #80]	; (800a0e0 <RBI_ConfigRFSwitch+0xb8>)
 800a08e:	f7f8 fcb3 	bl	80029f8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800a092:	e020      	b.n	800a0d6 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a094:	2201      	movs	r2, #1
 800a096:	2108      	movs	r1, #8
 800a098:	4811      	ldr	r0, [pc, #68]	; (800a0e0 <RBI_ConfigRFSwitch+0xb8>)
 800a09a:	f7f8 fcad 	bl	80029f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800a09e:	2201      	movs	r2, #1
 800a0a0:	2110      	movs	r1, #16
 800a0a2:	480f      	ldr	r0, [pc, #60]	; (800a0e0 <RBI_ConfigRFSwitch+0xb8>)
 800a0a4:	f7f8 fca8 	bl	80029f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	2120      	movs	r1, #32
 800a0ac:	480c      	ldr	r0, [pc, #48]	; (800a0e0 <RBI_ConfigRFSwitch+0xb8>)
 800a0ae:	f7f8 fca3 	bl	80029f8 <HAL_GPIO_WritePin>
		break;
 800a0b2:	e010      	b.n	800a0d6 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	2108      	movs	r1, #8
 800a0b8:	4809      	ldr	r0, [pc, #36]	; (800a0e0 <RBI_ConfigRFSwitch+0xb8>)
 800a0ba:	f7f8 fc9d 	bl	80029f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2110      	movs	r1, #16
 800a0c2:	4807      	ldr	r0, [pc, #28]	; (800a0e0 <RBI_ConfigRFSwitch+0xb8>)
 800a0c4:	f7f8 fc98 	bl	80029f8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	2120      	movs	r1, #32
 800a0cc:	4804      	ldr	r0, [pc, #16]	; (800a0e0 <RBI_ConfigRFSwitch+0xb8>)
 800a0ce:	f7f8 fc93 	bl	80029f8 <HAL_GPIO_WritePin>
		break;
 800a0d2:	e000      	b.n	800a0d6 <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 800a0d4:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	48000800 	.word	0x48000800

0800a0e4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800a0ee:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bc80      	pop	{r7}
 800a0f8:	4770      	bx	lr

0800a0fa <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800a100:	2301      	movs	r3, #1
 800a102:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800a104:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a106:	4618      	mov	r0, r3
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bc80      	pop	{r7}
 800a10e:	4770      	bx	lr

0800a110 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800a116:	2301      	movs	r3, #1
 800a118:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800a11a:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	bc80      	pop	{r7}
 800a124:	4770      	bx	lr

0800a126 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a126:	b480      	push	{r7}
 800a128:	b085      	sub	sp, #20
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	4603      	mov	r3, r0
 800a12e:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800a130:	2300      	movs	r3, #0
 800a132:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800a134:	79fb      	ldrb	r3, [r7, #7]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d102      	bne.n	800a140 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800a13a:	230f      	movs	r3, #15
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	e001      	b.n	800a144 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800a140:	2316      	movs	r3, #22
 800a142:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800a144:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bc80      	pop	{r7}
 800a14e:	4770      	bx	lr

0800a150 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800a150:	b480      	push	{r7}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	4613      	mov	r3, r2
 800a15c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	613b      	str	r3, [r7, #16]

  while( size-- )
 800a166:	e007      	b.n	800a178 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	1c53      	adds	r3, r2, #1
 800a16c:	613b      	str	r3, [r7, #16]
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	1c59      	adds	r1, r3, #1
 800a172:	6179      	str	r1, [r7, #20]
 800a174:	7812      	ldrb	r2, [r2, #0]
 800a176:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a178:	88fb      	ldrh	r3, [r7, #6]
 800a17a:	1e5a      	subs	r2, r3, #1
 800a17c:	80fa      	strh	r2, [r7, #6]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1f2      	bne.n	800a168 <UTIL_MEM_cpy_8+0x18>
    }
}
 800a182:	bf00      	nop
 800a184:	bf00      	nop
 800a186:	371c      	adds	r7, #28
 800a188:	46bd      	mov	sp, r7
 800a18a:	bc80      	pop	{r7}
 800a18c:	4770      	bx	lr

0800a18e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800a18e:	b480      	push	{r7}
 800a190:	b085      	sub	sp, #20
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	70fb      	strb	r3, [r7, #3]
 800a19a:	4613      	mov	r3, r2
 800a19c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800a1a2:	e004      	b.n	800a1ae <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	1c5a      	adds	r2, r3, #1
 800a1a8:	60fa      	str	r2, [r7, #12]
 800a1aa:	78fa      	ldrb	r2, [r7, #3]
 800a1ac:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a1ae:	883b      	ldrh	r3, [r7, #0]
 800a1b0:	1e5a      	subs	r2, r3, #1
 800a1b2:	803a      	strh	r2, [r7, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1f5      	bne.n	800a1a4 <UTIL_MEM_set_8+0x16>
  }
}
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bc80      	pop	{r7}
 800a1c2:	4770      	bx	lr

0800a1c4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d023      	beq.n	800a222 <UTIL_TIMER_Create+0x5e>
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d020      	beq.n	800a222 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800a1e6:	4b11      	ldr	r3, [pc, #68]	; (800a22c <UTIL_TIMER_Create+0x68>)
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ea:	68b8      	ldr	r0, [r7, #8]
 800a1ec:	4798      	blx	r3
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	79fa      	ldrb	r2, [r7, #7]
 800a216:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	e000      	b.n	800a224 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800a222:	2301      	movs	r3, #1
  }
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	0800b4b8 	.word	0x0800b4b8

0800a230 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b08a      	sub	sp, #40	; 0x28
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a238:	2300      	movs	r3, #0
 800a23a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d056      	beq.n	800a2f2 <UTIL_TIMER_Start+0xc2>
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f929 	bl	800a49c <TimerExists>
 800a24a:	4603      	mov	r3, r0
 800a24c:	f083 0301 	eor.w	r3, r3, #1
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	d04d      	beq.n	800a2f2 <UTIL_TIMER_Start+0xc2>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	7a5b      	ldrb	r3, [r3, #9]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d149      	bne.n	800a2f2 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a25e:	f3ef 8310 	mrs	r3, PRIMASK
 800a262:	613b      	str	r3, [r7, #16]
  return(result);
 800a264:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800a266:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a268:	b672      	cpsid	i
}
 800a26a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800a272:	4b24      	ldr	r3, [pc, #144]	; (800a304 <UTIL_TIMER_Start+0xd4>)
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	4798      	blx	r3
 800a278:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800a27a:	6a3a      	ldr	r2, [r7, #32]
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d201      	bcs.n	800a286 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a3a      	ldr	r2, [r7, #32]
 800a28a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800a29e:	4b1a      	ldr	r3, [pc, #104]	; (800a308 <UTIL_TIMER_Start+0xd8>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d106      	bne.n	800a2b4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800a2a6:	4b17      	ldr	r3, [pc, #92]	; (800a304 <UTIL_TIMER_Start+0xd4>)
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f96b 	bl	800a588 <TimerInsertNewHeadTimer>
 800a2b2:	e017      	b.n	800a2e4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800a2b4:	4b13      	ldr	r3, [pc, #76]	; (800a304 <UTIL_TIMER_Start+0xd4>)
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	4798      	blx	r3
 800a2ba:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	441a      	add	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	4b0e      	ldr	r3, [pc, #56]	; (800a308 <UTIL_TIMER_Start+0xd8>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d203      	bcs.n	800a2de <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f956 	bl	800a588 <TimerInsertNewHeadTimer>
 800a2dc:	e002      	b.n	800a2e4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f922 	bl	800a528 <TimerInsertTimer>
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f383 8810 	msr	PRIMASK, r3
}
 800a2ee:	bf00      	nop
  {
 800a2f0:	e002      	b.n	800a2f8 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800a2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3728      	adds	r7, #40	; 0x28
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	0800b4b8 	.word	0x0800b4b8
 800a308:	200006a4 	.word	0x200006a4

0800a30c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b088      	sub	sp, #32
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d05b      	beq.n	800a3d6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a31e:	f3ef 8310 	mrs	r3, PRIMASK
 800a322:	60fb      	str	r3, [r7, #12]
  return(result);
 800a324:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800a326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a328:	b672      	cpsid	i
}
 800a32a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800a32c:	4b2d      	ldr	r3, [pc, #180]	; (800a3e4 <UTIL_TIMER_Stop+0xd8>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800a332:	4b2c      	ldr	r3, [pc, #176]	; (800a3e4 <UTIL_TIMER_Stop+0xd8>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800a33e:	4b29      	ldr	r3, [pc, #164]	; (800a3e4 <UTIL_TIMER_Stop+0xd8>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d041      	beq.n	800a3ca <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800a34c:	4b25      	ldr	r3, [pc, #148]	; (800a3e4 <UTIL_TIMER_Stop+0xd8>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	429a      	cmp	r2, r3
 800a354:	d134      	bne.n	800a3c0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800a356:	4b23      	ldr	r3, [pc, #140]	; (800a3e4 <UTIL_TIMER_Stop+0xd8>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2200      	movs	r2, #0
 800a35c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800a35e:	4b21      	ldr	r3, [pc, #132]	; (800a3e4 <UTIL_TIMER_Stop+0xd8>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00a      	beq.n	800a37e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800a368:	4b1e      	ldr	r3, [pc, #120]	; (800a3e4 <UTIL_TIMER_Stop+0xd8>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	4a1d      	ldr	r2, [pc, #116]	; (800a3e4 <UTIL_TIMER_Stop+0xd8>)
 800a370:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800a372:	4b1c      	ldr	r3, [pc, #112]	; (800a3e4 <UTIL_TIMER_Stop+0xd8>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4618      	mov	r0, r3
 800a378:	f000 f8ac 	bl	800a4d4 <TimerSetTimeout>
 800a37c:	e023      	b.n	800a3c6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800a37e:	4b1a      	ldr	r3, [pc, #104]	; (800a3e8 <UTIL_TIMER_Stop+0xdc>)
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	4798      	blx	r3
            TimerListHead = NULL;
 800a384:	4b17      	ldr	r3, [pc, #92]	; (800a3e4 <UTIL_TIMER_Stop+0xd8>)
 800a386:	2200      	movs	r2, #0
 800a388:	601a      	str	r2, [r3, #0]
 800a38a:	e01c      	b.n	800a3c6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	429a      	cmp	r2, r3
 800a392:	d110      	bne.n	800a3b6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d006      	beq.n	800a3aa <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800a3a8:	e00d      	b.n	800a3c6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	615a      	str	r2, [r3, #20]
            break;
 800a3b4:	e007      	b.n	800a3c6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e2      	bne.n	800a38c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	77fb      	strb	r3, [r7, #31]
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	f383 8810 	msr	PRIMASK, r3
}
 800a3d4:	e001      	b.n	800a3da <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800a3da:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3720      	adds	r7, #32
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	200006a4 	.word	0x200006a4
 800a3e8:	0800b4b8 	.word	0x0800b4b8

0800a3ec <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d102      	bne.n	800a406 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800a400:	2301      	movs	r3, #1
 800a402:	73fb      	strb	r3, [r7, #15]
 800a404:	e014      	b.n	800a430 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800a406:	4b0d      	ldr	r3, [pc, #52]	; (800a43c <UTIL_TIMER_SetPeriod+0x50>)
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	6838      	ldr	r0, [r7, #0]
 800a40c:	4798      	blx	r3
 800a40e:	4602      	mov	r2, r0
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f841 	bl	800a49c <TimerExists>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d007      	beq.n	800a430 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7ff ff73 	bl	800a30c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7ff ff02 	bl	800a230 <UTIL_TIMER_Start>
 800a42c:	4603      	mov	r3, r0
 800a42e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800a430:	7bfb      	ldrb	r3, [r7, #15]
}
 800a432:	4618      	mov	r0, r3
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	0800b4b8 	.word	0x0800b4b8

0800a440 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800a446:	4b06      	ldr	r3, [pc, #24]	; (800a460 <UTIL_TIMER_GetCurrentTime+0x20>)
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	4798      	blx	r3
 800a44c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800a44e:	4b04      	ldr	r3, [pc, #16]	; (800a460 <UTIL_TIMER_GetCurrentTime+0x20>)
 800a450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	4798      	blx	r3
 800a456:	4603      	mov	r3, r0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	0800b4b8 	.word	0x0800b4b8

0800a464 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800a46c:	4b0a      	ldr	r3, [pc, #40]	; (800a498 <UTIL_TIMER_GetElapsedTime+0x34>)
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	4798      	blx	r3
 800a472:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800a474:	4b08      	ldr	r3, [pc, #32]	; (800a498 <UTIL_TIMER_GetElapsedTime+0x34>)
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	4798      	blx	r3
 800a47c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800a47e:	4b06      	ldr	r3, [pc, #24]	; (800a498 <UTIL_TIMER_GetElapsedTime+0x34>)
 800a480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a482:	68f9      	ldr	r1, [r7, #12]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	1a8a      	subs	r2, r1, r2
 800a488:	4610      	mov	r0, r2
 800a48a:	4798      	blx	r3
 800a48c:	4603      	mov	r3, r0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	0800b4b8 	.word	0x0800b4b8

0800a49c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a4a4:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <TimerExists+0x34>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800a4aa:	e008      	b.n	800a4be <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d101      	bne.n	800a4b8 <TimerExists+0x1c>
    {
      return true;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e006      	b.n	800a4c6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1f3      	bne.n	800a4ac <TimerExists+0x10>
  }
  return false;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bc80      	pop	{r7}
 800a4ce:	4770      	bx	lr
 800a4d0:	200006a4 	.word	0x200006a4

0800a4d4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800a4d4:	b590      	push	{r4, r7, lr}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800a4dc:	4b11      	ldr	r3, [pc, #68]	; (800a524 <TimerSetTimeout+0x50>)
 800a4de:	6a1b      	ldr	r3, [r3, #32]
 800a4e0:	4798      	blx	r3
 800a4e2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681c      	ldr	r4, [r3, #0]
 800a4ee:	4b0d      	ldr	r3, [pc, #52]	; (800a524 <TimerSetTimeout+0x50>)
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	4798      	blx	r3
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	429c      	cmp	r4, r3
 800a4fc:	d207      	bcs.n	800a50e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800a4fe:	4b09      	ldr	r3, [pc, #36]	; (800a524 <TimerSetTimeout+0x50>)
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	4798      	blx	r3
 800a504:	4602      	mov	r2, r0
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	441a      	add	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800a50e:	4b05      	ldr	r3, [pc, #20]	; (800a524 <TimerSetTimeout+0x50>)
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	6812      	ldr	r2, [r2, #0]
 800a516:	4610      	mov	r0, r2
 800a518:	4798      	blx	r3
}
 800a51a:	bf00      	nop
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd90      	pop	{r4, r7, pc}
 800a522:	bf00      	nop
 800a524:	0800b4b8 	.word	0x0800b4b8

0800a528 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a530:	4b14      	ldr	r3, [pc, #80]	; (800a584 <TimerInsertTimer+0x5c>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800a536:	4b13      	ldr	r3, [pc, #76]	; (800a584 <TimerInsertTimer+0x5c>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800a53e:	e012      	b.n	800a566 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d905      	bls.n	800a558 <TimerInsertTimer+0x30>
    {
        cur = next;
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	695b      	ldr	r3, [r3, #20]
 800a554:	60bb      	str	r3, [r7, #8]
 800a556:	e006      	b.n	800a566 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	615a      	str	r2, [r3, #20]
        return;
 800a564:	e009      	b.n	800a57a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1e8      	bne.n	800a540 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	615a      	str	r2, [r3, #20]
}
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bc80      	pop	{r7}
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	200006a4 	.word	0x200006a4

0800a588 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a590:	4b0b      	ldr	r3, [pc, #44]	; (800a5c0 <TimerInsertNewHeadTimer+0x38>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800a5a8:	4a05      	ldr	r2, [pc, #20]	; (800a5c0 <TimerInsertNewHeadTimer+0x38>)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800a5ae:	4b04      	ldr	r3, [pc, #16]	; (800a5c0 <TimerInsertNewHeadTimer+0x38>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7ff ff8e 	bl	800a4d4 <TimerSetTimeout>
}
 800a5b8:	bf00      	nop
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	200006a4 	.word	0x200006a4

0800a5c4 <_vsniprintf_r>:
 800a5c4:	b530      	push	{r4, r5, lr}
 800a5c6:	4614      	mov	r4, r2
 800a5c8:	2c00      	cmp	r4, #0
 800a5ca:	b09b      	sub	sp, #108	; 0x6c
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	da05      	bge.n	800a5de <_vsniprintf_r+0x1a>
 800a5d2:	238b      	movs	r3, #139	; 0x8b
 800a5d4:	6003      	str	r3, [r0, #0]
 800a5d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5da:	b01b      	add	sp, #108	; 0x6c
 800a5dc:	bd30      	pop	{r4, r5, pc}
 800a5de:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a5e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a5e6:	bf14      	ite	ne
 800a5e8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a5ec:	4623      	moveq	r3, r4
 800a5ee:	9302      	str	r3, [sp, #8]
 800a5f0:	9305      	str	r3, [sp, #20]
 800a5f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5f6:	9100      	str	r1, [sp, #0]
 800a5f8:	9104      	str	r1, [sp, #16]
 800a5fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a5fe:	4669      	mov	r1, sp
 800a600:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a602:	f000 f8b5 	bl	800a770 <_svfiprintf_r>
 800a606:	1c43      	adds	r3, r0, #1
 800a608:	bfbc      	itt	lt
 800a60a:	238b      	movlt	r3, #139	; 0x8b
 800a60c:	602b      	strlt	r3, [r5, #0]
 800a60e:	2c00      	cmp	r4, #0
 800a610:	d0e3      	beq.n	800a5da <_vsniprintf_r+0x16>
 800a612:	9b00      	ldr	r3, [sp, #0]
 800a614:	2200      	movs	r2, #0
 800a616:	701a      	strb	r2, [r3, #0]
 800a618:	e7df      	b.n	800a5da <_vsniprintf_r+0x16>
	...

0800a61c <vsniprintf>:
 800a61c:	b507      	push	{r0, r1, r2, lr}
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	4613      	mov	r3, r2
 800a622:	460a      	mov	r2, r1
 800a624:	4601      	mov	r1, r0
 800a626:	4803      	ldr	r0, [pc, #12]	; (800a634 <vsniprintf+0x18>)
 800a628:	6800      	ldr	r0, [r0, #0]
 800a62a:	f7ff ffcb 	bl	800a5c4 <_vsniprintf_r>
 800a62e:	b003      	add	sp, #12
 800a630:	f85d fb04 	ldr.w	pc, [sp], #4
 800a634:	2000005c 	.word	0x2000005c

0800a638 <memset>:
 800a638:	4402      	add	r2, r0
 800a63a:	4603      	mov	r3, r0
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d100      	bne.n	800a642 <memset+0xa>
 800a640:	4770      	bx	lr
 800a642:	f803 1b01 	strb.w	r1, [r3], #1
 800a646:	e7f9      	b.n	800a63c <memset+0x4>

0800a648 <__errno>:
 800a648:	4b01      	ldr	r3, [pc, #4]	; (800a650 <__errno+0x8>)
 800a64a:	6818      	ldr	r0, [r3, #0]
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	2000005c 	.word	0x2000005c

0800a654 <__libc_init_array>:
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	4d0d      	ldr	r5, [pc, #52]	; (800a68c <__libc_init_array+0x38>)
 800a658:	4c0d      	ldr	r4, [pc, #52]	; (800a690 <__libc_init_array+0x3c>)
 800a65a:	1b64      	subs	r4, r4, r5
 800a65c:	10a4      	asrs	r4, r4, #2
 800a65e:	2600      	movs	r6, #0
 800a660:	42a6      	cmp	r6, r4
 800a662:	d109      	bne.n	800a678 <__libc_init_array+0x24>
 800a664:	4d0b      	ldr	r5, [pc, #44]	; (800a694 <__libc_init_array+0x40>)
 800a666:	4c0c      	ldr	r4, [pc, #48]	; (800a698 <__libc_init_array+0x44>)
 800a668:	f000 fc68 	bl	800af3c <_init>
 800a66c:	1b64      	subs	r4, r4, r5
 800a66e:	10a4      	asrs	r4, r4, #2
 800a670:	2600      	movs	r6, #0
 800a672:	42a6      	cmp	r6, r4
 800a674:	d105      	bne.n	800a682 <__libc_init_array+0x2e>
 800a676:	bd70      	pop	{r4, r5, r6, pc}
 800a678:	f855 3b04 	ldr.w	r3, [r5], #4
 800a67c:	4798      	blx	r3
 800a67e:	3601      	adds	r6, #1
 800a680:	e7ee      	b.n	800a660 <__libc_init_array+0xc>
 800a682:	f855 3b04 	ldr.w	r3, [r5], #4
 800a686:	4798      	blx	r3
 800a688:	3601      	adds	r6, #1
 800a68a:	e7f2      	b.n	800a672 <__libc_init_array+0x1e>
 800a68c:	0800b688 	.word	0x0800b688
 800a690:	0800b688 	.word	0x0800b688
 800a694:	0800b688 	.word	0x0800b688
 800a698:	0800b68c 	.word	0x0800b68c

0800a69c <__retarget_lock_acquire_recursive>:
 800a69c:	4770      	bx	lr

0800a69e <__retarget_lock_release_recursive>:
 800a69e:	4770      	bx	lr

0800a6a0 <memcpy>:
 800a6a0:	440a      	add	r2, r1
 800a6a2:	4291      	cmp	r1, r2
 800a6a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a6a8:	d100      	bne.n	800a6ac <memcpy+0xc>
 800a6aa:	4770      	bx	lr
 800a6ac:	b510      	push	{r4, lr}
 800a6ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6b6:	4291      	cmp	r1, r2
 800a6b8:	d1f9      	bne.n	800a6ae <memcpy+0xe>
 800a6ba:	bd10      	pop	{r4, pc}

0800a6bc <__ssputs_r>:
 800a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	688e      	ldr	r6, [r1, #8]
 800a6c2:	461f      	mov	r7, r3
 800a6c4:	42be      	cmp	r6, r7
 800a6c6:	680b      	ldr	r3, [r1, #0]
 800a6c8:	4682      	mov	sl, r0
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	4690      	mov	r8, r2
 800a6ce:	d82c      	bhi.n	800a72a <__ssputs_r+0x6e>
 800a6d0:	898a      	ldrh	r2, [r1, #12]
 800a6d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6d6:	d026      	beq.n	800a726 <__ssputs_r+0x6a>
 800a6d8:	6965      	ldr	r5, [r4, #20]
 800a6da:	6909      	ldr	r1, [r1, #16]
 800a6dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6e0:	eba3 0901 	sub.w	r9, r3, r1
 800a6e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6e8:	1c7b      	adds	r3, r7, #1
 800a6ea:	444b      	add	r3, r9
 800a6ec:	106d      	asrs	r5, r5, #1
 800a6ee:	429d      	cmp	r5, r3
 800a6f0:	bf38      	it	cc
 800a6f2:	461d      	movcc	r5, r3
 800a6f4:	0553      	lsls	r3, r2, #21
 800a6f6:	d527      	bpl.n	800a748 <__ssputs_r+0x8c>
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	f000 f957 	bl	800a9ac <_malloc_r>
 800a6fe:	4606      	mov	r6, r0
 800a700:	b360      	cbz	r0, 800a75c <__ssputs_r+0xa0>
 800a702:	6921      	ldr	r1, [r4, #16]
 800a704:	464a      	mov	r2, r9
 800a706:	f7ff ffcb 	bl	800a6a0 <memcpy>
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a714:	81a3      	strh	r3, [r4, #12]
 800a716:	6126      	str	r6, [r4, #16]
 800a718:	6165      	str	r5, [r4, #20]
 800a71a:	444e      	add	r6, r9
 800a71c:	eba5 0509 	sub.w	r5, r5, r9
 800a720:	6026      	str	r6, [r4, #0]
 800a722:	60a5      	str	r5, [r4, #8]
 800a724:	463e      	mov	r6, r7
 800a726:	42be      	cmp	r6, r7
 800a728:	d900      	bls.n	800a72c <__ssputs_r+0x70>
 800a72a:	463e      	mov	r6, r7
 800a72c:	6820      	ldr	r0, [r4, #0]
 800a72e:	4632      	mov	r2, r6
 800a730:	4641      	mov	r1, r8
 800a732:	f000 fb86 	bl	800ae42 <memmove>
 800a736:	68a3      	ldr	r3, [r4, #8]
 800a738:	1b9b      	subs	r3, r3, r6
 800a73a:	60a3      	str	r3, [r4, #8]
 800a73c:	6823      	ldr	r3, [r4, #0]
 800a73e:	4433      	add	r3, r6
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	2000      	movs	r0, #0
 800a744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a748:	462a      	mov	r2, r5
 800a74a:	f000 fb4b 	bl	800ade4 <_realloc_r>
 800a74e:	4606      	mov	r6, r0
 800a750:	2800      	cmp	r0, #0
 800a752:	d1e0      	bne.n	800a716 <__ssputs_r+0x5a>
 800a754:	6921      	ldr	r1, [r4, #16]
 800a756:	4650      	mov	r0, sl
 800a758:	f000 fb9e 	bl	800ae98 <_free_r>
 800a75c:	230c      	movs	r3, #12
 800a75e:	f8ca 3000 	str.w	r3, [sl]
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a768:	81a3      	strh	r3, [r4, #12]
 800a76a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a76e:	e7e9      	b.n	800a744 <__ssputs_r+0x88>

0800a770 <_svfiprintf_r>:
 800a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	4698      	mov	r8, r3
 800a776:	898b      	ldrh	r3, [r1, #12]
 800a778:	061b      	lsls	r3, r3, #24
 800a77a:	b09d      	sub	sp, #116	; 0x74
 800a77c:	4607      	mov	r7, r0
 800a77e:	460d      	mov	r5, r1
 800a780:	4614      	mov	r4, r2
 800a782:	d50e      	bpl.n	800a7a2 <_svfiprintf_r+0x32>
 800a784:	690b      	ldr	r3, [r1, #16]
 800a786:	b963      	cbnz	r3, 800a7a2 <_svfiprintf_r+0x32>
 800a788:	2140      	movs	r1, #64	; 0x40
 800a78a:	f000 f90f 	bl	800a9ac <_malloc_r>
 800a78e:	6028      	str	r0, [r5, #0]
 800a790:	6128      	str	r0, [r5, #16]
 800a792:	b920      	cbnz	r0, 800a79e <_svfiprintf_r+0x2e>
 800a794:	230c      	movs	r3, #12
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a79c:	e0d0      	b.n	800a940 <_svfiprintf_r+0x1d0>
 800a79e:	2340      	movs	r3, #64	; 0x40
 800a7a0:	616b      	str	r3, [r5, #20]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a6:	2320      	movs	r3, #32
 800a7a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b0:	2330      	movs	r3, #48	; 0x30
 800a7b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a958 <_svfiprintf_r+0x1e8>
 800a7b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7ba:	f04f 0901 	mov.w	r9, #1
 800a7be:	4623      	mov	r3, r4
 800a7c0:	469a      	mov	sl, r3
 800a7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c6:	b10a      	cbz	r2, 800a7cc <_svfiprintf_r+0x5c>
 800a7c8:	2a25      	cmp	r2, #37	; 0x25
 800a7ca:	d1f9      	bne.n	800a7c0 <_svfiprintf_r+0x50>
 800a7cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d0:	d00b      	beq.n	800a7ea <_svfiprintf_r+0x7a>
 800a7d2:	465b      	mov	r3, fp
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7ff ff6f 	bl	800a6bc <__ssputs_r>
 800a7de:	3001      	adds	r0, #1
 800a7e0:	f000 80a9 	beq.w	800a936 <_svfiprintf_r+0x1c6>
 800a7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e6:	445a      	add	r2, fp
 800a7e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 80a1 	beq.w	800a936 <_svfiprintf_r+0x1c6>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7fe:	f10a 0a01 	add.w	sl, sl, #1
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	9307      	str	r3, [sp, #28]
 800a806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a80a:	931a      	str	r3, [sp, #104]	; 0x68
 800a80c:	4654      	mov	r4, sl
 800a80e:	2205      	movs	r2, #5
 800a810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a814:	4850      	ldr	r0, [pc, #320]	; (800a958 <_svfiprintf_r+0x1e8>)
 800a816:	f7f5 fcb3 	bl	8000180 <memchr>
 800a81a:	9a04      	ldr	r2, [sp, #16]
 800a81c:	b9d8      	cbnz	r0, 800a856 <_svfiprintf_r+0xe6>
 800a81e:	06d0      	lsls	r0, r2, #27
 800a820:	bf44      	itt	mi
 800a822:	2320      	movmi	r3, #32
 800a824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a828:	0711      	lsls	r1, r2, #28
 800a82a:	bf44      	itt	mi
 800a82c:	232b      	movmi	r3, #43	; 0x2b
 800a82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a832:	f89a 3000 	ldrb.w	r3, [sl]
 800a836:	2b2a      	cmp	r3, #42	; 0x2a
 800a838:	d015      	beq.n	800a866 <_svfiprintf_r+0xf6>
 800a83a:	9a07      	ldr	r2, [sp, #28]
 800a83c:	4654      	mov	r4, sl
 800a83e:	2000      	movs	r0, #0
 800a840:	f04f 0c0a 	mov.w	ip, #10
 800a844:	4621      	mov	r1, r4
 800a846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a84a:	3b30      	subs	r3, #48	; 0x30
 800a84c:	2b09      	cmp	r3, #9
 800a84e:	d94d      	bls.n	800a8ec <_svfiprintf_r+0x17c>
 800a850:	b1b0      	cbz	r0, 800a880 <_svfiprintf_r+0x110>
 800a852:	9207      	str	r2, [sp, #28]
 800a854:	e014      	b.n	800a880 <_svfiprintf_r+0x110>
 800a856:	eba0 0308 	sub.w	r3, r0, r8
 800a85a:	fa09 f303 	lsl.w	r3, r9, r3
 800a85e:	4313      	orrs	r3, r2
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	46a2      	mov	sl, r4
 800a864:	e7d2      	b.n	800a80c <_svfiprintf_r+0x9c>
 800a866:	9b03      	ldr	r3, [sp, #12]
 800a868:	1d19      	adds	r1, r3, #4
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	9103      	str	r1, [sp, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	bfbb      	ittet	lt
 800a872:	425b      	neglt	r3, r3
 800a874:	f042 0202 	orrlt.w	r2, r2, #2
 800a878:	9307      	strge	r3, [sp, #28]
 800a87a:	9307      	strlt	r3, [sp, #28]
 800a87c:	bfb8      	it	lt
 800a87e:	9204      	strlt	r2, [sp, #16]
 800a880:	7823      	ldrb	r3, [r4, #0]
 800a882:	2b2e      	cmp	r3, #46	; 0x2e
 800a884:	d10c      	bne.n	800a8a0 <_svfiprintf_r+0x130>
 800a886:	7863      	ldrb	r3, [r4, #1]
 800a888:	2b2a      	cmp	r3, #42	; 0x2a
 800a88a:	d134      	bne.n	800a8f6 <_svfiprintf_r+0x186>
 800a88c:	9b03      	ldr	r3, [sp, #12]
 800a88e:	1d1a      	adds	r2, r3, #4
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	9203      	str	r2, [sp, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	bfb8      	it	lt
 800a898:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a89c:	3402      	adds	r4, #2
 800a89e:	9305      	str	r3, [sp, #20]
 800a8a0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a95c <_svfiprintf_r+0x1ec>
 800a8a4:	7821      	ldrb	r1, [r4, #0]
 800a8a6:	2203      	movs	r2, #3
 800a8a8:	4650      	mov	r0, sl
 800a8aa:	f7f5 fc69 	bl	8000180 <memchr>
 800a8ae:	b138      	cbz	r0, 800a8c0 <_svfiprintf_r+0x150>
 800a8b0:	9b04      	ldr	r3, [sp, #16]
 800a8b2:	eba0 000a 	sub.w	r0, r0, sl
 800a8b6:	2240      	movs	r2, #64	; 0x40
 800a8b8:	4082      	lsls	r2, r0
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	3401      	adds	r4, #1
 800a8be:	9304      	str	r3, [sp, #16]
 800a8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c4:	4826      	ldr	r0, [pc, #152]	; (800a960 <_svfiprintf_r+0x1f0>)
 800a8c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8ca:	2206      	movs	r2, #6
 800a8cc:	f7f5 fc58 	bl	8000180 <memchr>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d038      	beq.n	800a946 <_svfiprintf_r+0x1d6>
 800a8d4:	4b23      	ldr	r3, [pc, #140]	; (800a964 <_svfiprintf_r+0x1f4>)
 800a8d6:	bb1b      	cbnz	r3, 800a920 <_svfiprintf_r+0x1b0>
 800a8d8:	9b03      	ldr	r3, [sp, #12]
 800a8da:	3307      	adds	r3, #7
 800a8dc:	f023 0307 	bic.w	r3, r3, #7
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	9303      	str	r3, [sp, #12]
 800a8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e6:	4433      	add	r3, r6
 800a8e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ea:	e768      	b.n	800a7be <_svfiprintf_r+0x4e>
 800a8ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	2001      	movs	r0, #1
 800a8f4:	e7a6      	b.n	800a844 <_svfiprintf_r+0xd4>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	3401      	adds	r4, #1
 800a8fa:	9305      	str	r3, [sp, #20]
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	f04f 0c0a 	mov.w	ip, #10
 800a902:	4620      	mov	r0, r4
 800a904:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a908:	3a30      	subs	r2, #48	; 0x30
 800a90a:	2a09      	cmp	r2, #9
 800a90c:	d903      	bls.n	800a916 <_svfiprintf_r+0x1a6>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0c6      	beq.n	800a8a0 <_svfiprintf_r+0x130>
 800a912:	9105      	str	r1, [sp, #20]
 800a914:	e7c4      	b.n	800a8a0 <_svfiprintf_r+0x130>
 800a916:	fb0c 2101 	mla	r1, ip, r1, r2
 800a91a:	4604      	mov	r4, r0
 800a91c:	2301      	movs	r3, #1
 800a91e:	e7f0      	b.n	800a902 <_svfiprintf_r+0x192>
 800a920:	ab03      	add	r3, sp, #12
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	462a      	mov	r2, r5
 800a926:	4b10      	ldr	r3, [pc, #64]	; (800a968 <_svfiprintf_r+0x1f8>)
 800a928:	a904      	add	r1, sp, #16
 800a92a:	4638      	mov	r0, r7
 800a92c:	f3af 8000 	nop.w
 800a930:	1c42      	adds	r2, r0, #1
 800a932:	4606      	mov	r6, r0
 800a934:	d1d6      	bne.n	800a8e4 <_svfiprintf_r+0x174>
 800a936:	89ab      	ldrh	r3, [r5, #12]
 800a938:	065b      	lsls	r3, r3, #25
 800a93a:	f53f af2d 	bmi.w	800a798 <_svfiprintf_r+0x28>
 800a93e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a940:	b01d      	add	sp, #116	; 0x74
 800a942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a946:	ab03      	add	r3, sp, #12
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	462a      	mov	r2, r5
 800a94c:	4b06      	ldr	r3, [pc, #24]	; (800a968 <_svfiprintf_r+0x1f8>)
 800a94e:	a904      	add	r1, sp, #16
 800a950:	4638      	mov	r0, r7
 800a952:	f000 f919 	bl	800ab88 <_printf_i>
 800a956:	e7eb      	b.n	800a930 <_svfiprintf_r+0x1c0>
 800a958:	0800b64c 	.word	0x0800b64c
 800a95c:	0800b652 	.word	0x0800b652
 800a960:	0800b656 	.word	0x0800b656
 800a964:	00000000 	.word	0x00000000
 800a968:	0800a6bd 	.word	0x0800a6bd

0800a96c <sbrk_aligned>:
 800a96c:	b570      	push	{r4, r5, r6, lr}
 800a96e:	4e0e      	ldr	r6, [pc, #56]	; (800a9a8 <sbrk_aligned+0x3c>)
 800a970:	460c      	mov	r4, r1
 800a972:	6831      	ldr	r1, [r6, #0]
 800a974:	4605      	mov	r5, r0
 800a976:	b911      	cbnz	r1, 800a97e <sbrk_aligned+0x12>
 800a978:	f000 fa7e 	bl	800ae78 <_sbrk_r>
 800a97c:	6030      	str	r0, [r6, #0]
 800a97e:	4621      	mov	r1, r4
 800a980:	4628      	mov	r0, r5
 800a982:	f000 fa79 	bl	800ae78 <_sbrk_r>
 800a986:	1c43      	adds	r3, r0, #1
 800a988:	d00a      	beq.n	800a9a0 <sbrk_aligned+0x34>
 800a98a:	1cc4      	adds	r4, r0, #3
 800a98c:	f024 0403 	bic.w	r4, r4, #3
 800a990:	42a0      	cmp	r0, r4
 800a992:	d007      	beq.n	800a9a4 <sbrk_aligned+0x38>
 800a994:	1a21      	subs	r1, r4, r0
 800a996:	4628      	mov	r0, r5
 800a998:	f000 fa6e 	bl	800ae78 <_sbrk_r>
 800a99c:	3001      	adds	r0, #1
 800a99e:	d101      	bne.n	800a9a4 <sbrk_aligned+0x38>
 800a9a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}
 800a9a8:	200007e8 	.word	0x200007e8

0800a9ac <_malloc_r>:
 800a9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b0:	1ccd      	adds	r5, r1, #3
 800a9b2:	f025 0503 	bic.w	r5, r5, #3
 800a9b6:	3508      	adds	r5, #8
 800a9b8:	2d0c      	cmp	r5, #12
 800a9ba:	bf38      	it	cc
 800a9bc:	250c      	movcc	r5, #12
 800a9be:	2d00      	cmp	r5, #0
 800a9c0:	4607      	mov	r7, r0
 800a9c2:	db01      	blt.n	800a9c8 <_malloc_r+0x1c>
 800a9c4:	42a9      	cmp	r1, r5
 800a9c6:	d905      	bls.n	800a9d4 <_malloc_r+0x28>
 800a9c8:	230c      	movs	r3, #12
 800a9ca:	603b      	str	r3, [r7, #0]
 800a9cc:	2600      	movs	r6, #0
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aaa8 <_malloc_r+0xfc>
 800a9d8:	f000 f9f8 	bl	800adcc <__malloc_lock>
 800a9dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a9e0:	461c      	mov	r4, r3
 800a9e2:	bb5c      	cbnz	r4, 800aa3c <_malloc_r+0x90>
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	f7ff ffc0 	bl	800a96c <sbrk_aligned>
 800a9ec:	1c43      	adds	r3, r0, #1
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	d155      	bne.n	800aa9e <_malloc_r+0xf2>
 800a9f2:	f8d8 4000 	ldr.w	r4, [r8]
 800a9f6:	4626      	mov	r6, r4
 800a9f8:	2e00      	cmp	r6, #0
 800a9fa:	d145      	bne.n	800aa88 <_malloc_r+0xdc>
 800a9fc:	2c00      	cmp	r4, #0
 800a9fe:	d048      	beq.n	800aa92 <_malloc_r+0xe6>
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	4631      	mov	r1, r6
 800aa04:	4638      	mov	r0, r7
 800aa06:	eb04 0903 	add.w	r9, r4, r3
 800aa0a:	f000 fa35 	bl	800ae78 <_sbrk_r>
 800aa0e:	4581      	cmp	r9, r0
 800aa10:	d13f      	bne.n	800aa92 <_malloc_r+0xe6>
 800aa12:	6821      	ldr	r1, [r4, #0]
 800aa14:	1a6d      	subs	r5, r5, r1
 800aa16:	4629      	mov	r1, r5
 800aa18:	4638      	mov	r0, r7
 800aa1a:	f7ff ffa7 	bl	800a96c <sbrk_aligned>
 800aa1e:	3001      	adds	r0, #1
 800aa20:	d037      	beq.n	800aa92 <_malloc_r+0xe6>
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	442b      	add	r3, r5
 800aa26:	6023      	str	r3, [r4, #0]
 800aa28:	f8d8 3000 	ldr.w	r3, [r8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d038      	beq.n	800aaa2 <_malloc_r+0xf6>
 800aa30:	685a      	ldr	r2, [r3, #4]
 800aa32:	42a2      	cmp	r2, r4
 800aa34:	d12b      	bne.n	800aa8e <_malloc_r+0xe2>
 800aa36:	2200      	movs	r2, #0
 800aa38:	605a      	str	r2, [r3, #4]
 800aa3a:	e00f      	b.n	800aa5c <_malloc_r+0xb0>
 800aa3c:	6822      	ldr	r2, [r4, #0]
 800aa3e:	1b52      	subs	r2, r2, r5
 800aa40:	d41f      	bmi.n	800aa82 <_malloc_r+0xd6>
 800aa42:	2a0b      	cmp	r2, #11
 800aa44:	d917      	bls.n	800aa76 <_malloc_r+0xca>
 800aa46:	1961      	adds	r1, r4, r5
 800aa48:	42a3      	cmp	r3, r4
 800aa4a:	6025      	str	r5, [r4, #0]
 800aa4c:	bf18      	it	ne
 800aa4e:	6059      	strne	r1, [r3, #4]
 800aa50:	6863      	ldr	r3, [r4, #4]
 800aa52:	bf08      	it	eq
 800aa54:	f8c8 1000 	streq.w	r1, [r8]
 800aa58:	5162      	str	r2, [r4, r5]
 800aa5a:	604b      	str	r3, [r1, #4]
 800aa5c:	4638      	mov	r0, r7
 800aa5e:	f104 060b 	add.w	r6, r4, #11
 800aa62:	f000 f9b9 	bl	800add8 <__malloc_unlock>
 800aa66:	f026 0607 	bic.w	r6, r6, #7
 800aa6a:	1d23      	adds	r3, r4, #4
 800aa6c:	1af2      	subs	r2, r6, r3
 800aa6e:	d0ae      	beq.n	800a9ce <_malloc_r+0x22>
 800aa70:	1b9b      	subs	r3, r3, r6
 800aa72:	50a3      	str	r3, [r4, r2]
 800aa74:	e7ab      	b.n	800a9ce <_malloc_r+0x22>
 800aa76:	42a3      	cmp	r3, r4
 800aa78:	6862      	ldr	r2, [r4, #4]
 800aa7a:	d1dd      	bne.n	800aa38 <_malloc_r+0x8c>
 800aa7c:	f8c8 2000 	str.w	r2, [r8]
 800aa80:	e7ec      	b.n	800aa5c <_malloc_r+0xb0>
 800aa82:	4623      	mov	r3, r4
 800aa84:	6864      	ldr	r4, [r4, #4]
 800aa86:	e7ac      	b.n	800a9e2 <_malloc_r+0x36>
 800aa88:	4634      	mov	r4, r6
 800aa8a:	6876      	ldr	r6, [r6, #4]
 800aa8c:	e7b4      	b.n	800a9f8 <_malloc_r+0x4c>
 800aa8e:	4613      	mov	r3, r2
 800aa90:	e7cc      	b.n	800aa2c <_malloc_r+0x80>
 800aa92:	230c      	movs	r3, #12
 800aa94:	603b      	str	r3, [r7, #0]
 800aa96:	4638      	mov	r0, r7
 800aa98:	f000 f99e 	bl	800add8 <__malloc_unlock>
 800aa9c:	e797      	b.n	800a9ce <_malloc_r+0x22>
 800aa9e:	6025      	str	r5, [r4, #0]
 800aaa0:	e7dc      	b.n	800aa5c <_malloc_r+0xb0>
 800aaa2:	605b      	str	r3, [r3, #4]
 800aaa4:	deff      	udf	#255	; 0xff
 800aaa6:	bf00      	nop
 800aaa8:	200007e4 	.word	0x200007e4

0800aaac <_printf_common>:
 800aaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab0:	4616      	mov	r6, r2
 800aab2:	4699      	mov	r9, r3
 800aab4:	688a      	ldr	r2, [r1, #8]
 800aab6:	690b      	ldr	r3, [r1, #16]
 800aab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aabc:	4293      	cmp	r3, r2
 800aabe:	bfb8      	it	lt
 800aac0:	4613      	movlt	r3, r2
 800aac2:	6033      	str	r3, [r6, #0]
 800aac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aac8:	4607      	mov	r7, r0
 800aaca:	460c      	mov	r4, r1
 800aacc:	b10a      	cbz	r2, 800aad2 <_printf_common+0x26>
 800aace:	3301      	adds	r3, #1
 800aad0:	6033      	str	r3, [r6, #0]
 800aad2:	6823      	ldr	r3, [r4, #0]
 800aad4:	0699      	lsls	r1, r3, #26
 800aad6:	bf42      	ittt	mi
 800aad8:	6833      	ldrmi	r3, [r6, #0]
 800aada:	3302      	addmi	r3, #2
 800aadc:	6033      	strmi	r3, [r6, #0]
 800aade:	6825      	ldr	r5, [r4, #0]
 800aae0:	f015 0506 	ands.w	r5, r5, #6
 800aae4:	d106      	bne.n	800aaf4 <_printf_common+0x48>
 800aae6:	f104 0a19 	add.w	sl, r4, #25
 800aaea:	68e3      	ldr	r3, [r4, #12]
 800aaec:	6832      	ldr	r2, [r6, #0]
 800aaee:	1a9b      	subs	r3, r3, r2
 800aaf0:	42ab      	cmp	r3, r5
 800aaf2:	dc26      	bgt.n	800ab42 <_printf_common+0x96>
 800aaf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aaf8:	1e13      	subs	r3, r2, #0
 800aafa:	6822      	ldr	r2, [r4, #0]
 800aafc:	bf18      	it	ne
 800aafe:	2301      	movne	r3, #1
 800ab00:	0692      	lsls	r2, r2, #26
 800ab02:	d42b      	bmi.n	800ab5c <_printf_common+0xb0>
 800ab04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab08:	4649      	mov	r1, r9
 800ab0a:	4638      	mov	r0, r7
 800ab0c:	47c0      	blx	r8
 800ab0e:	3001      	adds	r0, #1
 800ab10:	d01e      	beq.n	800ab50 <_printf_common+0xa4>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	6922      	ldr	r2, [r4, #16]
 800ab16:	f003 0306 	and.w	r3, r3, #6
 800ab1a:	2b04      	cmp	r3, #4
 800ab1c:	bf02      	ittt	eq
 800ab1e:	68e5      	ldreq	r5, [r4, #12]
 800ab20:	6833      	ldreq	r3, [r6, #0]
 800ab22:	1aed      	subeq	r5, r5, r3
 800ab24:	68a3      	ldr	r3, [r4, #8]
 800ab26:	bf0c      	ite	eq
 800ab28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab2c:	2500      	movne	r5, #0
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	bfc4      	itt	gt
 800ab32:	1a9b      	subgt	r3, r3, r2
 800ab34:	18ed      	addgt	r5, r5, r3
 800ab36:	2600      	movs	r6, #0
 800ab38:	341a      	adds	r4, #26
 800ab3a:	42b5      	cmp	r5, r6
 800ab3c:	d11a      	bne.n	800ab74 <_printf_common+0xc8>
 800ab3e:	2000      	movs	r0, #0
 800ab40:	e008      	b.n	800ab54 <_printf_common+0xa8>
 800ab42:	2301      	movs	r3, #1
 800ab44:	4652      	mov	r2, sl
 800ab46:	4649      	mov	r1, r9
 800ab48:	4638      	mov	r0, r7
 800ab4a:	47c0      	blx	r8
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	d103      	bne.n	800ab58 <_printf_common+0xac>
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab58:	3501      	adds	r5, #1
 800ab5a:	e7c6      	b.n	800aaea <_printf_common+0x3e>
 800ab5c:	18e1      	adds	r1, r4, r3
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	2030      	movs	r0, #48	; 0x30
 800ab62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab66:	4422      	add	r2, r4
 800ab68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab70:	3302      	adds	r3, #2
 800ab72:	e7c7      	b.n	800ab04 <_printf_common+0x58>
 800ab74:	2301      	movs	r3, #1
 800ab76:	4622      	mov	r2, r4
 800ab78:	4649      	mov	r1, r9
 800ab7a:	4638      	mov	r0, r7
 800ab7c:	47c0      	blx	r8
 800ab7e:	3001      	adds	r0, #1
 800ab80:	d0e6      	beq.n	800ab50 <_printf_common+0xa4>
 800ab82:	3601      	adds	r6, #1
 800ab84:	e7d9      	b.n	800ab3a <_printf_common+0x8e>
	...

0800ab88 <_printf_i>:
 800ab88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab8c:	7e0f      	ldrb	r7, [r1, #24]
 800ab8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab90:	2f78      	cmp	r7, #120	; 0x78
 800ab92:	4691      	mov	r9, r2
 800ab94:	4680      	mov	r8, r0
 800ab96:	460c      	mov	r4, r1
 800ab98:	469a      	mov	sl, r3
 800ab9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab9e:	d807      	bhi.n	800abb0 <_printf_i+0x28>
 800aba0:	2f62      	cmp	r7, #98	; 0x62
 800aba2:	d80a      	bhi.n	800abba <_printf_i+0x32>
 800aba4:	2f00      	cmp	r7, #0
 800aba6:	f000 80d4 	beq.w	800ad52 <_printf_i+0x1ca>
 800abaa:	2f58      	cmp	r7, #88	; 0x58
 800abac:	f000 80c0 	beq.w	800ad30 <_printf_i+0x1a8>
 800abb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abb8:	e03a      	b.n	800ac30 <_printf_i+0xa8>
 800abba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abbe:	2b15      	cmp	r3, #21
 800abc0:	d8f6      	bhi.n	800abb0 <_printf_i+0x28>
 800abc2:	a101      	add	r1, pc, #4	; (adr r1, 800abc8 <_printf_i+0x40>)
 800abc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abc8:	0800ac21 	.word	0x0800ac21
 800abcc:	0800ac35 	.word	0x0800ac35
 800abd0:	0800abb1 	.word	0x0800abb1
 800abd4:	0800abb1 	.word	0x0800abb1
 800abd8:	0800abb1 	.word	0x0800abb1
 800abdc:	0800abb1 	.word	0x0800abb1
 800abe0:	0800ac35 	.word	0x0800ac35
 800abe4:	0800abb1 	.word	0x0800abb1
 800abe8:	0800abb1 	.word	0x0800abb1
 800abec:	0800abb1 	.word	0x0800abb1
 800abf0:	0800abb1 	.word	0x0800abb1
 800abf4:	0800ad39 	.word	0x0800ad39
 800abf8:	0800ac61 	.word	0x0800ac61
 800abfc:	0800acf3 	.word	0x0800acf3
 800ac00:	0800abb1 	.word	0x0800abb1
 800ac04:	0800abb1 	.word	0x0800abb1
 800ac08:	0800ad5b 	.word	0x0800ad5b
 800ac0c:	0800abb1 	.word	0x0800abb1
 800ac10:	0800ac61 	.word	0x0800ac61
 800ac14:	0800abb1 	.word	0x0800abb1
 800ac18:	0800abb1 	.word	0x0800abb1
 800ac1c:	0800acfb 	.word	0x0800acfb
 800ac20:	682b      	ldr	r3, [r5, #0]
 800ac22:	1d1a      	adds	r2, r3, #4
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	602a      	str	r2, [r5, #0]
 800ac28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac30:	2301      	movs	r3, #1
 800ac32:	e09f      	b.n	800ad74 <_printf_i+0x1ec>
 800ac34:	6820      	ldr	r0, [r4, #0]
 800ac36:	682b      	ldr	r3, [r5, #0]
 800ac38:	0607      	lsls	r7, r0, #24
 800ac3a:	f103 0104 	add.w	r1, r3, #4
 800ac3e:	6029      	str	r1, [r5, #0]
 800ac40:	d501      	bpl.n	800ac46 <_printf_i+0xbe>
 800ac42:	681e      	ldr	r6, [r3, #0]
 800ac44:	e003      	b.n	800ac4e <_printf_i+0xc6>
 800ac46:	0646      	lsls	r6, r0, #25
 800ac48:	d5fb      	bpl.n	800ac42 <_printf_i+0xba>
 800ac4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ac4e:	2e00      	cmp	r6, #0
 800ac50:	da03      	bge.n	800ac5a <_printf_i+0xd2>
 800ac52:	232d      	movs	r3, #45	; 0x2d
 800ac54:	4276      	negs	r6, r6
 800ac56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac5a:	485a      	ldr	r0, [pc, #360]	; (800adc4 <_printf_i+0x23c>)
 800ac5c:	230a      	movs	r3, #10
 800ac5e:	e012      	b.n	800ac86 <_printf_i+0xfe>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	6820      	ldr	r0, [r4, #0]
 800ac64:	1d19      	adds	r1, r3, #4
 800ac66:	6029      	str	r1, [r5, #0]
 800ac68:	0605      	lsls	r5, r0, #24
 800ac6a:	d501      	bpl.n	800ac70 <_printf_i+0xe8>
 800ac6c:	681e      	ldr	r6, [r3, #0]
 800ac6e:	e002      	b.n	800ac76 <_printf_i+0xee>
 800ac70:	0641      	lsls	r1, r0, #25
 800ac72:	d5fb      	bpl.n	800ac6c <_printf_i+0xe4>
 800ac74:	881e      	ldrh	r6, [r3, #0]
 800ac76:	4853      	ldr	r0, [pc, #332]	; (800adc4 <_printf_i+0x23c>)
 800ac78:	2f6f      	cmp	r7, #111	; 0x6f
 800ac7a:	bf0c      	ite	eq
 800ac7c:	2308      	moveq	r3, #8
 800ac7e:	230a      	movne	r3, #10
 800ac80:	2100      	movs	r1, #0
 800ac82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac86:	6865      	ldr	r5, [r4, #4]
 800ac88:	60a5      	str	r5, [r4, #8]
 800ac8a:	2d00      	cmp	r5, #0
 800ac8c:	bfa2      	ittt	ge
 800ac8e:	6821      	ldrge	r1, [r4, #0]
 800ac90:	f021 0104 	bicge.w	r1, r1, #4
 800ac94:	6021      	strge	r1, [r4, #0]
 800ac96:	b90e      	cbnz	r6, 800ac9c <_printf_i+0x114>
 800ac98:	2d00      	cmp	r5, #0
 800ac9a:	d04b      	beq.n	800ad34 <_printf_i+0x1ac>
 800ac9c:	4615      	mov	r5, r2
 800ac9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800aca2:	fb03 6711 	mls	r7, r3, r1, r6
 800aca6:	5dc7      	ldrb	r7, [r0, r7]
 800aca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acac:	4637      	mov	r7, r6
 800acae:	42bb      	cmp	r3, r7
 800acb0:	460e      	mov	r6, r1
 800acb2:	d9f4      	bls.n	800ac9e <_printf_i+0x116>
 800acb4:	2b08      	cmp	r3, #8
 800acb6:	d10b      	bne.n	800acd0 <_printf_i+0x148>
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	07de      	lsls	r6, r3, #31
 800acbc:	d508      	bpl.n	800acd0 <_printf_i+0x148>
 800acbe:	6923      	ldr	r3, [r4, #16]
 800acc0:	6861      	ldr	r1, [r4, #4]
 800acc2:	4299      	cmp	r1, r3
 800acc4:	bfde      	ittt	le
 800acc6:	2330      	movle	r3, #48	; 0x30
 800acc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800accc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800acd0:	1b52      	subs	r2, r2, r5
 800acd2:	6122      	str	r2, [r4, #16]
 800acd4:	f8cd a000 	str.w	sl, [sp]
 800acd8:	464b      	mov	r3, r9
 800acda:	aa03      	add	r2, sp, #12
 800acdc:	4621      	mov	r1, r4
 800acde:	4640      	mov	r0, r8
 800ace0:	f7ff fee4 	bl	800aaac <_printf_common>
 800ace4:	3001      	adds	r0, #1
 800ace6:	d14a      	bne.n	800ad7e <_printf_i+0x1f6>
 800ace8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acec:	b004      	add	sp, #16
 800acee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	f043 0320 	orr.w	r3, r3, #32
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	4833      	ldr	r0, [pc, #204]	; (800adc8 <_printf_i+0x240>)
 800acfc:	2778      	movs	r7, #120	; 0x78
 800acfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad02:	6823      	ldr	r3, [r4, #0]
 800ad04:	6829      	ldr	r1, [r5, #0]
 800ad06:	061f      	lsls	r7, r3, #24
 800ad08:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad0c:	d402      	bmi.n	800ad14 <_printf_i+0x18c>
 800ad0e:	065f      	lsls	r7, r3, #25
 800ad10:	bf48      	it	mi
 800ad12:	b2b6      	uxthmi	r6, r6
 800ad14:	07df      	lsls	r7, r3, #31
 800ad16:	bf48      	it	mi
 800ad18:	f043 0320 	orrmi.w	r3, r3, #32
 800ad1c:	6029      	str	r1, [r5, #0]
 800ad1e:	bf48      	it	mi
 800ad20:	6023      	strmi	r3, [r4, #0]
 800ad22:	b91e      	cbnz	r6, 800ad2c <_printf_i+0x1a4>
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	f023 0320 	bic.w	r3, r3, #32
 800ad2a:	6023      	str	r3, [r4, #0]
 800ad2c:	2310      	movs	r3, #16
 800ad2e:	e7a7      	b.n	800ac80 <_printf_i+0xf8>
 800ad30:	4824      	ldr	r0, [pc, #144]	; (800adc4 <_printf_i+0x23c>)
 800ad32:	e7e4      	b.n	800acfe <_printf_i+0x176>
 800ad34:	4615      	mov	r5, r2
 800ad36:	e7bd      	b.n	800acb4 <_printf_i+0x12c>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	6826      	ldr	r6, [r4, #0]
 800ad3c:	6961      	ldr	r1, [r4, #20]
 800ad3e:	1d18      	adds	r0, r3, #4
 800ad40:	6028      	str	r0, [r5, #0]
 800ad42:	0635      	lsls	r5, r6, #24
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	d501      	bpl.n	800ad4c <_printf_i+0x1c4>
 800ad48:	6019      	str	r1, [r3, #0]
 800ad4a:	e002      	b.n	800ad52 <_printf_i+0x1ca>
 800ad4c:	0670      	lsls	r0, r6, #25
 800ad4e:	d5fb      	bpl.n	800ad48 <_printf_i+0x1c0>
 800ad50:	8019      	strh	r1, [r3, #0]
 800ad52:	2300      	movs	r3, #0
 800ad54:	6123      	str	r3, [r4, #16]
 800ad56:	4615      	mov	r5, r2
 800ad58:	e7bc      	b.n	800acd4 <_printf_i+0x14c>
 800ad5a:	682b      	ldr	r3, [r5, #0]
 800ad5c:	1d1a      	adds	r2, r3, #4
 800ad5e:	602a      	str	r2, [r5, #0]
 800ad60:	681d      	ldr	r5, [r3, #0]
 800ad62:	6862      	ldr	r2, [r4, #4]
 800ad64:	2100      	movs	r1, #0
 800ad66:	4628      	mov	r0, r5
 800ad68:	f7f5 fa0a 	bl	8000180 <memchr>
 800ad6c:	b108      	cbz	r0, 800ad72 <_printf_i+0x1ea>
 800ad6e:	1b40      	subs	r0, r0, r5
 800ad70:	6060      	str	r0, [r4, #4]
 800ad72:	6863      	ldr	r3, [r4, #4]
 800ad74:	6123      	str	r3, [r4, #16]
 800ad76:	2300      	movs	r3, #0
 800ad78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad7c:	e7aa      	b.n	800acd4 <_printf_i+0x14c>
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	462a      	mov	r2, r5
 800ad82:	4649      	mov	r1, r9
 800ad84:	4640      	mov	r0, r8
 800ad86:	47d0      	blx	sl
 800ad88:	3001      	adds	r0, #1
 800ad8a:	d0ad      	beq.n	800ace8 <_printf_i+0x160>
 800ad8c:	6823      	ldr	r3, [r4, #0]
 800ad8e:	079b      	lsls	r3, r3, #30
 800ad90:	d413      	bmi.n	800adba <_printf_i+0x232>
 800ad92:	68e0      	ldr	r0, [r4, #12]
 800ad94:	9b03      	ldr	r3, [sp, #12]
 800ad96:	4298      	cmp	r0, r3
 800ad98:	bfb8      	it	lt
 800ad9a:	4618      	movlt	r0, r3
 800ad9c:	e7a6      	b.n	800acec <_printf_i+0x164>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	4632      	mov	r2, r6
 800ada2:	4649      	mov	r1, r9
 800ada4:	4640      	mov	r0, r8
 800ada6:	47d0      	blx	sl
 800ada8:	3001      	adds	r0, #1
 800adaa:	d09d      	beq.n	800ace8 <_printf_i+0x160>
 800adac:	3501      	adds	r5, #1
 800adae:	68e3      	ldr	r3, [r4, #12]
 800adb0:	9903      	ldr	r1, [sp, #12]
 800adb2:	1a5b      	subs	r3, r3, r1
 800adb4:	42ab      	cmp	r3, r5
 800adb6:	dcf2      	bgt.n	800ad9e <_printf_i+0x216>
 800adb8:	e7eb      	b.n	800ad92 <_printf_i+0x20a>
 800adba:	2500      	movs	r5, #0
 800adbc:	f104 0619 	add.w	r6, r4, #25
 800adc0:	e7f5      	b.n	800adae <_printf_i+0x226>
 800adc2:	bf00      	nop
 800adc4:	0800b65d 	.word	0x0800b65d
 800adc8:	0800b66e 	.word	0x0800b66e

0800adcc <__malloc_lock>:
 800adcc:	4801      	ldr	r0, [pc, #4]	; (800add4 <__malloc_lock+0x8>)
 800adce:	f7ff bc65 	b.w	800a69c <__retarget_lock_acquire_recursive>
 800add2:	bf00      	nop
 800add4:	200007e0 	.word	0x200007e0

0800add8 <__malloc_unlock>:
 800add8:	4801      	ldr	r0, [pc, #4]	; (800ade0 <__malloc_unlock+0x8>)
 800adda:	f7ff bc60 	b.w	800a69e <__retarget_lock_release_recursive>
 800adde:	bf00      	nop
 800ade0:	200007e0 	.word	0x200007e0

0800ade4 <_realloc_r>:
 800ade4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade8:	4680      	mov	r8, r0
 800adea:	4614      	mov	r4, r2
 800adec:	460e      	mov	r6, r1
 800adee:	b921      	cbnz	r1, 800adfa <_realloc_r+0x16>
 800adf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adf4:	4611      	mov	r1, r2
 800adf6:	f7ff bdd9 	b.w	800a9ac <_malloc_r>
 800adfa:	b92a      	cbnz	r2, 800ae08 <_realloc_r+0x24>
 800adfc:	f000 f84c 	bl	800ae98 <_free_r>
 800ae00:	4625      	mov	r5, r4
 800ae02:	4628      	mov	r0, r5
 800ae04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae08:	f000 f890 	bl	800af2c <_malloc_usable_size_r>
 800ae0c:	4284      	cmp	r4, r0
 800ae0e:	4607      	mov	r7, r0
 800ae10:	d802      	bhi.n	800ae18 <_realloc_r+0x34>
 800ae12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae16:	d812      	bhi.n	800ae3e <_realloc_r+0x5a>
 800ae18:	4621      	mov	r1, r4
 800ae1a:	4640      	mov	r0, r8
 800ae1c:	f7ff fdc6 	bl	800a9ac <_malloc_r>
 800ae20:	4605      	mov	r5, r0
 800ae22:	2800      	cmp	r0, #0
 800ae24:	d0ed      	beq.n	800ae02 <_realloc_r+0x1e>
 800ae26:	42bc      	cmp	r4, r7
 800ae28:	4622      	mov	r2, r4
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	bf28      	it	cs
 800ae2e:	463a      	movcs	r2, r7
 800ae30:	f7ff fc36 	bl	800a6a0 <memcpy>
 800ae34:	4631      	mov	r1, r6
 800ae36:	4640      	mov	r0, r8
 800ae38:	f000 f82e 	bl	800ae98 <_free_r>
 800ae3c:	e7e1      	b.n	800ae02 <_realloc_r+0x1e>
 800ae3e:	4635      	mov	r5, r6
 800ae40:	e7df      	b.n	800ae02 <_realloc_r+0x1e>

0800ae42 <memmove>:
 800ae42:	4288      	cmp	r0, r1
 800ae44:	b510      	push	{r4, lr}
 800ae46:	eb01 0402 	add.w	r4, r1, r2
 800ae4a:	d902      	bls.n	800ae52 <memmove+0x10>
 800ae4c:	4284      	cmp	r4, r0
 800ae4e:	4623      	mov	r3, r4
 800ae50:	d807      	bhi.n	800ae62 <memmove+0x20>
 800ae52:	1e43      	subs	r3, r0, #1
 800ae54:	42a1      	cmp	r1, r4
 800ae56:	d008      	beq.n	800ae6a <memmove+0x28>
 800ae58:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae60:	e7f8      	b.n	800ae54 <memmove+0x12>
 800ae62:	4402      	add	r2, r0
 800ae64:	4601      	mov	r1, r0
 800ae66:	428a      	cmp	r2, r1
 800ae68:	d100      	bne.n	800ae6c <memmove+0x2a>
 800ae6a:	bd10      	pop	{r4, pc}
 800ae6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae70:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae74:	e7f7      	b.n	800ae66 <memmove+0x24>
	...

0800ae78 <_sbrk_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	4d06      	ldr	r5, [pc, #24]	; (800ae94 <_sbrk_r+0x1c>)
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	4604      	mov	r4, r0
 800ae80:	4608      	mov	r0, r1
 800ae82:	602b      	str	r3, [r5, #0]
 800ae84:	f7f6 fcca 	bl	800181c <_sbrk>
 800ae88:	1c43      	adds	r3, r0, #1
 800ae8a:	d102      	bne.n	800ae92 <_sbrk_r+0x1a>
 800ae8c:	682b      	ldr	r3, [r5, #0]
 800ae8e:	b103      	cbz	r3, 800ae92 <_sbrk_r+0x1a>
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	bd38      	pop	{r3, r4, r5, pc}
 800ae94:	200007ec 	.word	0x200007ec

0800ae98 <_free_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	2900      	cmp	r1, #0
 800ae9e:	d041      	beq.n	800af24 <_free_r+0x8c>
 800aea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aea4:	1f0c      	subs	r4, r1, #4
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	bfb8      	it	lt
 800aeaa:	18e4      	addlt	r4, r4, r3
 800aeac:	f7ff ff8e 	bl	800adcc <__malloc_lock>
 800aeb0:	4a1d      	ldr	r2, [pc, #116]	; (800af28 <_free_r+0x90>)
 800aeb2:	6813      	ldr	r3, [r2, #0]
 800aeb4:	b933      	cbnz	r3, 800aec4 <_free_r+0x2c>
 800aeb6:	6063      	str	r3, [r4, #4]
 800aeb8:	6014      	str	r4, [r2, #0]
 800aeba:	4628      	mov	r0, r5
 800aebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aec0:	f7ff bf8a 	b.w	800add8 <__malloc_unlock>
 800aec4:	42a3      	cmp	r3, r4
 800aec6:	d908      	bls.n	800aeda <_free_r+0x42>
 800aec8:	6820      	ldr	r0, [r4, #0]
 800aeca:	1821      	adds	r1, r4, r0
 800aecc:	428b      	cmp	r3, r1
 800aece:	bf01      	itttt	eq
 800aed0:	6819      	ldreq	r1, [r3, #0]
 800aed2:	685b      	ldreq	r3, [r3, #4]
 800aed4:	1809      	addeq	r1, r1, r0
 800aed6:	6021      	streq	r1, [r4, #0]
 800aed8:	e7ed      	b.n	800aeb6 <_free_r+0x1e>
 800aeda:	461a      	mov	r2, r3
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	b10b      	cbz	r3, 800aee4 <_free_r+0x4c>
 800aee0:	42a3      	cmp	r3, r4
 800aee2:	d9fa      	bls.n	800aeda <_free_r+0x42>
 800aee4:	6811      	ldr	r1, [r2, #0]
 800aee6:	1850      	adds	r0, r2, r1
 800aee8:	42a0      	cmp	r0, r4
 800aeea:	d10b      	bne.n	800af04 <_free_r+0x6c>
 800aeec:	6820      	ldr	r0, [r4, #0]
 800aeee:	4401      	add	r1, r0
 800aef0:	1850      	adds	r0, r2, r1
 800aef2:	4283      	cmp	r3, r0
 800aef4:	6011      	str	r1, [r2, #0]
 800aef6:	d1e0      	bne.n	800aeba <_free_r+0x22>
 800aef8:	6818      	ldr	r0, [r3, #0]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	6053      	str	r3, [r2, #4]
 800aefe:	4408      	add	r0, r1
 800af00:	6010      	str	r0, [r2, #0]
 800af02:	e7da      	b.n	800aeba <_free_r+0x22>
 800af04:	d902      	bls.n	800af0c <_free_r+0x74>
 800af06:	230c      	movs	r3, #12
 800af08:	602b      	str	r3, [r5, #0]
 800af0a:	e7d6      	b.n	800aeba <_free_r+0x22>
 800af0c:	6820      	ldr	r0, [r4, #0]
 800af0e:	1821      	adds	r1, r4, r0
 800af10:	428b      	cmp	r3, r1
 800af12:	bf04      	itt	eq
 800af14:	6819      	ldreq	r1, [r3, #0]
 800af16:	685b      	ldreq	r3, [r3, #4]
 800af18:	6063      	str	r3, [r4, #4]
 800af1a:	bf04      	itt	eq
 800af1c:	1809      	addeq	r1, r1, r0
 800af1e:	6021      	streq	r1, [r4, #0]
 800af20:	6054      	str	r4, [r2, #4]
 800af22:	e7ca      	b.n	800aeba <_free_r+0x22>
 800af24:	bd38      	pop	{r3, r4, r5, pc}
 800af26:	bf00      	nop
 800af28:	200007e4 	.word	0x200007e4

0800af2c <_malloc_usable_size_r>:
 800af2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af30:	1f18      	subs	r0, r3, #4
 800af32:	2b00      	cmp	r3, #0
 800af34:	bfbc      	itt	lt
 800af36:	580b      	ldrlt	r3, [r1, r0]
 800af38:	18c0      	addlt	r0, r0, r3
 800af3a:	4770      	bx	lr

0800af3c <_init>:
 800af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3e:	bf00      	nop
 800af40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af42:	bc08      	pop	{r3}
 800af44:	469e      	mov	lr, r3
 800af46:	4770      	bx	lr

0800af48 <_fini>:
 800af48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4a:	bf00      	nop
 800af4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4e:	bc08      	pop	{r3}
 800af50:	469e      	mov	lr, r3
 800af52:	4770      	bx	lr
