
Ground_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae58  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0800af98  0800af98  0001af98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6c4  0800b6c4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6c4  0800b6c4  0001b6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6cc  0800b6cc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6cc  0800b6cc  0001b6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6d0  0800b6d0  0001b6d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800b6d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  20000060  0800b734  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  0800b734  000207f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021934  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cfc  00000000  00000000  00041a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001eb8  00000000  00000000  00046700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001776  00000000  00000000  000485b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022165  00000000  00000000  00049d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021fce  00000000  00000000  0006be93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c443d  00000000  00000000  0008de61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000083a0  00000000  00000000  001522a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0015a640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	0800af80 	.word	0x0800af80

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	0800af80 	.word	0x0800af80

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <getHDLCPacket>:
extern uint8_t temp_tx_buffer[100];

uint8_t ax_buffer[100] = { 0 };
uint8_t ax_buff_stuffed[100] = { 0 };

void getHDLCPacket(uint8_t *data, uint8_t data_len) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	70fb      	strb	r3, [r7, #3]
//		myDebug("%02x ", data[j]);
//	}
//	myDebug("\r\n");
//	myDebug("length of stuffed_packet: %d\r\n", data_len);

	uint16_t crc = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	81fb      	strh	r3, [r7, #14]
	crc = calculateCRC_CCITT_AX25(data, data_len);
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	4619      	mov	r1, r3
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f000 f935 	bl	80007a0 <calculateCRC_CCITT_AX25>
 8000536:	4603      	mov	r3, r0
 8000538:	81fb      	strh	r3, [r7, #14]

	temp_tx_buffer[0] = 0x7e;
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <getHDLCPacket+0xa8>)
 800053c:	227e      	movs	r2, #126	; 0x7e
 800053e:	701a      	strb	r2, [r3, #0]

	int i = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	e00e      	b.n	8000568 <getHDLCPacket+0x4c>
		temp_tx_buffer[i] = data[k];
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4413      	add	r3, r2
 8000550:	7819      	ldrb	r1, [r3, #0]
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <getHDLCPacket+0xa8>)
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	4413      	add	r3, r2
 8000558:	460a      	mov	r2, r1
 800055a:	701a      	strb	r2, [r3, #0]
		i++;
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3301      	adds	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	3301      	adds	r3, #1
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	693a      	ldr	r2, [r7, #16]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbec      	blt.n	800054a <getHDLCPacket+0x2e>
	}

	// Store CRC result in the packet array (from packet[1] to end of for loop)
	temp_tx_buffer[i] = (crc >> 8) & 0xFF; // Most significant byte
 8000570:	89fb      	ldrh	r3, [r7, #14]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	b2d9      	uxtb	r1, r3
 8000578:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <getHDLCPacket+0xa8>)
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	4413      	add	r3, r2
 800057e:	460a      	mov	r2, r1
 8000580:	701a      	strb	r2, [r3, #0]
	i++;
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	3301      	adds	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
	temp_tx_buffer[i] = crc & 0xFF;        // Least significant byte
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	b2d9      	uxtb	r1, r3
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <getHDLCPacket+0xa8>)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	4413      	add	r3, r2
 8000592:	460a      	mov	r2, r1
 8000594:	701a      	strb	r2, [r3, #0]
	i++;
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3301      	adds	r3, #1
 800059a:	617b      	str	r3, [r7, #20]

	temp_tx_buffer[i] = 0x7e;
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <getHDLCPacket+0xa8>)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	4413      	add	r3, r2
 80005a2:	227e      	movs	r2, #126	; 0x7e
 80005a4:	701a      	strb	r2, [r3, #0]
//		myDebug("%02x ", temp_tx_buffer[j]);
//	}
//	myDebug("\r\n");
//	myDebug("size of tx_buffer = %d\r\n", i + 1);

	memset(ax_buffer, '\0', sizeof(ax_buffer));
 80005a6:	2264      	movs	r2, #100	; 0x64
 80005a8:	2100      	movs	r1, #0
 80005aa:	4807      	ldr	r0, [pc, #28]	; (80005c8 <getHDLCPacket+0xac>)
 80005ac:	f00a f866 	bl	800a67c <memset>
	memset(ax_buff_stuffed, '\0', sizeof(ax_buff_stuffed));
 80005b0:	2264      	movs	r2, #100	; 0x64
 80005b2:	2100      	movs	r1, #0
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <getHDLCPacket+0xb0>)
 80005b6:	f00a f861 	bl	800a67c <memset>

}
 80005ba:	bf00      	nop
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200001e8 	.word	0x200001e8
 80005c8:	2000007c 	.word	0x2000007c
 80005cc:	200000e0 	.word	0x200000e0

080005d0 <getAX25Packet>:

void getAX25Packet(uint8_t *infoField, uint8_t size) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]

	//destination field   9N2SI -0
	ax_buffer[0] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 80005dc:	4b2b      	ldr	r3, [pc, #172]	; (800068c <getAX25Packet+0xbc>)
 80005de:	2272      	movs	r2, #114	; 0x72
 80005e0:	701a      	strb	r2, [r3, #0]
	ax_buffer[1] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 80005e2:	4b2a      	ldr	r3, [pc, #168]	; (800068c <getAX25Packet+0xbc>)
 80005e4:	229c      	movs	r2, #156	; 0x9c
 80005e6:	705a      	strb	r2, [r3, #1]
	ax_buffer[2] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <getAX25Packet+0xbc>)
 80005ea:	2264      	movs	r2, #100	; 0x64
 80005ec:	709a      	strb	r2, [r3, #2]
	ax_buffer[3] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 80005ee:	4b27      	ldr	r3, [pc, #156]	; (800068c <getAX25Packet+0xbc>)
 80005f0:	22a6      	movs	r2, #166	; 0xa6
 80005f2:	70da      	strb	r2, [r3, #3]
	ax_buffer[4] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <getAX25Packet+0xbc>)
 80005f6:	2264      	movs	r2, #100	; 0x64
 80005f8:	711a      	strb	r2, [r3, #4]
	ax_buffer[5] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 80005fa:	4b24      	ldr	r3, [pc, #144]	; (800068c <getAX25Packet+0xbc>)
 80005fc:	2240      	movs	r2, #64	; 0x40
 80005fe:	715a      	strb	r2, [r3, #5]
	ax_buffer[6] = 0xE0; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <getAX25Packet+0xbc>)
 8000602:	22e0      	movs	r2, #224	; 0xe0
 8000604:	719a      	strb	r2, [r3, #6]

	//source field   9N2SI -0
	ax_buffer[7] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <getAX25Packet+0xbc>)
 8000608:	2272      	movs	r2, #114	; 0x72
 800060a:	71da      	strb	r2, [r3, #7]
	ax_buffer[8] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <getAX25Packet+0xbc>)
 800060e:	229c      	movs	r2, #156	; 0x9c
 8000610:	721a      	strb	r2, [r3, #8]
	ax_buffer[9] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <getAX25Packet+0xbc>)
 8000614:	2264      	movs	r2, #100	; 0x64
 8000616:	725a      	strb	r2, [r3, #9]
	ax_buffer[10] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <getAX25Packet+0xbc>)
 800061a:	22a6      	movs	r2, #166	; 0xa6
 800061c:	729a      	strb	r2, [r3, #10]
	ax_buffer[11] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <getAX25Packet+0xbc>)
 8000620:	2264      	movs	r2, #100	; 0x64
 8000622:	72da      	strb	r2, [r3, #11]
	ax_buffer[12] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <getAX25Packet+0xbc>)
 8000626:	2240      	movs	r2, #64	; 0x40
 8000628:	731a      	strb	r2, [r3, #12]
	ax_buffer[13] = 0x61; //	0b011SSID1, SSID->0000 and LSB is set to 1 if this is the last address, HEX->0x61
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <getAX25Packet+0xbc>)
 800062c:	2261      	movs	r2, #97	; 0x61
 800062e:	735a      	strb	r2, [r3, #13]

	//control bit
	ax_buffer[14] = 0x03; //  Unnumbered Information Frame, AX.25 is always 0b00000011 i.e 0x03 in HEX
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <getAX25Packet+0xbc>)
 8000632:	2203      	movs	r2, #3
 8000634:	739a      	strb	r2, [r3, #14]

	//protocol identifier
	ax_buffer[15] = 0xF0; //	No Layer-3 Implemented so, 0b11110000 i.e 0xF0 in HEX
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <getAX25Packet+0xbc>)
 8000638:	22f0      	movs	r2, #240	; 0xf0
 800063a:	73da      	strb	r2, [r3, #15]

	int i = 16;
 800063c:	2310      	movs	r3, #16
 800063e:	617b      	str	r3, [r7, #20]

	for (int k = 0; k < size; k++) {
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	e00e      	b.n	8000664 <getAX25Packet+0x94>
		ax_buffer[i] = infoField[k];
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	7819      	ldrb	r1, [r3, #0]
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <getAX25Packet+0xbc>)
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < size; k++) {
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	3301      	adds	r3, #1
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbec      	blt.n	8000646 <getAX25Packet+0x76>
//		myDebug("%02x ", ax_buffer[j]);
//	}
//	myDebug("\r\n");

	// Bit Stuffing
	int stuffed_size = bit_stuffing(ax_buffer, ax_buff_stuffed, i);
 800066c:	697a      	ldr	r2, [r7, #20]
 800066e:	4908      	ldr	r1, [pc, #32]	; (8000690 <getAX25Packet+0xc0>)
 8000670:	4806      	ldr	r0, [pc, #24]	; (800068c <getAX25Packet+0xbc>)
 8000672:	f000 f8d4 	bl	800081e <bit_stuffing>
 8000676:	60f8      	str	r0, [r7, #12]
//		myDebug("%02x ", tem[j]);
//	}
//	myDebug("\r\n");
//	myDebug("length of de-stuffed_packet: %d\r\n", destuffed_size);

	getHDLCPacket(ax_buff_stuffed, stuffed_size);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	4619      	mov	r1, r3
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <getAX25Packet+0xc0>)
 8000680:	f7ff ff4c 	bl	800051c <getHDLCPacket>
}
 8000684:	bf00      	nop
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000007c 	.word	0x2000007c
 8000690:	200000e0 	.word	0x200000e0

08000694 <myDebug>:
 *      Author: sajanduwal
 */

#include "com_debug.h"

void myDebug(const char *fmt, ...) {
 8000694:	b40f      	push	{r0, r1, r2, r3}
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	2164      	movs	r1, #100	; 0x64
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <myDebug+0x40>)
 80006aa:	f009 ffd9 	bl	800a660 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 80006ae:	4809      	ldr	r0, [pc, #36]	; (80006d4 <myDebug+0x40>)
 80006b0:	f000 f814 	bl	80006dc <bufferSize>
 80006b4:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	4905      	ldr	r1, [pc, #20]	; (80006d4 <myDebug+0x40>)
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <myDebug+0x44>)
 80006c2:	f004 fe51 	bl	8005368 <HAL_UART_Transmit>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006d0:	b004      	add	sp, #16
 80006d2:	4770      	bx	lr
 80006d4:	20000144 	.word	0x20000144
 80006d8:	20000390 	.word	0x20000390

080006dc <bufferSize>:

int bufferSize(char *buffer) {
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80006e8:	e002      	b.n	80006f0 <bufferSize+0x14>
		i++;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f6      	bne.n	80006ea <bufferSize+0xe>
	return i;
 80006fc:	68fb      	ldr	r3, [r7, #12]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <delay_us>:

void delay_us(uint32_t us) {
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <delay_us+0x30>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000718:	e002      	b.n	8000720 <delay_us+0x18>
		delay_counter_disp++;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	3301      	adds	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <delay_us+0x30>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f6      	bhi.n	800071a <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 800072c:	bf00      	nop
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000340 	.word	0x20000340

0800073c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800074a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4313      	orrs	r3, r2
 8000752:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000760:	68fb      	ldr	r3, [r7, #12]
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000770:	2004      	movs	r0, #4
 8000772:	f7ff ffe3 	bl	800073c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff ffe0 	bl	800073c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	200b      	movs	r0, #11
 8000782:	f001 fc44 	bl	800200e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000786:	200b      	movs	r0, #11
 8000788:	f001 fc5b 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	200c      	movs	r0, #12
 8000792:	f001 fc3c 	bl	800200e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000796:	200c      	movs	r0, #12
 8000798:	f001 fc53 	bl	8002042 <HAL_NVIC_EnableIRQ>

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <calculateCRC_CCITT_AX25>:


#include "error_handler.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 80007a0:	b480      	push	{r7}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 80007aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ae:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 80007b0:	f241 0321 	movw	r3, #4129	; 0x1021
 80007b4:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	e026      	b.n	800080a <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007cc:	4053      	eors	r3, r2
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e012      	b.n	80007fe <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 80007d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	da08      	bge.n	80007f2 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 80007e0:	8afb      	ldrh	r3, [r7, #22]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007ea:	4053      	eors	r3, r2
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	82fb      	strh	r3, [r7, #22]
 80007f0:	e002      	b.n	80007f8 <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 80007f2:	8afb      	ldrh	r3, [r7, #22]
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b07      	cmp	r3, #7
 8000802:	dde9      	ble.n	80007d8 <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	3301      	adds	r3, #1
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	429a      	cmp	r2, r3
 8000810:	d3d4      	bcc.n	80007bc <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 8000812:	8afb      	ldrh	r3, [r7, #22]
}
 8000814:	4618      	mov	r0, r3
 8000816:	371c      	adds	r7, #28
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <bit_stuffing>:
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
	return crcReg;
}

int bit_stuffing(uint8_t *data, uint8_t *output_data, int length) {
 800081e:	b480      	push	{r7}
 8000820:	b08f      	sub	sp, #60	; 0x3c
 8000822:	af00      	add	r7, sp, #0
 8000824:	60f8      	str	r0, [r7, #12]
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_count = 0; // Count of consecutive 1 bits
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t current_byte = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int bit_pos = 7;
 8000838:	2307      	movs	r3, #7
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
	int stuffed_size = 0; // Track size of output data after bit stuffing
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
	int bits_stuffed = 0; // Number of bits stuffed since last size increase
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]

	//myDebug("Error handler: before Bit stuffing \n");

	for (int i = 0; i < length; i++) {
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
 8000848:	e078      	b.n	800093c <bit_stuffing+0x11e>
		for (int bit = 7; bit >= 0; bit--) {
 800084a:	2307      	movs	r3, #7
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	e06f      	b.n	8000930 <bit_stuffing+0x112>
			int bit_val = (data[i] >> bit) & 1;
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	fa42 f303 	asr.w	r3, r2, r3
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	613b      	str	r3, [r7, #16]

//			myDebug("%d ", bit_val);

			current_byte |= (bit_val << bit_pos);
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	b25a      	sxtb	r2, r3
 8000870:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000874:	4313      	orrs	r3, r2
 8000876:	b25b      	sxtb	r3, r3
 8000878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			bit_pos--;
 800087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087e:	3b01      	subs	r3, #1
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28

			if (bit_val) {
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d02f      	beq.n	80008e8 <bit_stuffing+0xca>
				bit_count++;
 8000888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800088a:	3301      	adds	r3, #1
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
				if (bit_count == 5) {
 800088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000890:	2b05      	cmp	r3, #5
 8000892:	d12b      	bne.n	80008ec <bit_stuffing+0xce>
					// Insert a 0 bit after five consecutive 1s
					if (bit_pos < 0) {
 8000894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000896:	2b00      	cmp	r3, #0
 8000898:	da10      	bge.n	80008bc <bit_stuffing+0x9e>
						output_data[out_index++] = current_byte;
 800089a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089c:	1c5a      	adds	r2, r3, #1
 800089e:	637a      	str	r2, [r7, #52]	; 0x34
 80008a0:	461a      	mov	r2, r3
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	4413      	add	r3, r2
 80008a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80008aa:	701a      	strb	r2, [r3, #0]
						stuffed_size++;
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	3301      	adds	r3, #1
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
						current_byte = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						bit_pos = 7;
 80008b8:	2307      	movs	r3, #7
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					current_byte &= ~(1 << bit_pos);
 80008bc:	2201      	movs	r2, #1
 80008be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	b25a      	sxtb	r2, r3
 80008ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80008ce:	4013      	ands	r3, r2
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					bit_pos--;
 80008d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d8:	3b01      	subs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
					bits_stuffed++;
 80008dc:	6a3b      	ldr	r3, [r7, #32]
 80008de:	3301      	adds	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
					bit_count = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
 80008e6:	e001      	b.n	80008ec <bit_stuffing+0xce>
				}
			} else {
				bit_count = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (bit_pos < 0) {
 80008ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da10      	bge.n	8000914 <bit_stuffing+0xf6>
				output_data[out_index++] = current_byte;
 80008f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	637a      	str	r2, [r7, #52]	; 0x34
 80008f8:	461a      	mov	r2, r3
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	4413      	add	r3, r2
 80008fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000902:	701a      	strb	r2, [r3, #0]
				stuffed_size++;
 8000904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000906:	3301      	adds	r3, #1
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
				current_byte = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				bit_pos = 7;
 8000910:	2307      	movs	r3, #7
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			// Check if we've stuffed enough bits to increase size
			if (bits_stuffed >= 9 && bit_pos >= 0) {
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	2b08      	cmp	r3, #8
 8000918:	dd07      	ble.n	800092a <bit_stuffing+0x10c>
 800091a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091c:	2b00      	cmp	r3, #0
 800091e:	db04      	blt.n	800092a <bit_stuffing+0x10c>
				stuffed_size++;
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	3301      	adds	r3, #1
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
				bits_stuffed = 0; // Reset bits_stuffed after increasing size
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	3b01      	subs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	2b00      	cmp	r3, #0
 8000934:	da8c      	bge.n	8000850 <bit_stuffing+0x32>
	for (int i = 0; i < length; i++) {
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3301      	adds	r3, #1
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	69fa      	ldr	r2, [r7, #28]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	db82      	blt.n	800084a <bit_stuffing+0x2c>
			}
		}
	}
	//myDebug("\n");

	if (bit_pos < 7) {
 8000944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000946:	2b06      	cmp	r3, #6
 8000948:	dc0b      	bgt.n	8000962 <bit_stuffing+0x144>
		output_data[out_index++] = current_byte;
 800094a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	637a      	str	r2, [r7, #52]	; 0x34
 8000950:	461a      	mov	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	4413      	add	r3, r2
 8000956:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800095a:	701a      	strb	r2, [r3, #0]
		stuffed_size++;
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	3301      	adds	r3, #1
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
//		}
//	}
//	myDebug("\n");


	for(int i = 0; i < length; i++){
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	e00a      	b.n	800097e <bit_stuffing+0x160>
		output_data[i] = data[i];
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	441a      	add	r2, r3
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	440b      	add	r3, r1
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	3301      	adds	r3, #1
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	429a      	cmp	r2, r3
 8000984:	dbf0      	blt.n	8000968 <bit_stuffing+0x14a>
	}

	out_index = length;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	637b      	str	r3, [r7, #52]	; 0x34

	return out_index; // Return the size of output data after bit stuffing
 800098a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800098c:	4618      	mov	r0, r3
 800098e:	373c      	adds	r7, #60	; 0x3c
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr

08000996 <bit_destuffing>:

int bit_destuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000996:	b480      	push	{r7}
 8000998:	b08d      	sub	sp, #52	; 0x34
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
    int out_index = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    int bit_count = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t current_byte = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int bit_pos = 7;
 80009b0:	2307      	movs	r3, #7
 80009b2:	623b      	str	r3, [r7, #32]

    for (int i = 0; i < length; i++) {
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
 80009b8:	e052      	b.n	8000a60 <bit_destuffing+0xca>
        for (int bit = 7; bit >= 0; bit--) {
 80009ba:	2307      	movs	r3, #7
 80009bc:	61bb      	str	r3, [r7, #24]
 80009be:	e049      	b.n	8000a54 <bit_destuffing+0xbe>
            int bit_val = (data[i] >> bit) & 1;
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4413      	add	r3, r2
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	fa42 f303 	asr.w	r3, r2, r3
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	613b      	str	r3, [r7, #16]

            if (bit_val) {
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d011      	beq.n	8000a00 <bit_destuffing+0x6a>
                bit_count++;
 80009dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009de:	3301      	adds	r3, #1
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
                current_byte |= (bit_val << bit_pos);
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	6a3b      	ldr	r3, [r7, #32]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	b25a      	sxtb	r2, r3
 80009ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                bit_pos--;
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	623b      	str	r3, [r7, #32]
 80009fe:	e015      	b.n	8000a2c <bit_destuffing+0x96>
            } else {
                if (bit_count == 5) {
 8000a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a02:	2b05      	cmp	r3, #5
 8000a04:	d102      	bne.n	8000a0c <bit_destuffing+0x76>
                    // Skip this bit as it is a stuffed bit
                    bit_count = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
                    continue;
 8000a0a:	e020      	b.n	8000a4e <bit_destuffing+0xb8>
                } else {
                    bit_count = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
                    current_byte |= (bit_val << bit_pos);
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	b25a      	sxtb	r2, r3
 8000a1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    bit_pos--;
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
                }
            }

            if (bit_pos < 0) {
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	da0d      	bge.n	8000a4e <bit_destuffing+0xb8>
                output_data[out_index++] = current_byte;
 8000a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000a38:	461a      	mov	r2, r3
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000a42:	701a      	strb	r2, [r3, #0]
                current_byte = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                bit_pos = 7;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	623b      	str	r3, [r7, #32]
        for (int bit = 7; bit >= 0; bit--) {
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	dab2      	bge.n	80009c0 <bit_destuffing+0x2a>
    for (int i = 0; i < length; i++) {
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	69fa      	ldr	r2, [r7, #28]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dba8      	blt.n	80009ba <bit_destuffing+0x24>
            }
        }
    }

    // Ensure the last byte is written if it's partially filled
    if (bit_pos < 7) {
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	dc08      	bgt.n	8000a80 <bit_destuffing+0xea>
        output_data[out_index++] = current_byte;
 8000a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a70:	1c5a      	adds	r2, r3, #1
 8000a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000a74:	461a      	mov	r2, r3
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	4413      	add	r3, r2
 8000a7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000a7e:	701a      	strb	r2, [r3, #0]
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	for(int i = 0; i < length; i++){
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e00a      	b.n	8000a9c <bit_destuffing+0x106>
		output_data[i] = data[i];
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	441a      	add	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	68b9      	ldr	r1, [r7, #8]
 8000a90:	440b      	add	r3, r1
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf0      	blt.n	8000a86 <bit_destuffing+0xf0>
	}

	out_index = length;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c

    return out_index;
 8000aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3734      	adds	r7, #52	; 0x34
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff ffdb 	bl	8000ab4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2002      	movs	r0, #2
 8000b00:	f7ff ffd8 	bl	8000ab4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b04:	2004      	movs	r0, #4
 8000b06:	f7ff ffd5 	bl	8000ab4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000b10:	481f      	ldr	r0, [pc, #124]	; (8000b90 <MX_GPIO_Init+0xac>)
 8000b12:	f001 ff93 	bl	8002a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2138      	movs	r1, #56	; 0x38
 8000b1a:	481e      	ldr	r0, [pc, #120]	; (8000b94 <MX_GPIO_Init+0xb0>)
 8000b1c:	f001 ff8e 	bl	8002a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000b20:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000b24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	4619      	mov	r1, r3
 8000b36:	4816      	ldr	r0, [pc, #88]	; (8000b90 <MX_GPIO_Init+0xac>)
 8000b38:	f001 fe20 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000b3c:	2338      	movs	r3, #56	; 0x38
 8000b3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4810      	ldr	r0, [pc, #64]	; (8000b94 <MX_GPIO_Init+0xb0>)
 8000b52:	f001 fe13 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000b56:	2303      	movs	r3, #3
 8000b58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f001 fe06 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000b70:	2340      	movs	r3, #64	; 0x40
 8000b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_GPIO_Init+0xb0>)
 8000b84:	f001 fdfa 	bl	800277c <HAL_GPIO_Init>

}
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	48000400 	.word	0x48000400
 8000b94:	48000800 	.word	0x48000800

08000b98 <countsDataBetweenFlags>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int countsDataBetweenFlags(uint8_t *data, int data_length) {
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
	int found_first_7e = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
	int start_index = 0, end_index = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < data_length; i++) {
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	e013      	b.n	8000bdc <countsDataBetweenFlags+0x44>
		if (data[i] == 0x7e) {
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b7e      	cmp	r3, #126	; 0x7e
 8000bbe:	d10a      	bne.n	8000bd6 <countsDataBetweenFlags+0x3e>
			if (!found_first_7e) {
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d104      	bne.n	8000bd0 <countsDataBetweenFlags+0x38>
				found_first_7e = 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	617b      	str	r3, [r7, #20]
				start_index = i;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	e002      	b.n	8000bd6 <countsDataBetweenFlags+0x3e>
			} else {
				end_index = i;
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60fb      	str	r3, [r7, #12]
				break;
 8000bd4:	e006      	b.n	8000be4 <countsDataBetweenFlags+0x4c>
	for (int i = 0; i < data_length; i++) {
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbe7      	blt.n	8000bb4 <countsDataBetweenFlags+0x1c>
			}
		}
	}

	if (end_index > start_index) {
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dd04      	ble.n	8000bf6 <countsDataBetweenFlags+0x5e>
		return end_index - start_index + 1;
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	e001      	b.n	8000bfa <countsDataBetweenFlags+0x62>
	} else {
		return -1; // Return -1 if two 0x7E flags are not found
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	371c      	adds	r7, #28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <setPacketParams>:

void setPacketParams(uint8_t buffer_length) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <setPacketParams+0x50>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = buffer_length;
 8000c14:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <setPacketParams+0x50>)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	7213      	strb	r3, [r2, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <setPacketParams+0x50>)
 8000c1c:	2208      	movs	r2, #8
 8000c1e:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <setPacketParams+0x50>)
 8000c22:	2204      	movs	r2, #4
 8000c24:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <setPacketParams+0x50>)
 8000c28:	2218      	movs	r2, #24
 8000c2a:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <setPacketParams+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <setPacketParams+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <setPacketParams+0x50>)
 8000c3a:	22f2      	movs	r2, #242	; 0xf2
 8000c3c:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <setPacketParams+0x50>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	729a      	strb	r2, [r3, #10]
	SUBGRF_SetPacketParams(&pkt_params);
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <setPacketParams+0x50>)
 8000c46:	f008 fcdf 	bl	8009608 <SUBGRF_SetPacketParams>

}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200001a8 	.word	0x200001a8

08000c58 <setModulationParams>:
void setModulationParams(unsigned long bitRate, unsigned long fDev) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <setModulationParams+0x38>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <setModulationParams+0x38>)
 8000c6a:	220d      	movs	r2, #13
 8000c6c:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = bitRate;
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <setModulationParams+0x38>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6053      	str	r3, [r2, #4]
	mod_params.Params.Gfsk.Fdev = fDev;
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <setModulationParams+0x38>)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	6093      	str	r3, [r2, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <setModulationParams+0x38>)
 8000c7c:	220b      	movs	r2, #11
 8000c7e:	731a      	strb	r2, [r3, #12]
	SUBGRF_SetModulationParams(&mod_params);
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <setModulationParams+0x38>)
 8000c82:	f008 fbef 	bl	8009464 <SUBGRF_SetModulationParams>

}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200001bc 	.word	0x200001bc

08000c94 <radioConfig>:

void radioConfig(uint8_t *buffer, uint8_t buffer_len) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f008 fd4e 	bl	8009744 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(buffer, buffer_len);
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	4619      	mov	r1, r3
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f007 ff2f 	bl	8008b10 <SUBGRF_SetPayload>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <radioConfig+0x5c>)
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cbc:	e883 0003 	stmia.w	r3, {r0, r1}
 8000cc0:	f107 0308 	add.w	r3, r7, #8
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f007 ff68 	bl	8008b9a <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000cce:	f007 ffb3 	bl	8008c38 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2007      	movs	r0, #7
 8000cda:	f008 fa0b 	bl	80090f4 <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8000cde:	2202      	movs	r2, #2
 8000ce0:	210e      	movs	r1, #14
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f008 faf0 	bl	80092c8 <SUBGRF_SetTxParams>

}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	0800af98 	.word	0x0800af98

08000cf4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a2a      	ldr	r2, [pc, #168]	; (8000da8 <HAL_UART_RxCpltCallback+0xb4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d14d      	bne.n	8000da0 <HAL_UART_RxCpltCallback+0xac>

		uint8_t header = 0x00;
 8000d04:	2300      	movs	r3, #0
 8000d06:	73fb      	strb	r3, [r7, #15]
		if (main_cmd[0] == header || main_cmd[0] != 0x53) {
 8000d08:	4b28      	ldr	r3, [pc, #160]	; (8000dac <HAL_UART_RxCpltCallback+0xb8>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	7bfa      	ldrb	r2, [r7, #15]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d003      	beq.n	8000d1a <HAL_UART_RxCpltCallback+0x26>
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <HAL_UART_RxCpltCallback+0xb8>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b53      	cmp	r3, #83	; 0x53
 8000d18:	d011      	beq.n	8000d3e <HAL_UART_RxCpltCallback+0x4a>

			for (int loop1 = 0; loop1 < sizeof(main_cmd); loop1++) {
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	e00b      	b.n	8000d38 <HAL_UART_RxCpltCallback+0x44>
				main_cmd[loop1] = main_cmd[loop1 + 1];
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a21      	ldr	r2, [pc, #132]	; (8000dac <HAL_UART_RxCpltCallback+0xb8>)
 8000d26:	5cd1      	ldrb	r1, [r2, r3]
 8000d28:	4a20      	ldr	r2, [pc, #128]	; (8000dac <HAL_UART_RxCpltCallback+0xb8>)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	460a      	mov	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
			for (int loop1 = 0; loop1 < sizeof(main_cmd); loop1++) {
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	2b0c      	cmp	r3, #12
 8000d3c:	d9f0      	bls.n	8000d20 <HAL_UART_RxCpltCallback+0x2c>
			}
		}

		myDebug("\n-->Main command Received: 0x%x\r\n", main_cmd);
 8000d3e:	491b      	ldr	r1, [pc, #108]	; (8000dac <HAL_UART_RxCpltCallback+0xb8>)
 8000d40:	481b      	ldr	r0, [pc, #108]	; (8000db0 <HAL_UART_RxCpltCallback+0xbc>)
 8000d42:	f7ff fca7 	bl	8000694 <myDebug>

		if (sizeof(main_cmd) == main_cmd_len) {
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <HAL_UART_RxCpltCallback+0xc0>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b0d      	cmp	r3, #13
 8000d4c:	d11a      	bne.n	8000d84 <HAL_UART_RxCpltCallback+0x90>
//			myDebug("-->Command ACK: 0x%x\r\n", main_cmd);
			for (int i = 0; i < main_cmd_len; i++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	e00a      	b.n	8000d6a <HAL_UART_RxCpltCallback+0x76>
				myDebug("%02x ", main_cmd[i]);
 8000d54:	4a15      	ldr	r2, [pc, #84]	; (8000dac <HAL_UART_RxCpltCallback+0xb8>)
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4413      	add	r3, r2
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4816      	ldr	r0, [pc, #88]	; (8000db8 <HAL_UART_RxCpltCallback+0xc4>)
 8000d60:	f7ff fc98 	bl	8000694 <myDebug>
			for (int i = 0; i < main_cmd_len; i++) {
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	3301      	adds	r3, #1
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_UART_RxCpltCallback+0xc0>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4293      	cmp	r3, r2
 8000d74:	dbee      	blt.n	8000d54 <HAL_UART_RxCpltCallback+0x60>
			}
			myDebug("\r\n");
 8000d76:	4811      	ldr	r0, [pc, #68]	; (8000dbc <HAL_UART_RxCpltCallback+0xc8>)
 8000d78:	f7ff fc8c 	bl	8000694 <myDebug>
			TX_FLAG = 1;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_UART_RxCpltCallback+0xcc>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	601a      	str	r2, [r3, #0]
			myDebug("-->Command Not ACK: 0x%x\r\n", main_cmd);
			memset(main_cmd, '\0', main_cmd_len);
			TX_FLAG = 0;
		}
	}
}
 8000d82:	e00d      	b.n	8000da0 <HAL_UART_RxCpltCallback+0xac>
			myDebug("-->Command Not ACK: 0x%x\r\n", main_cmd);
 8000d84:	4909      	ldr	r1, [pc, #36]	; (8000dac <HAL_UART_RxCpltCallback+0xb8>)
 8000d86:	480f      	ldr	r0, [pc, #60]	; (8000dc4 <HAL_UART_RxCpltCallback+0xd0>)
 8000d88:	f7ff fc84 	bl	8000694 <myDebug>
			memset(main_cmd, '\0', main_cmd_len);
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_UART_RxCpltCallback+0xc0>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	2100      	movs	r1, #0
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_UART_RxCpltCallback+0xb8>)
 8000d96:	f009 fc71 	bl	800a67c <memset>
			TX_FLAG = 0;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_UART_RxCpltCallback+0xcc>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000390 	.word	0x20000390
 8000dac:	200001d8 	.word	0x200001d8
 8000db0:	0800afa0 	.word	0x0800afa0
 8000db4:	20000000 	.word	0x20000000
 8000db8:	0800afc4 	.word	0x0800afc4
 8000dbc:	0800afcc 	.word	0x0800afcc
 8000dc0:	20000320 	.word	0x20000320
 8000dc4:	0800afd0 	.word	0x0800afd0

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dce:	f000 ffdb 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd2:	f000 f981 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd6:	f7ff fe85 	bl	8000ae4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dda:	f7ff fcc7 	bl	800076c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000dde:	f000 fea1 	bl	8001b24 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000de2:	f000 fd91 	bl	8001908 <MX_TIM2_Init>
  MX_SubGHz_Phy_Init();
 8000de6:	f009 f88a 	bl	8009efe <MX_SubGHz_Phy_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 8000dea:	4895      	ldr	r0, [pc, #596]	; (8001040 <main+0x278>)
 8000dec:	f003 fe7e 	bl	8004aec <HAL_TIM_Base_Start>

	SUBGRF_Init(DioIrqHndlr);
 8000df0:	4894      	ldr	r0, [pc, #592]	; (8001044 <main+0x27c>)
 8000df2:	f007 fe3b 	bl	8008a6c <SUBGRF_Init>
	SUBGRF_SetDioIrqParams(
 8000df6:	2300      	movs	r3, #0
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f240 210f 	movw	r1, #527	; 0x20f
 8000dfe:	f240 200f 	movw	r0, #527	; 0x20f
 8000e02:	f008 f999 	bl	8009138 <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	myDebug("########## Slippers2Sat Ground Station: BEGIN ##########\r\n");
 8000e06:	4890      	ldr	r0, [pc, #576]	; (8001048 <main+0x280>)
 8000e08:	f7ff fc44 	bl	8000694 <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 8000e0c:	488f      	ldr	r0, [pc, #572]	; (800104c <main+0x284>)
 8000e0e:	f7ff fc41 	bl	8000694 <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 8000e12:	488f      	ldr	r0, [pc, #572]	; (8001050 <main+0x288>)
 8000e14:	f7ff fc3e 	bl	8000694 <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz, UPLINK FREQ: %lu Hz\r\n",
 8000e18:	4a8e      	ldr	r2, [pc, #568]	; (8001054 <main+0x28c>)
 8000e1a:	498f      	ldr	r1, [pc, #572]	; (8001058 <main+0x290>)
 8000e1c:	488f      	ldr	r0, [pc, #572]	; (800105c <main+0x294>)
 8000e1e:	f7ff fc39 	bl	8000694 <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 8000e22:	488f      	ldr	r0, [pc, #572]	; (8001060 <main+0x298>)
 8000e24:	f7ff fc36 	bl	8000694 <myDebug>
	myDebug(
 8000e28:	230e      	movs	r3, #14
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2107      	movs	r1, #7
 8000e32:	488c      	ldr	r0, [pc, #560]	; (8001064 <main+0x29c>)
 8000e34:	f7ff fc2e 	bl	8000694 <myDebug>
			"POWER CONFIG:::: \n"
					"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug(
 8000e38:	488b      	ldr	r0, [pc, #556]	; (8001068 <main+0x2a0>)
 8000e3a:	f7ff fc2b 	bl	8000694 <myDebug>
			"\n########## Operation Starts, Perform any one operation: ##########\r\n");
	myDebug("1. Transmit Command of 13 bytes\r\n");
 8000e3e:	488b      	ldr	r0, [pc, #556]	; (800106c <main+0x2a4>)
 8000e40:	f7ff fc28 	bl	8000694 <myDebug>
	myDebug("2. Wait to receive beacon from Satellite\r\n");
 8000e44:	488a      	ldr	r0, [pc, #552]	; (8001070 <main+0x2a8>)
 8000e46:	f7ff fc25 	bl	8000694 <myDebug>

	setPacketParams(rx_buffer_len);
 8000e4a:	4b8a      	ldr	r3, [pc, #552]	; (8001074 <main+0x2ac>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fed8 	bl	8000c04 <setPacketParams>
	setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 8000e54:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8000e58:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 8000e5c:	f7ff fefc 	bl	8000c58 <setModulationParams>
	radioConfig(rx_buffer, rx_buffer_len);
 8000e60:	4b84      	ldr	r3, [pc, #528]	; (8001074 <main+0x2ac>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	4884      	ldr	r0, [pc, #528]	; (8001078 <main+0x2b0>)
 8000e68:	f7ff ff14 	bl	8000c94 <radioConfig>

	myDebug("\n########## RX Configuration: ##########\n");
 8000e6c:	4883      	ldr	r0, [pc, #524]	; (800107c <main+0x2b4>)
 8000e6e:	f7ff fc11 	bl	8000694 <myDebug>

	myDebug("FREQUENCY MODS: Downlink FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 8000e72:	4979      	ldr	r1, [pc, #484]	; (8001058 <main+0x290>)
 8000e74:	4882      	ldr	r0, [pc, #520]	; (8001080 <main+0x2b8>)
 8000e76:	f7ff fc0d 	bl	8000694 <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8000e7a:	4b82      	ldr	r3, [pc, #520]	; (8001084 <main+0x2bc>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4881      	ldr	r0, [pc, #516]	; (8001088 <main+0x2c0>)
 8000e82:	f7ff fc07 	bl	8000694 <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8000e86:	4b7f      	ldr	r3, [pc, #508]	; (8001084 <main+0x2bc>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	487f      	ldr	r0, [pc, #508]	; (800108c <main+0x2c4>)
 8000e8e:	f7ff fc01 	bl	8000694 <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 8000e92:	4b7c      	ldr	r3, [pc, #496]	; (8001084 <main+0x2bc>)
 8000e94:	7b5b      	ldrb	r3, [r3, #13]
 8000e96:	4619      	mov	r1, r3
 8000e98:	487d      	ldr	r0, [pc, #500]	; (8001090 <main+0x2c8>)
 8000e9a:	f7ff fbfb 	bl	8000694 <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000e9e:	4b7d      	ldr	r3, [pc, #500]	; (8001094 <main+0x2cc>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	487c      	ldr	r0, [pc, #496]	; (8001098 <main+0x2d0>)
 8000ea6:	f7ff fbf5 	bl	8000694 <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 8000eaa:	4b7a      	ldr	r3, [pc, #488]	; (8001094 <main+0x2cc>)
 8000eac:	7a1b      	ldrb	r3, [r3, #8]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	487a      	ldr	r0, [pc, #488]	; (800109c <main+0x2d4>)
 8000eb2:	f7ff fbef 	bl	8000694 <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 8000eb6:	4b77      	ldr	r3, [pc, #476]	; (8001094 <main+0x2cc>)
 8000eb8:	885b      	ldrh	r3, [r3, #2]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4878      	ldr	r0, [pc, #480]	; (80010a0 <main+0x2d8>)
 8000ebe:	f7ff fbe9 	bl	8000694 <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 8000ec2:	4b74      	ldr	r3, [pc, #464]	; (8001094 <main+0x2cc>)
 8000ec4:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4876      	ldr	r0, [pc, #472]	; (80010a4 <main+0x2dc>)
 8000eca:	f7ff fbe3 	bl	8000694 <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8000ece:	4b71      	ldr	r3, [pc, #452]	; (8001094 <main+0x2cc>)
 8000ed0:	79db      	ldrb	r3, [r3, #7]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4874      	ldr	r0, [pc, #464]	; (80010a8 <main+0x2e0>)
 8000ed6:	f7ff fbdd 	bl	8000694 <myDebug>
	myDebug("______________*******************______________\r\n");
 8000eda:	4874      	ldr	r0, [pc, #464]	; (80010ac <main+0x2e4>)
 8000edc:	f7ff fbda 	bl	8000694 <myDebug>

	SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8000ee0:	485d      	ldr	r0, [pc, #372]	; (8001058 <main+0x290>)
 8000ee2:	f008 f985 	bl	80091f0 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f008 fdc9 	bl	8009a80 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 8000eee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000ef2:	f007 ffa9 	bl	8008e48 <SUBGRF_SetRxBoosted>

	HAL_UART_Receive_DMA(&huart2, main_cmd, main_cmd_len);
 8000ef6:	4b6e      	ldr	r3, [pc, #440]	; (80010b0 <main+0x2e8>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	496d      	ldr	r1, [pc, #436]	; (80010b4 <main+0x2ec>)
 8000f00:	486d      	ldr	r0, [pc, #436]	; (80010b8 <main+0x2f0>)
 8000f02:	f004 fab7 	bl	8005474 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8000f06:	f009 f802 	bl	8009f0e <MX_SubGHz_Phy_Process>

    /* USER CODE BEGIN 3 */

		delay_us(500000);
 8000f0a:	486c      	ldr	r0, [pc, #432]	; (80010bc <main+0x2f4>)
 8000f0c:	f7ff fbfc 	bl	8000708 <delay_us>

		if (TX_FLAG) {
 8000f10:	4b6b      	ldr	r3, [pc, #428]	; (80010c0 <main+0x2f8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f000 8089 	beq.w	800102c <main+0x264>

			getAX25Packet(main_cmd, main_cmd_len);
 8000f1a:	4b65      	ldr	r3, [pc, #404]	; (80010b0 <main+0x2e8>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4864      	ldr	r0, [pc, #400]	; (80010b4 <main+0x2ec>)
 8000f22:	f7ff fb55 	bl	80005d0 <getAX25Packet>

			tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 8000f26:	2164      	movs	r1, #100	; 0x64
 8000f28:	4866      	ldr	r0, [pc, #408]	; (80010c4 <main+0x2fc>)
 8000f2a:	f7ff fe35 	bl	8000b98 <countsDataBetweenFlags>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a65      	ldr	r2, [pc, #404]	; (80010c8 <main+0x300>)
 8000f32:	6013      	str	r3, [r2, #0]
					sizeof(temp_tx_buffer));

//			myDebug("AX.25 complete GS packet ready to TX: 0x%x\r\n", temp_tx_buffer);
			for (int j = 0; j < tx_buffer_len; j++) {
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	e00b      	b.n	8000f52 <main+0x18a>
				tx_buffer[j] = temp_tx_buffer[j];
 8000f3a:	4a62      	ldr	r2, [pc, #392]	; (80010c4 <main+0x2fc>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	7819      	ldrb	r1, [r3, #0]
 8000f42:	4a62      	ldr	r2, [pc, #392]	; (80010cc <main+0x304>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	460a      	mov	r2, r1
 8000f4a:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < tx_buffer_len; j++) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b5d      	ldr	r3, [pc, #372]	; (80010c8 <main+0x300>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dbee      	blt.n	8000f3a <main+0x172>
			}
//			myDebug("\r\n");

//			myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

			memset(main_cmd, '\0', main_cmd_len);
 8000f5c:	4b54      	ldr	r3, [pc, #336]	; (80010b0 <main+0x2e8>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	4853      	ldr	r0, [pc, #332]	; (80010b4 <main+0x2ec>)
 8000f66:	f009 fb89 	bl	800a67c <memset>
			memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 8000f6a:	2264      	movs	r2, #100	; 0x64
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4855      	ldr	r0, [pc, #340]	; (80010c4 <main+0x2fc>)
 8000f70:	f009 fb84 	bl	800a67c <memset>

			setPacketParams(tx_buffer_len);
 8000f74:	4b54      	ldr	r3, [pc, #336]	; (80010c8 <main+0x300>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe42 	bl	8000c04 <setPacketParams>
			setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8000f80:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000f84:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000f88:	f7ff fe66 	bl	8000c58 <setModulationParams>
			radioConfig(tx_buffer, tx_buffer_len);
 8000f8c:	4b4e      	ldr	r3, [pc, #312]	; (80010c8 <main+0x300>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4619      	mov	r1, r3
 8000f94:	484d      	ldr	r0, [pc, #308]	; (80010cc <main+0x304>)
 8000f96:	f7ff fe7d 	bl	8000c94 <radioConfig>

			myDebug("########## TX Configuration: ##########\n");
 8000f9a:	484d      	ldr	r0, [pc, #308]	; (80010d0 <main+0x308>)
 8000f9c:	f7ff fb7a 	bl	8000694 <myDebug>

			myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8000fa0:	492c      	ldr	r1, [pc, #176]	; (8001054 <main+0x28c>)
 8000fa2:	484c      	ldr	r0, [pc, #304]	; (80010d4 <main+0x30c>)
 8000fa4:	f7ff fb76 	bl	8000694 <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8000fa8:	4b36      	ldr	r3, [pc, #216]	; (8001084 <main+0x2bc>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4836      	ldr	r0, [pc, #216]	; (8001088 <main+0x2c0>)
 8000fb0:	f7ff fb70 	bl	8000694 <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 8000fb4:	4b33      	ldr	r3, [pc, #204]	; (8001084 <main+0x2bc>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4834      	ldr	r0, [pc, #208]	; (800108c <main+0x2c4>)
 8000fbc:	f7ff fb6a 	bl	8000694 <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 8000fc0:	4b30      	ldr	r3, [pc, #192]	; (8001084 <main+0x2bc>)
 8000fc2:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4832      	ldr	r0, [pc, #200]	; (8001090 <main+0x2c8>)
 8000fc8:	f7ff fb64 	bl	8000694 <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000fcc:	4b31      	ldr	r3, [pc, #196]	; (8001094 <main+0x2cc>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4831      	ldr	r0, [pc, #196]	; (8001098 <main+0x2d0>)
 8000fd4:	f7ff fb5e 	bl	8000694 <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 8000fd8:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <main+0x2cc>)
 8000fda:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 8000fdc:	4619      	mov	r1, r3
 8000fde:	482f      	ldr	r0, [pc, #188]	; (800109c <main+0x2d4>)
 8000fe0:	f7ff fb58 	bl	8000694 <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <main+0x2cc>)
 8000fe6:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 8000fe8:	4619      	mov	r1, r3
 8000fea:	482d      	ldr	r0, [pc, #180]	; (80010a0 <main+0x2d8>)
 8000fec:	f7ff fb52 	bl	8000694 <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 8000ff0:	4b28      	ldr	r3, [pc, #160]	; (8001094 <main+0x2cc>)
 8000ff2:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	482b      	ldr	r0, [pc, #172]	; (80010a4 <main+0x2dc>)
 8000ff8:	f7ff fb4c 	bl	8000694 <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8000ffc:	4b25      	ldr	r3, [pc, #148]	; (8001094 <main+0x2cc>)
 8000ffe:	79db      	ldrb	r3, [r3, #7]
 8001000:	4619      	mov	r1, r3
 8001002:	4829      	ldr	r0, [pc, #164]	; (80010a8 <main+0x2e0>)
 8001004:	f7ff fb46 	bl	8000694 <myDebug>
			myDebug("______________*******************______________\r\n");
 8001008:	4828      	ldr	r0, [pc, #160]	; (80010ac <main+0x2e4>)
 800100a:	f7ff fb43 	bl	8000694 <myDebug>

			SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 800100e:	4811      	ldr	r0, [pc, #68]	; (8001054 <main+0x28c>)
 8001010:	f008 f8ee 	bl	80091f0 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8001014:	2101      	movs	r1, #1
 8001016:	2001      	movs	r0, #1
 8001018:	f008 fd32 	bl	8009a80 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 800101c:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <main+0x300>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2200      	movs	r2, #0
 8001024:	4619      	mov	r1, r3
 8001026:	4829      	ldr	r0, [pc, #164]	; (80010cc <main+0x304>)
 8001028:	f007 fda4 	bl	8008b74 <SUBGRF_SendPayload>
		}

		HAL_UART_Receive_DMA(&huart2, main_cmd, main_cmd_len);
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <main+0x2e8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b29b      	uxth	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	491f      	ldr	r1, [pc, #124]	; (80010b4 <main+0x2ec>)
 8001036:	4820      	ldr	r0, [pc, #128]	; (80010b8 <main+0x2f0>)
 8001038:	f004 fa1c 	bl	8005474 <HAL_UART_Receive_DMA>
    MX_SubGHz_Phy_Process();
 800103c:	e763      	b.n	8000f06 <main+0x13e>
 800103e:	bf00      	nop
 8001040:	20000340 	.word	0x20000340
 8001044:	08001199 	.word	0x08001199
 8001048:	0800afec 	.word	0x0800afec
 800104c:	0800b028 	.word	0x0800b028
 8001050:	0800b05c 	.word	0x0800b05c
 8001054:	19f25968 	.word	0x19f25968
 8001058:	1a11d018 	.word	0x1a11d018
 800105c:	0800b078 	.word	0x0800b078
 8001060:	0800b0b8 	.word	0x0800b0b8
 8001064:	0800b0e0 	.word	0x0800b0e0
 8001068:	0800b134 	.word	0x0800b134
 800106c:	0800b17c 	.word	0x0800b17c
 8001070:	0800b1a0 	.word	0x0800b1a0
 8001074:	20000001 	.word	0x20000001
 8001078:	200002b4 	.word	0x200002b4
 800107c:	0800b1cc 	.word	0x0800b1cc
 8001080:	0800b1f8 	.word	0x0800b1f8
 8001084:	200001bc 	.word	0x200001bc
 8001088:	0800b220 	.word	0x0800b220
 800108c:	0800b230 	.word	0x0800b230
 8001090:	0800b24c 	.word	0x0800b24c
 8001094:	200001a8 	.word	0x200001a8
 8001098:	0800b268 	.word	0x0800b268
 800109c:	0800b27c 	.word	0x0800b27c
 80010a0:	0800b294 	.word	0x0800b294
 80010a4:	0800b2ac 	.word	0x0800b2ac
 80010a8:	0800b2c4 	.word	0x0800b2c4
 80010ac:	0800b2d8 	.word	0x0800b2d8
 80010b0:	20000000 	.word	0x20000000
 80010b4:	200001d8 	.word	0x200001d8
 80010b8:	20000390 	.word	0x20000390
 80010bc:	0007a120 	.word	0x0007a120
 80010c0:	20000320 	.word	0x20000320
 80010c4:	200001e8 	.word	0x200001e8
 80010c8:	2000024c 	.word	0x2000024c
 80010cc:	20000250 	.word	0x20000250
 80010d0:	0800b30c 	.word	0x0800b30c
 80010d4:	0800b338 	.word	0x0800b338

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b09a      	sub	sp, #104	; 0x68
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2248      	movs	r2, #72	; 0x48
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f009 fac8 	bl	800a67c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <SystemClock_Config+0xbc>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001106:	4a23      	ldr	r2, [pc, #140]	; (8001194 <SystemClock_Config+0xbc>)
 8001108:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b21      	ldr	r3, [pc, #132]	; (8001194 <SystemClock_Config+0xbc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800111a:	2301      	movs	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 800111e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001128:	2302      	movs	r3, #2
 800112a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800112c:	2303      	movs	r3, #3
 800112e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001130:	2310      	movs	r3, #16
 8001132:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 8001134:	2306      	movs	r3, #6
 8001136:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800113c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800113e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001142:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001144:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001148:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 0320 	add.w	r3, r7, #32
 800114e:	4618      	mov	r0, r3
 8001150:	f001 ff5e 	bl	8003010 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800115a:	f000 fab9 	bl	80016d0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800115e:	234f      	movs	r3, #79	; 0x4f
 8001160:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001162:	2303      	movs	r3, #3
 8001164:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2102      	movs	r1, #2
 800117a:	4618      	mov	r0, r3
 800117c:	f002 faca 	bl	8003714 <HAL_RCC_ClockConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001186:	f000 faa3 	bl	80016d0 <Error_Handler>
  }
}
 800118a:	bf00      	nop
 800118c:	3768      	adds	r7, #104	; 0x68
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	58000400 	.word	0x58000400

08001198 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8001198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800119c:	b0c1      	sub	sp, #260	; 0x104
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	83fb      	strh	r3, [r7, #30]
	if (radioIrq == IRQ_TX_DONE) {
 80011a4:	8bfb      	ldrh	r3, [r7, #30]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	f040 8087 	bne.w	80012ba <DioIrqHndlr+0x122>
		TX_FLAG = 0;
 80011ac:	4b97      	ldr	r3, [pc, #604]	; (800140c <DioIrqHndlr+0x274>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
		myDebug("\nGS Command Transmitted Successful, Length: %d\r\n",
 80011b2:	4b97      	ldr	r3, [pc, #604]	; (8001410 <DioIrqHndlr+0x278>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4619      	mov	r1, r3
 80011b8:	4896      	ldr	r0, [pc, #600]	; (8001414 <DioIrqHndlr+0x27c>)
 80011ba:	f7ff fa6b 	bl	8000694 <myDebug>
				tx_buffer_len);
		for (int i = 0; i < tx_buffer_len; i++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80011c4:	e00d      	b.n	80011e2 <DioIrqHndlr+0x4a>
			myDebug("%02x ", tx_buffer[i]);
 80011c6:	4a94      	ldr	r2, [pc, #592]	; (8001418 <DioIrqHndlr+0x280>)
 80011c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	4892      	ldr	r0, [pc, #584]	; (800141c <DioIrqHndlr+0x284>)
 80011d4:	f7ff fa5e 	bl	8000694 <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 80011d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011dc:	3301      	adds	r3, #1
 80011de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80011e2:	4b8b      	ldr	r3, [pc, #556]	; (8001410 <DioIrqHndlr+0x278>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80011ea:	429a      	cmp	r2, r3
 80011ec:	dbeb      	blt.n	80011c6 <DioIrqHndlr+0x2e>
		}

		myDebug("\r\n");
 80011ee:	488c      	ldr	r0, [pc, #560]	; (8001420 <DioIrqHndlr+0x288>)
 80011f0:	f7ff fa50 	bl	8000694 <myDebug>
		memset(tx_buffer, '\0', sizeof(tx_buffer));
 80011f4:	2264      	movs	r2, #100	; 0x64
 80011f6:	2100      	movs	r1, #0
 80011f8:	4887      	ldr	r0, [pc, #540]	; (8001418 <DioIrqHndlr+0x280>)
 80011fa:	f009 fa3f 	bl	800a67c <memset>

		setPacketParams(rx_buffer_len);
 80011fe:	4b89      	ldr	r3, [pc, #548]	; (8001424 <DioIrqHndlr+0x28c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fcfe 	bl	8000c04 <setPacketParams>
		setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 8001208:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 800120c:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 8001210:	f7ff fd22 	bl	8000c58 <setModulationParams>
		radioConfig(rx_buffer, rx_buffer_len);
 8001214:	4b83      	ldr	r3, [pc, #524]	; (8001424 <DioIrqHndlr+0x28c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	4883      	ldr	r0, [pc, #524]	; (8001428 <DioIrqHndlr+0x290>)
 800121c:	f7ff fd3a 	bl	8000c94 <radioConfig>

		myDebug("\n########## RX Configuration: ##########\n");
 8001220:	4882      	ldr	r0, [pc, #520]	; (800142c <DioIrqHndlr+0x294>)
 8001222:	f7ff fa37 	bl	8000694 <myDebug>

		myDebug("FREQUENCY MODS: Downlink FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 8001226:	4982      	ldr	r1, [pc, #520]	; (8001430 <DioIrqHndlr+0x298>)
 8001228:	4882      	ldr	r0, [pc, #520]	; (8001434 <DioIrqHndlr+0x29c>)
 800122a:	f7ff fa33 	bl	8000694 <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 800122e:	4b82      	ldr	r3, [pc, #520]	; (8001438 <DioIrqHndlr+0x2a0>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4619      	mov	r1, r3
 8001234:	4881      	ldr	r0, [pc, #516]	; (800143c <DioIrqHndlr+0x2a4>)
 8001236:	f7ff fa2d 	bl	8000694 <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 800123a:	4b7f      	ldr	r3, [pc, #508]	; (8001438 <DioIrqHndlr+0x2a0>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	4619      	mov	r1, r3
 8001240:	487f      	ldr	r0, [pc, #508]	; (8001440 <DioIrqHndlr+0x2a8>)
 8001242:	f7ff fa27 	bl	8000694 <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 8001246:	4b7c      	ldr	r3, [pc, #496]	; (8001438 <DioIrqHndlr+0x2a0>)
 8001248:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 800124a:	4619      	mov	r1, r3
 800124c:	487d      	ldr	r0, [pc, #500]	; (8001444 <DioIrqHndlr+0x2ac>)
 800124e:	f7ff fa21 	bl	8000694 <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001252:	4b7d      	ldr	r3, [pc, #500]	; (8001448 <DioIrqHndlr+0x2b0>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4619      	mov	r1, r3
 8001258:	487c      	ldr	r0, [pc, #496]	; (800144c <DioIrqHndlr+0x2b4>)
 800125a:	f7ff fa1b 	bl	8000694 <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 800125e:	4b7a      	ldr	r3, [pc, #488]	; (8001448 <DioIrqHndlr+0x2b0>)
 8001260:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 8001262:	4619      	mov	r1, r3
 8001264:	487a      	ldr	r0, [pc, #488]	; (8001450 <DioIrqHndlr+0x2b8>)
 8001266:	f7ff fa15 	bl	8000694 <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 800126a:	4b77      	ldr	r3, [pc, #476]	; (8001448 <DioIrqHndlr+0x2b0>)
 800126c:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 800126e:	4619      	mov	r1, r3
 8001270:	4878      	ldr	r0, [pc, #480]	; (8001454 <DioIrqHndlr+0x2bc>)
 8001272:	f7ff fa0f 	bl	8000694 <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 8001276:	4b74      	ldr	r3, [pc, #464]	; (8001448 <DioIrqHndlr+0x2b0>)
 8001278:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 800127a:	4619      	mov	r1, r3
 800127c:	4876      	ldr	r0, [pc, #472]	; (8001458 <DioIrqHndlr+0x2c0>)
 800127e:	f7ff fa09 	bl	8000694 <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001282:	4b71      	ldr	r3, [pc, #452]	; (8001448 <DioIrqHndlr+0x2b0>)
 8001284:	79db      	ldrb	r3, [r3, #7]
 8001286:	4619      	mov	r1, r3
 8001288:	4874      	ldr	r0, [pc, #464]	; (800145c <DioIrqHndlr+0x2c4>)
 800128a:	f7ff fa03 	bl	8000694 <myDebug>
		myDebug("______________*******************______________\r\n");
 800128e:	4874      	ldr	r0, [pc, #464]	; (8001460 <DioIrqHndlr+0x2c8>)
 8001290:	f7ff fa00 	bl	8000694 <myDebug>

		SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001294:	4866      	ldr	r0, [pc, #408]	; (8001430 <DioIrqHndlr+0x298>)
 8001296:	f007 ffab 	bl	80091f0 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 800129a:	2100      	movs	r1, #0
 800129c:	2001      	movs	r0, #1
 800129e:	f008 fbef 	bl	8009a80 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 80012a2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80012a6:	f007 fdcf 	bl	8008e48 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, main_cmd, main_cmd_len);
 80012aa:	4b6e      	ldr	r3, [pc, #440]	; (8001464 <DioIrqHndlr+0x2cc>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	496d      	ldr	r1, [pc, #436]	; (8001468 <DioIrqHndlr+0x2d0>)
 80012b4:	486d      	ldr	r0, [pc, #436]	; (800146c <DioIrqHndlr+0x2d4>)
 80012b6:	f004 f8dd 	bl	8005474 <HAL_UART_Receive_DMA>

	}

	if (radioIrq == IRQ_RX_DONE) {
 80012ba:	8bfb      	ldrh	r3, [r7, #30]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	f040 81e9 	bne.w	8001694 <DioIrqHndlr+0x4fc>
		TX_FLAG = 0;
 80012c2:	4b52      	ldr	r3, [pc, #328]	; (800140c <DioIrqHndlr+0x274>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
		SUBGRF_GetPayload(rx_buffer, &rx_buffer_len, RX_PAYLOAD_LENGTH);
 80012c8:	2269      	movs	r2, #105	; 0x69
 80012ca:	4956      	ldr	r1, [pc, #344]	; (8001424 <DioIrqHndlr+0x28c>)
 80012cc:	4856      	ldr	r0, [pc, #344]	; (8001428 <DioIrqHndlr+0x290>)
 80012ce:	f007 fc2f 	bl	8008b30 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 80012d2:	f008 fa4e 	bl	8009772 <SUBGRF_GetRssiInst>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	4b65      	ldr	r3, [pc, #404]	; (8001470 <DioIrqHndlr+0x2d8>)
 80012dc:	601a      	str	r2, [r3, #0]

		uint8_t temp_rx_buffer_len = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
		temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer, rx_buffer_len);
 80012e4:	4b4f      	ldr	r3, [pc, #316]	; (8001424 <DioIrqHndlr+0x28c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	484f      	ldr	r0, [pc, #316]	; (8001428 <DioIrqHndlr+0x290>)
 80012ec:	f7ff fc54 	bl	8000b98 <countsDataBetweenFlags>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7

		if (temp_rx_buffer_len != -1) {
 80012f6:	466b      	mov	r3, sp
 80012f8:	61bb      	str	r3, [r7, #24]

//			myDebug("\nSatellite Data Received, Length: %d and RSSI: %d dBm\r\n", temp_rx_buffer_len, rssi_value);

			uint8_t temp_check_buff[temp_rx_buffer_len];
 80012fa:	f897 60e7 	ldrb.w	r6, [r7, #231]	; 0xe7
 80012fe:	4633      	mov	r3, r6
 8001300:	3b01      	subs	r3, #1
 8001302:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001306:	b2f3      	uxtb	r3, r6
 8001308:	2200      	movs	r2, #0
 800130a:	461c      	mov	r4, r3
 800130c:	4615      	mov	r5, r2
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	00eb      	lsls	r3, r5, #3
 8001318:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800131c:	00e2      	lsls	r2, r4, #3
 800131e:	b2f3      	uxtb	r3, r6
 8001320:	2200      	movs	r2, #0
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001332:	4629      	mov	r1, r5
 8001334:	00cb      	lsls	r3, r1, #3
 8001336:	4620      	mov	r0, r4
 8001338:	4629      	mov	r1, r5
 800133a:	4604      	mov	r4, r0
 800133c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001340:	4601      	mov	r1, r0
 8001342:	00ca      	lsls	r2, r1, #3
 8001344:	4633      	mov	r3, r6
 8001346:	3307      	adds	r3, #7
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	ebad 0d03 	sub.w	sp, sp, r3
 8001350:	466b      	mov	r3, sp
 8001352:	3300      	adds	r3, #0
 8001354:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800135e:	e010      	b.n	8001382 <DioIrqHndlr+0x1ea>
				temp_check_buff[i] = rx_buffer[i];
 8001360:	4a31      	ldr	r2, [pc, #196]	; (8001428 <DioIrqHndlr+0x290>)
 8001362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001366:	4413      	add	r3, r2
 8001368:	7819      	ldrb	r1, [r3, #0]
 800136a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800136e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001372:	4413      	add	r3, r2
 8001374:	460a      	mov	r2, r1
 8001376:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800137c:	3301      	adds	r3, #1
 800137e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001382:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001386:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800138a:	429a      	cmp	r2, r3
 800138c:	dbe8      	blt.n	8001360 <DioIrqHndlr+0x1c8>
			}
//			myDebug("\r\n");

//			memset(rx_buffer, '\0', sizeof(rx_buffer_len));

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 800138e:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001392:	3b04      	subs	r3, #4
 8001394:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
			uint8_t crc_buff[crc_buff_len];
 8001398:	f897 40db 	ldrb.w	r4, [r7, #219]	; 0xdb
 800139c:	4623      	mov	r3, r4
 800139e:	3b01      	subs	r3, #1
 80013a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80013a4:	b2e3      	uxtb	r3, r4
 80013a6:	2200      	movs	r2, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	617a      	str	r2, [r7, #20]
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	6979      	ldr	r1, [r7, #20]
 80013b6:	00cb      	lsls	r3, r1, #3
 80013b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013bc:	4605      	mov	r5, r0
 80013be:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80013c2:	4601      	mov	r1, r0
 80013c4:	00ca      	lsls	r2, r1, #3
 80013c6:	b2e3      	uxtb	r3, r4
 80013c8:	2200      	movs	r2, #0
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	60fa      	str	r2, [r7, #12]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	68f9      	ldr	r1, [r7, #12]
 80013d8:	00cb      	lsls	r3, r1, #3
 80013da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013de:	4605      	mov	r5, r0
 80013e0:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80013e4:	4601      	mov	r1, r0
 80013e6:	00ca      	lsls	r2, r1, #3
 80013e8:	4623      	mov	r3, r4
 80013ea:	3307      	adds	r3, #7
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	ebad 0d03 	sub.w	sp, sp, r3
 80013f4:	466b      	mov	r3, sp
 80013f6:	3300      	adds	r3, #0
 80013f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

//			myDebug("\nSatellite Data Testing: 0x%x\r\n");

			int j = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			for (int i = 1; i <= crc_buff_len; i++) {
 8001402:	2301      	movs	r3, #1
 8001404:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001408:	e04b      	b.n	80014a2 <DioIrqHndlr+0x30a>
 800140a:	bf00      	nop
 800140c:	20000320 	.word	0x20000320
 8001410:	2000024c 	.word	0x2000024c
 8001414:	0800b360 	.word	0x0800b360
 8001418:	20000250 	.word	0x20000250
 800141c:	0800afc4 	.word	0x0800afc4
 8001420:	0800afcc 	.word	0x0800afcc
 8001424:	20000001 	.word	0x20000001
 8001428:	200002b4 	.word	0x200002b4
 800142c:	0800b1cc 	.word	0x0800b1cc
 8001430:	1a11d018 	.word	0x1a11d018
 8001434:	0800b1f8 	.word	0x0800b1f8
 8001438:	200001bc 	.word	0x200001bc
 800143c:	0800b220 	.word	0x0800b220
 8001440:	0800b230 	.word	0x0800b230
 8001444:	0800b24c 	.word	0x0800b24c
 8001448:	200001a8 	.word	0x200001a8
 800144c:	0800b268 	.word	0x0800b268
 8001450:	0800b27c 	.word	0x0800b27c
 8001454:	0800b294 	.word	0x0800b294
 8001458:	0800b2ac 	.word	0x0800b2ac
 800145c:	0800b2c4 	.word	0x0800b2c4
 8001460:	0800b2d8 	.word	0x0800b2d8
 8001464:	20000000 	.word	0x20000000
 8001468:	200001d8 	.word	0x200001d8
 800146c:	20000390 	.word	0x20000390
 8001470:	20000324 	.word	0x20000324
				crc_buff[j] = temp_check_buff[i];
 8001474:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001478:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800147c:	4413      	add	r3, r2
 800147e:	7819      	ldrb	r1, [r3, #0]
 8001480:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001484:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001488:	4413      	add	r3, r2
 800148a:	460a      	mov	r2, r1
 800148c:	701a      	strb	r2, [r3, #0]
//				myDebug("%02x ", crc_buff[j]);
				j++;
 800148e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001492:	3301      	adds	r3, #1
 8001494:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			for (int i = 1; i <= crc_buff_len; i++) {
 8001498:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800149c:	3301      	adds	r3, #1
 800149e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80014a2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80014a6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dde2      	ble.n	8001474 <DioIrqHndlr+0x2dc>
			}
//			myDebug("\r\n");

			uint16_t crc = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
			crc = calculateCRC_CCITT_AX25(crc_buff, crc_buff_len);
 80014b4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80014b8:	4619      	mov	r1, r3
 80014ba:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80014be:	f7ff f96f 	bl	80007a0 <calculateCRC_CCITT_AX25>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

			uint8_t calc_crc[2];
			calc_crc[0] = (crc >> 8) & 0xFF;
 80014c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
			calc_crc[1] = crc & 0xFF;
 80014d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd

			uint8_t msb_crc = temp_check_buff[temp_rx_buffer_len - 3];
 80014e0:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80014e4:	3b03      	subs	r3, #3
 80014e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			uint8_t lsb_crc = temp_check_buff[temp_rx_buffer_len - 2];
 80014f0:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80014f4:	3b02      	subs	r3, #2
 80014f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80014fa:	5cd3      	ldrb	r3, [r2, r3]
 80014fc:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc

			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 8001500:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8001504:	f897 20cd 	ldrb.w	r2, [r7, #205]	; 0xcd
 8001508:	429a      	cmp	r2, r3
 800150a:	d17b      	bne.n	8001604 <DioIrqHndlr+0x46c>
 800150c:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8001510:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
 8001514:	429a      	cmp	r2, r3
 8001516:	d175      	bne.n	8001604 <DioIrqHndlr+0x46c>
 8001518:	466b      	mov	r3, sp
 800151a:	461c      	mov	r4, r3
//				myDebug("Satellite Data checksum correct: 0x%x\r\n");

				uint8_t gs_cmd_buff[150];
				int gs_cmd_len = bit_destuffing(crc_buff, gs_cmd_buff,
 800151c:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	4619      	mov	r1, r3
 8001526:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800152a:	f7ff fa34 	bl	8000996 <bit_destuffing>
 800152e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						crc_buff_len);
//				gs_cmd_len--;

				myDebug(
 8001532:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <DioIrqHndlr+0x508>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800153c:	4859      	ldr	r0, [pc, #356]	; (80016a4 <DioIrqHndlr+0x50c>)
 800153e:	f7ff f8a9 	bl	8000694 <myDebug>
						"\nSatellite Real Data, Length: %d bytes  and RSSI: %d dBm\r\n",
						gs_cmd_len, rssi_value);

				uint8_t main_gs_cmd[gs_cmd_len];
 8001542:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001546:	1e4b      	subs	r3, r1, #1
 8001548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800154c:	460a      	mov	r2, r1
 800154e:	2300      	movs	r3, #0
 8001550:	4692      	mov	sl, r2
 8001552:	469b      	mov	fp, r3
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001560:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001564:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001568:	460a      	mov	r2, r1
 800156a:	2300      	movs	r3, #0
 800156c:	4690      	mov	r8, r2
 800156e:	4699      	mov	r9, r3
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800157c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001580:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001584:	460b      	mov	r3, r1
 8001586:	3307      	adds	r3, #7
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	ebad 0d03 	sub.w	sp, sp, r3
 8001590:	466b      	mov	r3, sp
 8001592:	3300      	adds	r3, #0
 8001594:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
				for (int i = 0; i < gs_cmd_len; i++) {
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800159e:	e01b      	b.n	80015d8 <DioIrqHndlr+0x440>
					main_gs_cmd[i] = gs_cmd_buff[i];
 80015a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80015a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015a8:	4413      	add	r3, r2
 80015aa:	7819      	ldrb	r1, [r3, #0]
 80015ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80015b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015b4:	4413      	add	r3, r2
 80015b6:	460a      	mov	r2, r1
 80015b8:	701a      	strb	r2, [r3, #0]
					myDebug("%02x ", main_gs_cmd[i]);
 80015ba:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80015be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4837      	ldr	r0, [pc, #220]	; (80016a8 <DioIrqHndlr+0x510>)
 80015ca:	f7ff f863 	bl	8000694 <myDebug>
				for (int i = 0; i < gs_cmd_len; i++) {
 80015ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015d2:	3301      	adds	r3, #1
 80015d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80015d8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80015dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dbdd      	blt.n	80015a0 <DioIrqHndlr+0x408>
				}
				myDebug("\r\n");
 80015e4:	4831      	ldr	r0, [pc, #196]	; (80016ac <DioIrqHndlr+0x514>)
 80015e6:	f7ff f855 	bl	8000694 <myDebug>
				myDebug("__________\r\n");
 80015ea:	4831      	ldr	r0, [pc, #196]	; (80016b0 <DioIrqHndlr+0x518>)
 80015ec:	f7ff f852 	bl	8000694 <myDebug>
				memset(main_gs_cmd, '\0', gs_cmd_len);
 80015f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015f4:	461a      	mov	r2, r3
 80015f6:	2100      	movs	r1, #0
 80015f8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80015fc:	f009 f83e 	bl	800a67c <memset>
 8001600:	46a5      	mov	sp, r4
			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 8001602:	e032      	b.n	800166a <DioIrqHndlr+0x4d2>
			} else {
				checksum_error_count++;
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <DioIrqHndlr+0x51c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <DioIrqHndlr+0x51c>)
 800160c:	6013      	str	r3, [r2, #0]
				myDebug(
 800160e:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <DioIrqHndlr+0x51c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	4828      	ldr	r0, [pc, #160]	; (80016b8 <DioIrqHndlr+0x520>)
 8001616:	f7ff f83d 	bl	8000694 <myDebug>
						"Satellite Data checksum error and no of error packets: %d\r\n",
						checksum_error_count);
				for (int i = 0; i < sizeof(temp_check_buff); i++) {
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001620:	e00e      	b.n	8001640 <DioIrqHndlr+0x4a8>
					myDebug("%02x ", temp_check_buff[i]);
 8001622:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001626:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800162a:	4413      	add	r3, r2
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4619      	mov	r1, r3
 8001630:	481d      	ldr	r0, [pc, #116]	; (80016a8 <DioIrqHndlr+0x510>)
 8001632:	f7ff f82f 	bl	8000694 <myDebug>
				for (int i = 0; i < sizeof(temp_check_buff); i++) {
 8001636:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800163a:	3301      	adds	r3, #1
 800163c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001640:	4632      	mov	r2, r6
 8001642:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001646:	429a      	cmp	r2, r3
 8001648:	d8eb      	bhi.n	8001622 <DioIrqHndlr+0x48a>
				}
				myDebug("\r\n");
 800164a:	4818      	ldr	r0, [pc, #96]	; (80016ac <DioIrqHndlr+0x514>)
 800164c:	f7ff f822 	bl	8000694 <myDebug>
				myDebug("__________\r\n");
 8001650:	4817      	ldr	r0, [pc, #92]	; (80016b0 <DioIrqHndlr+0x518>)
 8001652:	f7ff f81f 	bl	8000694 <myDebug>
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <DioIrqHndlr+0x524>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
				memset(rx_buffer, '\0', sizeof(rx_buffer_len));
				memset(crc_buff, '\0', sizeof(crc_buff));
 800165c:	4623      	mov	r3, r4
 800165e:	461a      	mov	r2, r3
 8001660:	2100      	movs	r1, #0
 8001662:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001666:	f009 f809 	bl	800a67c <memset>
 800166a:	f8d7 d018 	ldr.w	sp, [r7, #24]
			myDebug("\r\n");
			myDebug("__________\r\n");
			memset(rx_buffer, '\0', sizeof(rx_buffer_len));
		}

		SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 800166e:	4814      	ldr	r0, [pc, #80]	; (80016c0 <DioIrqHndlr+0x528>)
 8001670:	f007 fdbe 	bl	80091f0 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8001674:	2100      	movs	r1, #0
 8001676:	2001      	movs	r0, #1
 8001678:	f008 fa02 	bl	8009a80 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 800167c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001680:	f007 fbe2 	bl	8008e48 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, main_cmd, main_cmd_len);
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <DioIrqHndlr+0x52c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	490e      	ldr	r1, [pc, #56]	; (80016c8 <DioIrqHndlr+0x530>)
 800168e:	480f      	ldr	r0, [pc, #60]	; (80016cc <DioIrqHndlr+0x534>)
 8001690:	f003 fef0 	bl	8005474 <HAL_UART_Receive_DMA>
	}
}
 8001694:	bf00      	nop
 8001696:	f507 7782 	add.w	r7, r7, #260	; 0x104
 800169a:	46bd      	mov	sp, r7
 800169c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016a0:	20000324 	.word	0x20000324
 80016a4:	0800b394 	.word	0x0800b394
 80016a8:	0800afc4 	.word	0x0800afc4
 80016ac:	0800afcc 	.word	0x0800afcc
 80016b0:	0800b3d0 	.word	0x0800b3d0
 80016b4:	20000328 	.word	0x20000328
 80016b8:	0800b3e0 	.word	0x0800b3e0
 80016bc:	200002b4 	.word	0x200002b4
 80016c0:	1a11d018 	.word	0x1a11d018
 80016c4:	20000000 	.word	0x20000000
 80016c8:	200001d8 	.word	0x200001d8
 80016cc:	20000390 	.word	0x20000390

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i
}
 80016d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016d8:	e7fe      	b.n	80016d8 <Error_Handler+0x8>

080016da <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <NMI_Handler+0x4>

080016ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <HardFault_Handler+0x4>

080016f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <MemManage_Handler+0x4>

080016f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <BusFault_Handler+0x4>

080016fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <UsageFault_Handler+0x4>

08001704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172c:	f000 fb86 	bl	8001e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <DMA1_Channel1_IRQHandler+0x10>)
 800173a:	f000 fe81 	bl	8002440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000424 	.word	0x20000424

08001748 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <DMA1_Channel2_IRQHandler+0x10>)
 800174e:	f000 fe77 	bl	8002440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000484 	.word	0x20000484

0800175c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 Global Interrupt.
  */
void TIM2_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <TIM2_IRQHandler+0x10>)
 8001762:	f003 fa07 	bl	8004b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000340 	.word	0x20000340

08001770 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <USART2_IRQHandler+0x10>)
 8001776:	f003 fec9 	bl	800550c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000390 	.word	0x20000390

08001784 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <SUBGHZ_Radio_IRQHandler+0x10>)
 800178a:	f002 ffb9 	bl	8004700 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000032c 	.word	0x2000032c

08001798 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80017a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017bc:	68fb      	ldr	r3, [r7, #12]
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_SUBGHZ_Init+0x20>)
 80017ce:	2210      	movs	r2, #16
 80017d0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_SUBGHZ_Init+0x20>)
 80017d4:	f002 fd12 	bl	80041fc <HAL_SUBGHZ_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80017de:	f7ff ff77 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000032c 	.word	0x2000032c

080017ec <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80017f4:	2001      	movs	r0, #1
 80017f6:	f7ff ffcf 	bl	8001798 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2032      	movs	r0, #50	; 0x32
 8001800:	f000 fc05 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001804:	2032      	movs	r0, #50	; 0x32
 8001806:	f000 fc1c 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
	...

08001820 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_GetTick+0x24>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001832:	f000 f910 	bl	8001a56 <TIMER_IF_GetTimerValue>
 8001836:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000338 	.word	0x20000338

08001848 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f92d 	bl	8001ab2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001868:	4a14      	ldr	r2, [pc, #80]	; (80018bc <_sbrk+0x5c>)
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <_sbrk+0x60>)
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <_sbrk+0x64>)
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <_sbrk+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d207      	bcs.n	80018a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001890:	f008 fefc 	bl	800a68c <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	220c      	movs	r2, #12
 8001898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189e:	e009      	b.n	80018b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <_sbrk+0x64>)
 80018b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20010000 	.word	0x20010000
 80018c0:	00000400 	.word	0x00000400
 80018c4:	2000033c 	.word	0x2000033c
 80018c8:	200007f0 	.word	0x200007f0

080018cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <LL_APB1_GRP1_EnableClock>:
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018fc:	68fb      	ldr	r3, [r7, #12]
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <MX_TIM2_Init+0x94>)
 8001928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800192c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <MX_TIM2_Init+0x94>)
 8001930:	222f      	movs	r2, #47	; 0x2f
 8001932:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <MX_TIM2_Init+0x94>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000001-1;
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <MX_TIM2_Init+0x94>)
 800193c:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <MX_TIM2_Init+0x98>)
 800193e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <MX_TIM2_Init+0x94>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <MX_TIM2_Init+0x94>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800194c:	4813      	ldr	r0, [pc, #76]	; (800199c <MX_TIM2_Init+0x94>)
 800194e:	f003 f875 	bl	8004a3c <HAL_TIM_Base_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001958:	f7ff feba 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001960:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	4619      	mov	r1, r3
 8001968:	480c      	ldr	r0, [pc, #48]	; (800199c <MX_TIM2_Init+0x94>)
 800196a:	f003 fa22 	bl	8004db2 <HAL_TIM_ConfigClockSource>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001974:	f7ff feac 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_TIM2_Init+0x94>)
 8001986:	f003 fc05 	bl	8005194 <HAL_TIMEx_MasterConfigSynchronization>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001990:	f7ff fe9e 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000340 	.word	0x20000340
 80019a0:	000f4240 	.word	0x000f4240

080019a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b4:	d10a      	bne.n	80019cc <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b6:	2001      	movs	r0, #1
 80019b8:	f7ff ff8e 	bl	80018d8 <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	201b      	movs	r0, #27
 80019c2:	f000 fb24 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019c6:	201b      	movs	r0, #27
 80019c8:	f000 fb3b 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 80019de:	79fb      	ldrb	r3, [r7, #7]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <TIMER_IF_SetTimerContext+0x10>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	2000038c 	.word	0x2000038c

08001a2c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001a30:	4b02      	ldr	r3, [pc, #8]	; (8001a3c <TIMER_IF_GetTimerContext+0x10>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	2000038c 	.word	0x2000038c

08001a40 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8001a4a:	687b      	ldr	r3, [r7, #4]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001a60:	687b      	ldr	r3, [r7, #4]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8001a76:	687b      	ldr	r3, [r7, #4]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b085      	sub	sp, #20
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <LL_AHB2_GRP1_EnableClock>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <LL_APB1_GRP1_EnableClock>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b18:	68fb      	ldr	r3, [r7, #12]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b28:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001b2a:	4a23      	ldr	r2, [pc, #140]	; (8001bb8 <MX_USART2_UART_Init+0x94>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b6c:	4811      	ldr	r0, [pc, #68]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001b6e:	f003 fbab 	bl	80052c8 <HAL_UART_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b78:	f7ff fdaa 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001b80:	f004 ff0e 	bl	80069a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b8a:	f7ff fda1 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4808      	ldr	r0, [pc, #32]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001b92:	f004 ff43 	bl	8006a1c <HAL_UARTEx_SetRxFifoThreshold>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b9c:	f7ff fd98 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ba0:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <MX_USART2_UART_Init+0x90>)
 8001ba2:	f004 fec5 	bl	8006930 <HAL_UARTEx_DisableFifoMode>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001bac:	f7ff fd90 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000390 	.word	0x20000390
 8001bb8:	40004400 	.word	0x40004400

08001bbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b096      	sub	sp, #88	; 0x58
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	2238      	movs	r2, #56	; 0x38
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f008 fd4d 	bl	800a67c <memset>
  if(uartHandle->Instance==USART2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a4e      	ldr	r2, [pc, #312]	; (8001d20 <HAL_UART_MspInit+0x164>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	f040 8094 	bne.w	8001d16 <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bf2:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001bf6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 f949 	bl	8003e94 <HAL_RCCEx_PeriphCLKConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001c08:	f7ff fd62 	bl	80016d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c0c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c10:	f7ff ff70 	bl	8001af4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	2001      	movs	r0, #1
 8001c16:	f7ff ff55 	bl	8001ac4 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001c1a:	230c      	movs	r3, #12
 8001c1c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c32:	4619      	mov	r1, r3
 8001c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c38:	f000 fda0 	bl	800277c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001c3c:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_UART_MspInit+0x168>)
 8001c3e:	4a3a      	ldr	r2, [pc, #232]	; (8001d28 <HAL_UART_MspInit+0x16c>)
 8001c40:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001c42:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <HAL_UART_MspInit+0x168>)
 8001c44:	2213      	movs	r2, #19
 8001c46:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c48:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_UART_MspInit+0x168>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4e:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <HAL_UART_MspInit+0x168>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c54:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_UART_MspInit+0x168>)
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c5a:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <HAL_UART_MspInit+0x168>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c60:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <HAL_UART_MspInit+0x168>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c66:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_UART_MspInit+0x168>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_UART_MspInit+0x168>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c72:	482c      	ldr	r0, [pc, #176]	; (8001d24 <HAL_UART_MspInit+0x168>)
 8001c74:	f000 fa00 	bl	8002078 <HAL_DMA_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001c7e:	f7ff fd27 	bl	80016d0 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001c82:	2110      	movs	r1, #16
 8001c84:	4827      	ldr	r0, [pc, #156]	; (8001d24 <HAL_UART_MspInit+0x168>)
 8001c86:	f000 fca1 	bl	80025cc <HAL_DMA_ConfigChannelAttributes>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_UART_MspInit+0xd8>
    {
      Error_Handler();
 8001c90:	f7ff fd1e 	bl	80016d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <HAL_UART_MspInit+0x168>)
 8001c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001c9c:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <HAL_UART_MspInit+0x168>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8001ca2:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_UART_MspInit+0x170>)
 8001ca4:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <HAL_UART_MspInit+0x174>)
 8001ca6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001ca8:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <HAL_UART_MspInit+0x170>)
 8001caa:	2214      	movs	r2, #20
 8001cac:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <HAL_UART_MspInit+0x170>)
 8001cb0:	2210      	movs	r2, #16
 8001cb2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_UART_MspInit+0x170>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_UART_MspInit+0x170>)
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_UART_MspInit+0x170>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_UART_MspInit+0x170>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_UART_MspInit+0x170>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_UART_MspInit+0x170>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001cd8:	4814      	ldr	r0, [pc, #80]	; (8001d2c <HAL_UART_MspInit+0x170>)
 8001cda:	f000 f9cd 	bl	8002078 <HAL_DMA_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001ce4:	f7ff fcf4 	bl	80016d0 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001ce8:	2110      	movs	r1, #16
 8001cea:	4810      	ldr	r0, [pc, #64]	; (8001d2c <HAL_UART_MspInit+0x170>)
 8001cec:	f000 fc6e 	bl	80025cc <HAL_DMA_ConfigChannelAttributes>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001cf6:	f7ff fceb 	bl	80016d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <HAL_UART_MspInit+0x170>)
 8001cfe:	67da      	str	r2, [r3, #124]	; 0x7c
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_UART_MspInit+0x170>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	2025      	movs	r0, #37	; 0x25
 8001d0c:	f000 f97f 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d10:	2025      	movs	r0, #37	; 0x25
 8001d12:	f000 f996 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d16:	bf00      	nop
 8001d18:	3758      	adds	r7, #88	; 0x58
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40004400 	.word	0x40004400
 8001d24:	20000424 	.word	0x20000424
 8001d28:	40020008 	.word	0x40020008
 8001d2c:	20000484 	.word	0x20000484
 8001d30:	4002001c 	.word	0x4002001c

08001d34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d34:	480d      	ldr	r0, [pc, #52]	; (8001d6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d38:	f7ff fdc8 	bl	80018cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d3e:	490d      	ldr	r1, [pc, #52]	; (8001d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d40:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <LoopForever+0xe>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d44:	e002      	b.n	8001d4c <LoopCopyDataInit>

08001d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4a:	3304      	adds	r3, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d50:	d3f9      	bcc.n	8001d46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d54:	4c0a      	ldr	r4, [pc, #40]	; (8001d80 <LoopForever+0x16>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d58:	e001      	b.n	8001d5e <LoopFillZerobss>

08001d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d5c:	3204      	adds	r2, #4

08001d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d60:	d3fb      	bcc.n	8001d5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d62:	f008 fc99 	bl	800a698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d66:	f7ff f82f 	bl	8000dc8 <main>

08001d6a <LoopForever>:

LoopForever:
    b LoopForever
 8001d6a:	e7fe      	b.n	8001d6a <LoopForever>
  ldr   r0, =_estack
 8001d6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001d78:	0800b6d4 	.word	0x0800b6d4
  ldr r2, =_sbss
 8001d7c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001d80:	200007f0 	.word	0x200007f0

08001d84 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d92:	2003      	movs	r0, #3
 8001d94:	f000 f930 	bl	8001ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d98:	f001 fe9e 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4a09      	ldr	r2, [pc, #36]	; (8001dc4 <HAL_Init+0x3c>)
 8001da0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001da2:	2000      	movs	r0, #0
 8001da4:	f000 f810 	bl	8001dc8 <HAL_InitTick>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	71fb      	strb	r3, [r7, #7]
 8001db2:	e001      	b.n	8001db8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001db4:	f7ff fc91 	bl	80016da <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001db8:	79fb      	ldrb	r3, [r7, #7]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_InitTick+0x6c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d024      	beq.n	8001e26 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ddc:	f001 fe7c 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_InitTick+0x6c>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dec:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f932 	bl	800205e <HAL_SYSTICK_Config>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10f      	bne.n	8001e20 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b0f      	cmp	r3, #15
 8001e04:	d809      	bhi.n	8001e1a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e06:	2200      	movs	r2, #0
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e0e:	f000 f8fe 	bl	800200e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <HAL_InitTick+0x70>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	e007      	b.n	8001e2a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	e004      	b.n	8001e2a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
 8001e24:	e001      	b.n	8001e2a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	2000000c 	.word	0x2000000c
 8001e38:	20000008 	.word	0x20000008

08001e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_IncTick+0x1c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_IncTick+0x20>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <HAL_IncTick+0x20>)
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	2000000c 	.word	0x2000000c
 8001e5c:	200004e4 	.word	0x200004e4

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	60d3      	str	r3, [r2, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db0b      	blt.n	8001eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4906      	ldr	r1, [pc, #24]	; (8001ef8 <__NVIC_EnableIRQ+0x34>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	e000e100 	.word	0xe000e100

08001efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	6039      	str	r1, [r7, #0]
 8001f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db0a      	blt.n	8001f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	490c      	ldr	r1, [pc, #48]	; (8001f48 <__NVIC_SetPriority+0x4c>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	0112      	lsls	r2, r2, #4
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f24:	e00a      	b.n	8001f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4908      	ldr	r1, [pc, #32]	; (8001f4c <__NVIC_SetPriority+0x50>)
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	3b04      	subs	r3, #4
 8001f34:	0112      	lsls	r2, r2, #4
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	440b      	add	r3, r1
 8001f3a:	761a      	strb	r2, [r3, #24]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f1c3 0307 	rsb	r3, r3, #7
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	bf28      	it	cs
 8001f6e:	2304      	movcs	r3, #4
 8001f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3304      	adds	r3, #4
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d902      	bls.n	8001f80 <NVIC_EncodePriority+0x30>
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3b03      	subs	r3, #3
 8001f7e:	e000      	b.n	8001f82 <NVIC_EncodePriority+0x32>
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	401a      	ands	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	4313      	orrs	r3, r2
         );
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3724      	adds	r7, #36	; 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc4:	d301      	bcc.n	8001fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00f      	b.n	8001fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <SysTick_Config+0x40>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fd8:	f7ff ff90 	bl	8001efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <SysTick_Config+0x40>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <SysTick_Config+0x40>)
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	e000e010 	.word	0xe000e010

08001ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff2d 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff44 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff92 	bl	8001f50 <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff61 	bl	8001efc <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff37 	bl	8001ec4 <__NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffa4 	bl	8001fb4 <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e08e      	b.n	80021a8 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <HAL_DMA_Init+0x138>)
 8002092:	429a      	cmp	r2, r3
 8002094:	d80f      	bhi.n	80020b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	4b45      	ldr	r3, [pc, #276]	; (80021b4 <HAL_DMA_Init+0x13c>)
 800209e:	4413      	add	r3, r2
 80020a0:	4a45      	ldr	r2, [pc, #276]	; (80021b8 <HAL_DMA_Init+0x140>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	009a      	lsls	r2, r3, #2
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a42      	ldr	r2, [pc, #264]	; (80021bc <HAL_DMA_Init+0x144>)
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40
 80020b4:	e00e      	b.n	80020d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <HAL_DMA_Init+0x148>)
 80020be:	4413      	add	r3, r2
 80020c0:	4a3d      	ldr	r2, [pc, #244]	; (80021b8 <HAL_DMA_Init+0x140>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	009a      	lsls	r2, r3, #2
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a3c      	ldr	r2, [pc, #240]	; (80021c4 <HAL_DMA_Init+0x14c>)
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80020ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ee:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6819      	ldr	r1, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fabc 	bl	80026a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002134:	d102      	bne.n	800213c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002144:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002148:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002152:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d010      	beq.n	800217e <HAL_DMA_Init+0x106>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b04      	cmp	r3, #4
 8002162:	d80c      	bhi.n	800217e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 fae5 	bl	8002734 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	e008      	b.n	8002190 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40020407 	.word	0x40020407
 80021b4:	bffdfff8 	.word	0xbffdfff8
 80021b8:	cccccccd 	.word	0xcccccccd
 80021bc:	40020000 	.word	0x40020000
 80021c0:	bffdfbf8 	.word	0xbffdfbf8
 80021c4:	40020400 	.word	0x40020400

080021c8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_DMA_Start_IT+0x20>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e069      	b.n	80022bc <HAL_DMA_Start_IT+0xf4>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d155      	bne.n	80022a8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	68b9      	ldr	r1, [r7, #8]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fa02 	bl	800262a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 020e 	orr.w	r2, r2, #14
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e00f      	b.n	8002260 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0204 	bic.w	r2, r2, #4
 800224e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 020a 	orr.w	r2, r2, #10
 800225e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800227c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002294:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0201 	orr.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e008      	b.n	80022ba <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2280      	movs	r2, #128	; 0x80
 80022ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e04f      	b.n	8002376 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d008      	beq.n	80022f4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2204      	movs	r2, #4
 80022e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e040      	b.n	8002376 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 020e 	bic.w	r2, r2, #14
 8002302:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002312:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002328:	f003 021c 	and.w	r2, r3, #28
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	2101      	movs	r1, #1
 8002332:	fa01 f202 	lsl.w	r2, r1, r2
 8002336:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002340:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00c      	beq.n	8002364 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002358:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002362:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d005      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2204      	movs	r2, #4
 800239c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	e047      	b.n	8002434 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 020e 	bic.w	r2, r2, #14
 80023b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d8:	f003 021c 	and.w	r2, r3, #28
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	2101      	movs	r1, #1
 80023e2:	fa01 f202 	lsl.w	r2, r1, r2
 80023e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00c      	beq.n	8002414 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002408:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002412:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
    }
  }
  return status;
 8002434:	7bfb      	ldrb	r3, [r7, #15]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	f003 031c 	and.w	r3, r3, #28
 8002460:	2204      	movs	r2, #4
 8002462:	409a      	lsls	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d027      	beq.n	80024bc <HAL_DMA_IRQHandler+0x7c>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d022      	beq.n	80024bc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0204 	bic.w	r2, r2, #4
 8002492:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	f003 021c 	and.w	r2, r3, #28
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	2104      	movs	r1, #4
 80024a2:	fa01 f202 	lsl.w	r2, r1, r2
 80024a6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8081 	beq.w	80025b4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80024ba:	e07b      	b.n	80025b4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	f003 031c 	and.w	r3, r3, #28
 80024c4:	2202      	movs	r2, #2
 80024c6:	409a      	lsls	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d03d      	beq.n	800254c <HAL_DMA_IRQHandler+0x10c>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d038      	beq.n	800254c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 020a 	bic.w	r2, r2, #10
 80024f6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_DMA_IRQHandler+0x180>)
 8002508:	429a      	cmp	r2, r3
 800250a:	d909      	bls.n	8002520 <HAL_DMA_IRQHandler+0xe0>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002510:	f003 031c 	and.w	r3, r3, #28
 8002514:	4a2b      	ldr	r2, [pc, #172]	; (80025c4 <HAL_DMA_IRQHandler+0x184>)
 8002516:	2102      	movs	r1, #2
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	6053      	str	r3, [r2, #4]
 800251e:	e008      	b.n	8002532 <HAL_DMA_IRQHandler+0xf2>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	f003 031c 	and.w	r3, r3, #28
 8002528:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <HAL_DMA_IRQHandler+0x188>)
 800252a:	2102      	movs	r1, #2
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d038      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800254a:	e033      	b.n	80025b4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	f003 031c 	and.w	r3, r3, #28
 8002554:	2208      	movs	r2, #8
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d02a      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x176>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d025      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 020e 	bic.w	r2, r2, #14
 8002578:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f003 021c 	and.w	r2, r3, #28
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2101      	movs	r1, #1
 8002588:	fa01 f202 	lsl.w	r2, r1, r2
 800258c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
}
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40020080 	.word	0x40020080
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40020000 	.word	0x40020000

080025cc <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	72fb      	strb	r3, [r7, #11]
    return status;
 80025e4:	7afb      	ldrb	r3, [r7, #11]
 80025e6:	e01b      	b.n	8002620 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00d      	beq.n	8002616 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d004      	beq.n	800260e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e003      	b.n	8002616 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002614:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	601a      	str	r2, [r3, #0]

  return status;
 800261e:	7afb      	ldrb	r3, [r7, #11]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002640:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002652:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	f003 021c 	and.w	r2, r3, #28
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f202 	lsl.w	r2, r1, r2
 8002666:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b10      	cmp	r3, #16
 8002676:	d108      	bne.n	800268a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002688:	e007      	b.n	800269a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	60da      	str	r2, [r3, #12]
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d813      	bhi.n	80026e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026c4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	3b08      	subs	r3, #8
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	e011      	b.n	8002704 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	009a      	lsls	r2, r3, #2
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80026ea:	4413      	add	r3, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	3b08      	subs	r3, #8
 80026f8:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	3307      	adds	r3, #7
 8002702:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002708:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	2201      	movs	r2, #1
 8002712:	409a      	lsls	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40020407 	.word	0x40020407
 8002728:	cccccccd 	.word	0xcccccccd
 800272c:	4002081c 	.word	0x4002081c
 8002730:	40020880 	.word	0x40020880

08002734 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002744:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	461a      	mov	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a08      	ldr	r2, [pc, #32]	; (8002778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002758:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3b01      	subs	r3, #1
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2201      	movs	r2, #1
 8002764:	409a      	lsls	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	1000823f 	.word	0x1000823f
 8002778:	40020940 	.word	0x40020940

0800277c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278a:	e140      	b.n	8002a0e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2101      	movs	r1, #1
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8132 	beq.w	8002a08 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d005      	beq.n	80027bc <HAL_GPIO_Init+0x40>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d130      	bne.n	800281e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027f2:	2201      	movs	r2, #1
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	f003 0201 	and.w	r2, r3, #1
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b03      	cmp	r3, #3
 8002828:	d017      	beq.n	800285a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d123      	bne.n	80028ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	08da      	lsrs	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	220f      	movs	r2, #15
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	08da      	lsrs	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3208      	adds	r2, #8
 80028a8:	6939      	ldr	r1, [r7, #16]
 80028aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0203 	and.w	r2, r3, #3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 808c 	beq.w	8002a08 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80028f0:	4a4e      	ldr	r2, [pc, #312]	; (8002a2c <HAL_GPIO_Init+0x2b0>)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	3302      	adds	r3, #2
 80028f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	2207      	movs	r2, #7
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800291a:	d00d      	beq.n	8002938 <HAL_GPIO_Init+0x1bc>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a44      	ldr	r2, [pc, #272]	; (8002a30 <HAL_GPIO_Init+0x2b4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d007      	beq.n	8002934 <HAL_GPIO_Init+0x1b8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a43      	ldr	r2, [pc, #268]	; (8002a34 <HAL_GPIO_Init+0x2b8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d101      	bne.n	8002930 <HAL_GPIO_Init+0x1b4>
 800292c:	2302      	movs	r3, #2
 800292e:	e004      	b.n	800293a <HAL_GPIO_Init+0x1be>
 8002930:	2307      	movs	r3, #7
 8002932:	e002      	b.n	800293a <HAL_GPIO_Init+0x1be>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_GPIO_Init+0x1be>
 8002938:	2300      	movs	r3, #0
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	f002 0203 	and.w	r2, r2, #3
 8002940:	0092      	lsls	r2, r2, #2
 8002942:	4093      	lsls	r3, r2
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800294a:	4938      	ldr	r1, [pc, #224]	; (8002a2c <HAL_GPIO_Init+0x2b0>)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002958:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <HAL_GPIO_Init+0x2bc>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	43db      	mvns	r3, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4013      	ands	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800297c:	4a2e      	ldr	r2, [pc, #184]	; (8002a38 <HAL_GPIO_Init+0x2bc>)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002982:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <HAL_GPIO_Init+0x2bc>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	43db      	mvns	r3, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4013      	ands	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029a6:	4a24      	ldr	r2, [pc, #144]	; (8002a38 <HAL_GPIO_Init+0x2bc>)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80029ac:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <HAL_GPIO_Init+0x2bc>)
 80029ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029b2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80029d2:	4a19      	ldr	r2, [pc, #100]	; (8002a38 <HAL_GPIO_Init+0x2bc>)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80029da:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <HAL_GPIO_Init+0x2bc>)
 80029dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002a00:	4a0d      	ldr	r2, [pc, #52]	; (8002a38 <HAL_GPIO_Init+0x2bc>)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f47f aeb7 	bne.w	800278c <HAL_GPIO_Init+0x10>
  }
}
 8002a1e:	bf00      	nop
 8002a20:	bf00      	nop
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	48000400 	.word	0x48000400
 8002a34:	48000800 	.word	0x48000800
 8002a38:	58000800 	.word	0x58000800

08002a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	807b      	strh	r3, [r7, #2]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a4c:	787b      	ldrb	r3, [r7, #1]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a58:	e002      	b.n	8002a60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a03      	ldr	r2, [pc, #12]	; (8002a84 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7a:	6013      	str	r3, [r2, #0]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	58000400 	.word	0x58000400

08002a88 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_PWREx_GetVoltageRange+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	58000400 	.word	0x58000400

08002aa0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab0:	d101      	bne.n	8002ab6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	58000400 	.word	0x58000400

08002ac4 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b0e:	d101      	bne.n	8002b14 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b68:	d101      	bne.n	8002b6e <LL_RCC_HSE_IsReady+0x18>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <LL_RCC_HSE_IsReady+0x1a>
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8a:	6013      	str	r3, [r2, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc2:	d101      	bne.n	8002bc8 <LL_RCC_HSI_IsReady+0x18>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <LL_RCC_HSI_IsReady+0x1a>
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	061b      	lsls	r3, r3, #24
 8002be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d101      	bne.n	8002c12 <LL_RCC_LSE_IsReady+0x18>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <LL_RCC_LSE_IsReady+0x1a>
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d101      	bne.n	8002c74 <LL_RCC_LSI_IsReady+0x18>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <LL_RCC_LSI_IsReady+0x1a>
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6013      	str	r3, [r2, #0]
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	6013      	str	r3, [r2, #0]
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d101      	bne.n	8002ccc <LL_RCC_MSI_IsReady+0x16>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <LL_RCC_MSI_IsReady+0x18>
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d101      	bne.n	8002cec <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f023 0203 	bic.w	r2, r3, #3
 8002d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	608b      	str	r3, [r1, #8]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002dbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002de8:	f023 020f 	bic.w	r2, r3, #15
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eda:	6013      	str	r3, [r2, #0]
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ef6:	d101      	bne.n	8002efc <LL_RCC_PLL_IsReady+0x18>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <LL_RCC_PLL_IsReady+0x1a>
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0303 	and.w	r3, r3, #3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f72:	d101      	bne.n	8002f78 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f96:	d101      	bne.n	8002f9c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fba:	d101      	bne.n	8002fc0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fdc:	d101      	bne.n	8002fe2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ffa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ffe:	d101      	bne.n	8003004 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr
	...

08003010 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e36f      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003022:	f7ff fea6 	bl	8002d72 <LL_RCC_GetSysClkSource>
 8003026:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003028:	f7ff ff8f 	bl	8002f4a <LL_RCC_PLL_GetMainSource>
 800302c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80c4 	beq.w	80031c4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_RCC_OscConfig+0x3e>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	2b0c      	cmp	r3, #12
 8003046:	d176      	bne.n	8003136 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d173      	bne.n	8003136 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e353      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800305e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_OscConfig+0x68>
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003076:	e006      	b.n	8003086 <HAL_RCC_OscConfig+0x76>
 8003078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003086:	4293      	cmp	r3, r2
 8003088:	d222      	bcs.n	80030d0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fd5a 	bl	8003b48 <RCC_SetFlashLatencyFromMSIRange>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e331      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800309e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a8:	f043 0308 	orr.w	r3, r3, #8
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fe2b 	bl	8002d24 <LL_RCC_MSI_SetCalibTrimming>
 80030ce:	e021      	b.n	8003114 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030da:	f043 0308 	orr.w	r3, r3, #8
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fe12 	bl	8002d24 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fd1f 	bl	8003b48 <RCC_SetFlashLatencyFromMSIRange>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e2f6      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003114:	f000 fce0 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003118:	4603      	mov	r3, r0
 800311a:	4aa7      	ldr	r2, [pc, #668]	; (80033b8 <HAL_RCC_OscConfig+0x3a8>)
 800311c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800311e:	4ba7      	ldr	r3, [pc, #668]	; (80033bc <HAL_RCC_OscConfig+0x3ac>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe fe50 	bl	8001dc8 <HAL_InitTick>
 8003128:	4603      	mov	r3, r0
 800312a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800312c:	7cfb      	ldrb	r3, [r7, #19]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d047      	beq.n	80031c2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8003132:	7cfb      	ldrb	r3, [r7, #19]
 8003134:	e2e5      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d02c      	beq.n	8003198 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800313e:	f7ff fd9e 	bl	8002c7e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003142:	f7fe fb6d 	bl	8001820 <HAL_GetTick>
 8003146:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800314a:	f7fe fb69 	bl	8001820 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e2d2      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800315c:	f7ff fdab 	bl	8002cb6 <LL_RCC_MSI_IsReady>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f1      	beq.n	800314a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003170:	f043 0308 	orr.w	r3, r3, #8
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003188:	4313      	orrs	r3, r2
 800318a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fdc7 	bl	8002d24 <LL_RCC_MSI_SetCalibTrimming>
 8003196:	e015      	b.n	80031c4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003198:	f7ff fd7f 	bl	8002c9a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800319c:	f7fe fb40 	bl	8001820 <HAL_GetTick>
 80031a0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031a4:	f7fe fb3c 	bl	8001820 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e2a5      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80031b6:	f7ff fd7e 	bl	8002cb6 <LL_RCC_MSI_IsReady>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f1      	bne.n	80031a4 <HAL_RCC_OscConfig+0x194>
 80031c0:	e000      	b.n	80031c4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031c2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d058      	beq.n	8003282 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d005      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1d2>
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	2b0c      	cmp	r3, #12
 80031da:	d108      	bne.n	80031ee <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d105      	bne.n	80031ee <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d14b      	bne.n	8003282 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e289      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80031ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320c:	d102      	bne.n	8003214 <HAL_RCC_OscConfig+0x204>
 800320e:	f7ff fc86 	bl	8002b1e <LL_RCC_HSE_Enable>
 8003212:	e00d      	b.n	8003230 <HAL_RCC_OscConfig+0x220>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800321c:	d104      	bne.n	8003228 <HAL_RCC_OscConfig+0x218>
 800321e:	f7ff fc51 	bl	8002ac4 <LL_RCC_HSE_EnableTcxo>
 8003222:	f7ff fc7c 	bl	8002b1e <LL_RCC_HSE_Enable>
 8003226:	e003      	b.n	8003230 <HAL_RCC_OscConfig+0x220>
 8003228:	f7ff fc87 	bl	8002b3a <LL_RCC_HSE_Disable>
 800322c:	f7ff fc58 	bl	8002ae0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d012      	beq.n	800325e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fe faf2 	bl	8001820 <HAL_GetTick>
 800323c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003240:	f7fe faee 	bl	8001820 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	; 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e257      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003252:	f7ff fc80 	bl	8002b56 <LL_RCC_HSE_IsReady>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f1      	beq.n	8003240 <HAL_RCC_OscConfig+0x230>
 800325c:	e011      	b.n	8003282 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325e:	f7fe fadf 	bl	8001820 <HAL_GetTick>
 8003262:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003266:	f7fe fadb 	bl	8001820 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b64      	cmp	r3, #100	; 0x64
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e244      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003278:	f7ff fc6d 	bl	8002b56 <LL_RCC_HSE_IsReady>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f1      	bne.n	8003266 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d046      	beq.n	800331c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2b04      	cmp	r3, #4
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_OscConfig+0x290>
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d10e      	bne.n	80032b8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d10b      	bne.n	80032b8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e22a      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fc8e 	bl	8002bd2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80032b6:	e031      	b.n	800331c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d019      	beq.n	80032f4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c0:	f7ff fc5a 	bl	8002b78 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe faac 	bl	8001820 <HAL_GetTick>
 80032c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032cc:	f7fe faa8 	bl	8001820 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e211      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032de:	f7ff fc67 	bl	8002bb0 <LL_RCC_HSI_IsReady>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f1      	beq.n	80032cc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fc70 	bl	8002bd2 <LL_RCC_HSI_SetCalibTrimming>
 80032f2:	e013      	b.n	800331c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f4:	f7ff fc4e 	bl	8002b94 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fe fa92 	bl	8001820 <HAL_GetTick>
 80032fc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003300:	f7fe fa8e 	bl	8001820 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e1f7      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003312:	f7ff fc4d 	bl	8002bb0 <LL_RCC_HSI_IsReady>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f1      	bne.n	8003300 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d06e      	beq.n	8003406 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d056      	beq.n	80033de <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003338:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69da      	ldr	r2, [r3, #28]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	429a      	cmp	r2, r3
 8003346:	d031      	beq.n	80033ac <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d006      	beq.n	8003360 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e1d0      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d013      	beq.n	8003392 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800336a:	f7ff fc67 	bl	8002c3c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800336e:	f7fe fa57 	bl	8001820 <HAL_GetTick>
 8003372:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003376:	f7fe fa53 	bl	8001820 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b11      	cmp	r3, #17
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e1bc      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003388:	f7ff fc68 	bl	8002c5c <LL_RCC_LSI_IsReady>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f1      	bne.n	8003376 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339a:	f023 0210 	bic.w	r2, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ac:	f7ff fc36 	bl	8002c1c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b0:	f7fe fa36 	bl	8001820 <HAL_GetTick>
 80033b4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80033b6:	e00c      	b.n	80033d2 <HAL_RCC_OscConfig+0x3c2>
 80033b8:	20000004 	.word	0x20000004
 80033bc:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c0:	f7fe fa2e 	bl	8001820 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b11      	cmp	r3, #17
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e197      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80033d2:	f7ff fc43 	bl	8002c5c <LL_RCC_LSI_IsReady>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f1      	beq.n	80033c0 <HAL_RCC_OscConfig+0x3b0>
 80033dc:	e013      	b.n	8003406 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033de:	f7ff fc2d 	bl	8002c3c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fe fa1d 	bl	8001820 <HAL_GetTick>
 80033e6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ea:	f7fe fa19 	bl	8001820 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b11      	cmp	r3, #17
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e182      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80033fc:	f7ff fc2e 	bl	8002c5c <LL_RCC_LSI_IsReady>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f1      	bne.n	80033ea <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80d8 	beq.w	80035c4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003414:	f7ff fb44 	bl	8002aa0 <LL_PWR_IsEnabledBkUpAccess>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d113      	bne.n	8003446 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800341e:	f7ff fb25 	bl	8002a6c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fe f9fd 	bl	8001820 <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fe f9f9 	bl	8001820 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e162      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800343c:	f7ff fb30 	bl	8002aa0 <LL_PWR_IsEnabledBkUpAccess>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f1      	beq.n	800342a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d07b      	beq.n	8003546 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b85      	cmp	r3, #133	; 0x85
 8003454:	d003      	beq.n	800345e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b05      	cmp	r3, #5
 800345c:	d109      	bne.n	8003472 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800345e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800346a:	f043 0304 	orr.w	r3, r3, #4
 800346e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003472:	f7fe f9d5 	bl	8001820 <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe f9c7 	bl	8001820 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e12e      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80034a4:	f7ff fba9 	bl	8002bfa <LL_RCC_LSE_IsReady>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0ef      	beq.n	800348e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b81      	cmp	r3, #129	; 0x81
 80034b4:	d003      	beq.n	80034be <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b85      	cmp	r3, #133	; 0x85
 80034bc:	d121      	bne.n	8003502 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034be:	f7fe f9af 	bl	8001820 <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034d8:	e00a      	b.n	80034f0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034da:	f7fe f9a1 	bl	8001820 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e108      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0ec      	beq.n	80034da <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003500:	e060      	b.n	80035c4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003502:	f7fe f98d 	bl	8001820 <HAL_GetTick>
 8003506:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800351c:	e00a      	b.n	8003534 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7fe f97f 	bl	8001820 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f241 3288 	movw	r2, #5000	; 0x1388
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e0e6      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1ec      	bne.n	800351e <HAL_RCC_OscConfig+0x50e>
 8003544:	e03e      	b.n	80035c4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003546:	f7fe f96b 	bl	8001820 <HAL_GetTick>
 800354a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003560:	e00a      	b.n	8003578 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fe f95d 	bl	8001820 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e0c4      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1ec      	bne.n	8003562 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003588:	f7fe f94a 	bl	8001820 <HAL_GetTick>
 800358c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800358e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7fe f93c 	bl	8001820 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e0a3      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80035ba:	f7ff fb1e 	bl	8002bfa <LL_RCC_LSE_IsReady>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1ef      	bne.n	80035a4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8099 	beq.w	8003700 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	2b0c      	cmp	r3, #12
 80035d2:	d06c      	beq.n	80036ae <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d14b      	bne.n	8003674 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	f7ff fc74 	bl	8002ec8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fe f91e 	bl	8001820 <HAL_GetTick>
 80035e4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fe f91a 	bl	8001820 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b0a      	cmp	r3, #10
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e083      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80035fa:	f7ff fc73 	bl	8002ee4 <LL_RCC_PLL_IsReady>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f1      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	4b40      	ldr	r3, [pc, #256]	; (800370c <HAL_RCC_OscConfig+0x6fc>)
 800360c:	4013      	ands	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003616:	4311      	orrs	r1, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800361c:	0212      	lsls	r2, r2, #8
 800361e:	4311      	orrs	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003624:	4311      	orrs	r1, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800362a:	4311      	orrs	r1, r2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003630:	430a      	orrs	r2, r1
 8003632:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003636:	4313      	orrs	r3, r2
 8003638:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800363a:	f7ff fc37 	bl	8002eac <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7fe f8e7 	bl	8001820 <HAL_GetTick>
 8003652:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003656:	f7fe f8e3 	bl	8001820 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b0a      	cmp	r3, #10
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e04c      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003668:	f7ff fc3c 	bl	8002ee4 <LL_RCC_PLL_IsReady>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f1      	beq.n	8003656 <HAL_RCC_OscConfig+0x646>
 8003672:	e045      	b.n	8003700 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003674:	f7ff fc28 	bl	8002ec8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fe f8d2 	bl	8001820 <HAL_GetTick>
 800367c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7fe f8ce 	bl	8001820 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b0a      	cmp	r3, #10
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e037      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003692:	f7ff fc27 	bl	8002ee4 <LL_RCC_PLL_IsReady>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f1      	bne.n	8003680 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800369c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036a6:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <HAL_RCC_OscConfig+0x700>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	60cb      	str	r3, [r1, #12]
 80036ac:	e028      	b.n	8003700 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e023      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f003 0203 	and.w	r2, r3, #3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d115      	bne.n	80036fc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036da:	429a      	cmp	r2, r3
 80036dc:	d10e      	bne.n	80036fc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d106      	bne.n	80036fc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	11c1808c 	.word	0x11c1808c
 8003710:	eefefffc 	.word	0xeefefffc

08003714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e12c      	b.n	8003982 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b98      	ldr	r3, [pc, #608]	; (800398c <HAL_RCC_ClockConfig+0x278>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d91b      	bls.n	800376e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b95      	ldr	r3, [pc, #596]	; (800398c <HAL_RCC_ClockConfig+0x278>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	4993      	ldr	r1, [pc, #588]	; (800398c <HAL_RCC_ClockConfig+0x278>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003746:	f7fe f86b 	bl	8001820 <HAL_GetTick>
 800374a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374c:	e008      	b.n	8003760 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800374e:	f7fe f867 	bl	8001820 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e110      	b.n	8003982 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003760:	4b8a      	ldr	r3, [pc, #552]	; (800398c <HAL_RCC_ClockConfig+0x278>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d1ef      	bne.n	800374e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d016      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fb02 	bl	8002d88 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003784:	f7fe f84c 	bl	8001820 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800378c:	f7fe f848 	bl	8001820 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e0f1      	b.n	8003982 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800379e:	f7ff fbdf 	bl	8002f60 <LL_RCC_IsActiveFlag_HPRE>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f1      	beq.n	800378c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d016      	beq.n	80037e2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff faf8 	bl	8002dae <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037be:	f7fe f82f 	bl	8001820 <HAL_GetTick>
 80037c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037c6:	f7fe f82b 	bl	8001820 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e0d4      	b.n	8003982 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80037d8:	f7ff fbd3 	bl	8002f82 <LL_RCC_IsActiveFlag_C2HPRE>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f1      	beq.n	80037c6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff faf0 	bl	8002dd8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037f8:	f7fe f812 	bl	8001820 <HAL_GetTick>
 80037fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003800:	f7fe f80e 	bl	8001820 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e0b7      	b.n	8003982 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003812:	f7ff fbc8 	bl	8002fa6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f1      	beq.n	8003800 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d016      	beq.n	8003856 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fae9 	bl	8002e04 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003832:	f7fd fff5 	bl	8001820 <HAL_GetTick>
 8003836:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800383a:	f7fd fff1 	bl	8001820 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e09a      	b.n	8003982 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800384c:	f7ff fbbd 	bl	8002fca <LL_RCC_IsActiveFlag_PPRE1>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f1      	beq.n	800383a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d017      	beq.n	8003892 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fade 	bl	8002e2a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800386e:	f7fd ffd7 	bl	8001820 <HAL_GetTick>
 8003872:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003874:	e008      	b.n	8003888 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003876:	f7fd ffd3 	bl	8001820 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e07c      	b.n	8003982 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003888:	f7ff fbb0 	bl	8002fec <LL_RCC_IsActiveFlag_PPRE2>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f1      	beq.n	8003876 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d043      	beq.n	8003926 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d106      	bne.n	80038b4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80038a6:	f7ff f956 	bl	8002b56 <LL_RCC_HSE_IsReady>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d11e      	bne.n	80038ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e066      	b.n	8003982 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d106      	bne.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80038bc:	f7ff fb12 	bl	8002ee4 <LL_RCC_PLL_IsReady>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d113      	bne.n	80038ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e05b      	b.n	8003982 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80038d2:	f7ff f9f0 	bl	8002cb6 <LL_RCC_MSI_IsReady>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d108      	bne.n	80038ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e050      	b.n	8003982 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80038e0:	f7ff f966 	bl	8002bb0 <LL_RCC_HSI_IsReady>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e049      	b.n	8003982 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fa2a 	bl	8002d4c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f8:	f7fd ff92 	bl	8001820 <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003900:	f7fd ff8e 	bl	8001820 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e035      	b.n	8003982 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	f7ff fa2c 	bl	8002d72 <LL_RCC_GetSysClkSource>
 800391a:	4602      	mov	r2, r0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	429a      	cmp	r2, r3
 8003924:	d1ec      	bne.n	8003900 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003926:	4b19      	ldr	r3, [pc, #100]	; (800398c <HAL_RCC_ClockConfig+0x278>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d21b      	bcs.n	800396c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003934:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_RCC_ClockConfig+0x278>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f023 0207 	bic.w	r2, r3, #7
 800393c:	4913      	ldr	r1, [pc, #76]	; (800398c <HAL_RCC_ClockConfig+0x278>)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003944:	f7fd ff6c 	bl	8001820 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	e008      	b.n	800395e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800394c:	f7fd ff68 	bl	8001820 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e011      	b.n	8003982 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_ClockConfig+0x278>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d1ef      	bne.n	800394c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800396c:	f000 f8b4 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003970:	4603      	mov	r3, r0
 8003972:	4a07      	ldr	r2, [pc, #28]	; (8003990 <HAL_RCC_ClockConfig+0x27c>)
 8003974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003976:	4b07      	ldr	r3, [pc, #28]	; (8003994 <HAL_RCC_ClockConfig+0x280>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fa24 	bl	8001dc8 <HAL_InitTick>
 8003980:	4603      	mov	r3, r0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	58004000 	.word	0x58004000
 8003990:	20000004 	.word	0x20000004
 8003994:	20000008 	.word	0x20000008

08003998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a6:	f7ff f9e4 	bl	8002d72 <LL_RCC_GetSysClkSource>
 80039aa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039ac:	f7ff facd 	bl	8002f4a <LL_RCC_PLL_GetMainSource>
 80039b0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x2c>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b0c      	cmp	r3, #12
 80039bc:	d139      	bne.n	8003a32 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d136      	bne.n	8003a32 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80039c4:	f7ff f987 	bl	8002cd6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d115      	bne.n	80039fa <HAL_RCC_GetSysClockFreq+0x62>
 80039ce:	f7ff f982 	bl	8002cd6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_GetSysClockFreq+0x4e>
 80039d8:	f7ff f98d 	bl	8002cf6 <LL_RCC_MSI_GetRange>
 80039dc:	4603      	mov	r3, r0
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	e005      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x5a>
 80039e6:	f7ff f991 	bl	8002d0c <LL_RCC_MSI_GetRangeAfterStandby>
 80039ea:	4603      	mov	r3, r0
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	4a36      	ldr	r2, [pc, #216]	; (8003acc <HAL_RCC_GetSysClockFreq+0x134>)
 80039f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f8:	e014      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x8c>
 80039fa:	f7ff f96c 	bl	8002cd6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_GetSysClockFreq+0x7a>
 8003a04:	f7ff f977 	bl	8002cf6 <LL_RCC_MSI_GetRange>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	e005      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0x86>
 8003a12:	f7ff f97b 	bl	8002d0c <LL_RCC_MSI_GetRangeAfterStandby>
 8003a16:	4603      	mov	r3, r0
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	4a2b      	ldr	r2, [pc, #172]	; (8003acc <HAL_RCC_GetSysClockFreq+0x134>)
 8003a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a24:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d115      	bne.n	8003a58 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a30:	e012      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d102      	bne.n	8003a3e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a38:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	e00c      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d109      	bne.n	8003a58 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a44:	f7ff f85a 	bl	8002afc <LL_RCC_HSE_IsEnabledDiv2>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d102      	bne.n	8003a54 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	e001      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a54:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a56:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a58:	f7ff f98b 	bl	8002d72 <LL_RCC_GetSysClkSource>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b0c      	cmp	r3, #12
 8003a60:	d12f      	bne.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a62:	f7ff fa72 	bl	8002f4a <LL_RCC_PLL_GetMainSource>
 8003a66:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCC_GetSysClockFreq+0xde>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d003      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0xe4>
 8003a74:	e00d      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a76:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a78:	60fb      	str	r3, [r7, #12]
        break;
 8003a7a:	e00d      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a7c:	f7ff f83e 	bl	8002afc <LL_RCC_HSE_IsEnabledDiv2>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d102      	bne.n	8003a8c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a88:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a8a:	e005      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a8e:	60fb      	str	r3, [r7, #12]
        break;
 8003a90:	e002      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	60fb      	str	r3, [r7, #12]
        break;
 8003a96:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003a98:	f7ff fa35 	bl	8002f06 <LL_RCC_PLL_GetN>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	fb03 f402 	mul.w	r4, r3, r2
 8003aa4:	f7ff fa46 	bl	8002f34 <LL_RCC_PLL_GetDivider>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	3301      	adds	r3, #1
 8003aae:	fbb4 f4f3 	udiv	r4, r4, r3
 8003ab2:	f7ff fa34 	bl	8002f1e <LL_RCC_PLL_GetR>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	0f5b      	lsrs	r3, r3, #29
 8003aba:	3301      	adds	r3, #1
 8003abc:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ac0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003ac2:	697b      	ldr	r3, [r7, #20]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd90      	pop	{r4, r7, pc}
 8003acc:	0800b4bc 	.word	0x0800b4bc
 8003ad0:	00f42400 	.word	0x00f42400
 8003ad4:	01e84800 	.word	0x01e84800

08003ad8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad8:	b598      	push	{r3, r4, r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003adc:	f7ff ff5c 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	f7ff f9b5 	bl	8002e50 <LL_RCC_GetAHBPrescaler>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	4a03      	ldr	r2, [pc, #12]	; (8003afc <HAL_RCC_GetHCLKFreq+0x24>)
 8003af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd98      	pop	{r3, r4, r7, pc}
 8003afc:	0800b45c 	.word	0x0800b45c

08003b00 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b00:	b598      	push	{r3, r4, r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003b04:	f7ff ffe8 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003b08:	4604      	mov	r4, r0
 8003b0a:	f7ff f9b9 	bl	8002e80 <LL_RCC_GetAPB1Prescaler>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	4a03      	ldr	r2, [pc, #12]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd98      	pop	{r3, r4, r7, pc}
 8003b20:	0800b49c 	.word	0x0800b49c

08003b24 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b24:	b598      	push	{r3, r4, r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003b28:	f7ff ffd6 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	f7ff f9b2 	bl	8002e96 <LL_RCC_GetAPB2Prescaler>
 8003b32:	4603      	mov	r3, r0
 8003b34:	0adb      	lsrs	r3, r3, #11
 8003b36:	4a03      	ldr	r2, [pc, #12]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd98      	pop	{r3, r4, r7, pc}
 8003b44:	0800b49c 	.word	0x0800b49c

08003b48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	091b      	lsrs	r3, r3, #4
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	4a10      	ldr	r2, [pc, #64]	; (8003b9c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003b60:	f7ff f981 	bl	8002e66 <LL_RCC_GetAHB3Prescaler>
 8003b64:	4603      	mov	r3, r0
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ba0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4a09      	ldr	r2, [pc, #36]	; (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	0c9c      	lsrs	r4, r3, #18
 8003b84:	f7fe ff80 	bl	8002a88 <HAL_PWREx_GetVoltageRange>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f000 f80b 	bl	8003ba8 <RCC_SetFlashLatency>
 8003b92:	4603      	mov	r3, r0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd90      	pop	{r4, r7, pc}
 8003b9c:	0800b4bc 	.word	0x0800b4bc
 8003ba0:	0800b45c 	.word	0x0800b45c
 8003ba4:	431bde83 	.word	0x431bde83

08003ba8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08e      	sub	sp, #56	; 0x38
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003bb2:	4a3a      	ldr	r2, [pc, #232]	; (8003c9c <RCC_SetFlashLatency+0xf4>)
 8003bb4:	f107 0320 	add.w	r3, r7, #32
 8003bb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bbc:	6018      	str	r0, [r3, #0]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003bc2:	4a37      	ldr	r2, [pc, #220]	; (8003ca0 <RCC_SetFlashLatency+0xf8>)
 8003bc4:	f107 0318 	add.w	r3, r7, #24
 8003bc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bcc:	6018      	str	r0, [r3, #0]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003bd2:	4a34      	ldr	r2, [pc, #208]	; (8003ca4 <RCC_SetFlashLatency+0xfc>)
 8003bd4:	f107 030c 	add.w	r3, r7, #12
 8003bd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bda:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003bde:	2300      	movs	r3, #0
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be8:	d11b      	bne.n	8003c22 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	633b      	str	r3, [r7, #48]	; 0x30
 8003bee:	e014      	b.n	8003c1a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	3338      	adds	r3, #56	; 0x38
 8003bf6:	443b      	add	r3, r7
 8003bf8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d807      	bhi.n	8003c14 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	3338      	adds	r3, #56	; 0x38
 8003c0a:	443b      	add	r3, r7
 8003c0c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c12:	e021      	b.n	8003c58 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	3301      	adds	r3, #1
 8003c18:	633b      	str	r3, [r7, #48]	; 0x30
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d9e7      	bls.n	8003bf0 <RCC_SetFlashLatency+0x48>
 8003c20:	e01a      	b.n	8003c58 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c26:	e014      	b.n	8003c52 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	3338      	adds	r3, #56	; 0x38
 8003c2e:	443b      	add	r3, r7
 8003c30:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003c34:	461a      	mov	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d807      	bhi.n	8003c4c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	3338      	adds	r3, #56	; 0x38
 8003c42:	443b      	add	r3, r7
 8003c44:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c4a:	e005      	b.n	8003c58 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	3301      	adds	r3, #1
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d9e7      	bls.n	8003c28 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <RCC_SetFlashLatency+0x100>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 0207 	bic.w	r2, r3, #7
 8003c60:	4911      	ldr	r1, [pc, #68]	; (8003ca8 <RCC_SetFlashLatency+0x100>)
 8003c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c68:	f7fd fdda 	bl	8001820 <HAL_GetTick>
 8003c6c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c6e:	e008      	b.n	8003c82 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c70:	f7fd fdd6 	bl	8001820 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e007      	b.n	8003c92 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <RCC_SetFlashLatency+0x100>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d1ef      	bne.n	8003c70 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3738      	adds	r7, #56	; 0x38
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	0800b41c 	.word	0x0800b41c
 8003ca0:	0800b424 	.word	0x0800b424
 8003ca4:	0800b42c 	.word	0x0800b42c
 8003ca8:	58004000 	.word	0x58004000

08003cac <LL_RCC_LSE_IsReady>:
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d101      	bne.n	8003cc4 <LL_RCC_LSE_IsReady+0x18>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <LL_RCC_LSE_IsReady+0x1a>
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <LL_RCC_SetUSARTClockSource>:
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cda:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	401a      	ands	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <LL_RCC_SetI2SClockSource>:
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <LL_RCC_SetLPUARTClockSource>:
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <LL_RCC_SetI2CClockSource>:
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	401a      	ands	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr

08003d8a <LL_RCC_SetLPTIMClockSource>:
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	0c1b      	lsrs	r3, r3, #16
 8003d9e:	041b      	lsls	r3, r3, #16
 8003da0:	43db      	mvns	r3, r3
 8003da2:	401a      	ands	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <LL_RCC_SetRNGClockSource>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003dd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <LL_RCC_SetADCClockSource>:
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <LL_RCC_SetRTCClockSource>:
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <LL_RCC_GetRTCClockSource>:
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <LL_RCC_ForceBackupDomainReset>:
{
 8003e52:	b480      	push	{r7}
 8003e54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e6a:	bf00      	nop
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr
	...

08003e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d058      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003eb4:	f7fe fdda 	bl	8002a6c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eb8:	f7fd fcb2 	bl	8001820 <HAL_GetTick>
 8003ebc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003ebe:	e009      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec0:	f7fd fcae 	bl	8001820 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d902      	bls.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	74fb      	strb	r3, [r7, #19]
        break;
 8003ed2:	e006      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003ed4:	4b7b      	ldr	r3, [pc, #492]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee0:	d1ee      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003ee2:	7cfb      	ldrb	r3, [r7, #19]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d13c      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003ee8:	f7ff ffa7 	bl	8003e3a <LL_RCC_GetRTCClockSource>
 8003eec:	4602      	mov	r2, r0
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d00f      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f02:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f04:	f7ff ffa5 	bl	8003e52 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f08:	f7ff ffb3 	bl	8003e72 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d014      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fd fc7e 	bl	8001820 <HAL_GetTick>
 8003f24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003f26:	e00b      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fd fc7a 	bl	8001820 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d902      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	74fb      	strb	r3, [r7, #19]
            break;
 8003f3e:	e004      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003f40:	f7ff feb4 	bl	8003cac <LL_RCC_LSE_IsReady>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d1ee      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003f4a:	7cfb      	ldrb	r3, [r7, #19]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d105      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ff5b 	bl	8003e10 <LL_RCC_SetRTCClockSource>
 8003f5a:	e004      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f5c:	7cfb      	ldrb	r3, [r7, #19]
 8003f5e:	74bb      	strb	r3, [r7, #18]
 8003f60:	e001      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f62:	7cfb      	ldrb	r3, [r7, #19]
 8003f64:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d004      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fea9 	bl	8003cce <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d004      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff fe9e 	bl	8003cce <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d004      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fec0 	bl	8003d28 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fee6 	bl	8003d8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff fedb 	bl	8003d8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d004      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff fed0 	bl	8003d8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff fea9 	bl	8003d52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004008:	2b00      	cmp	r3, #0
 800400a:	d004      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fe9e 	bl	8003d52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401e:	2b00      	cmp	r3, #0
 8004020:	d004      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fe93 	bl	8003d52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	d011      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fe5e 	bl	8003cfe <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404a:	d107      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800404c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800405a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d010      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fea5 	bl	8003dbc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	2b00      	cmp	r3, #0
 8004078:	d107      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004088:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d011      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fea3 	bl	8003de6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a8:	d107      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80040ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	58000400 	.word	0x58000400

080040c8 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <LL_PWR_SetRadioBusyTrigger+0x24>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040d8:	4904      	ldr	r1, [pc, #16]	; (80040ec <LL_PWR_SetRadioBusyTrigger+0x24>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4313      	orrs	r3, r2
 80040de:	608b      	str	r3, [r1, #8]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	58000400 	.word	0x58000400

080040f0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	4a04      	ldr	r2, [pc, #16]	; (800410c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80040fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr
 800410c:	58000400 	.word	0x58000400

08004110 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	4a04      	ldr	r2, [pc, #16]	; (800412c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800411c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	58000400 	.word	0x58000400

08004130 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800413a:	619a      	str	r2, [r3, #24]
}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	58000400 	.word	0x58000400

08004148 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b02      	cmp	r3, #2
 8004156:	d101      	bne.n	800415c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	58000400 	.word	0x58000400

0800416c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b04      	cmp	r3, #4
 800417a:	d101      	bne.n	8004180 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	58000400 	.word	0x58000400

08004190 <LL_RCC_RF_DisableReset>:
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <LL_RCC_IsRFUnderReset>:
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80041b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c4:	d101      	bne.n	80041ca <LL_RCC_IsRFUnderReset+0x1a>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <LL_RCC_IsRFUnderReset+0x1c>
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <LL_EXTI_EnableIT_32_63+0x24>)
 80041de:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80041e2:	4905      	ldr	r1, [pc, #20]	; (80041f8 <LL_EXTI_EnableIT_32_63+0x24>)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	58000800 	.word	0x58000800

080041fc <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
    return status;
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	e052      	b.n	80042b8 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	799b      	ldrb	r3, [r3, #6]
 800421a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800421c:	7bbb      	ldrb	r3, [r7, #14]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_SUBGHZ_Init+0x2c>
 8004222:	7bbb      	ldrb	r3, [r7, #14]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d109      	bne.n	800423c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fd fadc 	bl	80017ec <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004234:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004238:	f7ff ffcc 	bl	80041d4 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800423c:	7bbb      	ldrb	r3, [r7, #14]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d126      	bne.n	8004290 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004248:	f7ff ffa2 	bl	8004190 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800424c:	4b1c      	ldr	r3, [pc, #112]	; (80042c0 <HAL_SUBGHZ_Init+0xc4>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	0cdb      	lsrs	r3, r3, #19
 800425a:	2264      	movs	r2, #100	; 0x64
 800425c:	fb02 f303 	mul.w	r3, r2, r3
 8004260:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	609a      	str	r2, [r3, #8]
        break;
 8004272:	e007      	b.n	8004284 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	3b01      	subs	r3, #1
 8004278:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800427a:	f7ff ff99 	bl	80041b0 <LL_RCC_IsRFUnderReset>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ee      	bne.n	8004262 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004284:	f7ff ff34 	bl	80040f0 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004288:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800428c:	f7ff ff1c 	bl	80040c8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004290:	f7ff ff4e 	bl	8004130 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 faac 	bl	80047fc <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	719a      	strb	r2, [r3, #6]

  return status;
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000004 	.word	0x20000004

080042c4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	607a      	str	r2, [r7, #4]
 80042ce:	461a      	mov	r2, r3
 80042d0:	460b      	mov	r3, r1
 80042d2:	817b      	strh	r3, [r7, #10]
 80042d4:	4613      	mov	r3, r2
 80042d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	799b      	ldrb	r3, [r3, #6]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d14a      	bne.n	8004378 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	795b      	ldrb	r3, [r3, #5]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_SUBGHZ_WriteRegisters+0x2a>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e045      	b.n	800437a <HAL_SUBGHZ_WriteRegisters+0xb6>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2202      	movs	r2, #2
 80042f8:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 fb4c 	bl	8004998 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004300:	f7ff ff06 	bl	8004110 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004304:	210d      	movs	r1, #13
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fa98 	bl	800483c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800430c:	897b      	ldrh	r3, [r7, #10]
 800430e:	0a1b      	lsrs	r3, r3, #8
 8004310:	b29b      	uxth	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	4619      	mov	r1, r3
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fa90 	bl	800483c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800431c:	897b      	ldrh	r3, [r7, #10]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	4619      	mov	r1, r3
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fa8a 	bl	800483c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004328:	2300      	movs	r3, #0
 800432a:	82bb      	strh	r3, [r7, #20]
 800432c:	e00a      	b.n	8004344 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800432e:	8abb      	ldrh	r3, [r7, #20]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	4413      	add	r3, r2
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	4619      	mov	r1, r3
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fa7f 	bl	800483c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800433e:	8abb      	ldrh	r3, [r7, #20]
 8004340:	3301      	adds	r3, #1
 8004342:	82bb      	strh	r3, [r7, #20]
 8004344:	8aba      	ldrh	r2, [r7, #20]
 8004346:	893b      	ldrh	r3, [r7, #8]
 8004348:	429a      	cmp	r2, r3
 800434a:	d3f0      	bcc.n	800432e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800434c:	f7ff fed0 	bl	80040f0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fb45 	bl	80049e0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]
 8004362:	e001      	b.n	8004368 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	715a      	strb	r2, [r3, #5]

    return status;
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	e000      	b.n	800437a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004378:	2302      	movs	r3, #2
  }
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b088      	sub	sp, #32
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	461a      	mov	r2, r3
 800438e:	460b      	mov	r3, r1
 8004390:	817b      	strh	r3, [r7, #10]
 8004392:	4613      	mov	r3, r2
 8004394:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	799b      	ldrb	r3, [r3, #6]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d14a      	bne.n	800443a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	795b      	ldrb	r3, [r3, #5]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e045      	b.n	800443c <HAL_SUBGHZ_ReadRegisters+0xba>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 faee 	bl	8004998 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80043bc:	f7ff fea8 	bl	8004110 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80043c0:	211d      	movs	r1, #29
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fa3a 	bl	800483c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80043c8:	897b      	ldrh	r3, [r7, #10]
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	4619      	mov	r1, r3
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fa32 	bl	800483c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80043d8:	897b      	ldrh	r3, [r7, #10]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	4619      	mov	r1, r3
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fa2c 	bl	800483c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80043e4:	2100      	movs	r1, #0
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fa28 	bl	800483c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80043ec:	2300      	movs	r3, #0
 80043ee:	82fb      	strh	r3, [r7, #22]
 80043f0:	e009      	b.n	8004406 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80043f2:	69b9      	ldr	r1, [r7, #24]
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fa77 	bl	80048e8 <SUBGHZSPI_Receive>
      pData++;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	3301      	adds	r3, #1
 80043fe:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004400:	8afb      	ldrh	r3, [r7, #22]
 8004402:	3301      	adds	r3, #1
 8004404:	82fb      	strh	r3, [r7, #22]
 8004406:	8afa      	ldrh	r2, [r7, #22]
 8004408:	893b      	ldrh	r3, [r7, #8]
 800440a:	429a      	cmp	r2, r3
 800440c:	d3f1      	bcc.n	80043f2 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800440e:	f7ff fe6f 	bl	80040f0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 fae4 	bl	80049e0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	77fb      	strb	r3, [r7, #31]
 8004424:	e001      	b.n	800442a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	715a      	strb	r2, [r3, #5]

    return status;
 8004436:	7ffb      	ldrb	r3, [r7, #31]
 8004438:	e000      	b.n	800443c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800443a:	2302      	movs	r3, #2
  }
}
 800443c:	4618      	mov	r0, r3
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	461a      	mov	r2, r3
 8004450:	460b      	mov	r3, r1
 8004452:	72fb      	strb	r3, [r7, #11]
 8004454:	4613      	mov	r3, r2
 8004456:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	799b      	ldrb	r3, [r3, #6]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b01      	cmp	r3, #1
 8004460:	d14a      	bne.n	80044f8 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	795b      	ldrb	r3, [r3, #5]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800446a:	2302      	movs	r3, #2
 800446c:	e045      	b.n	80044fa <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 fa8f 	bl	8004998 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800447a:	7afb      	ldrb	r3, [r7, #11]
 800447c:	2b84      	cmp	r3, #132	; 0x84
 800447e:	d002      	beq.n	8004486 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004480:	7afb      	ldrb	r3, [r7, #11]
 8004482:	2b94      	cmp	r3, #148	; 0x94
 8004484:	d103      	bne.n	800448e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	711a      	strb	r2, [r3, #4]
 800448c:	e002      	b.n	8004494 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004494:	f7ff fe3c 	bl	8004110 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004498:	7afb      	ldrb	r3, [r7, #11]
 800449a:	4619      	mov	r1, r3
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f9cd 	bl	800483c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80044a2:	2300      	movs	r3, #0
 80044a4:	82bb      	strh	r3, [r7, #20]
 80044a6:	e00a      	b.n	80044be <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80044a8:	8abb      	ldrh	r3, [r7, #20]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	4619      	mov	r1, r3
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f9c2 	bl	800483c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80044b8:	8abb      	ldrh	r3, [r7, #20]
 80044ba:	3301      	adds	r3, #1
 80044bc:	82bb      	strh	r3, [r7, #20]
 80044be:	8aba      	ldrh	r2, [r7, #20]
 80044c0:	893b      	ldrh	r3, [r7, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d3f0      	bcc.n	80044a8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80044c6:	f7ff fe13 	bl	80040f0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80044ca:	7afb      	ldrb	r3, [r7, #11]
 80044cc:	2b84      	cmp	r3, #132	; 0x84
 80044ce:	d002      	beq.n	80044d6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fa85 	bl	80049e0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	75fb      	strb	r3, [r7, #23]
 80044e2:	e001      	b.n	80044e8 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2201      	movs	r2, #1
 80044ec:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	715a      	strb	r2, [r3, #5]

    return status;
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	e000      	b.n	80044fa <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b088      	sub	sp, #32
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	461a      	mov	r2, r3
 800450e:	460b      	mov	r3, r1
 8004510:	72fb      	strb	r3, [r7, #11]
 8004512:	4613      	mov	r3, r2
 8004514:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	799b      	ldrb	r3, [r3, #6]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d13d      	bne.n	80045a0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	795b      	ldrb	r3, [r3, #5]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800452c:	2302      	movs	r3, #2
 800452e:	e038      	b.n	80045a2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fa2e 	bl	8004998 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800453c:	f7ff fde8 	bl	8004110 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004540:	7afb      	ldrb	r3, [r7, #11]
 8004542:	4619      	mov	r1, r3
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f979 	bl	800483c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800454a:	2100      	movs	r1, #0
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f975 	bl	800483c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004552:	2300      	movs	r3, #0
 8004554:	82fb      	strh	r3, [r7, #22]
 8004556:	e009      	b.n	800456c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004558:	69b9      	ldr	r1, [r7, #24]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f9c4 	bl	80048e8 <SUBGHZSPI_Receive>
      pData++;
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	3301      	adds	r3, #1
 8004564:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004566:	8afb      	ldrh	r3, [r7, #22]
 8004568:	3301      	adds	r3, #1
 800456a:	82fb      	strh	r3, [r7, #22]
 800456c:	8afa      	ldrh	r2, [r7, #22]
 800456e:	893b      	ldrh	r3, [r7, #8]
 8004570:	429a      	cmp	r2, r3
 8004572:	d3f1      	bcc.n	8004558 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004574:	f7ff fdbc 	bl	80040f0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fa31 	bl	80049e0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	77fb      	strb	r3, [r7, #31]
 800458a:	e001      	b.n	8004590 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	715a      	strb	r2, [r3, #5]

    return status;
 800459c:	7ffb      	ldrb	r3, [r7, #31]
 800459e:	e000      	b.n	80045a2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80045a0:	2302      	movs	r3, #2
  }
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b086      	sub	sp, #24
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	461a      	mov	r2, r3
 80045b6:	460b      	mov	r3, r1
 80045b8:	72fb      	strb	r3, [r7, #11]
 80045ba:	4613      	mov	r3, r2
 80045bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	799b      	ldrb	r3, [r3, #6]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d13e      	bne.n	8004646 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	795b      	ldrb	r3, [r3, #5]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e039      	b.n	8004648 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f9dc 	bl	8004998 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80045e0:	f7ff fd96 	bl	8004110 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80045e4:	210e      	movs	r1, #14
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f928 	bl	800483c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80045ec:	7afb      	ldrb	r3, [r7, #11]
 80045ee:	4619      	mov	r1, r3
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f923 	bl	800483c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80045f6:	2300      	movs	r3, #0
 80045f8:	82bb      	strh	r3, [r7, #20]
 80045fa:	e00a      	b.n	8004612 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80045fc:	8abb      	ldrh	r3, [r7, #20]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	4413      	add	r3, r2
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	4619      	mov	r1, r3
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f918 	bl	800483c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800460c:	8abb      	ldrh	r3, [r7, #20]
 800460e:	3301      	adds	r3, #1
 8004610:	82bb      	strh	r3, [r7, #20]
 8004612:	8aba      	ldrh	r2, [r7, #20]
 8004614:	893b      	ldrh	r3, [r7, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	d3f0      	bcc.n	80045fc <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800461a:	f7ff fd69 	bl	80040f0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f9de 	bl	80049e0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	75fb      	strb	r3, [r7, #23]
 8004630:	e001      	b.n	8004636 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	715a      	strb	r2, [r3, #5]

    return status;
 8004642:	7dfb      	ldrb	r3, [r7, #23]
 8004644:	e000      	b.n	8004648 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004646:	2302      	movs	r3, #2
  }
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	461a      	mov	r2, r3
 800465c:	460b      	mov	r3, r1
 800465e:	72fb      	strb	r3, [r7, #11]
 8004660:	4613      	mov	r3, r2
 8004662:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	799b      	ldrb	r3, [r3, #6]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b01      	cmp	r3, #1
 8004670:	d141      	bne.n	80046f6 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	795b      	ldrb	r3, [r3, #5]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800467a:	2302      	movs	r3, #2
 800467c:	e03c      	b.n	80046f8 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f987 	bl	8004998 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800468a:	f7ff fd41 	bl	8004110 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800468e:	211e      	movs	r1, #30
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f8d3 	bl	800483c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004696:	7afb      	ldrb	r3, [r7, #11]
 8004698:	4619      	mov	r1, r3
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f8ce 	bl	800483c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80046a0:	2100      	movs	r1, #0
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f8ca 	bl	800483c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80046a8:	2300      	movs	r3, #0
 80046aa:	82fb      	strh	r3, [r7, #22]
 80046ac:	e009      	b.n	80046c2 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80046ae:	69b9      	ldr	r1, [r7, #24]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f919 	bl	80048e8 <SUBGHZSPI_Receive>
      pData++;
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	3301      	adds	r3, #1
 80046ba:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80046bc:	8afb      	ldrh	r3, [r7, #22]
 80046be:	3301      	adds	r3, #1
 80046c0:	82fb      	strh	r3, [r7, #22]
 80046c2:	8afa      	ldrh	r2, [r7, #22]
 80046c4:	893b      	ldrh	r3, [r7, #8]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d3f1      	bcc.n	80046ae <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80046ca:	f7ff fd11 	bl	80040f0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f986 	bl	80049e0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e001      	b.n	80046e6 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	715a      	strb	r2, [r3, #5]

    return status;
 80046f2:	7ffb      	ldrb	r3, [r7, #31]
 80046f4:	e000      	b.n	80046f8 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80046f6:	2302      	movs	r3, #2
  }
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3720      	adds	r7, #32
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004708:	2300      	movs	r3, #0
 800470a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800470c:	f107 020c 	add.w	r2, r7, #12
 8004710:	2302      	movs	r3, #2
 8004712:	2112      	movs	r1, #18
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff fef4 	bl	8004502 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800471a:	7b3b      	ldrb	r3, [r7, #12]
 800471c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800471e:	89fb      	ldrh	r3, [r7, #14]
 8004720:	021b      	lsls	r3, r3, #8
 8004722:	b21a      	sxth	r2, r3
 8004724:	7b7b      	ldrb	r3, [r7, #13]
 8004726:	b21b      	sxth	r3, r3
 8004728:	4313      	orrs	r3, r2
 800472a:	b21b      	sxth	r3, r3
 800472c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800472e:	f107 020c 	add.w	r2, r7, #12
 8004732:	2302      	movs	r3, #2
 8004734:	2102      	movs	r1, #2
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff fe84 	bl	8004444 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800473c:	89fb      	ldrh	r3, [r7, #14]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f005 f9fe 	bl	8009b48 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800474c:	89fb      	ldrh	r3, [r7, #14]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f005 fa04 	bl	8009b64 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800475c:	89fb      	ldrh	r3, [r7, #14]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f005 fa54 	bl	8009c14 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800476c:	89fb      	ldrh	r3, [r7, #14]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f005 fa5a 	bl	8009c30 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800477c:	89fb      	ldrh	r3, [r7, #14]
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f005 fa60 	bl	8009c4c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800478c:	89fb      	ldrh	r3, [r7, #14]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f005 fa2e 	bl	8009bf8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800479c:	89fb      	ldrh	r3, [r7, #14]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f005 f9ea 	bl	8009b80 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80047ac:	89fb      	ldrh	r3, [r7, #14]
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00d      	beq.n	80047d2 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80047b6:	89fb      	ldrh	r3, [r7, #14]
 80047b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d004      	beq.n	80047ca <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80047c0:	2101      	movs	r1, #1
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f005 f9ea 	bl	8009b9c <HAL_SUBGHZ_CADStatusCallback>
 80047c8:	e003      	b.n	80047d2 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80047ca:	2100      	movs	r1, #0
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f005 f9e5 	bl	8009b9c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80047d2:	89fb      	ldrh	r3, [r7, #14]
 80047d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f005 f9fb 	bl	8009bd8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80047e2:	89fb      	ldrh	r3, [r7, #14]
 80047e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f005 fa3b 	bl	8009c68 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <SUBGHZSPI_Init+0x3c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a0b      	ldr	r2, [pc, #44]	; (8004838 <SUBGHZSPI_Init+0x3c>)
 800480a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004810:	4a09      	ldr	r2, [pc, #36]	; (8004838 <SUBGHZSPI_Init+0x3c>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004818:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <SUBGHZSPI_Init+0x3c>)
 800481c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004820:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <SUBGHZSPI_Init+0x3c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <SUBGHZSPI_Init+0x3c>)
 8004828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800482c:	6013      	str	r3, [r2, #0]
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr
 8004838:	58010000 	.word	0x58010000

0800483c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800484c:	4b23      	ldr	r3, [pc, #140]	; (80048dc <SUBGHZSPI_Transmit+0xa0>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	0cdb      	lsrs	r3, r3, #19
 800485a:	2264      	movs	r2, #100	; 0x64
 800485c:	fb02 f303 	mul.w	r3, r2, r3
 8004860:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d105      	bne.n	8004874 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	609a      	str	r2, [r3, #8]
      break;
 8004872:	e008      	b.n	8004886 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3b01      	subs	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800487a:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <SUBGHZSPI_Transmit+0xa4>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b02      	cmp	r3, #2
 8004884:	d1ed      	bne.n	8004862 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004886:	4b17      	ldr	r3, [pc, #92]	; (80048e4 <SUBGHZSPI_Transmit+0xa8>)
 8004888:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	78fa      	ldrb	r2, [r7, #3]
 800488e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004890:	4b12      	ldr	r3, [pc, #72]	; (80048dc <SUBGHZSPI_Transmit+0xa0>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	0cdb      	lsrs	r3, r3, #19
 800489e:	2264      	movs	r2, #100	; 0x64
 80048a0:	fb02 f303 	mul.w	r3, r2, r3
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d105      	bne.n	80048b8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	609a      	str	r2, [r3, #8]
      break;
 80048b6:	e008      	b.n	80048ca <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <SUBGHZSPI_Transmit+0xa4>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d1ed      	bne.n	80048a6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <SUBGHZSPI_Transmit+0xa4>)
 80048cc:	68db      	ldr	r3, [r3, #12]

  return status;
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000004 	.word	0x20000004
 80048e0:	58010000 	.word	0x58010000
 80048e4:	5801000c 	.word	0x5801000c

080048e8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80048f6:	4b25      	ldr	r3, [pc, #148]	; (800498c <SUBGHZSPI_Receive+0xa4>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	4613      	mov	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	0cdb      	lsrs	r3, r3, #19
 8004904:	2264      	movs	r2, #100	; 0x64
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d105      	bne.n	800491e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	609a      	str	r2, [r3, #8]
      break;
 800491c:	e008      	b.n	8004930 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3b01      	subs	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004924:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <SUBGHZSPI_Receive+0xa8>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b02      	cmp	r3, #2
 800492e:	d1ed      	bne.n	800490c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004930:	4b18      	ldr	r3, [pc, #96]	; (8004994 <SUBGHZSPI_Receive+0xac>)
 8004932:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	22ff      	movs	r2, #255	; 0xff
 8004938:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800493a:	4b14      	ldr	r3, [pc, #80]	; (800498c <SUBGHZSPI_Receive+0xa4>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4613      	mov	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	0cdb      	lsrs	r3, r3, #19
 8004948:	2264      	movs	r2, #100	; 0x64
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d105      	bne.n	8004962 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	609a      	str	r2, [r3, #8]
      break;
 8004960:	e008      	b.n	8004974 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3b01      	subs	r3, #1
 8004966:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004968:	4b09      	ldr	r3, [pc, #36]	; (8004990 <SUBGHZSPI_Receive+0xa8>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b01      	cmp	r3, #1
 8004972:	d1ed      	bne.n	8004950 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <SUBGHZSPI_Receive+0xa8>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	b2da      	uxtb	r2, r3
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	701a      	strb	r2, [r3, #0]

  return status;
 800497e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004980:	4618      	mov	r0, r3
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	20000004 	.word	0x20000004
 8004990:	58010000 	.word	0x58010000
 8004994:	5801000c 	.word	0x5801000c

08004998 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	791b      	ldrb	r3, [r3, #4]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d111      	bne.n	80049cc <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <SUBGHZ_CheckDeviceReady+0x44>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	4413      	add	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80049b8:	f7ff fbaa 	bl	8004110 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3b01      	subs	r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1f9      	bne.n	80049bc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80049c8:	f7ff fb92 	bl	80040f0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f807 	bl	80049e0 <SUBGHZ_WaitOnBusy>
 80049d2:	4603      	mov	r3, r0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000004 	.word	0x20000004

080049e0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80049ec:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <SUBGHZ_WaitOnBusy+0x58>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	4613      	mov	r3, r2
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	4413      	add	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	0d1b      	lsrs	r3, r3, #20
 80049fa:	2264      	movs	r2, #100	; 0x64
 80049fc:	fb02 f303 	mul.w	r3, r2, r3
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004a02:	f7ff fbb3 	bl	800416c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004a06:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d105      	bne.n	8004a1a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	609a      	str	r2, [r3, #8]
      break;
 8004a18:	e009      	b.n	8004a2e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004a20:	f7ff fb92 	bl	8004148 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d0e9      	beq.n	8004a02 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20000004 	.word	0x20000004

08004a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e049      	b.n	8004ae2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fc ff9e 	bl	80019a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3304      	adds	r3, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f000 fa90 	bl	8004fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
	...

08004aec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d001      	beq.n	8004b04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e02e      	b.n	8004b62 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a16      	ldr	r2, [pc, #88]	; (8004b6c <HAL_TIM_Base_Start+0x80>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d004      	beq.n	8004b20 <HAL_TIM_Base_Start+0x34>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1e:	d115      	bne.n	8004b4c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <HAL_TIM_Base_Start+0x84>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b06      	cmp	r3, #6
 8004b30:	d015      	beq.n	8004b5e <HAL_TIM_Base_Start+0x72>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b38:	d011      	beq.n	8004b5e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4a:	e008      	b.n	8004b5e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e000      	b.n	8004b60 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	00010007 	.word	0x00010007

08004b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d122      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d11b      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0202 	mvn.w	r2, #2
 8004ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f9d6 	bl	8004f68 <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f9c9 	bl	8004f56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f9d8 	bl	8004f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d122      	bne.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d11b      	bne.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0204 	mvn.w	r2, #4
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f9ac 	bl	8004f68 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f99f 	bl	8004f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f9ae 	bl	8004f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d122      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d11b      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0208 	mvn.w	r2, #8
 8004c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f982 	bl	8004f68 <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f975 	bl	8004f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f984 	bl	8004f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d122      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0210 	mvn.w	r2, #16
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f958 	bl	8004f68 <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f94b 	bl	8004f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f95a 	bl	8004f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d10e      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0201 	mvn.w	r2, #1
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f926 	bl	8004f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d10e      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b80      	cmp	r3, #128	; 0x80
 8004d12:	d107      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fa9f 	bl	8005262 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d32:	d10e      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	2b80      	cmp	r3, #128	; 0x80
 8004d40:	d107      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fa91 	bl	8005274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d10e      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d107      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f907 	bl	8004f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d10e      	bne.n	8004daa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d107      	bne.n	8004daa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f06f 0220 	mvn.w	r2, #32
 8004da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fa53 	bl	8005250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_TIM_ConfigClockSource+0x1c>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e0b6      	b.n	8004f3c <HAL_TIM_ConfigClockSource+0x18a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004dec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004df0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004df8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0a:	d03e      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0xd8>
 8004e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e10:	f200 8087 	bhi.w	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e18:	f000 8086 	beq.w	8004f28 <HAL_TIM_ConfigClockSource+0x176>
 8004e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e20:	d87f      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e22:	2b70      	cmp	r3, #112	; 0x70
 8004e24:	d01a      	beq.n	8004e5c <HAL_TIM_ConfigClockSource+0xaa>
 8004e26:	2b70      	cmp	r3, #112	; 0x70
 8004e28:	d87b      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e2a:	2b60      	cmp	r3, #96	; 0x60
 8004e2c:	d050      	beq.n	8004ed0 <HAL_TIM_ConfigClockSource+0x11e>
 8004e2e:	2b60      	cmp	r3, #96	; 0x60
 8004e30:	d877      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e32:	2b50      	cmp	r3, #80	; 0x50
 8004e34:	d03c      	beq.n	8004eb0 <HAL_TIM_ConfigClockSource+0xfe>
 8004e36:	2b50      	cmp	r3, #80	; 0x50
 8004e38:	d873      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	d058      	beq.n	8004ef0 <HAL_TIM_ConfigClockSource+0x13e>
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d86f      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e42:	2b30      	cmp	r3, #48	; 0x30
 8004e44:	d064      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0x15e>
 8004e46:	2b30      	cmp	r3, #48	; 0x30
 8004e48:	d86b      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d060      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0x15e>
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d867      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d05c      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0x15e>
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d05a      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0x15e>
 8004e5a:	e062      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e6c:	f000 f973 	bl	8005156 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e7e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	609a      	str	r2, [r3, #8]
      break;
 8004e88:	e04f      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e9a:	f000 f95c 	bl	8005156 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eac:	609a      	str	r2, [r3, #8]
      break;
 8004eae:	e03c      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f000 f8d1 	bl	8005064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2150      	movs	r1, #80	; 0x50
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f928 	bl	800511e <TIM_ITRx_SetConfig>
      break;
 8004ece:	e02c      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004edc:	461a      	mov	r2, r3
 8004ede:	f000 f8ef 	bl	80050c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2160      	movs	r1, #96	; 0x60
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 f918 	bl	800511e <TIM_ITRx_SetConfig>
      break;
 8004eee:	e01c      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efc:	461a      	mov	r2, r3
 8004efe:	f000 f8b1 	bl	8005064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2140      	movs	r1, #64	; 0x40
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 f908 	bl	800511e <TIM_ITRx_SetConfig>
      break;
 8004f0e:	e00c      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f000 f8ff 	bl	800511e <TIM_ITRx_SetConfig>
      break;
 8004f20:	e003      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
      break;
 8004f26:	e000      	b.n	8004f2a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr

08004f56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr

08004f7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr

08004f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr
	...

08004fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a29      	ldr	r2, [pc, #164]	; (8005058 <TIM_Base_SetConfig+0xb8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_Base_SetConfig+0x20>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbe:	d108      	bne.n	8004fd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a20      	ldr	r2, [pc, #128]	; (8005058 <TIM_Base_SetConfig+0xb8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00b      	beq.n	8004ff2 <TIM_Base_SetConfig+0x52>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe0:	d007      	beq.n	8004ff2 <TIM_Base_SetConfig+0x52>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	; (800505c <TIM_Base_SetConfig+0xbc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_Base_SetConfig+0x52>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1c      	ldr	r2, [pc, #112]	; (8005060 <TIM_Base_SetConfig+0xc0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d108      	bne.n	8005004 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a0b      	ldr	r2, [pc, #44]	; (8005058 <TIM_Base_SetConfig+0xb8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d007      	beq.n	8005040 <TIM_Base_SetConfig+0xa0>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a0a      	ldr	r2, [pc, #40]	; (800505c <TIM_Base_SetConfig+0xbc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d003      	beq.n	8005040 <TIM_Base_SetConfig+0xa0>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a09      	ldr	r2, [pc, #36]	; (8005060 <TIM_Base_SetConfig+0xc0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d103      	bne.n	8005048 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	615a      	str	r2, [r3, #20]
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr
 8005058:	40012c00 	.word	0x40012c00
 800505c:	40014400 	.word	0x40014400
 8005060:	40014800 	.word	0x40014800

08005064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f023 0201 	bic.w	r2, r3, #1
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800508e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f023 030a 	bic.w	r3, r3, #10
 80050a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	621a      	str	r2, [r3, #32]
}
 80050b6:	bf00      	nop
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr

080050c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f023 0210 	bic.w	r2, r3, #16
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	031b      	lsls	r3, r3, #12
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	621a      	str	r2, [r3, #32]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr

0800511e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800511e:	b480      	push	{r7}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005138:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	f043 0307 	orr.w	r3, r3, #7
 8005144:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	609a      	str	r2, [r3, #8]
}
 800514c:	bf00      	nop
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr

08005156 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005156:	b480      	push	{r7}
 8005158:	b087      	sub	sp, #28
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
 8005162:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005170:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	021a      	lsls	r2, r3, #8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	431a      	orrs	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4313      	orrs	r3, r2
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	609a      	str	r2, [r3, #8]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e04a      	b.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1e      	ldr	r2, [pc, #120]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d108      	bne.n	80051e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a11      	ldr	r2, [pc, #68]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d004      	beq.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005214:	d10c      	bne.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800521c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	4313      	orrs	r3, r2
 8005226:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr
 800524c:	40012c00 	.word	0x40012c00

08005250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr

08005262 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr

08005286 <LL_RCC_GetUSARTClockSource>:
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800528e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005292:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	401a      	ands	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	4313      	orrs	r3, r2
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr

080052aa <LL_RCC_GetLPUARTClockSource>:
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80052b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4013      	ands	r3, r2
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr

080052c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e042      	b.n	8005360 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d106      	bne.n	80052f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7fc fc65 	bl	8001bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2224      	movs	r2, #36	; 0x24
 80052f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fc48 	bl	8005ba0 <UART_SetConfig>
 8005310:	4603      	mov	r3, r0
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e022      	b.n	8005360 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 feb0 	bl	8006088 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 ff36 	bl	80061ca <UART_CheckIdleState>
 800535e:	4603      	mov	r3, r0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	2b20      	cmp	r3, #32
 8005380:	d173      	bne.n	800546a <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <HAL_UART_Transmit+0x26>
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e06c      	b.n	800546c <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2221      	movs	r2, #33	; 0x21
 800539e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053a2:	f7fc fa3d 	bl	8001820 <HAL_GetTick>
 80053a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	88fa      	ldrh	r2, [r7, #6]
 80053ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c0:	d108      	bne.n	80053d4 <HAL_UART_Transmit+0x6c>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	61bb      	str	r3, [r7, #24]
 80053d2:	e003      	b.n	80053dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053dc:	e02c      	b.n	8005438 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2200      	movs	r2, #0
 80053e6:	2180      	movs	r1, #128	; 0x80
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 ff3c 	bl	8006266 <UART_WaitOnFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e039      	b.n	800546c <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800540c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	3302      	adds	r3, #2
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	e007      	b.n	8005426 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	781a      	ldrb	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	3301      	adds	r3, #1
 8005424:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800543e:	b29b      	uxth	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1cc      	bne.n	80053de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2200      	movs	r2, #0
 800544c:	2140      	movs	r1, #64	; 0x40
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 ff09 	bl	8006266 <UART_WaitOnFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e006      	b.n	800546c <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	e000      	b.n	800546c <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800546a:	2302      	movs	r3, #2
  }
}
 800546c:	4618      	mov	r0, r3
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	4613      	mov	r3, r2
 8005480:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005488:	2b20      	cmp	r3, #32
 800548a:	d137      	bne.n	80054fc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <HAL_UART_Receive_DMA+0x24>
 8005492:	88fb      	ldrh	r3, [r7, #6]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e030      	b.n	80054fe <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a18      	ldr	r2, [pc, #96]	; (8005508 <HAL_UART_Receive_DMA+0x94>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d01f      	beq.n	80054ec <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d018      	beq.n	80054ec <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	613b      	str	r3, [r7, #16]
   return(result);
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	623b      	str	r3, [r7, #32]
 80054da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	69f9      	ldr	r1, [r7, #28]
 80054de:	6a3a      	ldr	r2, [r7, #32]
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e6      	bne.n	80054ba <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	461a      	mov	r2, r3
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 ff80 	bl	80063f8 <UART_Start_Receive_DMA>
 80054f8:	4603      	mov	r3, r0
 80054fa:	e000      	b.n	80054fe <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054fc:	2302      	movs	r3, #2
  }
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3728      	adds	r7, #40	; 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40008000 	.word	0x40008000

0800550c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b0ba      	sub	sp, #232	; 0xe8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005532:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005536:	f640 030f 	movw	r3, #2063	; 0x80f
 800553a:	4013      	ands	r3, r2
 800553c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005540:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d11b      	bne.n	8005580 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b00      	cmp	r3, #0
 8005552:	d015      	beq.n	8005580 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b00      	cmp	r3, #0
 800555e:	d105      	bne.n	800556c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d009      	beq.n	8005580 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 82e3 	beq.w	8005b3c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	4798      	blx	r3
      }
      return;
 800557e:	e2dd      	b.n	8005b3c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8123 	beq.w	80057d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800558a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800558e:	4b8d      	ldr	r3, [pc, #564]	; (80057c4 <HAL_UART_IRQHandler+0x2b8>)
 8005590:	4013      	ands	r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005596:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800559a:	4b8b      	ldr	r3, [pc, #556]	; (80057c8 <HAL_UART_IRQHandler+0x2bc>)
 800559c:	4013      	ands	r3, r2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8116 	beq.w	80057d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d011      	beq.n	80055d4 <HAL_UART_IRQHandler+0xc8>
 80055b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00b      	beq.n	80055d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2201      	movs	r2, #1
 80055c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ca:	f043 0201 	orr.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d011      	beq.n	8005604 <HAL_UART_IRQHandler+0xf8>
 80055e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2202      	movs	r2, #2
 80055f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fa:	f043 0204 	orr.w	r2, r3, #4
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d011      	beq.n	8005634 <HAL_UART_IRQHandler+0x128>
 8005610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00b      	beq.n	8005634 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2204      	movs	r2, #4
 8005622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	f043 0202 	orr.w	r2, r3, #2
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d017      	beq.n	8005670 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d105      	bne.n	8005658 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800564c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005650:	4b5c      	ldr	r3, [pc, #368]	; (80057c4 <HAL_UART_IRQHandler+0x2b8>)
 8005652:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00b      	beq.n	8005670 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2208      	movs	r2, #8
 800565e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005666:	f043 0208 	orr.w	r2, r3, #8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005678:	2b00      	cmp	r3, #0
 800567a:	d012      	beq.n	80056a2 <HAL_UART_IRQHandler+0x196>
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00c      	beq.n	80056a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005698:	f043 0220 	orr.w	r2, r3, #32
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8249 	beq.w	8005b40 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d013      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d105      	bne.n	80056d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b40      	cmp	r3, #64	; 0x40
 80056f8:	d005      	beq.n	8005706 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005702:	2b00      	cmp	r3, #0
 8005704:	d054      	beq.n	80057b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 ff5c 	bl	80065c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005716:	2b40      	cmp	r3, #64	; 0x40
 8005718:	d146      	bne.n	80057a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3308      	adds	r3, #8
 8005742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005746:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800574a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800575e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1d9      	bne.n	800571a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800576c:	2b00      	cmp	r3, #0
 800576e:	d017      	beq.n	80057a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005776:	4a15      	ldr	r2, [pc, #84]	; (80057cc <HAL_UART_IRQHandler+0x2c0>)
 8005778:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005780:	4618      	mov	r0, r3
 8005782:	f7fc fdfd 	bl	8002380 <HAL_DMA_Abort_IT>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d019      	beq.n	80057c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800579a:	4610      	mov	r0, r2
 800579c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579e:	e00f      	b.n	80057c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f9e9 	bl	8005b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a6:	e00b      	b.n	80057c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f9e5 	bl	8005b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ae:	e007      	b.n	80057c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f9e1 	bl	8005b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80057be:	e1bf      	b.n	8005b40 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c0:	bf00      	nop
    return;
 80057c2:	e1bd      	b.n	8005b40 <HAL_UART_IRQHandler+0x634>
 80057c4:	10000001 	.word	0x10000001
 80057c8:	04000120 	.word	0x04000120
 80057cc:	08006879 	.word	0x08006879

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	f040 8153 	bne.w	8005a80 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 814c 	beq.w	8005a80 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 8145 	beq.w	8005a80 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2210      	movs	r2, #16
 80057fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	f040 80bb 	bne.w	8005984 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800581c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 818f 	beq.w	8005b44 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800582c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005830:	429a      	cmp	r2, r3
 8005832:	f080 8187 	bcs.w	8005b44 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800583c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b00      	cmp	r3, #0
 8005850:	f040 8087 	bne.w	8005962 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800586c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	461a      	mov	r2, r3
 800587a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800587e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005882:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800588a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1da      	bne.n	8005854 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3308      	adds	r3, #8
 80058a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058b0:	f023 0301 	bic.w	r3, r3, #1
 80058b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e1      	bne.n	800589e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3308      	adds	r3, #8
 80058e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3308      	adds	r3, #8
 80058fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005900:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005904:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800590c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e3      	bne.n	80058da <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800592e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005930:	f023 0310 	bic.w	r3, r3, #16
 8005934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	461a      	mov	r2, r3
 800593e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005942:	65bb      	str	r3, [r7, #88]	; 0x58
 8005944:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e4      	bne.n	8005920 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800595c:	4618      	mov	r0, r3
 800595e:	f7fc fcb1 	bl	80022c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005974:	b29b      	uxth	r3, r3
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	b29b      	uxth	r3, r3
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f904 	bl	8005b8a <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005982:	e0df      	b.n	8005b44 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005990:	b29b      	uxth	r3, r3
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 80d1 	beq.w	8005b48 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80059a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 80cc 	beq.w	8005b48 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	e853 3f00 	ldrex	r3, [r3]
 80059bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059d2:	647b      	str	r3, [r7, #68]	; 0x44
 80059d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e4      	bne.n	80059b0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3308      	adds	r3, #8
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	623b      	str	r3, [r7, #32]
   return(result);
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3308      	adds	r3, #8
 8005a0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a0e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e1      	bne.n	80059e6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0310 	bic.w	r3, r3, #16
 8005a4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	69b9      	ldr	r1, [r7, #24]
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	617b      	str	r3, [r7, #20]
   return(result);
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e4      	bne.n	8005a36 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a76:	4619      	mov	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f886 	bl	8005b8a <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a7e:	e063      	b.n	8005b48 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00e      	beq.n	8005aaa <HAL_UART_IRQHandler+0x59e>
 8005a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d008      	beq.n	8005aaa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005aa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 ff29 	bl	80068fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005aa8:	e051      	b.n	8005b4e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d014      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d105      	bne.n	8005ace <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d008      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d03a      	beq.n	8005b4c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	4798      	blx	r3
    }
    return;
 8005ade:	e035      	b.n	8005b4c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d009      	beq.n	8005b00 <HAL_UART_IRQHandler+0x5f4>
 8005aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fed3 	bl	80068a4 <UART_EndTransmit_IT>
    return;
 8005afe:	e026      	b.n	8005b4e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d009      	beq.n	8005b20 <HAL_UART_IRQHandler+0x614>
 8005b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 ff00 	bl	800691e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b1e:	e016      	b.n	8005b4e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d010      	beq.n	8005b4e <HAL_UART_IRQHandler+0x642>
 8005b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	da0c      	bge.n	8005b4e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fee9 	bl	800690c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b3a:	e008      	b.n	8005b4e <HAL_UART_IRQHandler+0x642>
      return;
 8005b3c:	bf00      	nop
 8005b3e:	e006      	b.n	8005b4e <HAL_UART_IRQHandler+0x642>
    return;
 8005b40:	bf00      	nop
 8005b42:	e004      	b.n	8005b4e <HAL_UART_IRQHandler+0x642>
      return;
 8005b44:	bf00      	nop
 8005b46:	e002      	b.n	8005b4e <HAL_UART_IRQHandler+0x642>
      return;
 8005b48:	bf00      	nop
 8005b4a:	e000      	b.n	8005b4e <HAL_UART_IRQHandler+0x642>
    return;
 8005b4c:	bf00      	nop
  }
}
 8005b4e:	37e8      	adds	r7, #232	; 0xe8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bc80      	pop	{r7}
 8005b64:	4770      	bx	lr

08005b66 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr

08005b78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	460b      	mov	r3, r1
 8005b94:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr

08005ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba4:	b08c      	sub	sp, #48	; 0x30
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b94      	ldr	r3, [pc, #592]	; (8005e20 <UART_SetConfig+0x280>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a89      	ldr	r2, [pc, #548]	; (8005e24 <UART_SetConfig+0x284>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d004      	beq.n	8005c0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	6812      	ldr	r2, [r2, #0]
 8005c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c20:	430b      	orrs	r3, r1
 8005c22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	f023 010f 	bic.w	r1, r3, #15
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a7a      	ldr	r2, [pc, #488]	; (8005e28 <UART_SetConfig+0x288>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d127      	bne.n	8005c94 <UART_SetConfig+0xf4>
 8005c44:	2003      	movs	r0, #3
 8005c46:	f7ff fb1e 	bl	8005286 <LL_RCC_GetUSARTClockSource>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d81b      	bhi.n	8005c8c <UART_SetConfig+0xec>
 8005c54:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <UART_SetConfig+0xbc>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005c6d 	.word	0x08005c6d
 8005c60:	08005c7d 	.word	0x08005c7d
 8005c64:	08005c75 	.word	0x08005c75
 8005c68:	08005c85 	.word	0x08005c85
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c72:	e080      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005c74:	2302      	movs	r3, #2
 8005c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c7a:	e07c      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c82:	e078      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005c84:	2308      	movs	r3, #8
 8005c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8a:	e074      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005c8c:	2310      	movs	r3, #16
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c92:	e070      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a64      	ldr	r2, [pc, #400]	; (8005e2c <UART_SetConfig+0x28c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d138      	bne.n	8005d10 <UART_SetConfig+0x170>
 8005c9e:	200c      	movs	r0, #12
 8005ca0:	f7ff faf1 	bl	8005286 <LL_RCC_GetUSARTClockSource>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005caa:	2b0c      	cmp	r3, #12
 8005cac:	d82c      	bhi.n	8005d08 <UART_SetConfig+0x168>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <UART_SetConfig+0x114>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005ce9 	.word	0x08005ce9
 8005cb8:	08005d09 	.word	0x08005d09
 8005cbc:	08005d09 	.word	0x08005d09
 8005cc0:	08005d09 	.word	0x08005d09
 8005cc4:	08005cf9 	.word	0x08005cf9
 8005cc8:	08005d09 	.word	0x08005d09
 8005ccc:	08005d09 	.word	0x08005d09
 8005cd0:	08005d09 	.word	0x08005d09
 8005cd4:	08005cf1 	.word	0x08005cf1
 8005cd8:	08005d09 	.word	0x08005d09
 8005cdc:	08005d09 	.word	0x08005d09
 8005ce0:	08005d09 	.word	0x08005d09
 8005ce4:	08005d01 	.word	0x08005d01
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cee:	e042      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf6:	e03e      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cfe:	e03a      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005d00:	2308      	movs	r3, #8
 8005d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d06:	e036      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005d08:	2310      	movs	r3, #16
 8005d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d0e:	e032      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a43      	ldr	r2, [pc, #268]	; (8005e24 <UART_SetConfig+0x284>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d12a      	bne.n	8005d70 <UART_SetConfig+0x1d0>
 8005d1a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005d1e:	f7ff fac4 	bl	80052aa <LL_RCC_GetLPUARTClockSource>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d28:	d01a      	beq.n	8005d60 <UART_SetConfig+0x1c0>
 8005d2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d2e:	d81b      	bhi.n	8005d68 <UART_SetConfig+0x1c8>
 8005d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d34:	d00c      	beq.n	8005d50 <UART_SetConfig+0x1b0>
 8005d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d3a:	d815      	bhi.n	8005d68 <UART_SetConfig+0x1c8>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <UART_SetConfig+0x1a8>
 8005d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d44:	d008      	beq.n	8005d58 <UART_SetConfig+0x1b8>
 8005d46:	e00f      	b.n	8005d68 <UART_SetConfig+0x1c8>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d4e:	e012      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005d50:	2302      	movs	r3, #2
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d56:	e00e      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d5e:	e00a      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005d60:	2308      	movs	r3, #8
 8005d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d66:	e006      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d6e:	e002      	b.n	8005d76 <UART_SetConfig+0x1d6>
 8005d70:	2310      	movs	r3, #16
 8005d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a2a      	ldr	r2, [pc, #168]	; (8005e24 <UART_SetConfig+0x284>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	f040 80a4 	bne.w	8005eca <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d823      	bhi.n	8005dd2 <UART_SetConfig+0x232>
 8005d8a:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <UART_SetConfig+0x1f0>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005db5 	.word	0x08005db5
 8005d94:	08005dd3 	.word	0x08005dd3
 8005d98:	08005dbd 	.word	0x08005dbd
 8005d9c:	08005dd3 	.word	0x08005dd3
 8005da0:	08005dc3 	.word	0x08005dc3
 8005da4:	08005dd3 	.word	0x08005dd3
 8005da8:	08005dd3 	.word	0x08005dd3
 8005dac:	08005dd3 	.word	0x08005dd3
 8005db0:	08005dcb 	.word	0x08005dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005db4:	f7fd fea4 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8005db8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005dba:	e010      	b.n	8005dde <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dbc:	4b1c      	ldr	r3, [pc, #112]	; (8005e30 <UART_SetConfig+0x290>)
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dc0:	e00d      	b.n	8005dde <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dc2:	f7fd fde9 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 8005dc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005dc8:	e009      	b.n	8005dde <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dd0:	e005      	b.n	8005dde <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ddc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 8137 	beq.w	8006054 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	4a12      	ldr	r2, [pc, #72]	; (8005e34 <UART_SetConfig+0x294>)
 8005dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005df0:	461a      	mov	r2, r3
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	4413      	add	r3, r2
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d305      	bcc.n	8005e16 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d910      	bls.n	8005e38 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e1c:	e11a      	b.n	8006054 <UART_SetConfig+0x4b4>
 8005e1e:	bf00      	nop
 8005e20:	cfff69f3 	.word	0xcfff69f3
 8005e24:	40008000 	.word	0x40008000
 8005e28:	40013800 	.word	0x40013800
 8005e2c:	40004400 	.word	0x40004400
 8005e30:	00f42400 	.word	0x00f42400
 8005e34:	0800b528 	.word	0x0800b528
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	60bb      	str	r3, [r7, #8]
 8005e3e:	60fa      	str	r2, [r7, #12]
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	4a8e      	ldr	r2, [pc, #568]	; (8006080 <UART_SetConfig+0x4e0>)
 8005e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	607a      	str	r2, [r7, #4]
 8005e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e5a:	f7fa f9e1 	bl	8000220 <__aeabi_uldivmod>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4610      	mov	r0, r2
 8005e64:	4619      	mov	r1, r3
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	020b      	lsls	r3, r1, #8
 8005e70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e74:	0202      	lsls	r2, r0, #8
 8005e76:	6979      	ldr	r1, [r7, #20]
 8005e78:	6849      	ldr	r1, [r1, #4]
 8005e7a:	0849      	lsrs	r1, r1, #1
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	4605      	mov	r5, r0
 8005e82:	eb12 0804 	adds.w	r8, r2, r4
 8005e86:	eb43 0905 	adc.w	r9, r3, r5
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	469a      	mov	sl, r3
 8005e92:	4693      	mov	fp, r2
 8005e94:	4652      	mov	r2, sl
 8005e96:	465b      	mov	r3, fp
 8005e98:	4640      	mov	r0, r8
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	f7fa f9c0 	bl	8000220 <__aeabi_uldivmod>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eae:	d308      	bcc.n	8005ec2 <UART_SetConfig+0x322>
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb6:	d204      	bcs.n	8005ec2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6a3a      	ldr	r2, [r7, #32]
 8005ebe:	60da      	str	r2, [r3, #12]
 8005ec0:	e0c8      	b.n	8006054 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ec8:	e0c4      	b.n	8006054 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed2:	d167      	bne.n	8005fa4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005ed4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d828      	bhi.n	8005f2e <UART_SetConfig+0x38e>
 8005edc:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <UART_SetConfig+0x344>)
 8005ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee2:	bf00      	nop
 8005ee4:	08005f09 	.word	0x08005f09
 8005ee8:	08005f11 	.word	0x08005f11
 8005eec:	08005f19 	.word	0x08005f19
 8005ef0:	08005f2f 	.word	0x08005f2f
 8005ef4:	08005f1f 	.word	0x08005f1f
 8005ef8:	08005f2f 	.word	0x08005f2f
 8005efc:	08005f2f 	.word	0x08005f2f
 8005f00:	08005f2f 	.word	0x08005f2f
 8005f04:	08005f27 	.word	0x08005f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f08:	f7fd fdfa 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8005f0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f0e:	e014      	b.n	8005f3a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f10:	f7fd fe08 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 8005f14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f16:	e010      	b.n	8005f3a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f18:	4b5a      	ldr	r3, [pc, #360]	; (8006084 <UART_SetConfig+0x4e4>)
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f1c:	e00d      	b.n	8005f3a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f1e:	f7fd fd3b 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 8005f22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f24:	e009      	b.n	8005f3a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f2c:	e005      	b.n	8005f3a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 8089 	beq.w	8006054 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	4a4e      	ldr	r2, [pc, #312]	; (8006080 <UART_SetConfig+0x4e0>)
 8005f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f54:	005a      	lsls	r2, r3, #1
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	441a      	add	r2, r3
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	2b0f      	cmp	r3, #15
 8005f6c:	d916      	bls.n	8005f9c <UART_SetConfig+0x3fc>
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f74:	d212      	bcs.n	8005f9c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f023 030f 	bic.w	r3, r3, #15
 8005f7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	085b      	lsrs	r3, r3, #1
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	8bfb      	ldrh	r3, [r7, #30]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	8bfa      	ldrh	r2, [r7, #30]
 8005f98:	60da      	str	r2, [r3, #12]
 8005f9a:	e05b      	b.n	8006054 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fa2:	e057      	b.n	8006054 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d828      	bhi.n	8005ffe <UART_SetConfig+0x45e>
 8005fac:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <UART_SetConfig+0x414>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	08005fd9 	.word	0x08005fd9
 8005fb8:	08005fe1 	.word	0x08005fe1
 8005fbc:	08005fe9 	.word	0x08005fe9
 8005fc0:	08005fff 	.word	0x08005fff
 8005fc4:	08005fef 	.word	0x08005fef
 8005fc8:	08005fff 	.word	0x08005fff
 8005fcc:	08005fff 	.word	0x08005fff
 8005fd0:	08005fff 	.word	0x08005fff
 8005fd4:	08005ff7 	.word	0x08005ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd8:	f7fd fd92 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8005fdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fde:	e014      	b.n	800600a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fe0:	f7fd fda0 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 8005fe4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fe6:	e010      	b.n	800600a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe8:	4b26      	ldr	r3, [pc, #152]	; (8006084 <UART_SetConfig+0x4e4>)
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fec:	e00d      	b.n	800600a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fee:	f7fd fcd3 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 8005ff2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ff4:	e009      	b.n	800600a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ffc:	e005      	b.n	800600a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006008:	bf00      	nop
    }

    if (pclk != 0U)
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d021      	beq.n	8006054 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	4a1a      	ldr	r2, [pc, #104]	; (8006080 <UART_SetConfig+0x4e0>)
 8006016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800601a:	461a      	mov	r2, r3
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	085b      	lsrs	r3, r3, #1
 8006028:	441a      	add	r2, r3
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006032:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	2b0f      	cmp	r3, #15
 8006038:	d909      	bls.n	800604e <UART_SetConfig+0x4ae>
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006040:	d205      	bcs.n	800604e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	b29a      	uxth	r2, r3
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60da      	str	r2, [r3, #12]
 800604c:	e002      	b.n	8006054 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2201      	movs	r2, #1
 8006058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2201      	movs	r2, #1
 8006060:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2200      	movs	r2, #0
 8006068:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2200      	movs	r2, #0
 800606e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006070:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006074:	4618      	mov	r0, r3
 8006076:	3730      	adds	r7, #48	; 0x30
 8006078:	46bd      	mov	sp, r7
 800607a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800607e:	bf00      	nop
 8006080:	0800b528 	.word	0x0800b528
 8006084:	00f42400 	.word	0x00f42400

08006088 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01a      	beq.n	800619e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006186:	d10a      	bne.n	800619e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	605a      	str	r2, [r3, #4]
  }
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr

080061ca <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b086      	sub	sp, #24
 80061ce:	af02      	add	r7, sp, #8
 80061d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061da:	f7fb fb21 	bl	8001820 <HAL_GetTick>
 80061de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0308 	and.w	r3, r3, #8
 80061ea:	2b08      	cmp	r3, #8
 80061ec:	d10e      	bne.n	800620c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f832 	bl	8006266 <UART_WaitOnFlagUntilTimeout>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e028      	b.n	800625e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0304 	and.w	r3, r3, #4
 8006216:	2b04      	cmp	r3, #4
 8006218:	d10e      	bne.n	8006238 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800621a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f81c 	bl	8006266 <UART_WaitOnFlagUntilTimeout>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e012      	b.n	800625e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b09c      	sub	sp, #112	; 0x70
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	603b      	str	r3, [r7, #0]
 8006272:	4613      	mov	r3, r2
 8006274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006276:	e0a9      	b.n	80063cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800627a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800627e:	f000 80a5 	beq.w	80063cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006282:	f7fb facd 	bl	8001820 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800628e:	429a      	cmp	r2, r3
 8006290:	d302      	bcc.n	8006298 <UART_WaitOnFlagUntilTimeout+0x32>
 8006292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006294:	2b00      	cmp	r3, #0
 8006296:	d140      	bne.n	800631a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062ac:	667b      	str	r3, [r7, #100]	; 0x64
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e6      	bne.n	8006298 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	f023 0301 	bic.w	r3, r3, #1
 80062e0:	663b      	str	r3, [r7, #96]	; 0x60
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3308      	adds	r3, #8
 80062e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80062ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e5      	bne.n	80062ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2220      	movs	r2, #32
 8006302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2220      	movs	r2, #32
 800630a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e069      	b.n	80063ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	d051      	beq.n	80063cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006336:	d149      	bne.n	80063cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006340:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006356:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	461a      	mov	r2, r3
 800635e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006360:	637b      	str	r3, [r7, #52]	; 0x34
 8006362:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e6      	bne.n	8006342 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	613b      	str	r3, [r7, #16]
   return(result);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	66bb      	str	r3, [r7, #104]	; 0x68
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006394:	623a      	str	r2, [r7, #32]
 8006396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	69f9      	ldr	r1, [r7, #28]
 800639a:	6a3a      	ldr	r2, [r7, #32]
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e5      	bne.n	8006374 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e010      	b.n	80063ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69da      	ldr	r2, [r3, #28]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4013      	ands	r3, r2
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	429a      	cmp	r2, r3
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	f43f af46 	beq.w	8006278 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3770      	adds	r7, #112	; 0x70
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b096      	sub	sp, #88	; 0x58
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	4613      	mov	r3, r2
 8006404:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	88fa      	ldrh	r2, [r7, #6]
 8006410:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2222      	movs	r2, #34	; 0x22
 8006420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800642a:	2b00      	cmp	r3, #0
 800642c:	d02d      	beq.n	800648a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006434:	4a40      	ldr	r2, [pc, #256]	; (8006538 <UART_Start_Receive_DMA+0x140>)
 8006436:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800643e:	4a3f      	ldr	r2, [pc, #252]	; (800653c <UART_Start_Receive_DMA+0x144>)
 8006440:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006448:	4a3d      	ldr	r2, [pc, #244]	; (8006540 <UART_Start_Receive_DMA+0x148>)
 800644a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006452:	2200      	movs	r2, #0
 8006454:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3324      	adds	r3, #36	; 0x24
 8006462:	4619      	mov	r1, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006468:	461a      	mov	r2, r3
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	f7fb feac 	bl	80021c8 <HAL_DMA_Start_IT>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d009      	beq.n	800648a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2210      	movs	r2, #16
 800647a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e051      	b.n	800652e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d018      	beq.n	80064c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a6:	657b      	str	r3, [r7, #84]	; 0x54
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	461a      	mov	r2, r3
 80064ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80064b2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e6      	bne.n	8006492 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3308      	adds	r3, #8
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	653b      	str	r3, [r7, #80]	; 0x50
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3308      	adds	r3, #8
 80064e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064e4:	637a      	str	r2, [r7, #52]	; 0x34
 80064e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e5      	bne.n	80064c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3308      	adds	r3, #8
 80064fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	613b      	str	r3, [r7, #16]
   return(result);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800650e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3308      	adds	r3, #8
 8006516:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006518:	623a      	str	r2, [r7, #32]
 800651a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	69f9      	ldr	r1, [r7, #28]
 800651e:	6a3a      	ldr	r2, [r7, #32]
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	61bb      	str	r3, [r7, #24]
   return(result);
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e5      	bne.n	80064f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3758      	adds	r7, #88	; 0x58
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	0800668f 	.word	0x0800668f
 800653c:	080067bb 	.word	0x080067bb
 8006540:	080067f9 	.word	0x080067f9

08006544 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b08f      	sub	sp, #60	; 0x3c
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	61fb      	str	r3, [r7, #28]
   return(result);
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006560:	637b      	str	r3, [r7, #52]	; 0x34
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800656c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e6      	bne.n	800654c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3308      	adds	r3, #8
 8006584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	60bb      	str	r3, [r7, #8]
   return(result);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006594:	633b      	str	r3, [r7, #48]	; 0x30
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	3308      	adds	r3, #8
 800659c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800659e:	61ba      	str	r2, [r7, #24]
 80065a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	6979      	ldr	r1, [r7, #20]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	613b      	str	r3, [r7, #16]
   return(result);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e5      	bne.n	800657e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80065ba:	bf00      	nop
 80065bc:	373c      	adds	r7, #60	; 0x3c
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr

080065c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b095      	sub	sp, #84	; 0x54
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ea:	643b      	str	r3, [r7, #64]	; 0x40
 80065ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e6      	bne.n	80065cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3308      	adds	r3, #8
 8006604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	61fb      	str	r3, [r7, #28]
   return(result);
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006614:	f023 0301 	bic.w	r3, r3, #1
 8006618:	64bb      	str	r3, [r7, #72]	; 0x48
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3308      	adds	r3, #8
 8006620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006622:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e3      	bne.n	80065fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800663a:	2b01      	cmp	r3, #1
 800663c:	d118      	bne.n	8006670 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	60bb      	str	r3, [r7, #8]
   return(result);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f023 0310 	bic.w	r3, r3, #16
 8006652:	647b      	str	r3, [r7, #68]	; 0x44
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	6979      	ldr	r1, [r7, #20]
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	613b      	str	r3, [r7, #16]
   return(result);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e6      	bne.n	800663e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006684:	bf00      	nop
 8006686:	3754      	adds	r7, #84	; 0x54
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr

0800668e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b09c      	sub	sp, #112	; 0x70
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d171      	bne.n	800678e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80066aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ac:	2200      	movs	r2, #0
 80066ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80066c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80066d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e6      	bne.n	80066b2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3308      	adds	r3, #8
 80066ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f6:	f023 0301 	bic.w	r3, r3, #1
 80066fa:	667b      	str	r3, [r7, #100]	; 0x64
 80066fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3308      	adds	r3, #8
 8006702:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006704:	647a      	str	r2, [r7, #68]	; 0x44
 8006706:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800670a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e5      	bne.n	80066e4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3308      	adds	r3, #8
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	623b      	str	r3, [r7, #32]
   return(result);
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800672e:	663b      	str	r3, [r7, #96]	; 0x60
 8006730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3308      	adds	r3, #8
 8006736:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006738:	633a      	str	r2, [r7, #48]	; 0x30
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800673e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e5      	bne.n	8006718 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800674c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674e:	2220      	movs	r2, #32
 8006750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006758:	2b01      	cmp	r3, #1
 800675a:	d118      	bne.n	800678e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800675c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	60fb      	str	r3, [r7, #12]
   return(result);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f023 0310 	bic.w	r3, r3, #16
 8006770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	69b9      	ldr	r1, [r7, #24]
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	617b      	str	r3, [r7, #20]
   return(result);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e6      	bne.n	800675c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800678e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006790:	2200      	movs	r2, #0
 8006792:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006798:	2b01      	cmp	r3, #1
 800679a:	d107      	bne.n	80067ac <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800679c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800679e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067a2:	4619      	mov	r1, r3
 80067a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067a6:	f7ff f9f0 	bl	8005b8a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067aa:	e002      	b.n	80067b2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80067ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067ae:	f7fa faa1 	bl	8000cf4 <HAL_UART_RxCpltCallback>
}
 80067b2:	bf00      	nop
 80067b4:	3770      	adds	r7, #112	; 0x70
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2201      	movs	r2, #1
 80067cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d109      	bne.n	80067ea <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067dc:	085b      	lsrs	r3, r3, #1
 80067de:	b29b      	uxth	r3, r3
 80067e0:	4619      	mov	r1, r3
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff f9d1 	bl	8005b8a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067e8:	e002      	b.n	80067f0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f7ff f9bb 	bl	8005b66 <HAL_UART_RxHalfCpltCallback>
}
 80067f0:	bf00      	nop
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006804:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006814:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006820:	2b80      	cmp	r3, #128	; 0x80
 8006822:	d109      	bne.n	8006838 <UART_DMAError+0x40>
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	2b21      	cmp	r3, #33	; 0x21
 8006828:	d106      	bne.n	8006838 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2200      	movs	r2, #0
 800682e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006832:	6978      	ldr	r0, [r7, #20]
 8006834:	f7ff fe86 	bl	8006544 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d109      	bne.n	800685a <UART_DMAError+0x62>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b22      	cmp	r3, #34	; 0x22
 800684a:	d106      	bne.n	800685a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2200      	movs	r2, #0
 8006850:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006854:	6978      	ldr	r0, [r7, #20]
 8006856:	f7ff feb5 	bl	80065c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006860:	f043 0210 	orr.w	r2, r3, #16
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800686a:	6978      	ldr	r0, [r7, #20]
 800686c:	f7ff f984 	bl	8005b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006870:	bf00      	nop
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7ff f96e 	bl	8005b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800689c:	bf00      	nop
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c0:	61fb      	str	r3, [r7, #28]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	61bb      	str	r3, [r7, #24]
 80068cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6979      	ldr	r1, [r7, #20]
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	613b      	str	r3, [r7, #16]
   return(result);
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e6      	bne.n	80068ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff f931 	bl	8005b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068f2:	bf00      	nop
 80068f4:	3720      	adds	r7, #32
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr

0800691e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	bc80      	pop	{r7}
 800692e:	4770      	bx	lr

08006930 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800693e:	2b01      	cmp	r3, #1
 8006940:	d101      	bne.n	8006946 <HAL_UARTEx_DisableFifoMode+0x16>
 8006942:	2302      	movs	r3, #2
 8006944:	e027      	b.n	8006996 <HAL_UARTEx_DisableFifoMode+0x66>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2224      	movs	r2, #36	; 0x24
 8006952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 0201 	bic.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006974:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr

080069a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e02d      	b.n	8006a14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2224      	movs	r2, #36	; 0x24
 80069c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0201 	bic.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f84f 	bl	8006a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e02d      	b.n	8006a90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2224      	movs	r2, #36	; 0x24
 8006a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f811 	bl	8006a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d108      	bne.n	8006aba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ab8:	e031      	b.n	8006b1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006aba:	2308      	movs	r3, #8
 8006abc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006abe:	2308      	movs	r3, #8
 8006ac0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	0e5b      	lsrs	r3, r3, #25
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	0f5b      	lsrs	r3, r3, #29
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	7b3a      	ldrb	r2, [r7, #12]
 8006ae6:	4910      	ldr	r1, [pc, #64]	; (8006b28 <UARTEx_SetNbDataToProcess+0x90>)
 8006ae8:	5c8a      	ldrb	r2, [r1, r2]
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006aee:	7b3a      	ldrb	r2, [r7, #12]
 8006af0:	490e      	ldr	r1, [pc, #56]	; (8006b2c <UARTEx_SetNbDataToProcess+0x94>)
 8006af2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006af4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	7b7a      	ldrb	r2, [r7, #13]
 8006b04:	4908      	ldr	r1, [pc, #32]	; (8006b28 <UARTEx_SetNbDataToProcess+0x90>)
 8006b06:	5c8a      	ldrb	r2, [r1, r2]
 8006b08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b0c:	7b7a      	ldrb	r2, [r7, #13]
 8006b0e:	4907      	ldr	r1, [pc, #28]	; (8006b2c <UARTEx_SetNbDataToProcess+0x94>)
 8006b10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b12:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b1e:	bf00      	nop
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bc80      	pop	{r7}
 8006b26:	4770      	bx	lr
 8006b28:	0800b540 	.word	0x0800b540
 8006b2c:	0800b548 	.word	0x0800b548

08006b30 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8006b38:	4a24      	ldr	r2, [pc, #144]	; (8006bcc <RadioInit+0x9c>)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8006b3e:	4b24      	ldr	r3, [pc, #144]	; (8006bd0 <RadioInit+0xa0>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8006b44:	4b22      	ldr	r3, [pc, #136]	; (8006bd0 <RadioInit+0xa0>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8006b4a:	4b21      	ldr	r3, [pc, #132]	; (8006bd0 <RadioInit+0xa0>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8006b50:	4b1f      	ldr	r3, [pc, #124]	; (8006bd0 <RadioInit+0xa0>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8006b56:	481f      	ldr	r0, [pc, #124]	; (8006bd4 <RadioInit+0xa4>)
 8006b58:	f001 ff88 	bl	8008a6c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8006b5c:	4b1c      	ldr	r3, [pc, #112]	; (8006bd0 <RadioInit+0xa0>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8006b62:	4b1b      	ldr	r3, [pc, #108]	; (8006bd0 <RadioInit+0xa0>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8006b68:	f002 fa1c 	bl	8008fa4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	2000      	movs	r0, #0
 8006b70:	f002 fde8 	bl	8009744 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8006b74:	2204      	movs	r2, #4
 8006b76:	2100      	movs	r1, #0
 8006b78:	2001      	movs	r0, #1
 8006b7a:	f002 fba5 	bl	80092c8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2200      	movs	r2, #0
 8006b82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006b86:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006b8a:	f002 fad5 	bl	8009138 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8006b8e:	f000 fe91 	bl	80078b4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8006b92:	2300      	movs	r3, #0
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	4b10      	ldr	r3, [pc, #64]	; (8006bd8 <RadioInit+0xa8>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b9e:	480f      	ldr	r0, [pc, #60]	; (8006bdc <RadioInit+0xac>)
 8006ba0:	f003 fb32 	bl	800a208 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	4b0d      	ldr	r3, [pc, #52]	; (8006be0 <RadioInit+0xb0>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006bb0:	480c      	ldr	r0, [pc, #48]	; (8006be4 <RadioInit+0xb4>)
 8006bb2:	f003 fb29 	bl	800a208 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8006bb6:	4809      	ldr	r0, [pc, #36]	; (8006bdc <RadioInit+0xac>)
 8006bb8:	f003 fbca 	bl	800a350 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8006bbc:	4809      	ldr	r0, [pc, #36]	; (8006be4 <RadioInit+0xb4>)
 8006bbe:	f003 fbc7 	bl	800a350 <UTIL_TIMER_Stop>
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	200005e8 	.word	0x200005e8
 8006bd0:	200005ec 	.word	0x200005ec
 8006bd4:	08007cad 	.word	0x08007cad
 8006bd8:	08007c35 	.word	0x08007c35
 8006bdc:	20000648 	.word	0x20000648
 8006be0:	08007c49 	.word	0x08007c49
 8006be4:	20000660 	.word	0x20000660

08006be8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8006bec:	f001 ff86 	bl	8008afc <SUBGRF_GetOperatingMode>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b07      	cmp	r3, #7
 8006bf4:	d00a      	beq.n	8006c0c <RadioGetStatus+0x24>
 8006bf6:	2b07      	cmp	r3, #7
 8006bf8:	dc0a      	bgt.n	8006c10 <RadioGetStatus+0x28>
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d002      	beq.n	8006c04 <RadioGetStatus+0x1c>
 8006bfe:	2b05      	cmp	r3, #5
 8006c00:	d002      	beq.n	8006c08 <RadioGetStatus+0x20>
 8006c02:	e005      	b.n	8006c10 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8006c04:	2302      	movs	r3, #2
 8006c06:	e004      	b.n	8006c12 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e002      	b.n	8006c12 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e000      	b.n	8006c12 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8006c10:	2300      	movs	r3, #0
    }
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8006c22:	4a2a      	ldr	r2, [pc, #168]	; (8006ccc <RadioSetModem+0xb4>)
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f003 f95d 	bl	8009eea <RFW_SetRadioModem>
    switch( modem )
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	d80e      	bhi.n	8006c54 <RadioSetModem+0x3c>
 8006c36:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <RadioSetModem+0x24>)
 8006c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3c:	08006c63 	.word	0x08006c63
 8006c40:	08006c71 	.word	0x08006c71
 8006c44:	08006c55 	.word	0x08006c55
 8006c48:	08006c97 	.word	0x08006c97
 8006c4c:	08006ca5 	.word	0x08006ca5
 8006c50:	08006cb3 	.word	0x08006cb3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8006c54:	2003      	movs	r0, #3
 8006c56:	f002 fb11 	bl	800927c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006c5a:	4b1c      	ldr	r3, [pc, #112]	; (8006ccc <RadioSetModem+0xb4>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	735a      	strb	r2, [r3, #13]
        break;
 8006c60:	e02f      	b.n	8006cc2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8006c62:	2000      	movs	r0, #0
 8006c64:	f002 fb0a 	bl	800927c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006c68:	4b18      	ldr	r3, [pc, #96]	; (8006ccc <RadioSetModem+0xb4>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	735a      	strb	r2, [r3, #13]
        break;
 8006c6e:	e028      	b.n	8006cc2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8006c70:	2001      	movs	r0, #1
 8006c72:	f002 fb03 	bl	800927c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8006c76:	4b15      	ldr	r3, [pc, #84]	; (8006ccc <RadioSetModem+0xb4>)
 8006c78:	7b5a      	ldrb	r2, [r3, #13]
 8006c7a:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <RadioSetModem+0xb4>)
 8006c7c:	7b1b      	ldrb	r3, [r3, #12]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d01e      	beq.n	8006cc0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8006c82:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <RadioSetModem+0xb4>)
 8006c84:	7b1a      	ldrb	r2, [r3, #12]
 8006c86:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <RadioSetModem+0xb4>)
 8006c88:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8006c8a:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <RadioSetModem+0xb4>)
 8006c8c:	7b5b      	ldrb	r3, [r3, #13]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 ff9a 	bl	8007bc8 <RadioSetPublicNetwork>
        }
        break;
 8006c94:	e014      	b.n	8006cc0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006c96:	2002      	movs	r0, #2
 8006c98:	f002 faf0 	bl	800927c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006c9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ccc <RadioSetModem+0xb4>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	735a      	strb	r2, [r3, #13]
        break;
 8006ca2:	e00e      	b.n	8006cc2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006ca4:	2002      	movs	r0, #2
 8006ca6:	f002 fae9 	bl	800927c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006caa:	4b08      	ldr	r3, [pc, #32]	; (8006ccc <RadioSetModem+0xb4>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	735a      	strb	r2, [r3, #13]
        break;
 8006cb0:	e007      	b.n	8006cc2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	f002 fae2 	bl	800927c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006cb8:	4b04      	ldr	r3, [pc, #16]	; (8006ccc <RadioSetModem+0xb4>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	735a      	strb	r2, [r3, #13]
        break;
 8006cbe:	e000      	b.n	8006cc2 <RadioSetModem+0xaa>
        break;
 8006cc0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8006cc2:	bf00      	nop
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	200005ec 	.word	0x200005ec

08006cd0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f002 fa89 	bl	80091f0 <SUBGRF_SetRfFrequency>
}
 8006cde:	bf00      	nop
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b090      	sub	sp, #64	; 0x40
 8006cea:	af0a      	add	r7, sp, #40	; 0x28
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	603b      	str	r3, [r7, #0]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8006d02:	f000 fdea 	bl	80078da <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8006d06:	2000      	movs	r0, #0
 8006d08:	f7ff ff86 	bl	8006c18 <RadioSetModem>

    RadioSetChannel( freq );
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f7ff ffdf 	bl	8006cd0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8006d12:	2301      	movs	r3, #1
 8006d14:	9309      	str	r3, [sp, #36]	; 0x24
 8006d16:	2300      	movs	r3, #0
 8006d18:	9308      	str	r3, [sp, #32]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	9307      	str	r3, [sp, #28]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	9306      	str	r3, [sp, #24]
 8006d22:	2300      	movs	r3, #0
 8006d24:	9305      	str	r3, [sp, #20]
 8006d26:	2300      	movs	r3, #0
 8006d28:	9304      	str	r3, [sp, #16]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	9303      	str	r3, [sp, #12]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9302      	str	r3, [sp, #8]
 8006d32:	2303      	movs	r3, #3
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	2000      	movs	r0, #0
 8006d44:	f000 f83c 	bl	8006dc0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8006d48:	2000      	movs	r0, #0
 8006d4a:	f000 fdcd 	bl	80078e8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8006d4e:	f000 ff69 	bl	8007c24 <RadioGetWakeupTime>
 8006d52:	4603      	mov	r3, r0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fa fd77 	bl	8001848 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8006d5a:	f003 fb93 	bl	800a484 <UTIL_TIMER_GetCurrentTime>
 8006d5e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006d60:	e00d      	b.n	8006d7e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8006d62:	2000      	movs	r0, #0
 8006d64:	f000 feae 	bl	8007ac4 <RadioRssi>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8006d6c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	dd02      	ble.n	8006d7e <RadioIsChannelFree+0x98>
        {
            status = false;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	75fb      	strb	r3, [r7, #23]
            break;
 8006d7c:	e006      	b.n	8006d8c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006d7e:	6938      	ldr	r0, [r7, #16]
 8006d80:	f003 fb92 	bl	800a4a8 <UTIL_TIMER_GetElapsedTime>
 8006d84:	4602      	mov	r2, r0
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d8ea      	bhi.n	8006d62 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8006d8c:	f000 fda5 	bl	80078da <RadioStandby>

    return status;
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006da4:	2300      	movs	r3, #0
 8006da6:	2200      	movs	r2, #0
 8006da8:	2100      	movs	r1, #0
 8006daa:	2000      	movs	r0, #0
 8006dac:	f002 f9c4 	bl	8009138 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8006db0:	f001 ff75 	bl	8008c9e <SUBGRF_GetRandom>
 8006db4:	6078      	str	r0, [r7, #4]

    return rnd;
 8006db6:	687b      	ldr	r3, [r7, #4]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08a      	sub	sp, #40	; 0x28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	4603      	mov	r3, r0
 8006dce:	73fb      	strb	r3, [r7, #15]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8006dd4:	4ab9      	ldr	r2, [pc, #740]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006dd6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006dda:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8006ddc:	f003 f843 	bl	8009e66 <RFW_DeInit>
    if( rxContinuous == true )
 8006de0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8006dec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8006df4:	4ab2      	ldr	r2, [pc, #712]	; (80070c0 <RadioSetRxConfig+0x300>)
 8006df6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006dfa:	7013      	strb	r3, [r2, #0]
 8006dfc:	e002      	b.n	8006e04 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8006dfe:	4bb0      	ldr	r3, [pc, #704]	; (80070c0 <RadioSetRxConfig+0x300>)
 8006e00:	22ff      	movs	r2, #255	; 0xff
 8006e02:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	2b05      	cmp	r3, #5
 8006e08:	d009      	beq.n	8006e1e <RadioSetRxConfig+0x5e>
 8006e0a:	2b05      	cmp	r3, #5
 8006e0c:	f300 81d7 	bgt.w	80071be <RadioSetRxConfig+0x3fe>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 80bf 	beq.w	8006f94 <RadioSetRxConfig+0x1d4>
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	f000 8124 	beq.w	8007064 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8006e1c:	e1cf      	b.n	80071be <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8006e1e:	2001      	movs	r0, #1
 8006e20:	f002 f882 	bl	8008f28 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006e24:	4ba5      	ldr	r3, [pc, #660]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006e2c:	4aa3      	ldr	r2, [pc, #652]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8006e32:	4ba2      	ldr	r3, [pc, #648]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006e34:	2209      	movs	r2, #9
 8006e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8006e3a:	4ba0      	ldr	r3, [pc, #640]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006e3c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006e40:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006e42:	68b8      	ldr	r0, [r7, #8]
 8006e44:	f002 ff42 	bl	8009ccc <SUBGRF_GetFskBandwidthRegValue>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	4b9b      	ldr	r3, [pc, #620]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006e52:	4b9a      	ldr	r3, [pc, #616]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006e58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	4b97      	ldr	r3, [pc, #604]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006e60:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8006e62:	4b96      	ldr	r3, [pc, #600]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8006e68:	4b94      	ldr	r3, [pc, #592]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006e6a:	2210      	movs	r2, #16
 8006e6c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006e6e:	4b93      	ldr	r3, [pc, #588]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8006e74:	4b91      	ldr	r3, [pc, #580]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006e7a:	4b91      	ldr	r3, [pc, #580]	; (80070c0 <RadioSetRxConfig+0x300>)
 8006e7c:	781a      	ldrb	r2, [r3, #0]
 8006e7e:	4b8f      	ldr	r3, [pc, #572]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006e80:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006e82:	4b8e      	ldr	r3, [pc, #568]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006e84:	2201      	movs	r2, #1
 8006e86:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006e88:	4b8c      	ldr	r3, [pc, #560]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8006e8e:	2005      	movs	r0, #5
 8006e90:	f7ff fec2 	bl	8006c18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006e94:	488b      	ldr	r0, [pc, #556]	; (80070c4 <RadioSetRxConfig+0x304>)
 8006e96:	f002 fae5 	bl	8009464 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006e9a:	488b      	ldr	r0, [pc, #556]	; (80070c8 <RadioSetRxConfig+0x308>)
 8006e9c:	f002 fbb4 	bl	8009608 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006ea0:	4a8a      	ldr	r2, [pc, #552]	; (80070cc <RadioSetRxConfig+0x30c>)
 8006ea2:	f107 031c 	add.w	r3, r7, #28
 8006ea6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006eaa:	e883 0003 	stmia.w	r3, {r0, r1}
 8006eae:	f107 031c 	add.w	r3, r7, #28
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 fe71 	bl	8008b9a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006eb8:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ebc:	f001 febc 	bl	8008c38 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8006ec0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006ec4:	f000 fe1d 	bl	8007b02 <RadioRead>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8006ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed2:	f023 0310 	bic.w	r3, r3, #16
 8006ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8006eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ede:	4619      	mov	r1, r3
 8006ee0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006ee4:	f000 fdfb 	bl	8007ade <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8006ee8:	2104      	movs	r1, #4
 8006eea:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8006eee:	f000 fdf6 	bl	8007ade <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8006ef2:	f640 009b 	movw	r0, #2203	; 0x89b
 8006ef6:	f000 fe04 	bl	8007b02 <RadioRead>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8006f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f04:	f023 031c 	bic.w	r3, r3, #28
 8006f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8006f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f10:	f043 0308 	orr.w	r3, r3, #8
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	4619      	mov	r1, r3
 8006f18:	f640 009b 	movw	r0, #2203	; 0x89b
 8006f1c:	f000 fddf 	bl	8007ade <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8006f20:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006f24:	f000 fded 	bl	8007b02 <RadioRead>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8006f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f32:	f023 0318 	bic.w	r3, r3, #24
 8006f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8006f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f3e:	f043 0318 	orr.w	r3, r3, #24
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	4619      	mov	r1, r3
 8006f46:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006f4a:	f000 fdc8 	bl	8007ade <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8006f4e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006f52:	f000 fdd6 	bl	8007b02 <RadioRead>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8006f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8006f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f6c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	4619      	mov	r1, r3
 8006f74:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006f78:	f000 fdb1 	bl	8007ade <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006f7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f7e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006f82:	fb02 f303 	mul.w	r3, r2, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8e:	4a4b      	ldr	r2, [pc, #300]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006f90:	6093      	str	r3, [r2, #8]
            break;
 8006f92:	e115      	b.n	80071c0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006f94:	2000      	movs	r0, #0
 8006f96:	f001 ffc7 	bl	8008f28 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006f9a:	4b48      	ldr	r3, [pc, #288]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006fa2:	4a46      	ldr	r2, [pc, #280]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006fa8:	4b44      	ldr	r3, [pc, #272]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006faa:	220b      	movs	r2, #11
 8006fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006fb0:	68b8      	ldr	r0, [r7, #8]
 8006fb2:	f002 fe8b 	bl	8009ccc <SUBGRF_GetFskBandwidthRegValue>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	461a      	mov	r2, r3
 8006fba:	4b40      	ldr	r3, [pc, #256]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006fc0:	4b3e      	ldr	r3, [pc, #248]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006fc6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006fc8:	00db      	lsls	r3, r3, #3
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	4b3b      	ldr	r3, [pc, #236]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006fce:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006fd0:	4b3a      	ldr	r3, [pc, #232]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006fd2:	2204      	movs	r2, #4
 8006fd4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8006fd6:	4b39      	ldr	r3, [pc, #228]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006fd8:	2218      	movs	r2, #24
 8006fda:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006fdc:	4b37      	ldr	r3, [pc, #220]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006fe2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006fe6:	f083 0301 	eor.w	r3, r3, #1
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	461a      	mov	r2, r3
 8006fee:	4b33      	ldr	r3, [pc, #204]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006ff0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006ff2:	4b33      	ldr	r3, [pc, #204]	; (80070c0 <RadioSetRxConfig+0x300>)
 8006ff4:	781a      	ldrb	r2, [r3, #0]
 8006ff6:	4b31      	ldr	r3, [pc, #196]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8006ff8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8006ffa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007002:	4b2e      	ldr	r3, [pc, #184]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8007004:	22f2      	movs	r2, #242	; 0xf2
 8007006:	75da      	strb	r2, [r3, #23]
 8007008:	e002      	b.n	8007010 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800700a:	4b2c      	ldr	r3, [pc, #176]	; (80070bc <RadioSetRxConfig+0x2fc>)
 800700c:	2201      	movs	r2, #1
 800700e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007010:	4b2a      	ldr	r3, [pc, #168]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8007012:	2201      	movs	r2, #1
 8007014:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007016:	f000 fc60 	bl	80078da <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800701a:	2000      	movs	r0, #0
 800701c:	f7ff fdfc 	bl	8006c18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007020:	4828      	ldr	r0, [pc, #160]	; (80070c4 <RadioSetRxConfig+0x304>)
 8007022:	f002 fa1f 	bl	8009464 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007026:	4828      	ldr	r0, [pc, #160]	; (80070c8 <RadioSetRxConfig+0x308>)
 8007028:	f002 faee 	bl	8009608 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800702c:	4a28      	ldr	r2, [pc, #160]	; (80070d0 <RadioSetRxConfig+0x310>)
 800702e:	f107 0314 	add.w	r3, r7, #20
 8007032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007036:	e883 0003 	stmia.w	r3, {r0, r1}
 800703a:	f107 0314 	add.w	r3, r7, #20
 800703e:	4618      	mov	r0, r3
 8007040:	f001 fdab 	bl	8008b9a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007044:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007048:	f001 fdf6 	bl	8008c38 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800704c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800704e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007052:	fb02 f303 	mul.w	r3, r2, r3
 8007056:	461a      	mov	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	fbb2 f3f3 	udiv	r3, r2, r3
 800705e:	4a17      	ldr	r2, [pc, #92]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8007060:	6093      	str	r3, [r2, #8]
            break;
 8007062:	e0ad      	b.n	80071c0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007064:	2000      	movs	r0, #0
 8007066:	f001 ff5f 	bl	8008f28 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800706a:	4b14      	ldr	r3, [pc, #80]	; (80070bc <RadioSetRxConfig+0x2fc>)
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	b2da      	uxtb	r2, r3
 8007076:	4b11      	ldr	r3, [pc, #68]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8007078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800707c:	4a15      	ldr	r2, [pc, #84]	; (80070d4 <RadioSetRxConfig+0x314>)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	4413      	add	r3, r2
 8007082:	781a      	ldrb	r2, [r3, #0]
 8007084:	4b0d      	ldr	r3, [pc, #52]	; (80070bc <RadioSetRxConfig+0x2fc>)
 8007086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800708a:	4a0c      	ldr	r2, [pc, #48]	; (80070bc <RadioSetRxConfig+0x2fc>)
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d105      	bne.n	80070a4 <RadioSetRxConfig+0x2e4>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b0b      	cmp	r3, #11
 800709c:	d008      	beq.n	80070b0 <RadioSetRxConfig+0x2f0>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b0c      	cmp	r3, #12
 80070a2:	d005      	beq.n	80070b0 <RadioSetRxConfig+0x2f0>
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d116      	bne.n	80070d8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b0c      	cmp	r3, #12
 80070ae:	d113      	bne.n	80070d8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80070b0:	4b02      	ldr	r3, [pc, #8]	; (80070bc <RadioSetRxConfig+0x2fc>)
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80070b8:	e012      	b.n	80070e0 <RadioSetRxConfig+0x320>
 80070ba:	bf00      	nop
 80070bc:	200005ec 	.word	0x200005ec
 80070c0:	2000000d 	.word	0x2000000d
 80070c4:	20000624 	.word	0x20000624
 80070c8:	200005fa 	.word	0x200005fa
 80070cc:	0800b438 	.word	0x0800b438
 80070d0:	0800b440 	.word	0x0800b440
 80070d4:	0800b5dc 	.word	0x0800b5dc
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80070d8:	4b3b      	ldr	r3, [pc, #236]	; (80071c8 <RadioSetRxConfig+0x408>)
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80070e0:	4b39      	ldr	r3, [pc, #228]	; (80071c8 <RadioSetRxConfig+0x408>)
 80070e2:	2201      	movs	r2, #1
 80070e4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80070e6:	4b38      	ldr	r3, [pc, #224]	; (80071c8 <RadioSetRxConfig+0x408>)
 80070e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070ec:	2b05      	cmp	r3, #5
 80070ee:	d004      	beq.n	80070fa <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80070f0:	4b35      	ldr	r3, [pc, #212]	; (80071c8 <RadioSetRxConfig+0x408>)
 80070f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80070f6:	2b06      	cmp	r3, #6
 80070f8:	d10a      	bne.n	8007110 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80070fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80070fc:	2b0b      	cmp	r3, #11
 80070fe:	d803      	bhi.n	8007108 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007100:	4b31      	ldr	r3, [pc, #196]	; (80071c8 <RadioSetRxConfig+0x408>)
 8007102:	220c      	movs	r2, #12
 8007104:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007106:	e006      	b.n	8007116 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007108:	4a2f      	ldr	r2, [pc, #188]	; (80071c8 <RadioSetRxConfig+0x408>)
 800710a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800710c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800710e:	e002      	b.n	8007116 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007110:	4a2d      	ldr	r2, [pc, #180]	; (80071c8 <RadioSetRxConfig+0x408>)
 8007112:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007114:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007116:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800711a:	4b2b      	ldr	r3, [pc, #172]	; (80071c8 <RadioSetRxConfig+0x408>)
 800711c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800711e:	4b2b      	ldr	r3, [pc, #172]	; (80071cc <RadioSetRxConfig+0x40c>)
 8007120:	781a      	ldrb	r2, [r3, #0]
 8007122:	4b29      	ldr	r3, [pc, #164]	; (80071c8 <RadioSetRxConfig+0x408>)
 8007124:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007126:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800712a:	4b27      	ldr	r3, [pc, #156]	; (80071c8 <RadioSetRxConfig+0x408>)
 800712c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007130:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8007134:	4b24      	ldr	r3, [pc, #144]	; (80071c8 <RadioSetRxConfig+0x408>)
 8007136:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800713a:	f000 fbce 	bl	80078da <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800713e:	2001      	movs	r0, #1
 8007140:	f7ff fd6a 	bl	8006c18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007144:	4822      	ldr	r0, [pc, #136]	; (80071d0 <RadioSetRxConfig+0x410>)
 8007146:	f002 f98d 	bl	8009464 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800714a:	4822      	ldr	r0, [pc, #136]	; (80071d4 <RadioSetRxConfig+0x414>)
 800714c:	f002 fa5c 	bl	8009608 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8007150:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007152:	b2db      	uxtb	r3, r3
 8007154:	4618      	mov	r0, r3
 8007156:	f001 fef6 	bl	8008f46 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800715a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800715e:	f002 fbaf 	bl	80098c0 <SUBGRF_ReadRegister>
 8007162:	4603      	mov	r3, r0
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	b2db      	uxtb	r3, r3
 800716a:	4619      	mov	r1, r3
 800716c:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8007170:	f002 fb92 	bl	8009898 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007174:	4b14      	ldr	r3, [pc, #80]	; (80071c8 <RadioSetRxConfig+0x408>)
 8007176:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800717a:	2b01      	cmp	r3, #1
 800717c:	d10d      	bne.n	800719a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800717e:	f240 7036 	movw	r0, #1846	; 0x736
 8007182:	f002 fb9d 	bl	80098c0 <SUBGRF_ReadRegister>
 8007186:	4603      	mov	r3, r0
 8007188:	f023 0304 	bic.w	r3, r3, #4
 800718c:	b2db      	uxtb	r3, r3
 800718e:	4619      	mov	r1, r3
 8007190:	f240 7036 	movw	r0, #1846	; 0x736
 8007194:	f002 fb80 	bl	8009898 <SUBGRF_WriteRegister>
 8007198:	e00c      	b.n	80071b4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800719a:	f240 7036 	movw	r0, #1846	; 0x736
 800719e:	f002 fb8f 	bl	80098c0 <SUBGRF_ReadRegister>
 80071a2:	4603      	mov	r3, r0
 80071a4:	f043 0304 	orr.w	r3, r3, #4
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	4619      	mov	r1, r3
 80071ac:	f240 7036 	movw	r0, #1846	; 0x736
 80071b0:	f002 fb72 	bl	8009898 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80071b4:	4b04      	ldr	r3, [pc, #16]	; (80071c8 <RadioSetRxConfig+0x408>)
 80071b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071ba:	609a      	str	r2, [r3, #8]
            break;
 80071bc:	e000      	b.n	80071c0 <RadioSetRxConfig+0x400>
            break;
 80071be:	bf00      	nop
    }
}
 80071c0:	bf00      	nop
 80071c2:	3728      	adds	r7, #40	; 0x28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	200005ec 	.word	0x200005ec
 80071cc:	2000000d 	.word	0x2000000d
 80071d0:	20000624 	.word	0x20000624
 80071d4:	200005fa 	.word	0x200005fa

080071d8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60ba      	str	r2, [r7, #8]
 80071e0:	607b      	str	r3, [r7, #4]
 80071e2:	4603      	mov	r3, r0
 80071e4:	73fb      	strb	r3, [r7, #15]
 80071e6:	460b      	mov	r3, r1
 80071e8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80071ea:	f002 fe3c 	bl	8009e66 <RFW_DeInit>
    switch( modem )
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	2b04      	cmp	r3, #4
 80071f2:	f000 80c7 	beq.w	8007384 <RadioSetTxConfig+0x1ac>
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	f300 80d6 	bgt.w	80073a8 <RadioSetTxConfig+0x1d0>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <RadioSetTxConfig+0x2e>
 8007200:	2b01      	cmp	r3, #1
 8007202:	d059      	beq.n	80072b8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007204:	e0d0      	b.n	80073a8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007206:	4b77      	ldr	r3, [pc, #476]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800720e:	4a75      	ldr	r2, [pc, #468]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007214:	4b73      	ldr	r3, [pc, #460]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007216:	220b      	movs	r2, #11
 8007218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f002 fd55 	bl	8009ccc <SUBGRF_GetFskBandwidthRegValue>
 8007222:	4603      	mov	r3, r0
 8007224:	461a      	mov	r2, r3
 8007226:	4b6f      	ldr	r3, [pc, #444]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800722c:	4a6d      	ldr	r2, [pc, #436]	; (80073e4 <RadioSetTxConfig+0x20c>)
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007232:	4b6c      	ldr	r3, [pc, #432]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007234:	2200      	movs	r2, #0
 8007236:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007238:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	b29a      	uxth	r2, r3
 800723e:	4b69      	ldr	r3, [pc, #420]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007240:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007242:	4b68      	ldr	r3, [pc, #416]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007244:	2204      	movs	r2, #4
 8007246:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8007248:	4b66      	ldr	r3, [pc, #408]	; (80073e4 <RadioSetTxConfig+0x20c>)
 800724a:	2218      	movs	r2, #24
 800724c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800724e:	4b65      	ldr	r3, [pc, #404]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007250:	2200      	movs	r2, #0
 8007252:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007254:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007258:	f083 0301 	eor.w	r3, r3, #1
 800725c:	b2db      	uxtb	r3, r3
 800725e:	461a      	mov	r2, r3
 8007260:	4b60      	ldr	r3, [pc, #384]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007262:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007264:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800726c:	4b5d      	ldr	r3, [pc, #372]	; (80073e4 <RadioSetTxConfig+0x20c>)
 800726e:	22f2      	movs	r2, #242	; 0xf2
 8007270:	75da      	strb	r2, [r3, #23]
 8007272:	e002      	b.n	800727a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007274:	4b5b      	ldr	r3, [pc, #364]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007276:	2201      	movs	r2, #1
 8007278:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800727a:	4b5a      	ldr	r3, [pc, #360]	; (80073e4 <RadioSetTxConfig+0x20c>)
 800727c:	2201      	movs	r2, #1
 800727e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007280:	f000 fb2b 	bl	80078da <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8007284:	2000      	movs	r0, #0
 8007286:	f7ff fcc7 	bl	8006c18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800728a:	4857      	ldr	r0, [pc, #348]	; (80073e8 <RadioSetTxConfig+0x210>)
 800728c:	f002 f8ea 	bl	8009464 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007290:	4856      	ldr	r0, [pc, #344]	; (80073ec <RadioSetTxConfig+0x214>)
 8007292:	f002 f9b9 	bl	8009608 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007296:	4a56      	ldr	r2, [pc, #344]	; (80073f0 <RadioSetTxConfig+0x218>)
 8007298:	f107 0310 	add.w	r3, r7, #16
 800729c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80072a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80072a4:	f107 0310 	add.w	r3, r7, #16
 80072a8:	4618      	mov	r0, r3
 80072aa:	f001 fc76 	bl	8008b9a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80072ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80072b2:	f001 fcc1 	bl	8008c38 <SUBGRF_SetWhiteningSeed>
            break;
 80072b6:	e078      	b.n	80073aa <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80072b8:	4b4a      	ldr	r3, [pc, #296]	; (80073e4 <RadioSetTxConfig+0x20c>)
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	4b47      	ldr	r3, [pc, #284]	; (80073e4 <RadioSetTxConfig+0x20c>)
 80072c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80072ca:	4a4a      	ldr	r2, [pc, #296]	; (80073f4 <RadioSetTxConfig+0x21c>)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4413      	add	r3, r2
 80072d0:	781a      	ldrb	r2, [r3, #0]
 80072d2:	4b44      	ldr	r3, [pc, #272]	; (80073e4 <RadioSetTxConfig+0x20c>)
 80072d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80072d8:	4a42      	ldr	r2, [pc, #264]	; (80073e4 <RadioSetTxConfig+0x20c>)
 80072da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072de:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d105      	bne.n	80072f4 <RadioSetTxConfig+0x11c>
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	2b0b      	cmp	r3, #11
 80072ec:	d008      	beq.n	8007300 <RadioSetTxConfig+0x128>
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	2b0c      	cmp	r3, #12
 80072f2:	d005      	beq.n	8007300 <RadioSetTxConfig+0x128>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d107      	bne.n	800730a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	2b0c      	cmp	r3, #12
 80072fe:	d104      	bne.n	800730a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007300:	4b38      	ldr	r3, [pc, #224]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007308:	e003      	b.n	8007312 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800730a:	4b36      	ldr	r3, [pc, #216]	; (80073e4 <RadioSetTxConfig+0x20c>)
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007312:	4b34      	ldr	r3, [pc, #208]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007314:	2201      	movs	r2, #1
 8007316:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007318:	4b32      	ldr	r3, [pc, #200]	; (80073e4 <RadioSetTxConfig+0x20c>)
 800731a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800731e:	2b05      	cmp	r3, #5
 8007320:	d004      	beq.n	800732c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007322:	4b30      	ldr	r3, [pc, #192]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007324:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007328:	2b06      	cmp	r3, #6
 800732a:	d10a      	bne.n	8007342 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800732c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800732e:	2b0b      	cmp	r3, #11
 8007330:	d803      	bhi.n	800733a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007332:	4b2c      	ldr	r3, [pc, #176]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007334:	220c      	movs	r2, #12
 8007336:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007338:	e006      	b.n	8007348 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800733a:	4a2a      	ldr	r2, [pc, #168]	; (80073e4 <RadioSetTxConfig+0x20c>)
 800733c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800733e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007340:	e002      	b.n	8007348 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007342:	4a28      	ldr	r2, [pc, #160]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007344:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007346:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007348:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800734c:	4b25      	ldr	r3, [pc, #148]	; (80073e4 <RadioSetTxConfig+0x20c>)
 800734e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007350:	4b29      	ldr	r3, [pc, #164]	; (80073f8 <RadioSetTxConfig+0x220>)
 8007352:	781a      	ldrb	r2, [r3, #0]
 8007354:	4b23      	ldr	r3, [pc, #140]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007356:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007358:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800735c:	4b21      	ldr	r3, [pc, #132]	; (80073e4 <RadioSetTxConfig+0x20c>)
 800735e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007362:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007366:	4b1f      	ldr	r3, [pc, #124]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007368:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800736c:	f000 fab5 	bl	80078da <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007370:	2001      	movs	r0, #1
 8007372:	f7ff fc51 	bl	8006c18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007376:	481c      	ldr	r0, [pc, #112]	; (80073e8 <RadioSetTxConfig+0x210>)
 8007378:	f002 f874 	bl	8009464 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800737c:	481b      	ldr	r0, [pc, #108]	; (80073ec <RadioSetTxConfig+0x214>)
 800737e:	f002 f943 	bl	8009608 <SUBGRF_SetPacketParams>
            break;
 8007382:	e012      	b.n	80073aa <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007384:	2004      	movs	r0, #4
 8007386:	f7ff fc47 	bl	8006c18 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800738a:	4b16      	ldr	r3, [pc, #88]	; (80073e4 <RadioSetTxConfig+0x20c>)
 800738c:	2202      	movs	r2, #2
 800738e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8007392:	4a14      	ldr	r2, [pc, #80]	; (80073e4 <RadioSetTxConfig+0x20c>)
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007398:	4b12      	ldr	r3, [pc, #72]	; (80073e4 <RadioSetTxConfig+0x20c>)
 800739a:	2216      	movs	r2, #22
 800739c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80073a0:	4811      	ldr	r0, [pc, #68]	; (80073e8 <RadioSetTxConfig+0x210>)
 80073a2:	f002 f85f 	bl	8009464 <SUBGRF_SetModulationParams>
            break;
 80073a6:	e000      	b.n	80073aa <RadioSetTxConfig+0x1d2>
            break;
 80073a8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80073aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f002 fb8e 	bl	8009ad0 <SUBGRF_SetRfTxPower>
 80073b4:	4603      	mov	r3, r0
 80073b6:	461a      	mov	r2, r3
 80073b8:	4b0a      	ldr	r3, [pc, #40]	; (80073e4 <RadioSetTxConfig+0x20c>)
 80073ba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80073be:	210e      	movs	r1, #14
 80073c0:	f640 101f 	movw	r0, #2335	; 0x91f
 80073c4:	f002 fa68 	bl	8009898 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80073c8:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <RadioSetTxConfig+0x20c>)
 80073ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80073ce:	4618      	mov	r0, r3
 80073d0:	f002 fd5d 	bl	8009e8e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80073d4:	4a03      	ldr	r2, [pc, #12]	; (80073e4 <RadioSetTxConfig+0x20c>)
 80073d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d8:	6053      	str	r3, [r2, #4]
}
 80073da:	bf00      	nop
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	200005ec 	.word	0x200005ec
 80073e8:	20000624 	.word	0x20000624
 80073ec:	200005fa 	.word	0x200005fa
 80073f0:	0800b440 	.word	0x0800b440
 80073f4:	0800b5dc 	.word	0x0800b5dc
 80073f8:	2000000d 	.word	0x2000000d

080073fc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
    return true;
 8007404:	2301      	movs	r3, #1
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	bc80      	pop	{r7}
 800740e:	4770      	bx	lr

08007410 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800741e:	79fb      	ldrb	r3, [r7, #7]
 8007420:	2b0a      	cmp	r3, #10
 8007422:	d83e      	bhi.n	80074a2 <RadioGetLoRaBandwidthInHz+0x92>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <RadioGetLoRaBandwidthInHz+0x1c>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	08007459 	.word	0x08007459
 8007430:	08007469 	.word	0x08007469
 8007434:	08007479 	.word	0x08007479
 8007438:	08007489 	.word	0x08007489
 800743c:	08007491 	.word	0x08007491
 8007440:	08007497 	.word	0x08007497
 8007444:	0800749d 	.word	0x0800749d
 8007448:	080074a3 	.word	0x080074a3
 800744c:	08007461 	.word	0x08007461
 8007450:	08007471 	.word	0x08007471
 8007454:	08007481 	.word	0x08007481
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007458:	f641 6384 	movw	r3, #7812	; 0x1e84
 800745c:	60fb      	str	r3, [r7, #12]
        break;
 800745e:	e020      	b.n	80074a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007460:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8007464:	60fb      	str	r3, [r7, #12]
        break;
 8007466:	e01c      	b.n	80074a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007468:	f643 5309 	movw	r3, #15625	; 0x3d09
 800746c:	60fb      	str	r3, [r7, #12]
        break;
 800746e:	e018      	b.n	80074a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007470:	f245 1361 	movw	r3, #20833	; 0x5161
 8007474:	60fb      	str	r3, [r7, #12]
        break;
 8007476:	e014      	b.n	80074a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007478:	f647 2312 	movw	r3, #31250	; 0x7a12
 800747c:	60fb      	str	r3, [r7, #12]
        break;
 800747e:	e010      	b.n	80074a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007480:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8007484:	60fb      	str	r3, [r7, #12]
        break;
 8007486:	e00c      	b.n	80074a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007488:	f24f 4324 	movw	r3, #62500	; 0xf424
 800748c:	60fb      	str	r3, [r7, #12]
        break;
 800748e:	e008      	b.n	80074a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007490:	4b07      	ldr	r3, [pc, #28]	; (80074b0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8007492:	60fb      	str	r3, [r7, #12]
        break;
 8007494:	e005      	b.n	80074a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007496:	4b07      	ldr	r3, [pc, #28]	; (80074b4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8007498:	60fb      	str	r3, [r7, #12]
        break;
 800749a:	e002      	b.n	80074a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <RadioGetLoRaBandwidthInHz+0xa8>)
 800749e:	60fb      	str	r3, [r7, #12]
        break;
 80074a0:	bf00      	nop
    }

    return bandwidthInHz;
 80074a2:	68fb      	ldr	r3, [r7, #12]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bc80      	pop	{r7}
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	0001e848 	.word	0x0001e848
 80074b4:	0003d090 	.word	0x0003d090
 80074b8:	0007a120 	.word	0x0007a120

080074bc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	4608      	mov	r0, r1
 80074c6:	4611      	mov	r1, r2
 80074c8:	461a      	mov	r2, r3
 80074ca:	4603      	mov	r3, r0
 80074cc:	70fb      	strb	r3, [r7, #3]
 80074ce:	460b      	mov	r3, r1
 80074d0:	803b      	strh	r3, [r7, #0]
 80074d2:	4613      	mov	r3, r2
 80074d4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80074d6:	883b      	ldrh	r3, [r7, #0]
 80074d8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80074da:	78ba      	ldrb	r2, [r7, #2]
 80074dc:	f082 0201 	eor.w	r2, r2, #1
 80074e0:	b2d2      	uxtb	r2, r2
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	d001      	beq.n	80074ea <RadioGetGfskTimeOnAirNumerator+0x2e>
 80074e6:	2208      	movs	r2, #8
 80074e8:	e000      	b.n	80074ec <RadioGetGfskTimeOnAirNumerator+0x30>
 80074ea:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80074ec:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80074ee:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80074f2:	7c3b      	ldrb	r3, [r7, #16]
 80074f4:	7d39      	ldrb	r1, [r7, #20]
 80074f6:	2900      	cmp	r1, #0
 80074f8:	d001      	beq.n	80074fe <RadioGetGfskTimeOnAirNumerator+0x42>
 80074fa:	2102      	movs	r1, #2
 80074fc:	e000      	b.n	8007500 <RadioGetGfskTimeOnAirNumerator+0x44>
 80074fe:	2100      	movs	r1, #0
 8007500:	440b      	add	r3, r1
 8007502:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007504:	4413      	add	r3, r2
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	bc80      	pop	{r7}
 800750e:	4770      	bx	lr

08007510 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007510:	b480      	push	{r7}
 8007512:	b08b      	sub	sp, #44	; 0x2c
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	4611      	mov	r1, r2
 800751c:	461a      	mov	r2, r3
 800751e:	460b      	mov	r3, r1
 8007520:	71fb      	strb	r3, [r7, #7]
 8007522:	4613      	mov	r3, r2
 8007524:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	3304      	adds	r3, #4
 800752a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800752c:	2300      	movs	r3, #0
 800752e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2b05      	cmp	r3, #5
 8007536:	d002      	beq.n	800753e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b06      	cmp	r3, #6
 800753c:	d104      	bne.n	8007548 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800753e:	88bb      	ldrh	r3, [r7, #4]
 8007540:	2b0b      	cmp	r3, #11
 8007542:	d801      	bhi.n	8007548 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007544:	230c      	movs	r3, #12
 8007546:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d105      	bne.n	800755a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b0b      	cmp	r3, #11
 8007552:	d008      	beq.n	8007566 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b0c      	cmp	r3, #12
 8007558:	d005      	beq.n	8007566 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d105      	bne.n	800756c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2b0c      	cmp	r3, #12
 8007564:	d102      	bne.n	800756c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007566:	2301      	movs	r3, #1
 8007568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800756c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007570:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007572:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007576:	2a00      	cmp	r2, #0
 8007578:	d001      	beq.n	800757e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800757a:	2210      	movs	r2, #16
 800757c:	e000      	b.n	8007580 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800757e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007580:	4413      	add	r3, r2
 8007582:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007588:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800758a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800758e:	2a00      	cmp	r2, #0
 8007590:	d001      	beq.n	8007596 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007592:	2200      	movs	r2, #0
 8007594:	e000      	b.n	8007598 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007596:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007598:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800759a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b06      	cmp	r3, #6
 80075a0:	d803      	bhi.n	80075aa <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	623b      	str	r3, [r7, #32]
 80075a8:	e00e      	b.n	80075c8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	3308      	adds	r3, #8
 80075ae:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80075b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d004      	beq.n	80075c2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	3b02      	subs	r3, #2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	623b      	str	r3, [r7, #32]
 80075c0:	e002      	b.n	80075c8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	da01      	bge.n	80075d2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80075d2:	69fa      	ldr	r2, [r7, #28]
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	4413      	add	r3, r2
 80075d8:	1e5a      	subs	r2, r3, #1
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	fb03 f202 	mul.w	r2, r3, r2
 80075e6:	88bb      	ldrh	r3, [r7, #4]
 80075e8:	4413      	add	r3, r2
    int32_t intermediate =
 80075ea:	330c      	adds	r3, #12
 80075ec:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b06      	cmp	r3, #6
 80075f2:	d802      	bhi.n	80075fa <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	3302      	adds	r3, #2
 80075f8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	3b02      	subs	r3, #2
 8007604:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007608:	4618      	mov	r0, r3
 800760a:	372c      	adds	r7, #44	; 0x2c
 800760c:	46bd      	mov	sp, r7
 800760e:	bc80      	pop	{r7}
 8007610:	4770      	bx	lr
	...

08007614 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	; 0x28
 8007618:	af04      	add	r7, sp, #16
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	607a      	str	r2, [r7, #4]
 800761e:	461a      	mov	r2, r3
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]
 8007624:	4613      	mov	r3, r2
 8007626:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800762c:	2301      	movs	r3, #1
 800762e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <RadioTimeOnAir+0x28>
 8007636:	2b01      	cmp	r3, #1
 8007638:	d017      	beq.n	800766a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800763a:	e035      	b.n	80076a8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800763c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007640:	8c3a      	ldrh	r2, [r7, #32]
 8007642:	7bb9      	ldrb	r1, [r7, #14]
 8007644:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007648:	9301      	str	r3, [sp, #4]
 800764a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	4603      	mov	r3, r0
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff ff32 	bl	80074bc <RadioGetGfskTimeOnAirNumerator>
 8007658:	4603      	mov	r3, r0
 800765a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800765e:	fb02 f303 	mul.w	r3, r2, r3
 8007662:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	613b      	str	r3, [r7, #16]
        break;
 8007668:	e01e      	b.n	80076a8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800766a:	8c39      	ldrh	r1, [r7, #32]
 800766c:	7bba      	ldrb	r2, [r7, #14]
 800766e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007672:	9302      	str	r3, [sp, #8]
 8007674:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	460b      	mov	r3, r1
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	68b8      	ldr	r0, [r7, #8]
 8007686:	f7ff ff43 	bl	8007510 <RadioGetLoRaTimeOnAirNumerator>
 800768a:	4603      	mov	r3, r0
 800768c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007690:	fb02 f303 	mul.w	r3, r2, r3
 8007694:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007696:	4a0a      	ldr	r2, [pc, #40]	; (80076c0 <RadioTimeOnAir+0xac>)
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4413      	add	r3, r2
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	f7ff feb6 	bl	8007410 <RadioGetLoRaBandwidthInHz>
 80076a4:	6138      	str	r0, [r7, #16]
        break;
 80076a6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	4413      	add	r3, r2
 80076ae:	1e5a      	subs	r2, r3, #1
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	0800b5dc 	.word	0x0800b5dc

080076c4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80076d0:	2300      	movs	r3, #0
 80076d2:	2200      	movs	r2, #0
 80076d4:	f240 2101 	movw	r1, #513	; 0x201
 80076d8:	f240 2001 	movw	r0, #513	; 0x201
 80076dc:	f001 fd2c 	bl	8009138 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80076e0:	4b70      	ldr	r3, [pc, #448]	; (80078a4 <RadioSend+0x1e0>)
 80076e2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80076e6:	2101      	movs	r1, #1
 80076e8:	4618      	mov	r0, r3
 80076ea:	f002 f9c9 	bl	8009a80 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80076ee:	4b6d      	ldr	r3, [pc, #436]	; (80078a4 <RadioSend+0x1e0>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d112      	bne.n	800771c <RadioSend+0x58>
 80076f6:	4b6b      	ldr	r3, [pc, #428]	; (80078a4 <RadioSend+0x1e0>)
 80076f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076fc:	2b06      	cmp	r3, #6
 80076fe:	d10d      	bne.n	800771c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007700:	f640 0089 	movw	r0, #2185	; 0x889
 8007704:	f002 f8dc 	bl	80098c0 <SUBGRF_ReadRegister>
 8007708:	4603      	mov	r3, r0
 800770a:	f023 0304 	bic.w	r3, r3, #4
 800770e:	b2db      	uxtb	r3, r3
 8007710:	4619      	mov	r1, r3
 8007712:	f640 0089 	movw	r0, #2185	; 0x889
 8007716:	f002 f8bf 	bl	8009898 <SUBGRF_WriteRegister>
 800771a:	e00c      	b.n	8007736 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800771c:	f640 0089 	movw	r0, #2185	; 0x889
 8007720:	f002 f8ce 	bl	80098c0 <SUBGRF_ReadRegister>
 8007724:	4603      	mov	r3, r0
 8007726:	f043 0304 	orr.w	r3, r3, #4
 800772a:	b2db      	uxtb	r3, r3
 800772c:	4619      	mov	r1, r3
 800772e:	f640 0089 	movw	r0, #2185	; 0x889
 8007732:	f002 f8b1 	bl	8009898 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8007736:	4b5b      	ldr	r3, [pc, #364]	; (80078a4 <RadioSend+0x1e0>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	2b04      	cmp	r3, #4
 800773c:	f200 80a2 	bhi.w	8007884 <RadioSend+0x1c0>
 8007740:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <RadioSend+0x84>)
 8007742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007746:	bf00      	nop
 8007748:	08007777 	.word	0x08007777
 800774c:	0800775d 	.word	0x0800775d
 8007750:	08007777 	.word	0x08007777
 8007754:	080077cd 	.word	0x080077cd
 8007758:	080077ed 	.word	0x080077ed
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800775c:	4a51      	ldr	r2, [pc, #324]	; (80078a4 <RadioSend+0x1e0>)
 800775e:	78fb      	ldrb	r3, [r7, #3]
 8007760:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007762:	4851      	ldr	r0, [pc, #324]	; (80078a8 <RadioSend+0x1e4>)
 8007764:	f001 ff50 	bl	8009608 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	2200      	movs	r2, #0
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 fa00 	bl	8008b74 <SUBGRF_SendPayload>
            break;
 8007774:	e087      	b.n	8007886 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007776:	f002 fb7c 	bl	8009e72 <RFW_Is_Init>
 800777a:	4603      	mov	r3, r0
 800777c:	2b01      	cmp	r3, #1
 800777e:	d118      	bne.n	80077b2 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007780:	f107 020d 	add.w	r2, r7, #13
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f002 fb8a 	bl	8009ea2 <RFW_TransmitInit>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10c      	bne.n	80077ae <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007794:	7b7a      	ldrb	r2, [r7, #13]
 8007796:	4b43      	ldr	r3, [pc, #268]	; (80078a4 <RadioSend+0x1e0>)
 8007798:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800779a:	4843      	ldr	r0, [pc, #268]	; (80078a8 <RadioSend+0x1e4>)
 800779c:	f001 ff34 	bl	8009608 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80077a0:	7b7b      	ldrb	r3, [r7, #13]
 80077a2:	2200      	movs	r2, #0
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f001 f9e4 	bl	8008b74 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80077ac:	e06b      	b.n	8007886 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e073      	b.n	800789a <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80077b2:	4a3c      	ldr	r2, [pc, #240]	; (80078a4 <RadioSend+0x1e0>)
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80077b8:	483b      	ldr	r0, [pc, #236]	; (80078a8 <RadioSend+0x1e4>)
 80077ba:	f001 ff25 	bl	8009608 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80077be:	78fb      	ldrb	r3, [r7, #3]
 80077c0:	2200      	movs	r2, #0
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 f9d5 	bl	8008b74 <SUBGRF_SendPayload>
            break;
 80077ca:	e05c      	b.n	8007886 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80077cc:	4b35      	ldr	r3, [pc, #212]	; (80078a4 <RadioSend+0x1e0>)
 80077ce:	2202      	movs	r2, #2
 80077d0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80077d2:	4a34      	ldr	r2, [pc, #208]	; (80078a4 <RadioSend+0x1e0>)
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80077d8:	4833      	ldr	r0, [pc, #204]	; (80078a8 <RadioSend+0x1e4>)
 80077da:	f001 ff15 	bl	8009608 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80077de:	78fb      	ldrb	r3, [r7, #3]
 80077e0:	2200      	movs	r2, #0
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f9c5 	bl	8008b74 <SUBGRF_SendPayload>
            break;
 80077ea:	e04c      	b.n	8007886 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	461a      	mov	r2, r3
 80077f0:	6879      	ldr	r1, [r7, #4]
 80077f2:	482e      	ldr	r0, [pc, #184]	; (80078ac <RadioSend+0x1e8>)
 80077f4:	f000 fc98 	bl	8008128 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80077f8:	4b2a      	ldr	r3, [pc, #168]	; (80078a4 <RadioSend+0x1e0>)
 80077fa:	2202      	movs	r2, #2
 80077fc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	3301      	adds	r3, #1
 8007802:	b2da      	uxtb	r2, r3
 8007804:	4b27      	ldr	r3, [pc, #156]	; (80078a4 <RadioSend+0x1e0>)
 8007806:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007808:	4827      	ldr	r0, [pc, #156]	; (80078a8 <RadioSend+0x1e4>)
 800780a:	f001 fefd 	bl	8009608 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800780e:	2100      	movs	r1, #0
 8007810:	20f1      	movs	r0, #241	; 0xf1
 8007812:	f000 f964 	bl	8007ade <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8007816:	2100      	movs	r1, #0
 8007818:	20f0      	movs	r0, #240	; 0xf0
 800781a:	f000 f960 	bl	8007ade <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800781e:	4b21      	ldr	r3, [pc, #132]	; (80078a4 <RadioSend+0x1e0>)
 8007820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007822:	2b64      	cmp	r3, #100	; 0x64
 8007824:	d108      	bne.n	8007838 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8007826:	2170      	movs	r1, #112	; 0x70
 8007828:	20f3      	movs	r0, #243	; 0xf3
 800782a:	f000 f958 	bl	8007ade <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800782e:	211d      	movs	r1, #29
 8007830:	20f2      	movs	r0, #242	; 0xf2
 8007832:	f000 f954 	bl	8007ade <RadioWrite>
 8007836:	e007      	b.n	8007848 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007838:	21e1      	movs	r1, #225	; 0xe1
 800783a:	20f3      	movs	r0, #243	; 0xf3
 800783c:	f000 f94f 	bl	8007ade <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007840:	2104      	movs	r1, #4
 8007842:	20f2      	movs	r0, #242	; 0xf2
 8007844:	f000 f94b 	bl	8007ade <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007848:	78fb      	ldrb	r3, [r7, #3]
 800784a:	b29b      	uxth	r3, r3
 800784c:	00db      	lsls	r3, r3, #3
 800784e:	b29b      	uxth	r3, r3
 8007850:	3302      	adds	r3, #2
 8007852:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007854:	89fb      	ldrh	r3, [r7, #14]
 8007856:	0a1b      	lsrs	r3, r3, #8
 8007858:	b29b      	uxth	r3, r3
 800785a:	b2db      	uxtb	r3, r3
 800785c:	4619      	mov	r1, r3
 800785e:	20f4      	movs	r0, #244	; 0xf4
 8007860:	f000 f93d 	bl	8007ade <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8007864:	89fb      	ldrh	r3, [r7, #14]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	4619      	mov	r1, r3
 800786a:	20f5      	movs	r0, #245	; 0xf5
 800786c:	f000 f937 	bl	8007ade <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	3301      	adds	r3, #1
 8007874:	b2db      	uxtb	r3, r3
 8007876:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800787a:	4619      	mov	r1, r3
 800787c:	480b      	ldr	r0, [pc, #44]	; (80078ac <RadioSend+0x1e8>)
 800787e:	f001 f979 	bl	8008b74 <SUBGRF_SendPayload>
            break;
 8007882:	e000      	b.n	8007886 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007884:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8007886:	4b07      	ldr	r3, [pc, #28]	; (80078a4 <RadioSend+0x1e0>)
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	4619      	mov	r1, r3
 800788c:	4808      	ldr	r0, [pc, #32]	; (80078b0 <RadioSend+0x1ec>)
 800788e:	f002 fdcf 	bl	800a430 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8007892:	4807      	ldr	r0, [pc, #28]	; (80078b0 <RadioSend+0x1ec>)
 8007894:	f002 fcee 	bl	800a274 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	200005ec 	.word	0x200005ec
 80078a8:	200005fa 	.word	0x200005fa
 80078ac:	200004e8 	.word	0x200004e8
 80078b0:	20000648 	.word	0x20000648

080078b4 <RadioSleep>:

static void RadioSleep( void )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80078ba:	2300      	movs	r3, #0
 80078bc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80078be:	793b      	ldrb	r3, [r7, #4]
 80078c0:	f043 0304 	orr.w	r3, r3, #4
 80078c4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80078c6:	7938      	ldrb	r0, [r7, #4]
 80078c8:	f001 fa30 	bl	8008d2c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80078cc:	2002      	movs	r0, #2
 80078ce:	f7f9 ffbb 	bl	8001848 <HAL_Delay>
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <RadioStandby>:

static void RadioStandby( void )
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80078de:	2000      	movs	r0, #0
 80078e0:	f001 fa56 	bl	8008d90 <SUBGRF_SetStandby>
}
 80078e4:	bf00      	nop
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80078f0:	f002 fabf 	bl	8009e72 <RFW_Is_Init>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d102      	bne.n	8007900 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80078fa:	f002 fae2 	bl	8009ec2 <RFW_ReceiveInit>
 80078fe:	e007      	b.n	8007910 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007900:	2300      	movs	r3, #0
 8007902:	2200      	movs	r2, #0
 8007904:	f240 2162 	movw	r1, #610	; 0x262
 8007908:	f240 2062 	movw	r0, #610	; 0x262
 800790c:	f001 fc14 	bl	8009138 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d006      	beq.n	8007924 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	4811      	ldr	r0, [pc, #68]	; (8007960 <RadioRx+0x78>)
 800791a:	f002 fd89 	bl	800a430 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800791e:	4810      	ldr	r0, [pc, #64]	; (8007960 <RadioRx+0x78>)
 8007920:	f002 fca8 	bl	800a274 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007924:	4b0f      	ldr	r3, [pc, #60]	; (8007964 <RadioRx+0x7c>)
 8007926:	2200      	movs	r2, #0
 8007928:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800792a:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <RadioRx+0x7c>)
 800792c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007930:	2100      	movs	r1, #0
 8007932:	4618      	mov	r0, r3
 8007934:	f002 f8a4 	bl	8009a80 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007938:	4b0a      	ldr	r3, [pc, #40]	; (8007964 <RadioRx+0x7c>)
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007940:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007944:	f001 fa60 	bl	8008e08 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8007948:	e005      	b.n	8007956 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800794a:	4b06      	ldr	r3, [pc, #24]	; (8007964 <RadioRx+0x7c>)
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	019b      	lsls	r3, r3, #6
 8007950:	4618      	mov	r0, r3
 8007952:	f001 fa59 	bl	8008e08 <SUBGRF_SetRx>
}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000660 	.word	0x20000660
 8007964:	200005ec 	.word	0x200005ec

08007968 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8007970:	f002 fa7f 	bl	8009e72 <RFW_Is_Init>
 8007974:	4603      	mov	r3, r0
 8007976:	2b01      	cmp	r3, #1
 8007978:	d102      	bne.n	8007980 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800797a:	f002 faa2 	bl	8009ec2 <RFW_ReceiveInit>
 800797e:	e007      	b.n	8007990 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007980:	2300      	movs	r3, #0
 8007982:	2200      	movs	r2, #0
 8007984:	f240 2162 	movw	r1, #610	; 0x262
 8007988:	f240 2062 	movw	r0, #610	; 0x262
 800798c:	f001 fbd4 	bl	8009138 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d006      	beq.n	80079a4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	4811      	ldr	r0, [pc, #68]	; (80079e0 <RadioRxBoosted+0x78>)
 800799a:	f002 fd49 	bl	800a430 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800799e:	4810      	ldr	r0, [pc, #64]	; (80079e0 <RadioRxBoosted+0x78>)
 80079a0:	f002 fc68 	bl	800a274 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80079a4:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <RadioRxBoosted+0x7c>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80079aa:	4b0e      	ldr	r3, [pc, #56]	; (80079e4 <RadioRxBoosted+0x7c>)
 80079ac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80079b0:	2100      	movs	r1, #0
 80079b2:	4618      	mov	r0, r3
 80079b4:	f002 f864 	bl	8009a80 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80079b8:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <RadioRxBoosted+0x7c>)
 80079ba:	785b      	ldrb	r3, [r3, #1]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d004      	beq.n	80079ca <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80079c0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80079c4:	f001 fa40 	bl	8008e48 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80079c8:	e005      	b.n	80079d6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80079ca:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <RadioRxBoosted+0x7c>)
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	019b      	lsls	r3, r3, #6
 80079d0:	4618      	mov	r0, r3
 80079d2:	f001 fa39 	bl	8008e48 <SUBGRF_SetRxBoosted>
}
 80079d6:	bf00      	nop
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	20000660 	.word	0x20000660
 80079e4:	200005ec 	.word	0x200005ec

080079e8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	005a      	lsls	r2, r3, #1
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	4413      	add	r3, r2
 80079fa:	4a0c      	ldr	r2, [pc, #48]	; (8007a2c <RadioSetRxDutyCycle+0x44>)
 80079fc:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80079fe:	2300      	movs	r3, #0
 8007a00:	2200      	movs	r2, #0
 8007a02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007a06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007a0a:	f001 fb95 	bl	8009138 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007a0e:	4b07      	ldr	r3, [pc, #28]	; (8007a2c <RadioSetRxDutyCycle+0x44>)
 8007a10:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007a14:	2100      	movs	r1, #0
 8007a16:	4618      	mov	r0, r3
 8007a18:	f002 f832 	bl	8009a80 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 fa36 	bl	8008e90 <SUBGRF_SetRxDutyCycle>
}
 8007a24:	bf00      	nop
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	200005ec 	.word	0x200005ec

08007a30 <RadioStartCad>:

static void RadioStartCad( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007a34:	4b09      	ldr	r3, [pc, #36]	; (8007a5c <RadioStartCad+0x2c>)
 8007a36:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f002 f81f 	bl	8009a80 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8007a42:	2300      	movs	r3, #0
 8007a44:	2200      	movs	r2, #0
 8007a46:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8007a4a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8007a4e:	f001 fb73 	bl	8009138 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8007a52:	f001 fa49 	bl	8008ee8 <SUBGRF_SetCad>
}
 8007a56:	bf00      	nop
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	200005ec 	.word	0x200005ec

08007a60 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	70fb      	strb	r3, [r7, #3]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8007a70:	883b      	ldrh	r3, [r7, #0]
 8007a72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a76:	fb02 f303 	mul.w	r3, r2, r3
 8007a7a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 fbb7 	bl	80091f0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8007a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f002 f822 	bl	8009ad0 <SUBGRF_SetRfTxPower>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007a90:	210e      	movs	r1, #14
 8007a92:	f640 101f 	movw	r0, #2335	; 0x91f
 8007a96:	f001 feff 	bl	8009898 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8007a9a:	7afb      	ldrb	r3, [r7, #11]
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f001 ffee 	bl	8009a80 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8007aa4:	f001 fa2e 	bl	8008f04 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8007aa8:	68f9      	ldr	r1, [r7, #12]
 8007aaa:	4805      	ldr	r0, [pc, #20]	; (8007ac0 <RadioSetTxContinuousWave+0x60>)
 8007aac:	f002 fcc0 	bl	800a430 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8007ab0:	4803      	ldr	r0, [pc, #12]	; (8007ac0 <RadioSetTxContinuousWave+0x60>)
 8007ab2:	f002 fbdf 	bl	800a274 <UTIL_TIMER_Start>
}
 8007ab6:	bf00      	nop
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000648 	.word	0x20000648

08007ac4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8007ace:	f001 fe50 	bl	8009772 <SUBGRF_GetRssiInst>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	b21b      	sxth	r3, r3
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b082      	sub	sp, #8
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	460a      	mov	r2, r1
 8007ae8:	80fb      	strh	r3, [r7, #6]
 8007aea:	4613      	mov	r3, r2
 8007aec:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8007aee:	797a      	ldrb	r2, [r7, #5]
 8007af0:	88fb      	ldrh	r3, [r7, #6]
 8007af2:	4611      	mov	r1, r2
 8007af4:	4618      	mov	r0, r3
 8007af6:	f001 fecf 	bl	8009898 <SUBGRF_WriteRegister>
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	4603      	mov	r3, r0
 8007b0a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8007b0c:	88fb      	ldrh	r3, [r7, #6]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f001 fed6 	bl	80098c0 <SUBGRF_ReadRegister>
 8007b14:	4603      	mov	r3, r0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	4603      	mov	r3, r0
 8007b26:	6039      	str	r1, [r7, #0]
 8007b28:	80fb      	strh	r3, [r7, #6]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8007b2e:	797b      	ldrb	r3, [r7, #5]
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	88fb      	ldrh	r3, [r7, #6]
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f001 fed6 	bl	80098e8 <SUBGRF_WriteRegisters>
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	6039      	str	r1, [r7, #0]
 8007b4e:	80fb      	strh	r3, [r7, #6]
 8007b50:	4613      	mov	r3, r2
 8007b52:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8007b54:	797b      	ldrb	r3, [r7, #5]
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	88fb      	ldrh	r3, [r7, #6]
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f001 fee5 	bl	800992c <SUBGRF_ReadRegisters>
}
 8007b62:	bf00      	nop
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	460a      	mov	r2, r1
 8007b76:	71fb      	strb	r3, [r7, #7]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d10a      	bne.n	8007b98 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8007b82:	4a0e      	ldr	r2, [pc, #56]	; (8007bbc <RadioSetMaxPayloadLength+0x50>)
 8007b84:	79bb      	ldrb	r3, [r7, #6]
 8007b86:	7013      	strb	r3, [r2, #0]
 8007b88:	4b0c      	ldr	r3, [pc, #48]	; (8007bbc <RadioSetMaxPayloadLength+0x50>)
 8007b8a:	781a      	ldrb	r2, [r3, #0]
 8007b8c:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <RadioSetMaxPayloadLength+0x54>)
 8007b8e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b90:	480c      	ldr	r0, [pc, #48]	; (8007bc4 <RadioSetMaxPayloadLength+0x58>)
 8007b92:	f001 fd39 	bl	8009608 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8007b96:	e00d      	b.n	8007bb4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8007b98:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <RadioSetMaxPayloadLength+0x54>)
 8007b9a:	7d5b      	ldrb	r3, [r3, #21]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d109      	bne.n	8007bb4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8007ba0:	4a06      	ldr	r2, [pc, #24]	; (8007bbc <RadioSetMaxPayloadLength+0x50>)
 8007ba2:	79bb      	ldrb	r3, [r7, #6]
 8007ba4:	7013      	strb	r3, [r2, #0]
 8007ba6:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <RadioSetMaxPayloadLength+0x50>)
 8007ba8:	781a      	ldrb	r2, [r3, #0]
 8007baa:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <RadioSetMaxPayloadLength+0x54>)
 8007bac:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007bae:	4805      	ldr	r0, [pc, #20]	; (8007bc4 <RadioSetMaxPayloadLength+0x58>)
 8007bb0:	f001 fd2a 	bl	8009608 <SUBGRF_SetPacketParams>
}
 8007bb4:	bf00      	nop
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	2000000d 	.word	0x2000000d
 8007bc0:	200005ec 	.word	0x200005ec
 8007bc4:	200005fa 	.word	0x200005fa

08007bc8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8007bd2:	4a13      	ldr	r2, [pc, #76]	; (8007c20 <RadioSetPublicNetwork+0x58>)
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	7313      	strb	r3, [r2, #12]
 8007bd8:	4b11      	ldr	r3, [pc, #68]	; (8007c20 <RadioSetPublicNetwork+0x58>)
 8007bda:	7b1a      	ldrb	r2, [r3, #12]
 8007bdc:	4b10      	ldr	r3, [pc, #64]	; (8007c20 <RadioSetPublicNetwork+0x58>)
 8007bde:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8007be0:	2001      	movs	r0, #1
 8007be2:	f7ff f819 	bl	8006c18 <RadioSetModem>
    if( enable == true )
 8007be6:	79fb      	ldrb	r3, [r7, #7]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00a      	beq.n	8007c02 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8007bec:	2134      	movs	r1, #52	; 0x34
 8007bee:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8007bf2:	f001 fe51 	bl	8009898 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8007bf6:	2144      	movs	r1, #68	; 0x44
 8007bf8:	f240 7041 	movw	r0, #1857	; 0x741
 8007bfc:	f001 fe4c 	bl	8009898 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8007c00:	e009      	b.n	8007c16 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8007c02:	2114      	movs	r1, #20
 8007c04:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8007c08:	f001 fe46 	bl	8009898 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8007c0c:	2124      	movs	r1, #36	; 0x24
 8007c0e:	f240 7041 	movw	r0, #1857	; 0x741
 8007c12:	f001 fe41 	bl	8009898 <SUBGRF_WriteRegister>
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	200005ec 	.word	0x200005ec

08007c24 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8007c28:	f001 ff86 	bl	8009b38 <SUBGRF_GetRadioWakeUpTime>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	3303      	adds	r3, #3
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8007c3c:	f000 f80e 	bl	8007c5c <RadioOnTxTimeoutProcess>
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8007c50:	f000 f818 	bl	8007c84 <RadioOnRxTimeoutProcess>
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007c60:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <RadioOnTxTimeoutProcess+0x24>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d008      	beq.n	8007c7a <RadioOnTxTimeoutProcess+0x1e>
 8007c68:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <RadioOnTxTimeoutProcess+0x24>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8007c72:	4b03      	ldr	r3, [pc, #12]	; (8007c80 <RadioOnTxTimeoutProcess+0x24>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	4798      	blx	r3
    }
}
 8007c7a:	bf00      	nop
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	200005e8 	.word	0x200005e8

08007c84 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <RadioOnRxTimeoutProcess+0x24>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d008      	beq.n	8007ca2 <RadioOnRxTimeoutProcess+0x1e>
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <RadioOnRxTimeoutProcess+0x24>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8007c9a:	4b03      	ldr	r3, [pc, #12]	; (8007ca8 <RadioOnRxTimeoutProcess+0x24>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	4798      	blx	r3
    }
}
 8007ca2:	bf00      	nop
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	200005e8 	.word	0x200005e8

08007cac <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8007cb6:	4a05      	ldr	r2, [pc, #20]	; (8007ccc <RadioOnDioIrq+0x20>)
 8007cb8:	88fb      	ldrh	r3, [r7, #6]
 8007cba:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8007cbe:	f000 f807 	bl	8007cd0 <RadioIrqProcess>
}
 8007cc2:	bf00      	nop
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	200005ec 	.word	0x200005ec

08007cd0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8007cd0:	b5b0      	push	{r4, r5, r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8007cde:	4ba5      	ldr	r3, [pc, #660]	; (8007f74 <RadioIrqProcess+0x2a4>)
 8007ce0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce8:	f000 810d 	beq.w	8007f06 <RadioIrqProcess+0x236>
 8007cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf0:	f300 81c0 	bgt.w	8008074 <RadioIrqProcess+0x3a4>
 8007cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf8:	f000 80f1 	beq.w	8007ede <RadioIrqProcess+0x20e>
 8007cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d00:	f300 81b8 	bgt.w	8008074 <RadioIrqProcess+0x3a4>
 8007d04:	2b80      	cmp	r3, #128	; 0x80
 8007d06:	f000 80d6 	beq.w	8007eb6 <RadioIrqProcess+0x1e6>
 8007d0a:	2b80      	cmp	r3, #128	; 0x80
 8007d0c:	f300 81b2 	bgt.w	8008074 <RadioIrqProcess+0x3a4>
 8007d10:	2b20      	cmp	r3, #32
 8007d12:	dc49      	bgt.n	8007da8 <RadioIrqProcess+0xd8>
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f340 81ad 	ble.w	8008074 <RadioIrqProcess+0x3a4>
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	2b1f      	cmp	r3, #31
 8007d1e:	f200 81a9 	bhi.w	8008074 <RadioIrqProcess+0x3a4>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <RadioIrqProcess+0x58>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007db1 	.word	0x08007db1
 8007d2c:	08007deb 	.word	0x08007deb
 8007d30:	08008075 	.word	0x08008075
 8007d34:	08007f91 	.word	0x08007f91
 8007d38:	08008075 	.word	0x08008075
 8007d3c:	08008075 	.word	0x08008075
 8007d40:	08008075 	.word	0x08008075
 8007d44:	08007fff 	.word	0x08007fff
 8007d48:	08008075 	.word	0x08008075
 8007d4c:	08008075 	.word	0x08008075
 8007d50:	08008075 	.word	0x08008075
 8007d54:	08008075 	.word	0x08008075
 8007d58:	08008075 	.word	0x08008075
 8007d5c:	08008075 	.word	0x08008075
 8007d60:	08008075 	.word	0x08008075
 8007d64:	08008075 	.word	0x08008075
 8007d68:	08008075 	.word	0x08008075
 8007d6c:	08008075 	.word	0x08008075
 8007d70:	08008075 	.word	0x08008075
 8007d74:	08008075 	.word	0x08008075
 8007d78:	08008075 	.word	0x08008075
 8007d7c:	08008075 	.word	0x08008075
 8007d80:	08008075 	.word	0x08008075
 8007d84:	08008075 	.word	0x08008075
 8007d88:	08008075 	.word	0x08008075
 8007d8c:	08008075 	.word	0x08008075
 8007d90:	08008075 	.word	0x08008075
 8007d94:	08008075 	.word	0x08008075
 8007d98:	08008075 	.word	0x08008075
 8007d9c:	08008075 	.word	0x08008075
 8007da0:	08008075 	.word	0x08008075
 8007da4:	0800800f 	.word	0x0800800f
 8007da8:	2b40      	cmp	r3, #64	; 0x40
 8007daa:	f000 814b 	beq.w	8008044 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8007dae:	e161      	b.n	8008074 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8007db0:	4871      	ldr	r0, [pc, #452]	; (8007f78 <RadioIrqProcess+0x2a8>)
 8007db2:	f002 facd 	bl	800a350 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8007db6:	2000      	movs	r0, #0
 8007db8:	f000 ffea 	bl	8008d90 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8007dbc:	f002 f860 	bl	8009e80 <RFW_Is_LongPacketModeEnabled>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d101      	bne.n	8007dca <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8007dc6:	f002 f884 	bl	8009ed2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8007dca:	4b6c      	ldr	r3, [pc, #432]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 8152 	beq.w	8008078 <RadioIrqProcess+0x3a8>
 8007dd4:	4b69      	ldr	r3, [pc, #420]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 814c 	beq.w	8008078 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8007de0:	4b66      	ldr	r3, [pc, #408]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4798      	blx	r3
        break;
 8007de8:	e146      	b.n	8008078 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8007dea:	4865      	ldr	r0, [pc, #404]	; (8007f80 <RadioIrqProcess+0x2b0>)
 8007dec:	f002 fab0 	bl	800a350 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8007df0:	4b60      	ldr	r3, [pc, #384]	; (8007f74 <RadioIrqProcess+0x2a4>)
 8007df2:	785b      	ldrb	r3, [r3, #1]
 8007df4:	f083 0301 	eor.w	r3, r3, #1
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d014      	beq.n	8007e28 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8007dfe:	2000      	movs	r0, #0
 8007e00:	f000 ffc6 	bl	8008d90 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8007e04:	2100      	movs	r1, #0
 8007e06:	f640 1002 	movw	r0, #2306	; 0x902
 8007e0a:	f001 fd45 	bl	8009898 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8007e0e:	f640 1044 	movw	r0, #2372	; 0x944
 8007e12:	f001 fd55 	bl	80098c0 <SUBGRF_ReadRegister>
 8007e16:	4603      	mov	r3, r0
 8007e18:	f043 0302 	orr.w	r3, r3, #2
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	4619      	mov	r1, r3
 8007e20:	f640 1044 	movw	r0, #2372	; 0x944
 8007e24:	f001 fd38 	bl	8009898 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8007e28:	1dfb      	adds	r3, r7, #7
 8007e2a:	22ff      	movs	r2, #255	; 0xff
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4855      	ldr	r0, [pc, #340]	; (8007f84 <RadioIrqProcess+0x2b4>)
 8007e30:	f000 fe7e 	bl	8008b30 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8007e34:	4854      	ldr	r0, [pc, #336]	; (8007f88 <RadioIrqProcess+0x2b8>)
 8007e36:	f001 fcdd 	bl	80097f4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8007e3a:	4b50      	ldr	r3, [pc, #320]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 811c 	beq.w	800807c <RadioIrqProcess+0x3ac>
 8007e44:	4b4d      	ldr	r3, [pc, #308]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f000 8116 	beq.w	800807c <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8007e50:	4b48      	ldr	r3, [pc, #288]	; (8007f74 <RadioIrqProcess+0x2a4>)
 8007e52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d10e      	bne.n	8007e78 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8007e5a:	4b48      	ldr	r3, [pc, #288]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689c      	ldr	r4, [r3, #8]
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	b299      	uxth	r1, r3
 8007e64:	4b43      	ldr	r3, [pc, #268]	; (8007f74 <RadioIrqProcess+0x2a4>)
 8007e66:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8007e6a:	b21a      	sxth	r2, r3
 8007e6c:	4b41      	ldr	r3, [pc, #260]	; (8007f74 <RadioIrqProcess+0x2a4>)
 8007e6e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8007e72:	4844      	ldr	r0, [pc, #272]	; (8007f84 <RadioIrqProcess+0x2b4>)
 8007e74:	47a0      	blx	r4
                break;
 8007e76:	e01d      	b.n	8007eb4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8007e78:	4b3e      	ldr	r3, [pc, #248]	; (8007f74 <RadioIrqProcess+0x2a4>)
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7c:	463a      	mov	r2, r7
 8007e7e:	4611      	mov	r1, r2
 8007e80:	4618      	mov	r0, r3
 8007e82:	f001 ff4b 	bl	8009d1c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8007e86:	4b3d      	ldr	r3, [pc, #244]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689c      	ldr	r4, [r3, #8]
 8007e8c:	79fb      	ldrb	r3, [r7, #7]
 8007e8e:	b299      	uxth	r1, r3
 8007e90:	4b38      	ldr	r3, [pc, #224]	; (8007f74 <RadioIrqProcess+0x2a4>)
 8007e92:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8007e96:	b218      	sxth	r0, r3
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007e9e:	4a3b      	ldr	r2, [pc, #236]	; (8007f8c <RadioIrqProcess+0x2bc>)
 8007ea0:	fb82 5203 	smull	r5, r2, r2, r3
 8007ea4:	1192      	asrs	r2, r2, #6
 8007ea6:	17db      	asrs	r3, r3, #31
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	b25b      	sxtb	r3, r3
 8007eac:	4602      	mov	r2, r0
 8007eae:	4835      	ldr	r0, [pc, #212]	; (8007f84 <RadioIrqProcess+0x2b4>)
 8007eb0:	47a0      	blx	r4
                break;
 8007eb2:	bf00      	nop
        break;
 8007eb4:	e0e2      	b.n	800807c <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	f000 ff6a 	bl	8008d90 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007ebc:	4b2f      	ldr	r3, [pc, #188]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80dd 	beq.w	8008080 <RadioIrqProcess+0x3b0>
 8007ec6:	4b2d      	ldr	r3, [pc, #180]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 80d7 	beq.w	8008080 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8007ed2:	4b2a      	ldr	r3, [pc, #168]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	2000      	movs	r0, #0
 8007eda:	4798      	blx	r3
        break;
 8007edc:	e0d0      	b.n	8008080 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8007ede:	2000      	movs	r0, #0
 8007ee0:	f000 ff56 	bl	8008d90 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007ee4:	4b25      	ldr	r3, [pc, #148]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80cb 	beq.w	8008084 <RadioIrqProcess+0x3b4>
 8007eee:	4b23      	ldr	r3, [pc, #140]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 80c5 	beq.w	8008084 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8007efa:	4b20      	ldr	r3, [pc, #128]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	2001      	movs	r0, #1
 8007f02:	4798      	blx	r3
        break;
 8007f04:	e0be      	b.n	8008084 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8007f06:	f000 fdf9 	bl	8008afc <SUBGRF_GetOperatingMode>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d115      	bne.n	8007f3c <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8007f10:	4819      	ldr	r0, [pc, #100]	; (8007f78 <RadioIrqProcess+0x2a8>)
 8007f12:	f002 fa1d 	bl	800a350 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8007f16:	2000      	movs	r0, #0
 8007f18:	f000 ff3a 	bl	8008d90 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007f1c:	4b17      	ldr	r3, [pc, #92]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 80b1 	beq.w	8008088 <RadioIrqProcess+0x3b8>
 8007f26:	4b15      	ldr	r3, [pc, #84]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 80ab 	beq.w	8008088 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8007f32:	4b12      	ldr	r3, [pc, #72]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	4798      	blx	r3
        break;
 8007f3a:	e0a5      	b.n	8008088 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8007f3c:	f000 fdde 	bl	8008afc <SUBGRF_GetOperatingMode>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b05      	cmp	r3, #5
 8007f44:	f040 80a0 	bne.w	8008088 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8007f48:	480d      	ldr	r0, [pc, #52]	; (8007f80 <RadioIrqProcess+0x2b0>)
 8007f4a:	f002 fa01 	bl	800a350 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8007f4e:	2000      	movs	r0, #0
 8007f50:	f000 ff1e 	bl	8008d90 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007f54:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 8095 	beq.w	8008088 <RadioIrqProcess+0x3b8>
 8007f5e:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 808f 	beq.w	8008088 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 8007f6a:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <RadioIrqProcess+0x2ac>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	4798      	blx	r3
        break;
 8007f72:	e089      	b.n	8008088 <RadioIrqProcess+0x3b8>
 8007f74:	200005ec 	.word	0x200005ec
 8007f78:	20000648 	.word	0x20000648
 8007f7c:	200005e8 	.word	0x200005e8
 8007f80:	20000660 	.word	0x20000660
 8007f84:	200004e8 	.word	0x200004e8
 8007f88:	20000610 	.word	0x20000610
 8007f8c:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8007f90:	4b44      	ldr	r3, [pc, #272]	; (80080a4 <RadioIrqProcess+0x3d4>)
 8007f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d079      	beq.n	800808c <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8007f98:	4a43      	ldr	r2, [pc, #268]	; (80080a8 <RadioIrqProcess+0x3d8>)
 8007f9a:	4b42      	ldr	r3, [pc, #264]	; (80080a4 <RadioIrqProcess+0x3d4>)
 8007f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9e:	0c1b      	lsrs	r3, r3, #16
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	f640 1003 	movw	r0, #2307	; 0x903
 8007fa8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8007faa:	4a3f      	ldr	r2, [pc, #252]	; (80080a8 <RadioIrqProcess+0x3d8>)
 8007fac:	4b3d      	ldr	r3, [pc, #244]	; (80080a4 <RadioIrqProcess+0x3d4>)
 8007fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb0:	0a1b      	lsrs	r3, r3, #8
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	f640 1004 	movw	r0, #2308	; 0x904
 8007fba:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8007fbc:	4a3a      	ldr	r2, [pc, #232]	; (80080a8 <RadioIrqProcess+0x3d8>)
 8007fbe:	4b39      	ldr	r3, [pc, #228]	; (80080a4 <RadioIrqProcess+0x3d4>)
 8007fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	f640 1005 	movw	r0, #2309	; 0x905
 8007fca:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8007fcc:	4c36      	ldr	r4, [pc, #216]	; (80080a8 <RadioIrqProcess+0x3d8>)
 8007fce:	4b37      	ldr	r3, [pc, #220]	; (80080ac <RadioIrqProcess+0x3dc>)
 8007fd0:	f640 1002 	movw	r0, #2306	; 0x902
 8007fd4:	4798      	blx	r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	f043 0301 	orr.w	r3, r3, #1
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	4619      	mov	r1, r3
 8007fe0:	f640 1002 	movw	r0, #2306	; 0x902
 8007fe4:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8007fe6:	4b2f      	ldr	r3, [pc, #188]	; (80080a4 <RadioIrqProcess+0x3d4>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007fec:	2300      	movs	r3, #0
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f240 2162 	movw	r1, #610	; 0x262
 8007ff4:	f240 2062 	movw	r0, #610	; 0x262
 8007ff8:	f001 f89e 	bl	8009138 <SUBGRF_SetDioIrqParams>
        break;
 8007ffc:	e046      	b.n	800808c <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8007ffe:	f001 ff38 	bl	8009e72 <RFW_Is_Init>
 8008002:	4603      	mov	r3, r0
 8008004:	2b01      	cmp	r3, #1
 8008006:	d143      	bne.n	8008090 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8008008:	f001 ff69 	bl	8009ede <RFW_ReceivePayload>
        break;
 800800c:	e040      	b.n	8008090 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 800800e:	4828      	ldr	r0, [pc, #160]	; (80080b0 <RadioIrqProcess+0x3e0>)
 8008010:	f002 f99e 	bl	800a350 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008014:	4b23      	ldr	r3, [pc, #140]	; (80080a4 <RadioIrqProcess+0x3d4>)
 8008016:	785b      	ldrb	r3, [r3, #1]
 8008018:	f083 0301 	eor.w	r3, r3, #1
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8008022:	2000      	movs	r0, #0
 8008024:	f000 feb4 	bl	8008d90 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008028:	4b22      	ldr	r3, [pc, #136]	; (80080b4 <RadioIrqProcess+0x3e4>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d031      	beq.n	8008094 <RadioIrqProcess+0x3c4>
 8008030:	4b20      	ldr	r3, [pc, #128]	; (80080b4 <RadioIrqProcess+0x3e4>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d02c      	beq.n	8008094 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 800803a:	4b1e      	ldr	r3, [pc, #120]	; (80080b4 <RadioIrqProcess+0x3e4>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	4798      	blx	r3
        break;
 8008042:	e027      	b.n	8008094 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8008044:	4b17      	ldr	r3, [pc, #92]	; (80080a4 <RadioIrqProcess+0x3d4>)
 8008046:	785b      	ldrb	r3, [r3, #1]
 8008048:	f083 0301 	eor.w	r3, r3, #1
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8008052:	2000      	movs	r0, #0
 8008054:	f000 fe9c 	bl	8008d90 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008058:	4b16      	ldr	r3, [pc, #88]	; (80080b4 <RadioIrqProcess+0x3e4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d01b      	beq.n	8008098 <RadioIrqProcess+0x3c8>
 8008060:	4b14      	ldr	r3, [pc, #80]	; (80080b4 <RadioIrqProcess+0x3e4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d016      	beq.n	8008098 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 800806a:	4b12      	ldr	r3, [pc, #72]	; (80080b4 <RadioIrqProcess+0x3e4>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	4798      	blx	r3
        break;
 8008072:	e011      	b.n	8008098 <RadioIrqProcess+0x3c8>
        break;
 8008074:	bf00      	nop
 8008076:	e010      	b.n	800809a <RadioIrqProcess+0x3ca>
        break;
 8008078:	bf00      	nop
 800807a:	e00e      	b.n	800809a <RadioIrqProcess+0x3ca>
        break;
 800807c:	bf00      	nop
 800807e:	e00c      	b.n	800809a <RadioIrqProcess+0x3ca>
        break;
 8008080:	bf00      	nop
 8008082:	e00a      	b.n	800809a <RadioIrqProcess+0x3ca>
        break;
 8008084:	bf00      	nop
 8008086:	e008      	b.n	800809a <RadioIrqProcess+0x3ca>
        break;
 8008088:	bf00      	nop
 800808a:	e006      	b.n	800809a <RadioIrqProcess+0x3ca>
        break;
 800808c:	bf00      	nop
 800808e:	e004      	b.n	800809a <RadioIrqProcess+0x3ca>
        break;
 8008090:	bf00      	nop
 8008092:	e002      	b.n	800809a <RadioIrqProcess+0x3ca>
        break;
 8008094:	bf00      	nop
 8008096:	e000      	b.n	800809a <RadioIrqProcess+0x3ca>
        break;
 8008098:	bf00      	nop
    }
}
 800809a:	bf00      	nop
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bdb0      	pop	{r4, r5, r7, pc}
 80080a2:	bf00      	nop
 80080a4:	200005ec 	.word	0x200005ec
 80080a8:	08007adf 	.word	0x08007adf
 80080ac:	08007b03 	.word	0x08007b03
 80080b0:	20000660 	.word	0x20000660
 80080b4:	200005e8 	.word	0x200005e8

080080b8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80080bc:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <RadioTxPrbs+0x2c>)
 80080be:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80080c2:	2101      	movs	r1, #1
 80080c4:	4618      	mov	r0, r3
 80080c6:	f001 fcdb 	bl	8009a80 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80080ca:	4b07      	ldr	r3, [pc, #28]	; (80080e8 <RadioTxPrbs+0x30>)
 80080cc:	212d      	movs	r1, #45	; 0x2d
 80080ce:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80080d2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80080d4:	f000 ff1f 	bl	8008f16 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80080d8:	4804      	ldr	r0, [pc, #16]	; (80080ec <RadioTxPrbs+0x34>)
 80080da:	f000 fe75 	bl	8008dc8 <SUBGRF_SetTx>
}
 80080de:	bf00      	nop
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	200005ec 	.word	0x200005ec
 80080e8:	08007adf 	.word	0x08007adf
 80080ec:	000fffff 	.word	0x000fffff

080080f0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80080fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 fce6 	bl	8009ad0 <SUBGRF_SetRfTxPower>
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008108:	210e      	movs	r1, #14
 800810a:	f640 101f 	movw	r0, #2335	; 0x91f
 800810e:	f001 fbc3 	bl	8009898 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	2101      	movs	r1, #1
 8008116:	4618      	mov	r0, r3
 8008118:	f001 fcb2 	bl	8009a80 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800811c:	f000 fef2 	bl	8008f04 <SUBGRF_SetTxContinuousWave>
}
 8008120:	bf00      	nop
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8008128:	b480      	push	{r7}
 800812a:	b089      	sub	sp, #36	; 0x24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	4613      	mov	r3, r2
 8008134:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800813e:	2300      	movs	r3, #0
 8008140:	61bb      	str	r3, [r7, #24]
 8008142:	e011      	b.n	8008168 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	4413      	add	r3, r2
 800814a:	781a      	ldrb	r2, [r3, #0]
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	68b9      	ldr	r1, [r7, #8]
 8008150:	440b      	add	r3, r1
 8008152:	43d2      	mvns	r2, r2
 8008154:	b2d2      	uxtb	r2, r2
 8008156:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	4413      	add	r3, r2
 800815e:	2200      	movs	r2, #0
 8008160:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	3301      	adds	r3, #1
 8008166:	61bb      	str	r3, [r7, #24]
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	429a      	cmp	r2, r3
 800816e:	dbe9      	blt.n	8008144 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8008170:	2300      	movs	r3, #0
 8008172:	61bb      	str	r3, [r7, #24]
 8008174:	e049      	b.n	800820a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	425a      	negs	r2, r3
 800817a:	f003 0307 	and.w	r3, r3, #7
 800817e:	f002 0207 	and.w	r2, r2, #7
 8008182:	bf58      	it	pl
 8008184:	4253      	negpl	r3, r2
 8008186:	b2db      	uxtb	r3, r3
 8008188:	f1c3 0307 	rsb	r3, r3, #7
 800818c:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	da00      	bge.n	8008196 <payload_integration+0x6e>
 8008194:	3307      	adds	r3, #7
 8008196:	10db      	asrs	r3, r3, #3
 8008198:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	3301      	adds	r3, #1
 800819e:	425a      	negs	r2, r3
 80081a0:	f003 0307 	and.w	r3, r3, #7
 80081a4:	f002 0207 	and.w	r2, r2, #7
 80081a8:	bf58      	it	pl
 80081aa:	4253      	negpl	r3, r2
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	f1c3 0307 	rsb	r3, r3, #7
 80081b2:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	3301      	adds	r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	da00      	bge.n	80081be <payload_integration+0x96>
 80081bc:	3307      	adds	r3, #7
 80081be:	10db      	asrs	r3, r3, #3
 80081c0:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80081c2:	7dbb      	ldrb	r3, [r7, #22]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	4413      	add	r3, r2
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	fa42 f303 	asr.w	r3, r2, r3
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80081da:	7ffa      	ldrb	r2, [r7, #31]
 80081dc:	7cfb      	ldrb	r3, [r7, #19]
 80081de:	4053      	eors	r3, r2
 80081e0:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80081e2:	7d3b      	ldrb	r3, [r7, #20]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	4413      	add	r3, r2
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	b25a      	sxtb	r2, r3
 80081ec:	7ff9      	ldrb	r1, [r7, #31]
 80081ee:	7d7b      	ldrb	r3, [r7, #21]
 80081f0:	fa01 f303 	lsl.w	r3, r1, r3
 80081f4:	b25b      	sxtb	r3, r3
 80081f6:	4313      	orrs	r3, r2
 80081f8:	b259      	sxtb	r1, r3
 80081fa:	7d3b      	ldrb	r3, [r7, #20]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	4413      	add	r3, r2
 8008200:	b2ca      	uxtb	r2, r1
 8008202:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	3301      	adds	r3, #1
 8008208:	61bb      	str	r3, [r7, #24]
 800820a:	79fb      	ldrb	r3, [r7, #7]
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	429a      	cmp	r2, r3
 8008212:	dbb0      	blt.n	8008176 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008214:	7ffb      	ldrb	r3, [r7, #31]
 8008216:	01db      	lsls	r3, r3, #7
 8008218:	b25a      	sxtb	r2, r3
 800821a:	7ffb      	ldrb	r3, [r7, #31]
 800821c:	019b      	lsls	r3, r3, #6
 800821e:	b25b      	sxtb	r3, r3
 8008220:	4313      	orrs	r3, r2
 8008222:	b25b      	sxtb	r3, r3
 8008224:	7ffa      	ldrb	r2, [r7, #31]
 8008226:	2a00      	cmp	r2, #0
 8008228:	d101      	bne.n	800822e <payload_integration+0x106>
 800822a:	2220      	movs	r2, #32
 800822c:	e000      	b.n	8008230 <payload_integration+0x108>
 800822e:	2200      	movs	r2, #0
 8008230:	4313      	orrs	r3, r2
 8008232:	b259      	sxtb	r1, r3
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	4413      	add	r3, r2
 800823a:	b2ca      	uxtb	r2, r1
 800823c:	701a      	strb	r2, [r3, #0]
}
 800823e:	bf00      	nop
 8008240:	3724      	adds	r7, #36	; 0x24
 8008242:	46bd      	mov	sp, r7
 8008244:	bc80      	pop	{r7}
 8008246:	4770      	bx	lr

08008248 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08c      	sub	sp, #48	; 0x30
 800824c:	af00      	add	r7, sp, #0
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	607a      	str	r2, [r7, #4]
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	4603      	mov	r3, r0
 8008256:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008258:	2300      	movs	r3, #0
 800825a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 800825c:	2300      	movs	r3, #0
 800825e:	623b      	str	r3, [r7, #32]
 8008260:	2300      	movs	r3, #0
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008264:	f001 fdff 	bl	8009e66 <RFW_DeInit>

    if( rxContinuous != 0 )
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	bf14      	ite	ne
 8008278:	2301      	movne	r3, #1
 800827a:	2300      	moveq	r3, #0
 800827c:	b2da      	uxtb	r2, r3
 800827e:	4ba3      	ldr	r3, [pc, #652]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 8008280:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <RadioSetRxGenericConfig+0x48>
 8008288:	2b01      	cmp	r3, #1
 800828a:	f000 80dc 	beq.w	8008446 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800828e:	e194      	b.n	80085ba <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d003      	beq.n	80082a0 <RadioSetRxGenericConfig+0x58>
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <RadioSetRxGenericConfig+0x5e>
            return -1;
 80082a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082a4:	e18a      	b.n	80085bc <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	7f9b      	ldrb	r3, [r3, #30]
 80082aa:	2b08      	cmp	r3, #8
 80082ac:	d902      	bls.n	80082b4 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80082ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082b2:	e183      	b.n	80085bc <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	6919      	ldr	r1, [r3, #16]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	7f9b      	ldrb	r3, [r3, #30]
 80082bc:	b29a      	uxth	r2, r3
 80082be:	f107 0320 	add.w	r3, r7, #32
 80082c2:	4618      	mov	r0, r3
 80082c4:	f001 ff66 	bl	800a194 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	bf14      	ite	ne
 80082d0:	2301      	movne	r3, #1
 80082d2:	2300      	moveq	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fe26 	bl	8008f28 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80082dc:	4b8b      	ldr	r3, [pc, #556]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	4a88      	ldr	r2, [pc, #544]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 80082ea:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f893 2020 	ldrb.w	r2, [r3, #32]
 80082f2:	4b86      	ldr	r3, [pc, #536]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 80082f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 fce5 	bl	8009ccc <SUBGRF_GetFskBandwidthRegValue>
 8008302:	4603      	mov	r3, r0
 8008304:	461a      	mov	r2, r3
 8008306:	4b81      	ldr	r3, [pc, #516]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 8008308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800830c:	4b7f      	ldr	r3, [pc, #508]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 800830e:	2200      	movs	r2, #0
 8008310:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	b29b      	uxth	r3, r3
 8008318:	00db      	lsls	r3, r3, #3
 800831a:	b29a      	uxth	r2, r3
 800831c:	4b7b      	ldr	r3, [pc, #492]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 800831e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	7fda      	ldrb	r2, [r3, #31]
 8008324:	4b79      	ldr	r3, [pc, #484]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 8008326:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	7f9b      	ldrb	r3, [r3, #30]
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	b2da      	uxtb	r2, r3
 8008330:	4b76      	ldr	r3, [pc, #472]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 8008332:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800833a:	4b74      	ldr	r3, [pc, #464]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 800833c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008344:	2b00      	cmp	r3, #0
 8008346:	d105      	bne.n	8008354 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	b2da      	uxtb	r2, r3
 800834e:	4b6f      	ldr	r3, [pc, #444]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 8008350:	759a      	strb	r2, [r3, #22]
 8008352:	e00b      	b.n	800836c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800835a:	2b02      	cmp	r3, #2
 800835c:	d103      	bne.n	8008366 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800835e:	4b6b      	ldr	r3, [pc, #428]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 8008360:	22ff      	movs	r2, #255	; 0xff
 8008362:	759a      	strb	r2, [r3, #22]
 8008364:	e002      	b.n	800836c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008366:	4b69      	ldr	r3, [pc, #420]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 8008368:	22ff      	movs	r2, #255	; 0xff
 800836a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008372:	2b02      	cmp	r3, #2
 8008374:	d004      	beq.n	8008380 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800837c:	2b02      	cmp	r3, #2
 800837e:	d12d      	bne.n	80083dc <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008386:	2bf1      	cmp	r3, #241	; 0xf1
 8008388:	d00c      	beq.n	80083a4 <RadioSetRxGenericConfig+0x15c>
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008390:	2bf2      	cmp	r3, #242	; 0xf2
 8008392:	d007      	beq.n	80083a4 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800839a:	2b01      	cmp	r3, #1
 800839c:	d002      	beq.n	80083a4 <RadioSetRxGenericConfig+0x15c>
                return -1;
 800839e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083a2:	e10b      	b.n	80085bc <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 80083a4:	2300      	movs	r3, #0
 80083a6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80083ac:	4b58      	ldr	r3, [pc, #352]	; (8008510 <RadioSetRxGenericConfig+0x2c8>)
 80083ae:	6819      	ldr	r1, [r3, #0]
 80083b0:	f107 0314 	add.w	r3, r7, #20
 80083b4:	4a57      	ldr	r2, [pc, #348]	; (8008514 <RadioSetRxGenericConfig+0x2cc>)
 80083b6:	4618      	mov	r0, r3
 80083b8:	f001 fd48 	bl	8009e4c <RFW_Init>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <RadioSetRxGenericConfig+0x180>
                return -1;
 80083c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083c6:	e0f9      	b.n	80085bc <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80083c8:	4b50      	ldr	r3, [pc, #320]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80083ce:	4b4f      	ldr	r3, [pc, #316]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 80083d0:	2201      	movs	r2, #1
 80083d2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80083d4:	4b4d      	ldr	r3, [pc, #308]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	755a      	strb	r2, [r3, #21]
        {
 80083da:	e00e      	b.n	80083fa <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80083e2:	4b4a      	ldr	r3, [pc, #296]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 80083e4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80083ec:	4b47      	ldr	r3, [pc, #284]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 80083ee:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80083f6:	4b45      	ldr	r3, [pc, #276]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 80083f8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80083fa:	f7ff fa6e 	bl	80078da <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80083fe:	2000      	movs	r0, #0
 8008400:	f7fe fc0a 	bl	8006c18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008404:	4844      	ldr	r0, [pc, #272]	; (8008518 <RadioSetRxGenericConfig+0x2d0>)
 8008406:	f001 f82d 	bl	8009464 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800840a:	4844      	ldr	r0, [pc, #272]	; (800851c <RadioSetRxGenericConfig+0x2d4>)
 800840c:	f001 f8fc 	bl	8009608 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008410:	f107 0320 	add.w	r3, r7, #32
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fbc0 	bl	8008b9a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	8b9b      	ldrh	r3, [r3, #28]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 fc0a 	bl	8008c38 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	8b1b      	ldrh	r3, [r3, #24]
 8008428:	4618      	mov	r0, r3
 800842a:	f000 fbe5 	bl	8008bf8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008434:	fb03 f202 	mul.w	r2, r3, r2
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008440:	4a32      	ldr	r2, [pc, #200]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 8008442:	6093      	str	r3, [r2, #8]
        break;
 8008444:	e0b9      	b.n	80085ba <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800844a:	2b00      	cmp	r3, #0
 800844c:	d102      	bne.n	8008454 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800844e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008452:	e0b3      	b.n	80085bc <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800845a:	2b01      	cmp	r3, #1
 800845c:	d104      	bne.n	8008468 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008466:	e002      	b.n	800846e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008468:	23ff      	movs	r3, #255	; 0xff
 800846a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008472:	2b00      	cmp	r3, #0
 8008474:	bf14      	ite	ne
 8008476:	2301      	movne	r3, #1
 8008478:	2300      	moveq	r3, #0
 800847a:	b2db      	uxtb	r3, r3
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fd53 	bl	8008f28 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	b2db      	uxtb	r3, r3
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fd5d 	bl	8008f46 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800848c:	4b1f      	ldr	r3, [pc, #124]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800849a:	4b1c      	ldr	r3, [pc, #112]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 800849c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80084a6:	4b19      	ldr	r3, [pc, #100]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 80084a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80084b2:	4b16      	ldr	r3, [pc, #88]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 80084b4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d010      	beq.n	80084e4 <RadioSetRxGenericConfig+0x29c>
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	dc2c      	bgt.n	8008520 <RadioSetRxGenericConfig+0x2d8>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <RadioSetRxGenericConfig+0x288>
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d005      	beq.n	80084da <RadioSetRxGenericConfig+0x292>
            break;
 80084ce:	e027      	b.n	8008520 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80084d0:	4b0e      	ldr	r3, [pc, #56]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80084d8:	e023      	b.n	8008522 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80084da:	4b0c      	ldr	r3, [pc, #48]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80084e2:	e01e      	b.n	8008522 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084ea:	2b0b      	cmp	r3, #11
 80084ec:	d004      	beq.n	80084f8 <RadioSetRxGenericConfig+0x2b0>
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084f4:	2b0c      	cmp	r3, #12
 80084f6:	d104      	bne.n	8008502 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80084f8:	4b04      	ldr	r3, [pc, #16]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008500:	e00f      	b.n	8008522 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008502:	4b02      	ldr	r3, [pc, #8]	; (800850c <RadioSetRxGenericConfig+0x2c4>)
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800850a:	e00a      	b.n	8008522 <RadioSetRxGenericConfig+0x2da>
 800850c:	200005ec 	.word	0x200005ec
 8008510:	200005e8 	.word	0x200005e8
 8008514:	20000660 	.word	0x20000660
 8008518:	20000624 	.word	0x20000624
 800851c:	200005fa 	.word	0x200005fa
            break;
 8008520:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008522:	4b28      	ldr	r3, [pc, #160]	; (80085c4 <RadioSetRxGenericConfig+0x37c>)
 8008524:	2201      	movs	r2, #1
 8008526:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800852c:	4b25      	ldr	r3, [pc, #148]	; (80085c4 <RadioSetRxGenericConfig+0x37c>)
 800852e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8008536:	4b23      	ldr	r3, [pc, #140]	; (80085c4 <RadioSetRxGenericConfig+0x37c>)
 8008538:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800853a:	4a22      	ldr	r2, [pc, #136]	; (80085c4 <RadioSetRxGenericConfig+0x37c>)
 800853c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008540:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008548:	4b1e      	ldr	r3, [pc, #120]	; (80085c4 <RadioSetRxGenericConfig+0x37c>)
 800854a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008554:	4b1b      	ldr	r3, [pc, #108]	; (80085c4 <RadioSetRxGenericConfig+0x37c>)
 8008556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800855a:	f7ff f9be 	bl	80078da <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800855e:	2001      	movs	r0, #1
 8008560:	f7fe fb5a 	bl	8006c18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008564:	4818      	ldr	r0, [pc, #96]	; (80085c8 <RadioSetRxGenericConfig+0x380>)
 8008566:	f000 ff7d 	bl	8009464 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800856a:	4818      	ldr	r0, [pc, #96]	; (80085cc <RadioSetRxGenericConfig+0x384>)
 800856c:	f001 f84c 	bl	8009608 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008570:	4b14      	ldr	r3, [pc, #80]	; (80085c4 <RadioSetRxGenericConfig+0x37c>)
 8008572:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008576:	2b01      	cmp	r3, #1
 8008578:	d10d      	bne.n	8008596 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800857a:	f240 7036 	movw	r0, #1846	; 0x736
 800857e:	f001 f99f 	bl	80098c0 <SUBGRF_ReadRegister>
 8008582:	4603      	mov	r3, r0
 8008584:	f023 0304 	bic.w	r3, r3, #4
 8008588:	b2db      	uxtb	r3, r3
 800858a:	4619      	mov	r1, r3
 800858c:	f240 7036 	movw	r0, #1846	; 0x736
 8008590:	f001 f982 	bl	8009898 <SUBGRF_WriteRegister>
 8008594:	e00c      	b.n	80085b0 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008596:	f240 7036 	movw	r0, #1846	; 0x736
 800859a:	f001 f991 	bl	80098c0 <SUBGRF_ReadRegister>
 800859e:	4603      	mov	r3, r0
 80085a0:	f043 0304 	orr.w	r3, r3, #4
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	4619      	mov	r1, r3
 80085a8:	f240 7036 	movw	r0, #1846	; 0x736
 80085ac:	f001 f974 	bl	8009898 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80085b0:	4b04      	ldr	r3, [pc, #16]	; (80085c4 <RadioSetRxGenericConfig+0x37c>)
 80085b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085b6:	609a      	str	r2, [r3, #8]
        break;
 80085b8:	bf00      	nop
    }
    return status;
 80085ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3730      	adds	r7, #48	; 0x30
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	200005ec 	.word	0x200005ec
 80085c8:	20000624 	.word	0x20000624
 80085cc:	200005fa 	.word	0x200005fa

080085d0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b08e      	sub	sp, #56	; 0x38
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	607b      	str	r3, [r7, #4]
 80085da:	4603      	mov	r3, r0
 80085dc:	73fb      	strb	r3, [r7, #15]
 80085de:	4613      	mov	r3, r2
 80085e0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 80085e2:	2300      	movs	r3, #0
 80085e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085e6:	2300      	movs	r3, #0
 80085e8:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80085ea:	f001 fc3c 	bl	8009e66 <RFW_DeInit>
    switch( modem )
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	f200 8204 	bhi.w	80089fe <RadioSetTxGenericConfig+0x42e>
 80085f6:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <RadioSetTxGenericConfig+0x2c>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	08008781 	.word	0x08008781
 8008600:	080088c9 	.word	0x080088c9
 8008604:	080089c1 	.word	0x080089c1
 8008608:	0800860d 	.word	0x0800860d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	7c9b      	ldrb	r3, [r3, #18]
 8008610:	2b08      	cmp	r3, #8
 8008612:	d902      	bls.n	800861a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8008614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008618:	e206      	b.n	8008a28 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	6899      	ldr	r1, [r3, #8]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	7c9b      	ldrb	r3, [r3, #18]
 8008622:	b29a      	uxth	r2, r3
 8008624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008628:	4618      	mov	r0, r3
 800862a:	f001 fdb3 	bl	800a194 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d102      	bne.n	800863c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8008636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800863a:	e1f5      	b.n	8008a28 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f242 7210 	movw	r2, #10000	; 0x2710
 8008644:	4293      	cmp	r3, r2
 8008646:	d813      	bhi.n	8008670 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008648:	2302      	movs	r3, #2
 800864a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800864e:	4b99      	ldr	r3, [pc, #612]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 8008650:	2203      	movs	r2, #3
 8008652:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008654:	4b97      	ldr	r3, [pc, #604]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 8008656:	2203      	movs	r2, #3
 8008658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a94      	ldr	r2, [pc, #592]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 8008662:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	7cda      	ldrb	r2, [r3, #19]
 8008668:	4b92      	ldr	r3, [pc, #584]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 800866a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800866e:	e017      	b.n	80086a0 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008670:	2300      	movs	r3, #0
 8008672:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008676:	4b8f      	ldr	r3, [pc, #572]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 8008678:	2200      	movs	r2, #0
 800867a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800867c:	4b8d      	ldr	r3, [pc, #564]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a8a      	ldr	r2, [pc, #552]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 800868a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	7cda      	ldrb	r2, [r3, #19]
 8008690:	4b88      	ldr	r3, [pc, #544]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 8008692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	089b      	lsrs	r3, r3, #2
 800869c:	4a85      	ldr	r2, [pc, #532]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 800869e:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	4b82      	ldr	r3, [pc, #520]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 80086ac:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80086ae:	4b81      	ldr	r3, [pc, #516]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 80086b0:	2204      	movs	r2, #4
 80086b2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	7c9b      	ldrb	r3, [r3, #18]
 80086b8:	00db      	lsls	r3, r3, #3
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	4b7d      	ldr	r3, [pc, #500]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 80086be:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80086c0:	4b7c      	ldr	r3, [pc, #496]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	7d9b      	ldrb	r3, [r3, #22]
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d003      	beq.n	80086d6 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	7d1b      	ldrb	r3, [r3, #20]
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d12b      	bne.n	800872e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	7d5b      	ldrb	r3, [r3, #21]
 80086da:	2bf1      	cmp	r3, #241	; 0xf1
 80086dc:	d00a      	beq.n	80086f4 <RadioSetTxGenericConfig+0x124>
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	7d5b      	ldrb	r3, [r3, #21]
 80086e2:	2bf2      	cmp	r3, #242	; 0xf2
 80086e4:	d006      	beq.n	80086f4 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	7d5b      	ldrb	r3, [r3, #21]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d002      	beq.n	80086f4 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 80086ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086f2:	e199      	b.n	8008a28 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80086fe:	4b6e      	ldr	r3, [pc, #440]	; (80088b8 <RadioSetTxGenericConfig+0x2e8>)
 8008700:	6819      	ldr	r1, [r3, #0]
 8008702:	f107 0320 	add.w	r3, r7, #32
 8008706:	4a6d      	ldr	r2, [pc, #436]	; (80088bc <RadioSetTxGenericConfig+0x2ec>)
 8008708:	4618      	mov	r0, r3
 800870a:	f001 fb9f 	bl	8009e4c <RFW_Init>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8008714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008718:	e186      	b.n	8008a28 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800871a:	4b66      	ldr	r3, [pc, #408]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 800871c:	2200      	movs	r2, #0
 800871e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008720:	4b64      	ldr	r3, [pc, #400]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 8008722:	2201      	movs	r2, #1
 8008724:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008726:	4b63      	ldr	r3, [pc, #396]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 8008728:	2200      	movs	r2, #0
 800872a:	755a      	strb	r2, [r3, #21]
        {
 800872c:	e00b      	b.n	8008746 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	7d5a      	ldrb	r2, [r3, #21]
 8008732:	4b60      	ldr	r3, [pc, #384]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 8008734:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	7d9a      	ldrb	r2, [r3, #22]
 800873a:	4b5e      	ldr	r3, [pc, #376]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 800873c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	7d1a      	ldrb	r2, [r3, #20]
 8008742:	4b5c      	ldr	r3, [pc, #368]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 8008744:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008746:	f7ff f8c8 	bl	80078da <RadioStandby>
        RadioSetModem( radio_modem );
 800874a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fa62 	bl	8006c18 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008754:	485a      	ldr	r0, [pc, #360]	; (80088c0 <RadioSetTxGenericConfig+0x2f0>)
 8008756:	f000 fe85 	bl	8009464 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800875a:	485a      	ldr	r0, [pc, #360]	; (80088c4 <RadioSetTxGenericConfig+0x2f4>)
 800875c:	f000 ff54 	bl	8009608 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008764:	4618      	mov	r0, r3
 8008766:	f000 fa18 	bl	8008b9a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	8a1b      	ldrh	r3, [r3, #16]
 800876e:	4618      	mov	r0, r3
 8008770:	f000 fa62 	bl	8008c38 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	899b      	ldrh	r3, [r3, #12]
 8008778:	4618      	mov	r0, r3
 800877a:	f000 fa3d 	bl	8008bf8 <SUBGRF_SetCrcPolynomial>
        break;
 800877e:	e13f      	b.n	8008a00 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d102      	bne.n	800878e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8008788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800878c:	e14c      	b.n	8008a28 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	7c9b      	ldrb	r3, [r3, #18]
 8008792:	2b08      	cmp	r3, #8
 8008794:	d902      	bls.n	800879c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8008796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800879a:	e145      	b.n	8008a28 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	6899      	ldr	r1, [r3, #8]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	7c9b      	ldrb	r3, [r3, #18]
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087aa:	4618      	mov	r0, r3
 80087ac:	f001 fcf2 	bl	800a194 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80087b0:	4b40      	ldr	r3, [pc, #256]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a3d      	ldr	r2, [pc, #244]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 80087be:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	7cda      	ldrb	r2, [r3, #19]
 80087c4:	4b3b      	ldr	r3, [pc, #236]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 80087c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	4a39      	ldr	r2, [pc, #228]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 80087d0:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80087d2:	4b38      	ldr	r3, [pc, #224]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	b29b      	uxth	r3, r3
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	4b34      	ldr	r3, [pc, #208]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 80087e4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80087e6:	4b33      	ldr	r3, [pc, #204]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 80087e8:	2204      	movs	r2, #4
 80087ea:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	7c9b      	ldrb	r3, [r3, #18]
 80087f0:	00db      	lsls	r3, r3, #3
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	4b2f      	ldr	r3, [pc, #188]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 80087f6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80087f8:	4b2e      	ldr	r3, [pc, #184]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	7d9b      	ldrb	r3, [r3, #22]
 8008802:	2b02      	cmp	r3, #2
 8008804:	d003      	beq.n	800880e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	7d1b      	ldrb	r3, [r3, #20]
 800880a:	2b02      	cmp	r3, #2
 800880c:	d12a      	bne.n	8008864 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	7d5b      	ldrb	r3, [r3, #21]
 8008812:	2bf1      	cmp	r3, #241	; 0xf1
 8008814:	d00a      	beq.n	800882c <RadioSetTxGenericConfig+0x25c>
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	7d5b      	ldrb	r3, [r3, #21]
 800881a:	2bf2      	cmp	r3, #242	; 0xf2
 800881c:	d006      	beq.n	800882c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	7d5b      	ldrb	r3, [r3, #21]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d002      	beq.n	800882c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8008826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800882a:	e0fd      	b.n	8008a28 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800882c:	2301      	movs	r3, #1
 800882e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008834:	4b20      	ldr	r3, [pc, #128]	; (80088b8 <RadioSetTxGenericConfig+0x2e8>)
 8008836:	6819      	ldr	r1, [r3, #0]
 8008838:	f107 0314 	add.w	r3, r7, #20
 800883c:	4a1f      	ldr	r2, [pc, #124]	; (80088bc <RadioSetTxGenericConfig+0x2ec>)
 800883e:	4618      	mov	r0, r3
 8008840:	f001 fb04 	bl	8009e4c <RFW_Init>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d002      	beq.n	8008850 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800884a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800884e:	e0eb      	b.n	8008a28 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008850:	4b18      	ldr	r3, [pc, #96]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 8008852:	2200      	movs	r2, #0
 8008854:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008856:	4b17      	ldr	r3, [pc, #92]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 8008858:	2201      	movs	r2, #1
 800885a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800885c:	4b15      	ldr	r3, [pc, #84]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 800885e:	2200      	movs	r2, #0
 8008860:	755a      	strb	r2, [r3, #21]
        {
 8008862:	e00b      	b.n	800887c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	7d5a      	ldrb	r2, [r3, #21]
 8008868:	4b12      	ldr	r3, [pc, #72]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 800886a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	7d9a      	ldrb	r2, [r3, #22]
 8008870:	4b10      	ldr	r3, [pc, #64]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 8008872:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	7d1a      	ldrb	r2, [r3, #20]
 8008878:	4b0e      	ldr	r3, [pc, #56]	; (80088b4 <RadioSetTxGenericConfig+0x2e4>)
 800887a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800887c:	f7ff f82d 	bl	80078da <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008880:	2000      	movs	r0, #0
 8008882:	f7fe f9c9 	bl	8006c18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008886:	480e      	ldr	r0, [pc, #56]	; (80088c0 <RadioSetTxGenericConfig+0x2f0>)
 8008888:	f000 fdec 	bl	8009464 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800888c:	480d      	ldr	r0, [pc, #52]	; (80088c4 <RadioSetTxGenericConfig+0x2f4>)
 800888e:	f000 febb 	bl	8009608 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008896:	4618      	mov	r0, r3
 8008898:	f000 f97f 	bl	8008b9a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	8a1b      	ldrh	r3, [r3, #16]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 f9c9 	bl	8008c38 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	899b      	ldrh	r3, [r3, #12]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 f9a4 	bl	8008bf8 <SUBGRF_SetCrcPolynomial>
        break;
 80088b0:	e0a6      	b.n	8008a00 <RadioSetTxGenericConfig+0x430>
 80088b2:	bf00      	nop
 80088b4:	200005ec 	.word	0x200005ec
 80088b8:	200005e8 	.word	0x200005e8
 80088bc:	20000648 	.word	0x20000648
 80088c0:	20000624 	.word	0x20000624
 80088c4:	200005fa 	.word	0x200005fa
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80088c8:	4b59      	ldr	r3, [pc, #356]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	781a      	ldrb	r2, [r3, #0]
 80088d4:	4b56      	ldr	r3, [pc, #344]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 80088d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	785a      	ldrb	r2, [r3, #1]
 80088de:	4b54      	ldr	r3, [pc, #336]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 80088e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	789a      	ldrb	r2, [r3, #2]
 80088e8:	4b51      	ldr	r3, [pc, #324]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 80088ea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	78db      	ldrb	r3, [r3, #3]
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d010      	beq.n	8008918 <RadioSetTxGenericConfig+0x348>
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	dc20      	bgt.n	800893c <RadioSetTxGenericConfig+0x36c>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <RadioSetTxGenericConfig+0x334>
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d005      	beq.n	800890e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8008902:	e01b      	b.n	800893c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008904:	4b4a      	ldr	r3, [pc, #296]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800890c:	e017      	b.n	800893e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800890e:	4b48      	ldr	r3, [pc, #288]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008916:	e012      	b.n	800893e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	2b0b      	cmp	r3, #11
 800891e:	d003      	beq.n	8008928 <RadioSetTxGenericConfig+0x358>
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2b0c      	cmp	r3, #12
 8008926:	d104      	bne.n	8008932 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008928:	4b41      	ldr	r3, [pc, #260]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008930:	e005      	b.n	800893e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008932:	4b3f      	ldr	r3, [pc, #252]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800893a:	e000      	b.n	800893e <RadioSetTxGenericConfig+0x36e>
            break;
 800893c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800893e:	4b3c      	ldr	r3, [pc, #240]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 8008940:	2201      	movs	r2, #1
 8008942:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	889a      	ldrh	r2, [r3, #4]
 8008948:	4b39      	ldr	r3, [pc, #228]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 800894a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	799a      	ldrb	r2, [r3, #6]
 8008950:	4b37      	ldr	r3, [pc, #220]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 8008952:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	79da      	ldrb	r2, [r3, #7]
 8008958:	4b35      	ldr	r3, [pc, #212]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 800895a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	7a1a      	ldrb	r2, [r3, #8]
 8008962:	4b33      	ldr	r3, [pc, #204]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 8008964:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8008968:	f7fe ffb7 	bl	80078da <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800896c:	2001      	movs	r0, #1
 800896e:	f7fe f953 	bl	8006c18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008972:	4830      	ldr	r0, [pc, #192]	; (8008a34 <RadioSetTxGenericConfig+0x464>)
 8008974:	f000 fd76 	bl	8009464 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008978:	482f      	ldr	r0, [pc, #188]	; (8008a38 <RadioSetTxGenericConfig+0x468>)
 800897a:	f000 fe45 	bl	8009608 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800897e:	4b2c      	ldr	r3, [pc, #176]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 8008980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008984:	2b06      	cmp	r3, #6
 8008986:	d10d      	bne.n	80089a4 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008988:	f640 0089 	movw	r0, #2185	; 0x889
 800898c:	f000 ff98 	bl	80098c0 <SUBGRF_ReadRegister>
 8008990:	4603      	mov	r3, r0
 8008992:	f023 0304 	bic.w	r3, r3, #4
 8008996:	b2db      	uxtb	r3, r3
 8008998:	4619      	mov	r1, r3
 800899a:	f640 0089 	movw	r0, #2185	; 0x889
 800899e:	f000 ff7b 	bl	8009898 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 80089a2:	e02d      	b.n	8008a00 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80089a4:	f640 0089 	movw	r0, #2185	; 0x889
 80089a8:	f000 ff8a 	bl	80098c0 <SUBGRF_ReadRegister>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f043 0304 	orr.w	r3, r3, #4
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	4619      	mov	r1, r3
 80089b6:	f640 0089 	movw	r0, #2185	; 0x889
 80089ba:	f000 ff6d 	bl	8009898 <SUBGRF_WriteRegister>
        break;
 80089be:	e01f      	b.n	8008a00 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d004      	beq.n	80089d2 <RadioSetTxGenericConfig+0x402>
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089d0:	d902      	bls.n	80089d8 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 80089d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089d6:	e027      	b.n	8008a28 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 80089d8:	2003      	movs	r0, #3
 80089da:	f7fe f91d 	bl	8006c18 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80089de:	4b14      	ldr	r3, [pc, #80]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 80089e0:	2202      	movs	r2, #2
 80089e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a11      	ldr	r2, [pc, #68]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 80089ec:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80089ee:	4b10      	ldr	r3, [pc, #64]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 80089f0:	2216      	movs	r2, #22
 80089f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80089f6:	480f      	ldr	r0, [pc, #60]	; (8008a34 <RadioSetTxGenericConfig+0x464>)
 80089f8:	f000 fd34 	bl	8009464 <SUBGRF_SetModulationParams>
        break;
 80089fc:	e000      	b.n	8008a00 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 80089fe:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f001 f863 	bl	8009ad0 <SUBGRF_SetRfTxPower>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 8008a10:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008a14:	4b06      	ldr	r3, [pc, #24]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 8008a16:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f001 fa37 	bl	8009e8e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008a20:	4a03      	ldr	r2, [pc, #12]	; (8008a30 <RadioSetTxGenericConfig+0x460>)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6053      	str	r3, [r2, #4]
    return 0;
 8008a26:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3738      	adds	r7, #56	; 0x38
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	200005ec 	.word	0x200005ec
 8008a34:	20000624 	.word	0x20000624
 8008a38:	200005fa 	.word	0x200005fa

08008a3c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008a44:	2301      	movs	r3, #1
 8008a46:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bc80      	pop	{r7}
 8008a52:	4770      	bx	lr

08008a54 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008a5e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bc80      	pop	{r7}
 8008a68:	4770      	bx	lr
	...

08008a6c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8008a7a:	4a1d      	ldr	r2, [pc, #116]	; (8008af0 <SUBGRF_Init+0x84>)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8008a80:	f7f8 fea2 	bl	80017c8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008a84:	2002      	movs	r0, #2
 8008a86:	f001 f8ff 	bl	8009c88 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8008a8a:	4b1a      	ldr	r3, [pc, #104]	; (8008af4 <SUBGRF_Init+0x88>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8008a90:	2000      	movs	r0, #0
 8008a92:	f000 f97d 	bl	8008d90 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8008a96:	f001 fb52 	bl	800a13e <RBI_IsTCXO>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d10e      	bne.n	8008abe <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8008aa0:	2140      	movs	r1, #64	; 0x40
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	f000 fb82 	bl	80091ac <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	f640 1011 	movw	r0, #2321	; 0x911
 8008aae:	f000 fef3 	bl	8009898 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8008ab2:	237f      	movs	r3, #127	; 0x7f
 8008ab4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8008ab6:	7b38      	ldrb	r0, [r7, #12]
 8008ab8:	f000 fa8b 	bl	8008fd2 <SUBGRF_Calibrate>
 8008abc:	e009      	b.n	8008ad2 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008abe:	2120      	movs	r1, #32
 8008ac0:	f640 1011 	movw	r0, #2321	; 0x911
 8008ac4:	f000 fee8 	bl	8009898 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008ac8:	2120      	movs	r1, #32
 8008aca:	f640 1012 	movw	r0, #2322	; 0x912
 8008ace:	f000 fee3 	bl	8009898 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008ad2:	210e      	movs	r1, #14
 8008ad4:	f640 101f 	movw	r0, #2335	; 0x91f
 8008ad8:	f000 fede 	bl	8009898 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8008adc:	f001 fa86 	bl	8009fec <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8008ae0:	4b05      	ldr	r3, [pc, #20]	; (8008af8 <SUBGRF_Init+0x8c>)
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	701a      	strb	r2, [r3, #0]
}
 8008ae6:	bf00      	nop
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20000684 	.word	0x20000684
 8008af4:	20000680 	.word	0x20000680
 8008af8:	20000678 	.word	0x20000678

08008afc <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0
    return OperatingMode;
 8008b00:	4b02      	ldr	r3, [pc, #8]	; (8008b0c <SUBGRF_GetOperatingMode+0x10>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bc80      	pop	{r7}
 8008b0a:	4770      	bx	lr
 8008b0c:	20000678 	.word	0x20000678

08008b10 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8008b1c:	78fb      	ldrb	r3, [r7, #3]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	6879      	ldr	r1, [r7, #4]
 8008b22:	2000      	movs	r0, #0
 8008b24:	f000 ff24 	bl	8009970 <SUBGRF_WriteBuffer>
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8008b42:	f107 0317 	add.w	r3, r7, #23
 8008b46:	4619      	mov	r1, r3
 8008b48:	68b8      	ldr	r0, [r7, #8]
 8008b4a:	f000 fe27 	bl	800979c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	79fa      	ldrb	r2, [r7, #7]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d201      	bcs.n	8008b5c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e007      	b.n	8008b6c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8008b5c:	7df8      	ldrb	r0, [r7, #23]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	68f9      	ldr	r1, [r7, #12]
 8008b66:	f000 ff25 	bl	80099b4 <SUBGRF_ReadBuffer>

    return 0;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8008b82:	7afb      	ldrb	r3, [r7, #11]
 8008b84:	4619      	mov	r1, r3
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f7ff ffc2 	bl	8008b10 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f91b 	bl	8008dc8 <SUBGRF_SetTx>
}
 8008b92:	bf00      	nop
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8008ba2:	2208      	movs	r2, #8
 8008ba4:	6879      	ldr	r1, [r7, #4]
 8008ba6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8008baa:	f000 fe9d 	bl	80098e8 <SUBGRF_WriteRegisters>
    return 0;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8008bc2:	88fb      	ldrh	r3, [r7, #6]
 8008bc4:	0a1b      	lsrs	r3, r3, #8
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8008bcc:	88fb      	ldrh	r3, [r7, #6]
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8008bd2:	f000 fb6f 	bl	80092b4 <SUBGRF_GetPacketType>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d108      	bne.n	8008bee <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8008bdc:	f107 030c 	add.w	r3, r7, #12
 8008be0:	2202      	movs	r2, #2
 8008be2:	4619      	mov	r1, r3
 8008be4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8008be8:	f000 fe7e 	bl	80098e8 <SUBGRF_WriteRegisters>
            break;
 8008bec:	e000      	b.n	8008bf0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8008bee:	bf00      	nop
    }
}
 8008bf0:	bf00      	nop
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8008c02:	88fb      	ldrh	r3, [r7, #6]
 8008c04:	0a1b      	lsrs	r3, r3, #8
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8008c0c:	88fb      	ldrh	r3, [r7, #6]
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8008c12:	f000 fb4f 	bl	80092b4 <SUBGRF_GetPacketType>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d108      	bne.n	8008c2e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8008c1c:	f107 030c 	add.w	r3, r7, #12
 8008c20:	2202      	movs	r2, #2
 8008c22:	4619      	mov	r1, r3
 8008c24:	f240 60be 	movw	r0, #1726	; 0x6be
 8008c28:	f000 fe5e 	bl	80098e8 <SUBGRF_WriteRegisters>
            break;
 8008c2c:	e000      	b.n	8008c30 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8008c2e:	bf00      	nop
    }
}
 8008c30:	bf00      	nop
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8008c46:	f000 fb35 	bl	80092b4 <SUBGRF_GetPacketType>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d121      	bne.n	8008c94 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8008c50:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008c54:	f000 fe34 	bl	80098c0 <SUBGRF_ReadRegister>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	f023 0301 	bic.w	r3, r3, #1
 8008c5e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8008c60:	88fb      	ldrh	r3, [r7, #6]
 8008c62:	0a1b      	lsrs	r3, r3, #8
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	b25b      	sxtb	r3, r3
 8008c68:	f003 0301 	and.w	r3, r3, #1
 8008c6c:	b25a      	sxtb	r2, r3
 8008c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	b25b      	sxtb	r3, r3
 8008c76:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008c80:	f000 fe0a 	bl	8009898 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8008c84:	88fb      	ldrh	r3, [r7, #6]
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	4619      	mov	r1, r3
 8008c8a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8008c8e:	f000 fe03 	bl	8009898 <SUBGRF_WriteRegister>
            break;
 8008c92:	e000      	b.n	8008c96 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8008c94:	bf00      	nop
    }
}
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b082      	sub	sp, #8
 8008ca2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8008cac:	2300      	movs	r3, #0
 8008cae:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8008cb0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008cb4:	f000 fe04 	bl	80098c0 <SUBGRF_ReadRegister>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8008cbc:	79fb      	ldrb	r3, [r7, #7]
 8008cbe:	f023 0301 	bic.w	r3, r3, #1
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008cca:	f000 fde5 	bl	8009898 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8008cce:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008cd2:	f000 fdf5 	bl	80098c0 <SUBGRF_ReadRegister>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8008cda:	79bb      	ldrb	r3, [r7, #6]
 8008cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008ce8:	f000 fdd6 	bl	8009898 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008cec:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008cf0:	f000 f88a 	bl	8008e08 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8008cf4:	463b      	mov	r3, r7
 8008cf6:	2204      	movs	r2, #4
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	f640 0019 	movw	r0, #2073	; 0x819
 8008cfe:	f000 fe15 	bl	800992c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8008d02:	2000      	movs	r0, #0
 8008d04:	f000 f844 	bl	8008d90 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008d10:	f000 fdc2 	bl	8009898 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8008d14:	79bb      	ldrb	r3, [r7, #6]
 8008d16:	4619      	mov	r1, r3
 8008d18:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008d1c:	f000 fdbc 	bl	8009898 <SUBGRF_WriteRegister>

    return number;
 8008d20:	683b      	ldr	r3, [r7, #0]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
	...

08008d2c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8008d34:	2000      	movs	r0, #0
 8008d36:	f001 f999 	bl	800a06c <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008d3a:	2002      	movs	r0, #2
 8008d3c:	f000 ffa4 	bl	8009c88 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008d40:	793b      	ldrb	r3, [r7, #4]
 8008d42:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008d4c:	793b      	ldrb	r3, [r7, #4]
 8008d4e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008d56:	b25b      	sxtb	r3, r3
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8008d5c:	793b      	ldrb	r3, [r7, #4]
 8008d5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008d66:	4313      	orrs	r3, r2
 8008d68:	b25b      	sxtb	r3, r3
 8008d6a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008d6c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8008d6e:	f107 030f 	add.w	r3, r7, #15
 8008d72:	2201      	movs	r2, #1
 8008d74:	4619      	mov	r1, r3
 8008d76:	2084      	movs	r0, #132	; 0x84
 8008d78:	f000 fe3e 	bl	80099f8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8008d7c:	4b03      	ldr	r3, [pc, #12]	; (8008d8c <SUBGRF_SetSleep+0x60>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	701a      	strb	r2, [r3, #0]
}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000678 	.word	0x20000678

08008d90 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	4603      	mov	r3, r0
 8008d98:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8008d9a:	1dfb      	adds	r3, r7, #7
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	4619      	mov	r1, r3
 8008da0:	2080      	movs	r0, #128	; 0x80
 8008da2:	f000 fe29 	bl	80099f8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d103      	bne.n	8008db4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8008dac:	4b05      	ldr	r3, [pc, #20]	; (8008dc4 <SUBGRF_SetStandby+0x34>)
 8008dae:	2201      	movs	r2, #1
 8008db0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8008db2:	e002      	b.n	8008dba <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8008db4:	4b03      	ldr	r3, [pc, #12]	; (8008dc4 <SUBGRF_SetStandby+0x34>)
 8008db6:	2202      	movs	r2, #2
 8008db8:	701a      	strb	r2, [r3, #0]
}
 8008dba:	bf00      	nop
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000678 	.word	0x20000678

08008dc8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8008dd0:	4b0c      	ldr	r3, [pc, #48]	; (8008e04 <SUBGRF_SetTx+0x3c>)
 8008dd2:	2204      	movs	r2, #4
 8008dd4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	0c1b      	lsrs	r3, r3, #16
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	0a1b      	lsrs	r3, r3, #8
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8008dec:	f107 030c 	add.w	r3, r7, #12
 8008df0:	2203      	movs	r2, #3
 8008df2:	4619      	mov	r1, r3
 8008df4:	2083      	movs	r0, #131	; 0x83
 8008df6:	f000 fdff 	bl	80099f8 <SUBGRF_WriteCommand>
}
 8008dfa:	bf00      	nop
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	20000678 	.word	0x20000678

08008e08 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008e10:	4b0c      	ldr	r3, [pc, #48]	; (8008e44 <SUBGRF_SetRx+0x3c>)
 8008e12:	2205      	movs	r2, #5
 8008e14:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	0c1b      	lsrs	r3, r3, #16
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	0a1b      	lsrs	r3, r3, #8
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008e2c:	f107 030c 	add.w	r3, r7, #12
 8008e30:	2203      	movs	r2, #3
 8008e32:	4619      	mov	r1, r3
 8008e34:	2082      	movs	r0, #130	; 0x82
 8008e36:	f000 fddf 	bl	80099f8 <SUBGRF_WriteCommand>
}
 8008e3a:	bf00      	nop
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20000678 	.word	0x20000678

08008e48 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008e50:	4b0e      	ldr	r3, [pc, #56]	; (8008e8c <SUBGRF_SetRxBoosted+0x44>)
 8008e52:	2205      	movs	r2, #5
 8008e54:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8008e56:	2197      	movs	r1, #151	; 0x97
 8008e58:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8008e5c:	f000 fd1c 	bl	8009898 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	0c1b      	lsrs	r3, r3, #16
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	0a1b      	lsrs	r3, r3, #8
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008e76:	f107 030c 	add.w	r3, r7, #12
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	2082      	movs	r0, #130	; 0x82
 8008e80:	f000 fdba 	bl	80099f8 <SUBGRF_WriteCommand>
}
 8008e84:	bf00      	nop
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	20000678 	.word	0x20000678

08008e90 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	0c1b      	lsrs	r3, r3, #16
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	0a1b      	lsrs	r3, r3, #8
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	0c1b      	lsrs	r3, r3, #16
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	0a1b      	lsrs	r3, r3, #8
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8008ec6:	f107 0308 	add.w	r3, r7, #8
 8008eca:	2206      	movs	r2, #6
 8008ecc:	4619      	mov	r1, r3
 8008ece:	2094      	movs	r0, #148	; 0x94
 8008ed0:	f000 fd92 	bl	80099f8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8008ed4:	4b03      	ldr	r3, [pc, #12]	; (8008ee4 <SUBGRF_SetRxDutyCycle+0x54>)
 8008ed6:	2206      	movs	r2, #6
 8008ed8:	701a      	strb	r2, [r3, #0]
}
 8008eda:	bf00      	nop
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20000678 	.word	0x20000678

08008ee8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8008eec:	2200      	movs	r2, #0
 8008eee:	2100      	movs	r1, #0
 8008ef0:	20c5      	movs	r0, #197	; 0xc5
 8008ef2:	f000 fd81 	bl	80099f8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8008ef6:	4b02      	ldr	r3, [pc, #8]	; (8008f00 <SUBGRF_SetCad+0x18>)
 8008ef8:	2207      	movs	r2, #7
 8008efa:	701a      	strb	r2, [r3, #0]
}
 8008efc:	bf00      	nop
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	20000678 	.word	0x20000678

08008f04 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	20d1      	movs	r0, #209	; 0xd1
 8008f0e:	f000 fd73 	bl	80099f8 <SUBGRF_WriteCommand>
}
 8008f12:	bf00      	nop
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	20d2      	movs	r0, #210	; 0xd2
 8008f20:	f000 fd6a 	bl	80099f8 <SUBGRF_WriteCommand>
}
 8008f24:	bf00      	nop
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8008f32:	1dfb      	adds	r3, r7, #7
 8008f34:	2201      	movs	r2, #1
 8008f36:	4619      	mov	r1, r3
 8008f38:	209f      	movs	r0, #159	; 0x9f
 8008f3a:	f000 fd5d 	bl	80099f8 <SUBGRF_WriteCommand>
}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8008f50:	1dfb      	adds	r3, r7, #7
 8008f52:	2201      	movs	r2, #1
 8008f54:	4619      	mov	r1, r3
 8008f56:	20a0      	movs	r0, #160	; 0xa0
 8008f58:	f000 fd4e 	bl	80099f8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
 8008f5e:	2b3f      	cmp	r3, #63	; 0x3f
 8008f60:	d91c      	bls.n	8008f9c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8008f62:	79fb      	ldrb	r3, [r7, #7]
 8008f64:	085b      	lsrs	r3, r3, #1
 8008f66:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8008f70:	e005      	b.n	8008f7e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	089b      	lsrs	r3, r3, #2
 8008f76:	73fb      	strb	r3, [r7, #15]
            exp++;
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	2b1f      	cmp	r3, #31
 8008f82:	d8f6      	bhi.n	8008f72 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8008f90:	7b7b      	ldrb	r3, [r7, #13]
 8008f92:	4619      	mov	r1, r3
 8008f94:	f240 7006 	movw	r0, #1798	; 0x706
 8008f98:	f000 fc7e 	bl	8009898 <SUBGRF_WriteRegister>
    }
}
 8008f9c:	bf00      	nop
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8008faa:	f001 f8d3 	bl	800a154 <RBI_IsDCDC>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d102      	bne.n	8008fba <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	71fb      	strb	r3, [r7, #7]
 8008fb8:	e001      	b.n	8008fbe <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8008fbe:	1dfb      	adds	r3, r7, #7
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	2096      	movs	r0, #150	; 0x96
 8008fc6:	f000 fd17 	bl	80099f8 <SUBGRF_WriteCommand>
}
 8008fca:	bf00      	nop
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b084      	sub	sp, #16
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008fda:	793b      	ldrb	r3, [r7, #4]
 8008fdc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	019b      	lsls	r3, r3, #6
 8008fe4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8008fe6:	793b      	ldrb	r3, [r7, #4]
 8008fe8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008ff0:	b25b      	sxtb	r3, r3
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8008ff6:	793b      	ldrb	r3, [r7, #4]
 8008ff8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009000:	b25b      	sxtb	r3, r3
 8009002:	4313      	orrs	r3, r2
 8009004:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009006:	793b      	ldrb	r3, [r7, #4]
 8009008:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800900c:	b2db      	uxtb	r3, r3
 800900e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009010:	b25b      	sxtb	r3, r3
 8009012:	4313      	orrs	r3, r2
 8009014:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009016:	793b      	ldrb	r3, [r7, #4]
 8009018:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800901c:	b2db      	uxtb	r3, r3
 800901e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009020:	b25b      	sxtb	r3, r3
 8009022:	4313      	orrs	r3, r2
 8009024:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009026:	793b      	ldrb	r3, [r7, #4]
 8009028:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800902c:	b2db      	uxtb	r3, r3
 800902e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009030:	b25b      	sxtb	r3, r3
 8009032:	4313      	orrs	r3, r2
 8009034:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8009036:	793b      	ldrb	r3, [r7, #4]
 8009038:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800903c:	b2db      	uxtb	r3, r3
 800903e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009040:	4313      	orrs	r3, r2
 8009042:	b25b      	sxtb	r3, r3
 8009044:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009046:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009048:	f107 030f 	add.w	r3, r7, #15
 800904c:	2201      	movs	r2, #1
 800904e:	4619      	mov	r1, r3
 8009050:	2089      	movs	r0, #137	; 0x89
 8009052:	f000 fcd1 	bl	80099f8 <SUBGRF_WriteCommand>
}
 8009056:	bf00      	nop
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
	...

08009060 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a1d      	ldr	r2, [pc, #116]	; (80090e0 <SUBGRF_CalibrateImage+0x80>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d904      	bls.n	800907a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8009070:	23e1      	movs	r3, #225	; 0xe1
 8009072:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8009074:	23e9      	movs	r3, #233	; 0xe9
 8009076:	737b      	strb	r3, [r7, #13]
 8009078:	e027      	b.n	80090ca <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a19      	ldr	r2, [pc, #100]	; (80090e4 <SUBGRF_CalibrateImage+0x84>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d904      	bls.n	800908c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8009082:	23d7      	movs	r3, #215	; 0xd7
 8009084:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8009086:	23db      	movs	r3, #219	; 0xdb
 8009088:	737b      	strb	r3, [r7, #13]
 800908a:	e01e      	b.n	80090ca <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a16      	ldr	r2, [pc, #88]	; (80090e8 <SUBGRF_CalibrateImage+0x88>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d904      	bls.n	800909e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8009094:	23c1      	movs	r3, #193	; 0xc1
 8009096:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8009098:	23c5      	movs	r3, #197	; 0xc5
 800909a:	737b      	strb	r3, [r7, #13]
 800909c:	e015      	b.n	80090ca <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a12      	ldr	r2, [pc, #72]	; (80090ec <SUBGRF_CalibrateImage+0x8c>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d904      	bls.n	80090b0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80090a6:	2375      	movs	r3, #117	; 0x75
 80090a8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80090aa:	2381      	movs	r3, #129	; 0x81
 80090ac:	737b      	strb	r3, [r7, #13]
 80090ae:	e00c      	b.n	80090ca <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a0f      	ldr	r2, [pc, #60]	; (80090f0 <SUBGRF_CalibrateImage+0x90>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d904      	bls.n	80090c2 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80090b8:	236b      	movs	r3, #107	; 0x6b
 80090ba:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80090bc:	236f      	movs	r3, #111	; 0x6f
 80090be:	737b      	strb	r3, [r7, #13]
 80090c0:	e003      	b.n	80090ca <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80090c2:	2329      	movs	r3, #41	; 0x29
 80090c4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80090c6:	232b      	movs	r3, #43	; 0x2b
 80090c8:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80090ca:	f107 030c 	add.w	r3, r7, #12
 80090ce:	2202      	movs	r2, #2
 80090d0:	4619      	mov	r1, r3
 80090d2:	2098      	movs	r0, #152	; 0x98
 80090d4:	f000 fc90 	bl	80099f8 <SUBGRF_WriteCommand>
}
 80090d8:	bf00      	nop
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	35a4e900 	.word	0x35a4e900
 80090e4:	32a9f880 	.word	0x32a9f880
 80090e8:	2de54480 	.word	0x2de54480
 80090ec:	1b6b0b00 	.word	0x1b6b0b00
 80090f0:	1954fc40 	.word	0x1954fc40

080090f4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80090f4:	b590      	push	{r4, r7, lr}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4604      	mov	r4, r0
 80090fc:	4608      	mov	r0, r1
 80090fe:	4611      	mov	r1, r2
 8009100:	461a      	mov	r2, r3
 8009102:	4623      	mov	r3, r4
 8009104:	71fb      	strb	r3, [r7, #7]
 8009106:	4603      	mov	r3, r0
 8009108:	71bb      	strb	r3, [r7, #6]
 800910a:	460b      	mov	r3, r1
 800910c:	717b      	strb	r3, [r7, #5]
 800910e:	4613      	mov	r3, r2
 8009110:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8009112:	79fb      	ldrb	r3, [r7, #7]
 8009114:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8009116:	79bb      	ldrb	r3, [r7, #6]
 8009118:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800911a:	797b      	ldrb	r3, [r7, #5]
 800911c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800911e:	793b      	ldrb	r3, [r7, #4]
 8009120:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8009122:	f107 030c 	add.w	r3, r7, #12
 8009126:	2204      	movs	r2, #4
 8009128:	4619      	mov	r1, r3
 800912a:	2095      	movs	r0, #149	; 0x95
 800912c:	f000 fc64 	bl	80099f8 <SUBGRF_WriteCommand>
}
 8009130:	bf00      	nop
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	bd90      	pop	{r4, r7, pc}

08009138 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8009138:	b590      	push	{r4, r7, lr}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	4604      	mov	r4, r0
 8009140:	4608      	mov	r0, r1
 8009142:	4611      	mov	r1, r2
 8009144:	461a      	mov	r2, r3
 8009146:	4623      	mov	r3, r4
 8009148:	80fb      	strh	r3, [r7, #6]
 800914a:	4603      	mov	r3, r0
 800914c:	80bb      	strh	r3, [r7, #4]
 800914e:	460b      	mov	r3, r1
 8009150:	807b      	strh	r3, [r7, #2]
 8009152:	4613      	mov	r3, r2
 8009154:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	0a1b      	lsrs	r3, r3, #8
 800915a:	b29b      	uxth	r3, r3
 800915c:	b2db      	uxtb	r3, r3
 800915e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8009160:	88fb      	ldrh	r3, [r7, #6]
 8009162:	b2db      	uxtb	r3, r3
 8009164:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8009166:	88bb      	ldrh	r3, [r7, #4]
 8009168:	0a1b      	lsrs	r3, r3, #8
 800916a:	b29b      	uxth	r3, r3
 800916c:	b2db      	uxtb	r3, r3
 800916e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8009170:	88bb      	ldrh	r3, [r7, #4]
 8009172:	b2db      	uxtb	r3, r3
 8009174:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8009176:	887b      	ldrh	r3, [r7, #2]
 8009178:	0a1b      	lsrs	r3, r3, #8
 800917a:	b29b      	uxth	r3, r3
 800917c:	b2db      	uxtb	r3, r3
 800917e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8009180:	887b      	ldrh	r3, [r7, #2]
 8009182:	b2db      	uxtb	r3, r3
 8009184:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8009186:	883b      	ldrh	r3, [r7, #0]
 8009188:	0a1b      	lsrs	r3, r3, #8
 800918a:	b29b      	uxth	r3, r3
 800918c:	b2db      	uxtb	r3, r3
 800918e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8009190:	883b      	ldrh	r3, [r7, #0]
 8009192:	b2db      	uxtb	r3, r3
 8009194:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8009196:	f107 0308 	add.w	r3, r7, #8
 800919a:	2208      	movs	r2, #8
 800919c:	4619      	mov	r1, r3
 800919e:	2008      	movs	r0, #8
 80091a0:	f000 fc2a 	bl	80099f8 <SUBGRF_WriteCommand>
}
 80091a4:	bf00      	nop
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd90      	pop	{r4, r7, pc}

080091ac <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	6039      	str	r1, [r7, #0]
 80091b6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	f003 0307 	and.w	r3, r3, #7
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	0c1b      	lsrs	r3, r3, #16
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	0a1b      	lsrs	r3, r3, #8
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80091d8:	f107 030c 	add.w	r3, r7, #12
 80091dc:	2204      	movs	r2, #4
 80091de:	4619      	mov	r1, r3
 80091e0:	2097      	movs	r0, #151	; 0x97
 80091e2:	f000 fc09 	bl	80099f8 <SUBGRF_WriteCommand>
}
 80091e6:	bf00      	nop
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80091f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80091f4:	b084      	sub	sp, #16
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80091fe:	4b1d      	ldr	r3, [pc, #116]	; (8009274 <SUBGRF_SetRfFrequency+0x84>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	f083 0301 	eor.w	r3, r3, #1
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b00      	cmp	r3, #0
 800920a:	d005      	beq.n	8009218 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7ff ff27 	bl	8009060 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8009212:	4b18      	ldr	r3, [pc, #96]	; (8009274 <SUBGRF_SetRfFrequency+0x84>)
 8009214:	2201      	movs	r2, #1
 8009216:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	461c      	mov	r4, r3
 800921e:	4615      	mov	r5, r2
 8009220:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009224:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009228:	4a13      	ldr	r2, [pc, #76]	; (8009278 <SUBGRF_SetRfFrequency+0x88>)
 800922a:	f04f 0300 	mov.w	r3, #0
 800922e:	4640      	mov	r0, r8
 8009230:	4649      	mov	r1, r9
 8009232:	f7f6 fff5 	bl	8000220 <__aeabi_uldivmod>
 8009236:	4602      	mov	r2, r0
 8009238:	460b      	mov	r3, r1
 800923a:	4613      	mov	r3, r2
 800923c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	0e1b      	lsrs	r3, r3, #24
 8009242:	b2db      	uxtb	r3, r3
 8009244:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	0c1b      	lsrs	r3, r3, #16
 800924a:	b2db      	uxtb	r3, r3
 800924c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	0a1b      	lsrs	r3, r3, #8
 8009252:	b2db      	uxtb	r3, r3
 8009254:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	b2db      	uxtb	r3, r3
 800925a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800925c:	f107 0308 	add.w	r3, r7, #8
 8009260:	2204      	movs	r2, #4
 8009262:	4619      	mov	r1, r3
 8009264:	2086      	movs	r0, #134	; 0x86
 8009266:	f000 fbc7 	bl	80099f8 <SUBGRF_WriteCommand>
}
 800926a:	bf00      	nop
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009274:	20000680 	.word	0x20000680
 8009278:	01e84800 	.word	0x01e84800

0800927c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8009286:	79fa      	ldrb	r2, [r7, #7]
 8009288:	4b09      	ldr	r3, [pc, #36]	; (80092b0 <SUBGRF_SetPacketType+0x34>)
 800928a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800928c:	79fb      	ldrb	r3, [r7, #7]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d104      	bne.n	800929c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009292:	2100      	movs	r1, #0
 8009294:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8009298:	f000 fafe 	bl	8009898 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800929c:	1dfb      	adds	r3, r7, #7
 800929e:	2201      	movs	r2, #1
 80092a0:	4619      	mov	r1, r3
 80092a2:	208a      	movs	r0, #138	; 0x8a
 80092a4:	f000 fba8 	bl	80099f8 <SUBGRF_WriteCommand>
}
 80092a8:	bf00      	nop
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	20000679 	.word	0x20000679

080092b4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80092b4:	b480      	push	{r7}
 80092b6:	af00      	add	r7, sp, #0
    return PacketType;
 80092b8:	4b02      	ldr	r3, [pc, #8]	; (80092c4 <SUBGRF_GetPacketType+0x10>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	46bd      	mov	sp, r7
 80092c0:	bc80      	pop	{r7}
 80092c2:	4770      	bx	lr
 80092c4:	20000679 	.word	0x20000679

080092c8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	71fb      	strb	r3, [r7, #7]
 80092d2:	460b      	mov	r3, r1
 80092d4:	71bb      	strb	r3, [r7, #6]
 80092d6:	4613      	mov	r3, r2
 80092d8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80092da:	79fb      	ldrb	r3, [r7, #7]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d149      	bne.n	8009374 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80092e0:	2000      	movs	r0, #0
 80092e2:	f000 ff42 	bl	800a16a <RBI_GetRFOMaxPowerConfig>
 80092e6:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80092e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	da01      	bge.n	80092f6 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2b0e      	cmp	r3, #14
 80092fa:	d10e      	bne.n	800931a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80092fc:	2301      	movs	r3, #1
 80092fe:	2201      	movs	r2, #1
 8009300:	2100      	movs	r1, #0
 8009302:	2004      	movs	r0, #4
 8009304:	f7ff fef6 	bl	80090f4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009308:	79ba      	ldrb	r2, [r7, #6]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	b2db      	uxtb	r3, r3
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	b2db      	uxtb	r3, r3
 8009312:	330e      	adds	r3, #14
 8009314:	b2db      	uxtb	r3, r3
 8009316:	71bb      	strb	r3, [r7, #6]
 8009318:	e01f      	b.n	800935a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b0a      	cmp	r3, #10
 800931e:	d10e      	bne.n	800933e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009320:	2301      	movs	r3, #1
 8009322:	2201      	movs	r2, #1
 8009324:	2100      	movs	r1, #0
 8009326:	2001      	movs	r0, #1
 8009328:	f7ff fee4 	bl	80090f4 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800932c:	79ba      	ldrb	r2, [r7, #6]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	b2db      	uxtb	r3, r3
 8009336:	330d      	adds	r3, #13
 8009338:	b2db      	uxtb	r3, r3
 800933a:	71bb      	strb	r3, [r7, #6]
 800933c:	e00d      	b.n	800935a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800933e:	2301      	movs	r3, #1
 8009340:	2201      	movs	r2, #1
 8009342:	2100      	movs	r1, #0
 8009344:	2007      	movs	r0, #7
 8009346:	f7ff fed5 	bl	80090f4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800934a:	79ba      	ldrb	r2, [r7, #6]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	b2db      	uxtb	r3, r3
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	b2db      	uxtb	r3, r3
 8009354:	330e      	adds	r3, #14
 8009356:	b2db      	uxtb	r3, r3
 8009358:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800935a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800935e:	f113 0f11 	cmn.w	r3, #17
 8009362:	da01      	bge.n	8009368 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009364:	23ef      	movs	r3, #239	; 0xef
 8009366:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009368:	2118      	movs	r1, #24
 800936a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800936e:	f000 fa93 	bl	8009898 <SUBGRF_WriteRegister>
 8009372:	e067      	b.n	8009444 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8009374:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009378:	f000 faa2 	bl	80098c0 <SUBGRF_ReadRegister>
 800937c:	4603      	mov	r3, r0
 800937e:	f043 031e 	orr.w	r3, r3, #30
 8009382:	b2db      	uxtb	r3, r3
 8009384:	4619      	mov	r1, r3
 8009386:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800938a:	f000 fa85 	bl	8009898 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800938e:	2001      	movs	r0, #1
 8009390:	f000 feeb 	bl	800a16a <RBI_GetRFOMaxPowerConfig>
 8009394:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8009396:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	429a      	cmp	r2, r3
 800939e:	da01      	bge.n	80093a4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b14      	cmp	r3, #20
 80093a8:	d10e      	bne.n	80093c8 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80093aa:	2301      	movs	r3, #1
 80093ac:	2200      	movs	r2, #0
 80093ae:	2105      	movs	r1, #5
 80093b0:	2003      	movs	r0, #3
 80093b2:	f7ff fe9f 	bl	80090f4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80093b6:	79ba      	ldrb	r2, [r7, #6]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	3316      	adds	r3, #22
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	71bb      	strb	r3, [r7, #6]
 80093c6:	e031      	b.n	800942c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2b11      	cmp	r3, #17
 80093cc:	d10e      	bne.n	80093ec <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80093ce:	2301      	movs	r3, #1
 80093d0:	2200      	movs	r2, #0
 80093d2:	2103      	movs	r1, #3
 80093d4:	2002      	movs	r0, #2
 80093d6:	f7ff fe8d 	bl	80090f4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80093da:	79ba      	ldrb	r2, [r7, #6]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	3316      	adds	r3, #22
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	71bb      	strb	r3, [r7, #6]
 80093ea:	e01f      	b.n	800942c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2b0e      	cmp	r3, #14
 80093f0:	d10e      	bne.n	8009410 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80093f2:	2301      	movs	r3, #1
 80093f4:	2200      	movs	r2, #0
 80093f6:	2102      	movs	r1, #2
 80093f8:	2002      	movs	r0, #2
 80093fa:	f7ff fe7b 	bl	80090f4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80093fe:	79ba      	ldrb	r2, [r7, #6]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	b2db      	uxtb	r3, r3
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	b2db      	uxtb	r3, r3
 8009408:	330e      	adds	r3, #14
 800940a:	b2db      	uxtb	r3, r3
 800940c:	71bb      	strb	r3, [r7, #6]
 800940e:	e00d      	b.n	800942c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009410:	2301      	movs	r3, #1
 8009412:	2200      	movs	r2, #0
 8009414:	2107      	movs	r1, #7
 8009416:	2004      	movs	r0, #4
 8009418:	f7ff fe6c 	bl	80090f4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800941c:	79ba      	ldrb	r2, [r7, #6]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	b2db      	uxtb	r3, r3
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	b2db      	uxtb	r3, r3
 8009426:	3316      	adds	r3, #22
 8009428:	b2db      	uxtb	r3, r3
 800942a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800942c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009430:	f113 0f09 	cmn.w	r3, #9
 8009434:	da01      	bge.n	800943a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009436:	23f7      	movs	r3, #247	; 0xf7
 8009438:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800943a:	2138      	movs	r1, #56	; 0x38
 800943c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009440:	f000 fa2a 	bl	8009898 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009444:	79bb      	ldrb	r3, [r7, #6]
 8009446:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009448:	797b      	ldrb	r3, [r7, #5]
 800944a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800944c:	f107 0308 	add.w	r3, r7, #8
 8009450:	2202      	movs	r2, #2
 8009452:	4619      	mov	r1, r3
 8009454:	208e      	movs	r0, #142	; 0x8e
 8009456:	f000 facf 	bl	80099f8 <SUBGRF_WriteCommand>
}
 800945a:	bf00      	nop
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
	...

08009464 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009464:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009468:	b086      	sub	sp, #24
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009472:	4a61      	ldr	r2, [pc, #388]	; (80095f8 <SUBGRF_SetModulationParams+0x194>)
 8009474:	f107 0308 	add.w	r3, r7, #8
 8009478:	e892 0003 	ldmia.w	r2, {r0, r1}
 800947c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	781a      	ldrb	r2, [r3, #0]
 8009484:	4b5d      	ldr	r3, [pc, #372]	; (80095fc <SUBGRF_SetModulationParams+0x198>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	429a      	cmp	r2, r3
 800948a:	d004      	beq.n	8009496 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff fef3 	bl	800927c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	2b03      	cmp	r3, #3
 800949c:	f200 80a5 	bhi.w	80095ea <SUBGRF_SetModulationParams+0x186>
 80094a0:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <SUBGRF_SetModulationParams+0x44>)
 80094a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a6:	bf00      	nop
 80094a8:	080094b9 	.word	0x080094b9
 80094ac:	08009579 	.word	0x08009579
 80094b0:	0800953b 	.word	0x0800953b
 80094b4:	080095a7 	.word	0x080095a7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80094b8:	2308      	movs	r3, #8
 80094ba:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	4a4f      	ldr	r2, [pc, #316]	; (8009600 <SUBGRF_SetModulationParams+0x19c>)
 80094c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	0c1b      	lsrs	r3, r3, #16
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	0a1b      	lsrs	r3, r3, #8
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	7b1b      	ldrb	r3, [r3, #12]
 80094e2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	7b5b      	ldrb	r3, [r3, #13]
 80094e8:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	2200      	movs	r2, #0
 80094f0:	461c      	mov	r4, r3
 80094f2:	4615      	mov	r5, r2
 80094f4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80094f8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80094fc:	4a41      	ldr	r2, [pc, #260]	; (8009604 <SUBGRF_SetModulationParams+0x1a0>)
 80094fe:	f04f 0300 	mov.w	r3, #0
 8009502:	4640      	mov	r0, r8
 8009504:	4649      	mov	r1, r9
 8009506:	f7f6 fe8b 	bl	8000220 <__aeabi_uldivmod>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4613      	mov	r3, r2
 8009510:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	0c1b      	lsrs	r3, r3, #16
 8009516:	b2db      	uxtb	r3, r3
 8009518:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	0a1b      	lsrs	r3, r3, #8
 800951e:	b2db      	uxtb	r3, r3
 8009520:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	b2db      	uxtb	r3, r3
 8009526:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009528:	7cfb      	ldrb	r3, [r7, #19]
 800952a:	b29a      	uxth	r2, r3
 800952c:	f107 0308 	add.w	r3, r7, #8
 8009530:	4619      	mov	r1, r3
 8009532:	208b      	movs	r0, #139	; 0x8b
 8009534:	f000 fa60 	bl	80099f8 <SUBGRF_WriteCommand>
        break;
 8009538:	e058      	b.n	80095ec <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800953a:	2304      	movs	r3, #4
 800953c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	4a2f      	ldr	r2, [pc, #188]	; (8009600 <SUBGRF_SetModulationParams+0x19c>)
 8009544:	fbb2 f3f3 	udiv	r3, r2, r3
 8009548:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	0c1b      	lsrs	r3, r3, #16
 800954e:	b2db      	uxtb	r3, r3
 8009550:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	0a1b      	lsrs	r3, r3, #8
 8009556:	b2db      	uxtb	r3, r3
 8009558:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	b2db      	uxtb	r3, r3
 800955e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	7d1b      	ldrb	r3, [r3, #20]
 8009564:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009566:	7cfb      	ldrb	r3, [r7, #19]
 8009568:	b29a      	uxth	r2, r3
 800956a:	f107 0308 	add.w	r3, r7, #8
 800956e:	4619      	mov	r1, r3
 8009570:	208b      	movs	r0, #139	; 0x8b
 8009572:	f000 fa41 	bl	80099f8 <SUBGRF_WriteCommand>
        break;
 8009576:	e039      	b.n	80095ec <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009578:	2304      	movs	r3, #4
 800957a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	7e1b      	ldrb	r3, [r3, #24]
 8009580:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	7e5b      	ldrb	r3, [r3, #25]
 8009586:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	7e9b      	ldrb	r3, [r3, #26]
 800958c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7edb      	ldrb	r3, [r3, #27]
 8009592:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009594:	7cfb      	ldrb	r3, [r7, #19]
 8009596:	b29a      	uxth	r2, r3
 8009598:	f107 0308 	add.w	r3, r7, #8
 800959c:	4619      	mov	r1, r3
 800959e:	208b      	movs	r0, #139	; 0x8b
 80095a0:	f000 fa2a 	bl	80099f8 <SUBGRF_WriteCommand>

        break;
 80095a4:	e022      	b.n	80095ec <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 80095a6:	2305      	movs	r3, #5
 80095a8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	4a14      	ldr	r2, [pc, #80]	; (8009600 <SUBGRF_SetModulationParams+0x19c>)
 80095b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	0c1b      	lsrs	r3, r3, #16
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	0a1b      	lsrs	r3, r3, #8
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	7b1b      	ldrb	r3, [r3, #12]
 80095d0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	7b5b      	ldrb	r3, [r3, #13]
 80095d6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80095d8:	7cfb      	ldrb	r3, [r7, #19]
 80095da:	b29a      	uxth	r2, r3
 80095dc:	f107 0308 	add.w	r3, r7, #8
 80095e0:	4619      	mov	r1, r3
 80095e2:	208b      	movs	r0, #139	; 0x8b
 80095e4:	f000 fa08 	bl	80099f8 <SUBGRF_WriteCommand>
        break;
 80095e8:	e000      	b.n	80095ec <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 80095ea:	bf00      	nop
    }
}
 80095ec:	bf00      	nop
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80095f6:	bf00      	nop
 80095f8:	0800b448 	.word	0x0800b448
 80095fc:	20000679 	.word	0x20000679
 8009600:	3d090000 	.word	0x3d090000
 8009604:	01e84800 	.word	0x01e84800

08009608 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009614:	4a48      	ldr	r2, [pc, #288]	; (8009738 <SUBGRF_SetPacketParams+0x130>)
 8009616:	f107 030c 	add.w	r3, r7, #12
 800961a:	ca07      	ldmia	r2, {r0, r1, r2}
 800961c:	c303      	stmia	r3!, {r0, r1}
 800961e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	781a      	ldrb	r2, [r3, #0]
 8009624:	4b45      	ldr	r3, [pc, #276]	; (800973c <SUBGRF_SetPacketParams+0x134>)
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	429a      	cmp	r2, r3
 800962a:	d004      	beq.n	8009636 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	4618      	mov	r0, r3
 8009632:	f7ff fe23 	bl	800927c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	2b03      	cmp	r3, #3
 800963c:	d878      	bhi.n	8009730 <SUBGRF_SetPacketParams+0x128>
 800963e:	a201      	add	r2, pc, #4	; (adr r2, 8009644 <SUBGRF_SetPacketParams+0x3c>)
 8009640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009644:	08009655 	.word	0x08009655
 8009648:	080096e5 	.word	0x080096e5
 800964c:	080096d9 	.word	0x080096d9
 8009650:	08009655 	.word	0x08009655
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	7a5b      	ldrb	r3, [r3, #9]
 8009658:	2bf1      	cmp	r3, #241	; 0xf1
 800965a:	d10a      	bne.n	8009672 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800965c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009660:	f7ff faaa 	bl	8008bb8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009664:	f248 0005 	movw	r0, #32773	; 0x8005
 8009668:	f7ff fac6 	bl	8008bf8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800966c:	2302      	movs	r3, #2
 800966e:	75bb      	strb	r3, [r7, #22]
 8009670:	e011      	b.n	8009696 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	7a5b      	ldrb	r3, [r3, #9]
 8009676:	2bf2      	cmp	r3, #242	; 0xf2
 8009678:	d10a      	bne.n	8009690 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800967a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800967e:	f7ff fa9b 	bl	8008bb8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009682:	f241 0021 	movw	r0, #4129	; 0x1021
 8009686:	f7ff fab7 	bl	8008bf8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800968a:	2306      	movs	r3, #6
 800968c:	75bb      	strb	r3, [r7, #22]
 800968e:	e002      	b.n	8009696 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	7a5b      	ldrb	r3, [r3, #9]
 8009694:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009696:	2309      	movs	r3, #9
 8009698:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	885b      	ldrh	r3, [r3, #2]
 800969e:	0a1b      	lsrs	r3, r3, #8
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	885b      	ldrh	r3, [r3, #2]
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	791b      	ldrb	r3, [r3, #4]
 80096b2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	795b      	ldrb	r3, [r3, #5]
 80096b8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	799b      	ldrb	r3, [r3, #6]
 80096be:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	79db      	ldrb	r3, [r3, #7]
 80096c4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	7a1b      	ldrb	r3, [r3, #8]
 80096ca:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80096cc:	7dbb      	ldrb	r3, [r7, #22]
 80096ce:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	7a9b      	ldrb	r3, [r3, #10]
 80096d4:	753b      	strb	r3, [r7, #20]
        break;
 80096d6:	e022      	b.n	800971e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80096d8:	2301      	movs	r3, #1
 80096da:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	7b1b      	ldrb	r3, [r3, #12]
 80096e0:	733b      	strb	r3, [r7, #12]
        break;
 80096e2:	e01c      	b.n	800971e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80096e4:	2306      	movs	r3, #6
 80096e6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	89db      	ldrh	r3, [r3, #14]
 80096ec:	0a1b      	lsrs	r3, r3, #8
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	89db      	ldrh	r3, [r3, #14]
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	7c1a      	ldrb	r2, [r3, #16]
 8009700:	4b0f      	ldr	r3, [pc, #60]	; (8009740 <SUBGRF_SetPacketParams+0x138>)
 8009702:	4611      	mov	r1, r2
 8009704:	7019      	strb	r1, [r3, #0]
 8009706:	4613      	mov	r3, r2
 8009708:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	7c5b      	ldrb	r3, [r3, #17]
 800970e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	7c9b      	ldrb	r3, [r3, #18]
 8009714:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	7cdb      	ldrb	r3, [r3, #19]
 800971a:	747b      	strb	r3, [r7, #17]
        break;
 800971c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	b29a      	uxth	r2, r3
 8009722:	f107 030c 	add.w	r3, r7, #12
 8009726:	4619      	mov	r1, r3
 8009728:	208c      	movs	r0, #140	; 0x8c
 800972a:	f000 f965 	bl	80099f8 <SUBGRF_WriteCommand>
 800972e:	e000      	b.n	8009732 <SUBGRF_SetPacketParams+0x12a>
        return;
 8009730:	bf00      	nop
}
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	0800b450 	.word	0x0800b450
 800973c:	20000679 	.word	0x20000679
 8009740:	2000067a 	.word	0x2000067a

08009744 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	460a      	mov	r2, r1
 800974e:	71fb      	strb	r3, [r7, #7]
 8009750:	4613      	mov	r3, r2
 8009752:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009758:	79bb      	ldrb	r3, [r7, #6]
 800975a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800975c:	f107 030c 	add.w	r3, r7, #12
 8009760:	2202      	movs	r2, #2
 8009762:	4619      	mov	r1, r3
 8009764:	208f      	movs	r0, #143	; 0x8f
 8009766:	f000 f947 	bl	80099f8 <SUBGRF_WriteCommand>
}
 800976a:	bf00      	nop
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009778:	2300      	movs	r3, #0
 800977a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800977c:	1d3b      	adds	r3, r7, #4
 800977e:	2201      	movs	r2, #1
 8009780:	4619      	mov	r1, r3
 8009782:	2015      	movs	r0, #21
 8009784:	f000 f95a 	bl	8009a3c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009788:	793b      	ldrb	r3, [r7, #4]
 800978a:	425b      	negs	r3, r3
 800978c:	105b      	asrs	r3, r3, #1
 800978e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8009790:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80097a6:	f107 030c 	add.w	r3, r7, #12
 80097aa:	2202      	movs	r2, #2
 80097ac:	4619      	mov	r1, r3
 80097ae:	2013      	movs	r0, #19
 80097b0:	f000 f944 	bl	8009a3c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80097b4:	f7ff fd7e 	bl	80092b4 <SUBGRF_GetPacketType>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d10d      	bne.n	80097da <SUBGRF_GetRxBufferStatus+0x3e>
 80097be:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <SUBGRF_GetRxBufferStatus+0x54>)
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d108      	bne.n	80097da <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80097c8:	f240 7002 	movw	r0, #1794	; 0x702
 80097cc:	f000 f878 	bl	80098c0 <SUBGRF_ReadRegister>
 80097d0:	4603      	mov	r3, r0
 80097d2:	461a      	mov	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	701a      	strb	r2, [r3, #0]
 80097d8:	e002      	b.n	80097e0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80097da:	7b3a      	ldrb	r2, [r7, #12]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80097e0:	7b7a      	ldrb	r2, [r7, #13]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	701a      	strb	r2, [r3, #0]
}
 80097e6:	bf00      	nop
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	2000067a 	.word	0x2000067a

080097f4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80097fc:	f107 030c 	add.w	r3, r7, #12
 8009800:	2203      	movs	r2, #3
 8009802:	4619      	mov	r1, r3
 8009804:	2014      	movs	r0, #20
 8009806:	f000 f919 	bl	8009a3c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800980a:	f7ff fd53 	bl	80092b4 <SUBGRF_GetPacketType>
 800980e:	4603      	mov	r3, r0
 8009810:	461a      	mov	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d002      	beq.n	8009824 <SUBGRF_GetPacketStatus+0x30>
 800981e:	2b01      	cmp	r3, #1
 8009820:	d013      	beq.n	800984a <SUBGRF_GetPacketStatus+0x56>
 8009822:	e02a      	b.n	800987a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8009824:	7b3a      	ldrb	r2, [r7, #12]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800982a:	7b7b      	ldrb	r3, [r7, #13]
 800982c:	425b      	negs	r3, r3
 800982e:	105b      	asrs	r3, r3, #1
 8009830:	b25a      	sxtb	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8009836:	7bbb      	ldrb	r3, [r7, #14]
 8009838:	425b      	negs	r3, r3
 800983a:	105b      	asrs	r3, r3, #1
 800983c:	b25a      	sxtb	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	609a      	str	r2, [r3, #8]
            break;
 8009848:	e020      	b.n	800988c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800984a:	7b3b      	ldrb	r3, [r7, #12]
 800984c:	425b      	negs	r3, r3
 800984e:	105b      	asrs	r3, r3, #1
 8009850:	b25a      	sxtb	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8009856:	7b7b      	ldrb	r3, [r7, #13]
 8009858:	b25b      	sxtb	r3, r3
 800985a:	3302      	adds	r3, #2
 800985c:	109b      	asrs	r3, r3, #2
 800985e:	b25a      	sxtb	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8009864:	7bbb      	ldrb	r3, [r7, #14]
 8009866:	425b      	negs	r3, r3
 8009868:	105b      	asrs	r3, r3, #1
 800986a:	b25a      	sxtb	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8009870:	4b08      	ldr	r3, [pc, #32]	; (8009894 <SUBGRF_GetPacketStatus+0xa0>)
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	611a      	str	r2, [r3, #16]
            break;
 8009878:	e008      	b.n	800988c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800987a:	2214      	movs	r2, #20
 800987c:	2100      	movs	r1, #0
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fca7 	bl	800a1d2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	220f      	movs	r2, #15
 8009888:	701a      	strb	r2, [r3, #0]
            break;
 800988a:	bf00      	nop
    }
}
 800988c:	bf00      	nop
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	2000067c 	.word	0x2000067c

08009898 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	460a      	mov	r2, r1
 80098a2:	80fb      	strh	r3, [r7, #6]
 80098a4:	4613      	mov	r3, r2
 80098a6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80098a8:	1d7a      	adds	r2, r7, #5
 80098aa:	88f9      	ldrh	r1, [r7, #6]
 80098ac:	2301      	movs	r3, #1
 80098ae:	4803      	ldr	r0, [pc, #12]	; (80098bc <SUBGRF_WriteRegister+0x24>)
 80098b0:	f7fa fd08 	bl	80042c4 <HAL_SUBGHZ_WriteRegisters>
}
 80098b4:	bf00      	nop
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	2000032c 	.word	0x2000032c

080098c0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	4603      	mov	r3, r0
 80098c8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80098ca:	f107 020f 	add.w	r2, r7, #15
 80098ce:	88f9      	ldrh	r1, [r7, #6]
 80098d0:	2301      	movs	r3, #1
 80098d2:	4804      	ldr	r0, [pc, #16]	; (80098e4 <SUBGRF_ReadRegister+0x24>)
 80098d4:	f7fa fd55 	bl	8004382 <HAL_SUBGHZ_ReadRegisters>
    return data;
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	2000032c 	.word	0x2000032c

080098e8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	4603      	mov	r3, r0
 80098f0:	6039      	str	r1, [r7, #0]
 80098f2:	80fb      	strh	r3, [r7, #6]
 80098f4:	4613      	mov	r3, r2
 80098f6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098f8:	f3ef 8310 	mrs	r3, PRIMASK
 80098fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80098fe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009900:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009902:	b672      	cpsid	i
}
 8009904:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8009906:	88bb      	ldrh	r3, [r7, #4]
 8009908:	88f9      	ldrh	r1, [r7, #6]
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	4806      	ldr	r0, [pc, #24]	; (8009928 <SUBGRF_WriteRegisters+0x40>)
 800990e:	f7fa fcd9 	bl	80042c4 <HAL_SUBGHZ_WriteRegisters>
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f383 8810 	msr	PRIMASK, r3
}
 800991c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800991e:	bf00      	nop
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	2000032c 	.word	0x2000032c

0800992c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	4603      	mov	r3, r0
 8009934:	6039      	str	r1, [r7, #0]
 8009936:	80fb      	strh	r3, [r7, #6]
 8009938:	4613      	mov	r3, r2
 800993a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800993c:	f3ef 8310 	mrs	r3, PRIMASK
 8009940:	60fb      	str	r3, [r7, #12]
  return(result);
 8009942:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009944:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009946:	b672      	cpsid	i
}
 8009948:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800994a:	88bb      	ldrh	r3, [r7, #4]
 800994c:	88f9      	ldrh	r1, [r7, #6]
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	4806      	ldr	r0, [pc, #24]	; (800996c <SUBGRF_ReadRegisters+0x40>)
 8009952:	f7fa fd16 	bl	8004382 <HAL_SUBGHZ_ReadRegisters>
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f383 8810 	msr	PRIMASK, r3
}
 8009960:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009962:	bf00      	nop
 8009964:	3718      	adds	r7, #24
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	2000032c 	.word	0x2000032c

08009970 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	6039      	str	r1, [r7, #0]
 800997a:	71fb      	strb	r3, [r7, #7]
 800997c:	4613      	mov	r3, r2
 800997e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009980:	f3ef 8310 	mrs	r3, PRIMASK
 8009984:	60fb      	str	r3, [r7, #12]
  return(result);
 8009986:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009988:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800998a:	b672      	cpsid	i
}
 800998c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800998e:	79bb      	ldrb	r3, [r7, #6]
 8009990:	b29b      	uxth	r3, r3
 8009992:	79f9      	ldrb	r1, [r7, #7]
 8009994:	683a      	ldr	r2, [r7, #0]
 8009996:	4806      	ldr	r0, [pc, #24]	; (80099b0 <SUBGRF_WriteBuffer+0x40>)
 8009998:	f7fa fe07 	bl	80045aa <HAL_SUBGHZ_WriteBuffer>
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f383 8810 	msr	PRIMASK, r3
}
 80099a6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80099a8:	bf00      	nop
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	2000032c 	.word	0x2000032c

080099b4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	4603      	mov	r3, r0
 80099bc:	6039      	str	r1, [r7, #0]
 80099be:	71fb      	strb	r3, [r7, #7]
 80099c0:	4613      	mov	r3, r2
 80099c2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099c4:	f3ef 8310 	mrs	r3, PRIMASK
 80099c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80099ca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80099cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80099ce:	b672      	cpsid	i
}
 80099d0:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80099d2:	79bb      	ldrb	r3, [r7, #6]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	79f9      	ldrb	r1, [r7, #7]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	4806      	ldr	r0, [pc, #24]	; (80099f4 <SUBGRF_ReadBuffer+0x40>)
 80099dc:	f7fa fe38 	bl	8004650 <HAL_SUBGHZ_ReadBuffer>
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f383 8810 	msr	PRIMASK, r3
}
 80099ea:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80099ec:	bf00      	nop
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	2000032c 	.word	0x2000032c

080099f8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	71fb      	strb	r3, [r7, #7]
 8009a04:	4613      	mov	r3, r2
 8009a06:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a08:	f3ef 8310 	mrs	r3, PRIMASK
 8009a0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009a10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a12:	b672      	cpsid	i
}
 8009a14:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8009a16:	88bb      	ldrh	r3, [r7, #4]
 8009a18:	79f9      	ldrb	r1, [r7, #7]
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	4806      	ldr	r0, [pc, #24]	; (8009a38 <SUBGRF_WriteCommand+0x40>)
 8009a1e:	f7fa fd11 	bl	8004444 <HAL_SUBGHZ_ExecSetCmd>
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	f383 8810 	msr	PRIMASK, r3
}
 8009a2c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009a2e:	bf00      	nop
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	2000032c 	.word	0x2000032c

08009a3c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	6039      	str	r1, [r7, #0]
 8009a46:	71fb      	strb	r3, [r7, #7]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a50:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a52:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009a54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a56:	b672      	cpsid	i
}
 8009a58:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8009a5a:	88bb      	ldrh	r3, [r7, #4]
 8009a5c:	79f9      	ldrb	r1, [r7, #7]
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	4806      	ldr	r0, [pc, #24]	; (8009a7c <SUBGRF_ReadCommand+0x40>)
 8009a62:	f7fa fd4e 	bl	8004502 <HAL_SUBGHZ_ExecGetCmd>
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f383 8810 	msr	PRIMASK, r3
}
 8009a70:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009a72:	bf00      	nop
 8009a74:	3718      	adds	r7, #24
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	2000032c 	.word	0x2000032c

08009a80 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	460a      	mov	r2, r1
 8009a8a:	71fb      	strb	r3, [r7, #7]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8009a90:	2301      	movs	r3, #1
 8009a92:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8009a94:	79bb      	ldrb	r3, [r7, #6]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d10d      	bne.n	8009ab6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8009a9a:	79fb      	ldrb	r3, [r7, #7]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d104      	bne.n	8009aaa <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8009aa4:	2004      	movs	r0, #4
 8009aa6:	f000 f8ef 	bl	8009c88 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8009aaa:	79fb      	ldrb	r3, [r7, #7]
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d107      	bne.n	8009ac0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	73fb      	strb	r3, [r7, #15]
 8009ab4:	e004      	b.n	8009ac0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8009ab6:	79bb      	ldrb	r3, [r7, #6]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8009abc:	2301      	movs	r3, #1
 8009abe:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 fad2 	bl	800a06c <RBI_ConfigRFSwitch>
}
 8009ac8:	bf00      	nop
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8009ada:	2301      	movs	r3, #1
 8009adc:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8009ade:	f000 fb23 	bl	800a128 <RBI_GetTxConfig>
 8009ae2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d016      	beq.n	8009b18 <SUBGRF_SetRfTxPower+0x48>
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	dc16      	bgt.n	8009b1e <SUBGRF_SetRfTxPower+0x4e>
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <SUBGRF_SetRfTxPower+0x2e>
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d00a      	beq.n	8009b12 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8009afc:	e00f      	b.n	8009b1e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8009afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b02:	2b0f      	cmp	r3, #15
 8009b04:	dd02      	ble.n	8009b0c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8009b06:	2302      	movs	r3, #2
 8009b08:	73fb      	strb	r3, [r7, #15]
            break;
 8009b0a:	e009      	b.n	8009b20 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	73fb      	strb	r3, [r7, #15]
            break;
 8009b10:	e006      	b.n	8009b20 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8009b12:	2301      	movs	r3, #1
 8009b14:	73fb      	strb	r3, [r7, #15]
            break;
 8009b16:	e003      	b.n	8009b20 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8009b18:	2302      	movs	r3, #2
 8009b1a:	73fb      	strb	r3, [r7, #15]
            break;
 8009b1c:	e000      	b.n	8009b20 <SUBGRF_SetRfTxPower+0x50>
            break;
 8009b1e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8009b20:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
 8009b26:	2202      	movs	r2, #2
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7ff fbcd 	bl	80092c8 <SUBGRF_SetTxParams>

    return paSelect;
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8009b38:	b480      	push	{r7}
 8009b3a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8009b3c:	2301      	movs	r3, #1
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bc80      	pop	{r7}
 8009b44:	4770      	bx	lr
	...

08009b48 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8009b50:	4b03      	ldr	r3, [pc, #12]	; (8009b60 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2001      	movs	r0, #1
 8009b56:	4798      	blx	r3
}
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	20000684 	.word	0x20000684

08009b64 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8009b6c:	4b03      	ldr	r3, [pc, #12]	; (8009b7c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2002      	movs	r0, #2
 8009b72:	4798      	blx	r3
}
 8009b74:	bf00      	nop
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	20000684 	.word	0x20000684

08009b80 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8009b88:	4b03      	ldr	r3, [pc, #12]	; (8009b98 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2040      	movs	r0, #64	; 0x40
 8009b8e:	4798      	blx	r3
}
 8009b90:	bf00      	nop
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	20000684 	.word	0x20000684

08009b9c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d002      	beq.n	8009bb4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d005      	beq.n	8009bbe <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8009bb2:	e00a      	b.n	8009bca <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8009bb4:	4b07      	ldr	r3, [pc, #28]	; (8009bd4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2080      	movs	r0, #128	; 0x80
 8009bba:	4798      	blx	r3
            break;
 8009bbc:	e005      	b.n	8009bca <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8009bbe:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009bc6:	4798      	blx	r3
            break;
 8009bc8:	bf00      	nop
    }
}
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20000684 	.word	0x20000684

08009bd8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8009be0:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009be8:	4798      	blx	r3
}
 8009bea:	bf00      	nop
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20000684 	.word	0x20000684

08009bf8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8009c00:	4b03      	ldr	r3, [pc, #12]	; (8009c10 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2020      	movs	r0, #32
 8009c06:	4798      	blx	r3
}
 8009c08:	bf00      	nop
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	20000684 	.word	0x20000684

08009c14 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8009c1c:	4b03      	ldr	r3, [pc, #12]	; (8009c2c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2004      	movs	r0, #4
 8009c22:	4798      	blx	r3
}
 8009c24:	bf00      	nop
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	20000684 	.word	0x20000684

08009c30 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8009c38:	4b03      	ldr	r3, [pc, #12]	; (8009c48 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2008      	movs	r0, #8
 8009c3e:	4798      	blx	r3
}
 8009c40:	bf00      	nop
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	20000684 	.word	0x20000684

08009c4c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8009c54:	4b03      	ldr	r3, [pc, #12]	; (8009c64 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2010      	movs	r0, #16
 8009c5a:	4798      	blx	r3
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	20000684 	.word	0x20000684

08009c68 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8009c70:	4b04      	ldr	r3, [pc, #16]	; (8009c84 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009c78:	4798      	blx	r3
}
 8009c7a:	bf00      	nop
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	20000684 	.word	0x20000684

08009c88 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8009c92:	f000 fa5f 	bl	800a154 <RBI_IsDCDC>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d112      	bne.n	8009cc2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8009c9c:	f640 1023 	movw	r0, #2339	; 0x923
 8009ca0:	f7ff fe0e 	bl	80098c0 <SUBGRF_ReadRegister>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
 8009caa:	f023 0306 	bic.w	r3, r3, #6
 8009cae:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8009cb0:	7bfa      	ldrb	r2, [r7, #15]
 8009cb2:	79fb      	ldrb	r3, [r7, #7]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	4619      	mov	r1, r3
 8009cba:	f640 1023 	movw	r0, #2339	; 0x923
 8009cbe:	f7ff fdeb 	bl	8009898 <SUBGRF_WriteRegister>
  }
}
 8009cc2:	bf00      	nop
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
	...

08009ccc <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8009cda:	231f      	movs	r3, #31
 8009cdc:	e016      	b.n	8009d0c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009cde:	2300      	movs	r3, #0
 8009ce0:	73fb      	strb	r3, [r7, #15]
 8009ce2:	e00f      	b.n	8009d04 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	4a0c      	ldr	r2, [pc, #48]	; (8009d18 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009ce8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d205      	bcs.n	8009cfe <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
 8009cf4:	4a08      	ldr	r2, [pc, #32]	; (8009d18 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009cf6:	00db      	lsls	r3, r3, #3
 8009cf8:	4413      	add	r3, r2
 8009cfa:	791b      	ldrb	r3, [r3, #4]
 8009cfc:	e006      	b.n	8009d0c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
 8009d00:	3301      	adds	r3, #1
 8009d02:	73fb      	strb	r3, [r7, #15]
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
 8009d06:	2b15      	cmp	r3, #21
 8009d08:	d9ec      	bls.n	8009ce4 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8009d0a:	e7fe      	b.n	8009d0a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bc80      	pop	{r7}
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	0800b5e0 	.word	0x0800b5e0

08009d1c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08a      	sub	sp, #40	; 0x28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8009d26:	4b35      	ldr	r3, [pc, #212]	; (8009dfc <SUBGRF_GetCFO+0xe0>)
 8009d28:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8009d2a:	f640 0007 	movw	r0, #2055	; 0x807
 8009d2e:	f7ff fdc7 	bl	80098c0 <SUBGRF_ReadRegister>
 8009d32:	4603      	mov	r3, r0
 8009d34:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8009d36:	7ffb      	ldrb	r3, [r7, #31]
 8009d38:	08db      	lsrs	r3, r3, #3
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	f003 0303 	and.w	r3, r3, #3
 8009d40:	3328      	adds	r3, #40	; 0x28
 8009d42:	443b      	add	r3, r7
 8009d44:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8009d48:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8009d4a:	7ffb      	ldrb	r3, [r7, #31]
 8009d4c:	f003 0307 	and.w	r3, r3, #7
 8009d50:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8009d52:	7fba      	ldrb	r2, [r7, #30]
 8009d54:	7f7b      	ldrb	r3, [r7, #29]
 8009d56:	3301      	adds	r3, #1
 8009d58:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	4b28      	ldr	r3, [pc, #160]	; (8009e00 <SUBGRF_GetCFO+0xe4>)
 8009d60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d64:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8009d66:	69ba      	ldr	r2, [r7, #24]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d6e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8009d70:	2301      	movs	r3, #1
 8009d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8009d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	fb02 f303 	mul.w	r3, r2, r3
 8009d80:	2b07      	cmp	r3, #7
 8009d82:	d802      	bhi.n	8009d8a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8009d84:	2302      	movs	r3, #2
 8009d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8009d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	fb02 f303 	mul.w	r3, r2, r3
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	d802      	bhi.n	8009d9e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8009d98:	2304      	movs	r3, #4
 8009d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8009d9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	fb02 f303 	mul.w	r3, r2, r3
 8009da8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8009daa:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8009dae:	f7ff fd87 	bl	80098c0 <SUBGRF_ReadRegister>
 8009db2:	4603      	mov	r3, r0
 8009db4:	021b      	lsls	r3, r3, #8
 8009db6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009dba:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8009dbc:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8009dc0:	f7ff fd7e 	bl	80098c0 <SUBGRF_ReadRegister>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d005      	beq.n	8009de4 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8009dde:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8009de2:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	095b      	lsrs	r3, r3, #5
 8009de8:	6a3a      	ldr	r2, [r7, #32]
 8009dea:	fb02 f303 	mul.w	r3, r2, r3
 8009dee:	11da      	asrs	r2, r3, #7
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	601a      	str	r2, [r3, #0]
}
 8009df4:	bf00      	nop
 8009df6:	3728      	adds	r7, #40	; 0x28
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	0c0a0804 	.word	0x0c0a0804
 8009e00:	01e84800 	.word	0x01e84800

08009e04 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 8009e12:	2300      	movs	r3, #0
 8009e14:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 8009e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e1a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8009e1c:	697b      	ldr	r3, [r7, #20]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	371c      	adds	r7, #28
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bc80      	pop	{r7}
 8009e26:	4770      	bx	lr

08009e28 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b087      	sub	sp, #28
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	4603      	mov	r3, r0
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8009e36:	2300      	movs	r3, #0
 8009e38:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8009e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e3e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8009e40:	697b      	ldr	r3, [r7, #20]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	371c      	adds	r7, #28
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bc80      	pop	{r7}
 8009e4a:	4770      	bx	lr

08009e4c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8009e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bc80      	pop	{r7}
 8009e64:	4770      	bx	lr

08009e66 <RFW_DeInit>:

void RFW_DeInit( void )
{
 8009e66:	b480      	push	{r7}
 8009e68:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8009e6a:	bf00      	nop
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bc80      	pop	{r7}
 8009e70:	4770      	bx	lr

08009e72 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 8009e72:	b480      	push	{r7}
 8009e74:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8009e76:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bc80      	pop	{r7}
 8009e7e:	4770      	bx	lr

08009e80 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8009e80:	b480      	push	{r7}
 8009e82:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8009e84:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bc80      	pop	{r7}
 8009e8c:	4770      	bx	lr

08009e8e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	4603      	mov	r3, r0
 8009e96:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8009e98:	bf00      	nop
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bc80      	pop	{r7}
 8009ea0:	4770      	bx	lr

08009ea2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b087      	sub	sp, #28
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	60f8      	str	r0, [r7, #12]
 8009eaa:	460b      	mov	r3, r1
 8009eac:	607a      	str	r2, [r7, #4]
 8009eae:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8009eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009eb4:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8009eb6:	697b      	ldr	r3, [r7, #20]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	371c      	adds	r7, #28
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bc80      	pop	{r7}
 8009ec0:	4770      	bx	lr

08009ec2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8009ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bc80      	pop	{r7}
 8009ed0:	4770      	bx	lr

08009ed2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8009ed6:	bf00      	nop
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bc80      	pop	{r7}
 8009edc:	4770      	bx	lr

08009ede <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8009ede:	b480      	push	{r7}
 8009ee0:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8009ee2:	bf00      	nop
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bc80      	pop	{r7}
 8009ee8:	4770      	bx	lr

08009eea <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bc80      	pop	{r7}
 8009efc:	4770      	bx	lr

08009efe <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8009f02:	f7f7 fc86 	bl	8001812 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8009f06:	f000 f809 	bl	8009f1c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8009f0a:	bf00      	nop
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 8009f12:	bf00      	nop
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bc80      	pop	{r7}
 8009f18:	4770      	bx	lr
	...

08009f1c <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8009f20:	4b0a      	ldr	r3, [pc, #40]	; (8009f4c <SubghzApp_Init+0x30>)
 8009f22:	4a0b      	ldr	r2, [pc, #44]	; (8009f50 <SubghzApp_Init+0x34>)
 8009f24:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8009f26:	4b09      	ldr	r3, [pc, #36]	; (8009f4c <SubghzApp_Init+0x30>)
 8009f28:	4a0a      	ldr	r2, [pc, #40]	; (8009f54 <SubghzApp_Init+0x38>)
 8009f2a:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8009f2c:	4b07      	ldr	r3, [pc, #28]	; (8009f4c <SubghzApp_Init+0x30>)
 8009f2e:	4a0a      	ldr	r2, [pc, #40]	; (8009f58 <SubghzApp_Init+0x3c>)
 8009f30:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8009f32:	4b06      	ldr	r3, [pc, #24]	; (8009f4c <SubghzApp_Init+0x30>)
 8009f34:	4a09      	ldr	r2, [pc, #36]	; (8009f5c <SubghzApp_Init+0x40>)
 8009f36:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8009f38:	4b04      	ldr	r3, [pc, #16]	; (8009f4c <SubghzApp_Init+0x30>)
 8009f3a:	4a09      	ldr	r2, [pc, #36]	; (8009f60 <SubghzApp_Init+0x44>)
 8009f3c:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8009f3e:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <SubghzApp_Init+0x48>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4802      	ldr	r0, [pc, #8]	; (8009f4c <SubghzApp_Init+0x30>)
 8009f44:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 8009f46:	bf00      	nop
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20000688 	.word	0x20000688
 8009f50:	08009f69 	.word	0x08009f69
 8009f54:	08009f75 	.word	0x08009f75
 8009f58:	08009f99 	.word	0x08009f99
 8009f5c:	08009fa5 	.word	0x08009fa5
 8009f60:	08009fb1 	.word	0x08009fb1
 8009f64:	0800b550 	.word	0x0800b550

08009f68 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 8009f6c:	bf00      	nop
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bc80      	pop	{r7}
 8009f72:	4770      	bx	lr

08009f74 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	4608      	mov	r0, r1
 8009f7e:	4611      	mov	r1, r2
 8009f80:	461a      	mov	r2, r3
 8009f82:	4603      	mov	r3, r0
 8009f84:	817b      	strh	r3, [r7, #10]
 8009f86:	460b      	mov	r3, r1
 8009f88:	813b      	strh	r3, [r7, #8]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 8009f8e:	bf00      	nop
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bc80      	pop	{r7}
 8009f96:	4770      	bx	lr

08009f98 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 8009f9c:	bf00      	nop
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bc80      	pop	{r7}
 8009fa2:	4770      	bx	lr

08009fa4 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 8009fa8:	bf00      	nop
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bc80      	pop	{r7}
 8009fae:	4770      	bx	lr

08009fb0 <OnRxError>:

static void OnRxError(void)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 8009fb4:	bf00      	nop
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bc80      	pop	{r7}
 8009fba:	4770      	bx	lr

08009fbc <LL_AHB2_GRP1_EnableClock>:
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4013      	ands	r3, r2
 8009fde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
}
 8009fe2:	bf00      	nop
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bc80      	pop	{r7}
 8009fea:	4770      	bx	lr

08009fec <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 8009ff6:	463b      	mov	r3, r7
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	605a      	str	r2, [r3, #4]
 8009ffe:	609a      	str	r2, [r3, #8]
 800a000:	60da      	str	r2, [r3, #12]
 800a002:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800a004:	2004      	movs	r0, #4
 800a006:	f7ff ffd9 	bl	8009fbc <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800a00a:	2310      	movs	r3, #16
 800a00c:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800a00e:	2301      	movs	r3, #1
 800a010:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800a012:	2300      	movs	r3, #0
 800a014:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a016:	2303      	movs	r3, #3
 800a018:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800a01a:	463b      	mov	r3, r7
 800a01c:	4619      	mov	r1, r3
 800a01e:	4812      	ldr	r0, [pc, #72]	; (800a068 <RBI_Init+0x7c>)
 800a020:	f7f8 fbac 	bl	800277c <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800a024:	2320      	movs	r3, #32
 800a026:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800a028:	463b      	mov	r3, r7
 800a02a:	4619      	mov	r1, r3
 800a02c:	480e      	ldr	r0, [pc, #56]	; (800a068 <RBI_Init+0x7c>)
 800a02e:	f7f8 fba5 	bl	800277c <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800a032:	2308      	movs	r3, #8
 800a034:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800a036:	463b      	mov	r3, r7
 800a038:	4619      	mov	r1, r3
 800a03a:	480b      	ldr	r0, [pc, #44]	; (800a068 <RBI_Init+0x7c>)
 800a03c:	f7f8 fb9e 	bl	800277c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800a040:	2200      	movs	r2, #0
 800a042:	2120      	movs	r1, #32
 800a044:	4808      	ldr	r0, [pc, #32]	; (800a068 <RBI_Init+0x7c>)
 800a046:	f7f8 fcf9 	bl	8002a3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800a04a:	2200      	movs	r2, #0
 800a04c:	2110      	movs	r1, #16
 800a04e:	4806      	ldr	r0, [pc, #24]	; (800a068 <RBI_Init+0x7c>)
 800a050:	f7f8 fcf4 	bl	8002a3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800a054:	2200      	movs	r2, #0
 800a056:	2108      	movs	r1, #8
 800a058:	4803      	ldr	r0, [pc, #12]	; (800a068 <RBI_Init+0x7c>)
 800a05a:	f7f8 fcef 	bl	8002a3c <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800a05e:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800a060:	4618      	mov	r0, r3
 800a062:	3718      	adds	r7, #24
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	48000800 	.word	0x48000800

0800a06c <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	4603      	mov	r3, r0
 800a074:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 800a07a:	79fb      	ldrb	r3, [r7, #7]
 800a07c:	2b03      	cmp	r3, #3
 800a07e:	d84b      	bhi.n	800a118 <RBI_ConfigRFSwitch+0xac>
 800a080:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <RBI_ConfigRFSwitch+0x1c>)
 800a082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a086:	bf00      	nop
 800a088:	0800a099 	.word	0x0800a099
 800a08c:	0800a0b9 	.word	0x0800a0b9
 800a090:	0800a0d9 	.word	0x0800a0d9
 800a094:	0800a0f9 	.word	0x0800a0f9
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 800a098:	2200      	movs	r2, #0
 800a09a:	2108      	movs	r1, #8
 800a09c:	4821      	ldr	r0, [pc, #132]	; (800a124 <RBI_ConfigRFSwitch+0xb8>)
 800a09e:	f7f8 fccd 	bl	8002a3c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2110      	movs	r1, #16
 800a0a6:	481f      	ldr	r0, [pc, #124]	; (800a124 <RBI_ConfigRFSwitch+0xb8>)
 800a0a8:	f7f8 fcc8 	bl	8002a3c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2120      	movs	r1, #32
 800a0b0:	481c      	ldr	r0, [pc, #112]	; (800a124 <RBI_ConfigRFSwitch+0xb8>)
 800a0b2:	f7f8 fcc3 	bl	8002a3c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800a0b6:	e030      	b.n	800a11a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	2108      	movs	r1, #8
 800a0bc:	4819      	ldr	r0, [pc, #100]	; (800a124 <RBI_ConfigRFSwitch+0xb8>)
 800a0be:	f7f8 fcbd 	bl	8002a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	2110      	movs	r1, #16
 800a0c6:	4817      	ldr	r0, [pc, #92]	; (800a124 <RBI_ConfigRFSwitch+0xb8>)
 800a0c8:	f7f8 fcb8 	bl	8002a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2120      	movs	r1, #32
 800a0d0:	4814      	ldr	r0, [pc, #80]	; (800a124 <RBI_ConfigRFSwitch+0xb8>)
 800a0d2:	f7f8 fcb3 	bl	8002a3c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800a0d6:	e020      	b.n	800a11a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a0d8:	2201      	movs	r2, #1
 800a0da:	2108      	movs	r1, #8
 800a0dc:	4811      	ldr	r0, [pc, #68]	; (800a124 <RBI_ConfigRFSwitch+0xb8>)
 800a0de:	f7f8 fcad 	bl	8002a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	2110      	movs	r1, #16
 800a0e6:	480f      	ldr	r0, [pc, #60]	; (800a124 <RBI_ConfigRFSwitch+0xb8>)
 800a0e8:	f7f8 fca8 	bl	8002a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	2120      	movs	r1, #32
 800a0f0:	480c      	ldr	r0, [pc, #48]	; (800a124 <RBI_ConfigRFSwitch+0xb8>)
 800a0f2:	f7f8 fca3 	bl	8002a3c <HAL_GPIO_WritePin>
		break;
 800a0f6:	e010      	b.n	800a11a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	2108      	movs	r1, #8
 800a0fc:	4809      	ldr	r0, [pc, #36]	; (800a124 <RBI_ConfigRFSwitch+0xb8>)
 800a0fe:	f7f8 fc9d 	bl	8002a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800a102:	2200      	movs	r2, #0
 800a104:	2110      	movs	r1, #16
 800a106:	4807      	ldr	r0, [pc, #28]	; (800a124 <RBI_ConfigRFSwitch+0xb8>)
 800a108:	f7f8 fc98 	bl	8002a3c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800a10c:	2201      	movs	r2, #1
 800a10e:	2120      	movs	r1, #32
 800a110:	4804      	ldr	r0, [pc, #16]	; (800a124 <RBI_ConfigRFSwitch+0xb8>)
 800a112:	f7f8 fc93 	bl	8002a3c <HAL_GPIO_WritePin>
		break;
 800a116:	e000      	b.n	800a11a <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 800a118:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800a11a:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	48000800 	.word	0x48000800

0800a128 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800a12e:	2300      	movs	r3, #0
 800a130:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800a132:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a134:	4618      	mov	r0, r3
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	bc80      	pop	{r7}
 800a13c:	4770      	bx	lr

0800a13e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800a144:	2301      	movs	r3, #1
 800a146:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800a148:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	bc80      	pop	{r7}
 800a152:	4770      	bx	lr

0800a154 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800a15a:	2301      	movs	r3, #1
 800a15c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800a15e:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a160:	4618      	mov	r0, r3
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	bc80      	pop	{r7}
 800a168:	4770      	bx	lr

0800a16a <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a16a:	b480      	push	{r7}
 800a16c:	b085      	sub	sp, #20
 800a16e:	af00      	add	r7, sp, #0
 800a170:	4603      	mov	r3, r0
 800a172:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800a174:	2300      	movs	r3, #0
 800a176:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800a178:	79fb      	ldrb	r3, [r7, #7]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d102      	bne.n	800a184 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800a17e:	230f      	movs	r3, #15
 800a180:	60fb      	str	r3, [r7, #12]
 800a182:	e001      	b.n	800a188 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800a184:	2316      	movs	r3, #22
 800a186:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800a188:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	bc80      	pop	{r7}
 800a192:	4770      	bx	lr

0800a194 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	613b      	str	r3, [r7, #16]

  while( size-- )
 800a1aa:	e007      	b.n	800a1bc <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	1c53      	adds	r3, r2, #1
 800a1b0:	613b      	str	r3, [r7, #16]
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	1c59      	adds	r1, r3, #1
 800a1b6:	6179      	str	r1, [r7, #20]
 800a1b8:	7812      	ldrb	r2, [r2, #0]
 800a1ba:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a1bc:	88fb      	ldrh	r3, [r7, #6]
 800a1be:	1e5a      	subs	r2, r3, #1
 800a1c0:	80fa      	strh	r2, [r7, #6]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1f2      	bne.n	800a1ac <UTIL_MEM_cpy_8+0x18>
    }
}
 800a1c6:	bf00      	nop
 800a1c8:	bf00      	nop
 800a1ca:	371c      	adds	r7, #28
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bc80      	pop	{r7}
 800a1d0:	4770      	bx	lr

0800a1d2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	460b      	mov	r3, r1
 800a1dc:	70fb      	strb	r3, [r7, #3]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800a1e6:	e004      	b.n	800a1f2 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	1c5a      	adds	r2, r3, #1
 800a1ec:	60fa      	str	r2, [r7, #12]
 800a1ee:	78fa      	ldrb	r2, [r7, #3]
 800a1f0:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a1f2:	883b      	ldrh	r3, [r7, #0]
 800a1f4:	1e5a      	subs	r2, r3, #1
 800a1f6:	803a      	strh	r2, [r7, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1f5      	bne.n	800a1e8 <UTIL_MEM_set_8+0x16>
  }
}
 800a1fc:	bf00      	nop
 800a1fe:	bf00      	nop
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	bc80      	pop	{r7}
 800a206:	4770      	bx	lr

0800a208 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	603b      	str	r3, [r7, #0]
 800a214:	4613      	mov	r3, r2
 800a216:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d023      	beq.n	800a266 <UTIL_TIMER_Create+0x5e>
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d020      	beq.n	800a266 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800a22a:	4b11      	ldr	r3, [pc, #68]	; (800a270 <UTIL_TIMER_Create+0x68>)
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	68b8      	ldr	r0, [r7, #8]
 800a230:	4798      	blx	r3
 800a232:	4602      	mov	r2, r0
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	69ba      	ldr	r2, [r7, #24]
 800a254:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	79fa      	ldrb	r2, [r7, #7]
 800a25a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	e000      	b.n	800a268 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800a266:	2301      	movs	r3, #1
  }
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	0800b4fc 	.word	0x0800b4fc

0800a274 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b08a      	sub	sp, #40	; 0x28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d056      	beq.n	800a336 <UTIL_TIMER_Start+0xc2>
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 f929 	bl	800a4e0 <TimerExists>
 800a28e:	4603      	mov	r3, r0
 800a290:	f083 0301 	eor.w	r3, r3, #1
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b00      	cmp	r3, #0
 800a298:	d04d      	beq.n	800a336 <UTIL_TIMER_Start+0xc2>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	7a5b      	ldrb	r3, [r3, #9]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d149      	bne.n	800a336 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2a2:	f3ef 8310 	mrs	r3, PRIMASK
 800a2a6:	613b      	str	r3, [r7, #16]
  return(result);
 800a2a8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800a2aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2ac:	b672      	cpsid	i
}
 800a2ae:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800a2b6:	4b24      	ldr	r3, [pc, #144]	; (800a348 <UTIL_TIMER_Start+0xd4>)
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	4798      	blx	r3
 800a2bc:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800a2be:	6a3a      	ldr	r2, [r7, #32]
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d201      	bcs.n	800a2ca <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a3a      	ldr	r2, [r7, #32]
 800a2ce:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800a2e2:	4b1a      	ldr	r3, [pc, #104]	; (800a34c <UTIL_TIMER_Start+0xd8>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d106      	bne.n	800a2f8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800a2ea:	4b17      	ldr	r3, [pc, #92]	; (800a348 <UTIL_TIMER_Start+0xd4>)
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 f96b 	bl	800a5cc <TimerInsertNewHeadTimer>
 800a2f6:	e017      	b.n	800a328 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800a2f8:	4b13      	ldr	r3, [pc, #76]	; (800a348 <UTIL_TIMER_Start+0xd4>)
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	4798      	blx	r3
 800a2fe:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	441a      	add	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	4b0e      	ldr	r3, [pc, #56]	; (800a34c <UTIL_TIMER_Start+0xd8>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	429a      	cmp	r2, r3
 800a318:	d203      	bcs.n	800a322 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f956 	bl	800a5cc <TimerInsertNewHeadTimer>
 800a320:	e002      	b.n	800a328 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f922 	bl	800a56c <TimerInsertTimer>
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f383 8810 	msr	PRIMASK, r3
}
 800a332:	bf00      	nop
  {
 800a334:	e002      	b.n	800a33c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800a336:	2301      	movs	r3, #1
 800a338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800a33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a340:	4618      	mov	r0, r3
 800a342:	3728      	adds	r7, #40	; 0x28
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	0800b4fc 	.word	0x0800b4fc
 800a34c:	200006a4 	.word	0x200006a4

0800a350 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d05b      	beq.n	800a41a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a362:	f3ef 8310 	mrs	r3, PRIMASK
 800a366:	60fb      	str	r3, [r7, #12]
  return(result);
 800a368:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800a36a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a36c:	b672      	cpsid	i
}
 800a36e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800a370:	4b2d      	ldr	r3, [pc, #180]	; (800a428 <UTIL_TIMER_Stop+0xd8>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800a376:	4b2c      	ldr	r3, [pc, #176]	; (800a428 <UTIL_TIMER_Stop+0xd8>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800a382:	4b29      	ldr	r3, [pc, #164]	; (800a428 <UTIL_TIMER_Stop+0xd8>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d041      	beq.n	800a40e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800a390:	4b25      	ldr	r3, [pc, #148]	; (800a428 <UTIL_TIMER_Stop+0xd8>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	429a      	cmp	r2, r3
 800a398:	d134      	bne.n	800a404 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800a39a:	4b23      	ldr	r3, [pc, #140]	; (800a428 <UTIL_TIMER_Stop+0xd8>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800a3a2:	4b21      	ldr	r3, [pc, #132]	; (800a428 <UTIL_TIMER_Stop+0xd8>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00a      	beq.n	800a3c2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800a3ac:	4b1e      	ldr	r3, [pc, #120]	; (800a428 <UTIL_TIMER_Stop+0xd8>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	4a1d      	ldr	r2, [pc, #116]	; (800a428 <UTIL_TIMER_Stop+0xd8>)
 800a3b4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800a3b6:	4b1c      	ldr	r3, [pc, #112]	; (800a428 <UTIL_TIMER_Stop+0xd8>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 f8ac 	bl	800a518 <TimerSetTimeout>
 800a3c0:	e023      	b.n	800a40a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800a3c2:	4b1a      	ldr	r3, [pc, #104]	; (800a42c <UTIL_TIMER_Stop+0xdc>)
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	4798      	blx	r3
            TimerListHead = NULL;
 800a3c8:	4b17      	ldr	r3, [pc, #92]	; (800a428 <UTIL_TIMER_Stop+0xd8>)
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	601a      	str	r2, [r3, #0]
 800a3ce:	e01c      	b.n	800a40a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800a3d0:	697a      	ldr	r2, [r7, #20]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d110      	bne.n	800a3fa <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	695b      	ldr	r3, [r3, #20]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d006      	beq.n	800a3ee <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800a3ec:	e00d      	b.n	800a40a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	615a      	str	r2, [r3, #20]
            break;
 800a3f8:	e007      	b.n	800a40a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	695b      	ldr	r3, [r3, #20]
 800a402:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1e2      	bne.n	800a3d0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800a40a:	2300      	movs	r3, #0
 800a40c:	77fb      	strb	r3, [r7, #31]
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	f383 8810 	msr	PRIMASK, r3
}
 800a418:	e001      	b.n	800a41e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800a41a:	2301      	movs	r3, #1
 800a41c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800a41e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3720      	adds	r7, #32
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	200006a4 	.word	0x200006a4
 800a42c:	0800b4fc 	.word	0x0800b4fc

0800a430 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a43a:	2300      	movs	r3, #0
 800a43c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d102      	bne.n	800a44a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800a444:	2301      	movs	r3, #1
 800a446:	73fb      	strb	r3, [r7, #15]
 800a448:	e014      	b.n	800a474 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800a44a:	4b0d      	ldr	r3, [pc, #52]	; (800a480 <UTIL_TIMER_SetPeriod+0x50>)
 800a44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44e:	6838      	ldr	r0, [r7, #0]
 800a450:	4798      	blx	r3
 800a452:	4602      	mov	r2, r0
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f841 	bl	800a4e0 <TimerExists>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d007      	beq.n	800a474 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f7ff ff73 	bl	800a350 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7ff ff02 	bl	800a274 <UTIL_TIMER_Start>
 800a470:	4603      	mov	r3, r0
 800a472:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800a474:	7bfb      	ldrb	r3, [r7, #15]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	0800b4fc 	.word	0x0800b4fc

0800a484 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800a48a:	4b06      	ldr	r3, [pc, #24]	; (800a4a4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800a48c:	69db      	ldr	r3, [r3, #28]
 800a48e:	4798      	blx	r3
 800a490:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800a492:	4b04      	ldr	r3, [pc, #16]	; (800a4a4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800a494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	4798      	blx	r3
 800a49a:	4603      	mov	r3, r0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	0800b4fc 	.word	0x0800b4fc

0800a4a8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800a4b0:	4b0a      	ldr	r3, [pc, #40]	; (800a4dc <UTIL_TIMER_GetElapsedTime+0x34>)
 800a4b2:	69db      	ldr	r3, [r3, #28]
 800a4b4:	4798      	blx	r3
 800a4b6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800a4b8:	4b08      	ldr	r3, [pc, #32]	; (800a4dc <UTIL_TIMER_GetElapsedTime+0x34>)
 800a4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	4798      	blx	r3
 800a4c0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800a4c2:	4b06      	ldr	r3, [pc, #24]	; (800a4dc <UTIL_TIMER_GetElapsedTime+0x34>)
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c6:	68f9      	ldr	r1, [r7, #12]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	1a8a      	subs	r2, r1, r2
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	4798      	blx	r3
 800a4d0:	4603      	mov	r3, r0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	0800b4fc 	.word	0x0800b4fc

0800a4e0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a4e8:	4b0a      	ldr	r3, [pc, #40]	; (800a514 <TimerExists+0x34>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800a4ee:	e008      	b.n	800a502 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d101      	bne.n	800a4fc <TimerExists+0x1c>
    {
      return true;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e006      	b.n	800a50a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1f3      	bne.n	800a4f0 <TimerExists+0x10>
  }
  return false;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	bc80      	pop	{r7}
 800a512:	4770      	bx	lr
 800a514:	200006a4 	.word	0x200006a4

0800a518 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800a518:	b590      	push	{r4, r7, lr}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800a520:	4b11      	ldr	r3, [pc, #68]	; (800a568 <TimerSetTimeout+0x50>)
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	4798      	blx	r3
 800a526:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681c      	ldr	r4, [r3, #0]
 800a532:	4b0d      	ldr	r3, [pc, #52]	; (800a568 <TimerSetTimeout+0x50>)
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	4798      	blx	r3
 800a538:	4602      	mov	r2, r0
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	4413      	add	r3, r2
 800a53e:	429c      	cmp	r4, r3
 800a540:	d207      	bcs.n	800a552 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800a542:	4b09      	ldr	r3, [pc, #36]	; (800a568 <TimerSetTimeout+0x50>)
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	4798      	blx	r3
 800a548:	4602      	mov	r2, r0
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	441a      	add	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800a552:	4b05      	ldr	r3, [pc, #20]	; (800a568 <TimerSetTimeout+0x50>)
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	6812      	ldr	r2, [r2, #0]
 800a55a:	4610      	mov	r0, r2
 800a55c:	4798      	blx	r3
}
 800a55e:	bf00      	nop
 800a560:	3714      	adds	r7, #20
 800a562:	46bd      	mov	sp, r7
 800a564:	bd90      	pop	{r4, r7, pc}
 800a566:	bf00      	nop
 800a568:	0800b4fc 	.word	0x0800b4fc

0800a56c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a574:	4b14      	ldr	r3, [pc, #80]	; (800a5c8 <TimerInsertTimer+0x5c>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800a57a:	4b13      	ldr	r3, [pc, #76]	; (800a5c8 <TimerInsertTimer+0x5c>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	695b      	ldr	r3, [r3, #20]
 800a580:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800a582:	e012      	b.n	800a5aa <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d905      	bls.n	800a59c <TimerInsertTimer+0x30>
    {
        cur = next;
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	60bb      	str	r3, [r7, #8]
 800a59a:	e006      	b.n	800a5aa <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	615a      	str	r2, [r3, #20]
        return;
 800a5a8:	e009      	b.n	800a5be <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	695b      	ldr	r3, [r3, #20]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1e8      	bne.n	800a584 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	615a      	str	r2, [r3, #20]
}
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bc80      	pop	{r7}
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	200006a4 	.word	0x200006a4

0800a5cc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a5d4:	4b0b      	ldr	r3, [pc, #44]	; (800a604 <TimerInsertNewHeadTimer+0x38>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d002      	beq.n	800a5e6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800a5ec:	4a05      	ldr	r2, [pc, #20]	; (800a604 <TimerInsertNewHeadTimer+0x38>)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800a5f2:	4b04      	ldr	r3, [pc, #16]	; (800a604 <TimerInsertNewHeadTimer+0x38>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7ff ff8e 	bl	800a518 <TimerSetTimeout>
}
 800a5fc:	bf00      	nop
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	200006a4 	.word	0x200006a4

0800a608 <_vsniprintf_r>:
 800a608:	b530      	push	{r4, r5, lr}
 800a60a:	4614      	mov	r4, r2
 800a60c:	2c00      	cmp	r4, #0
 800a60e:	b09b      	sub	sp, #108	; 0x6c
 800a610:	4605      	mov	r5, r0
 800a612:	461a      	mov	r2, r3
 800a614:	da05      	bge.n	800a622 <_vsniprintf_r+0x1a>
 800a616:	238b      	movs	r3, #139	; 0x8b
 800a618:	6003      	str	r3, [r0, #0]
 800a61a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a61e:	b01b      	add	sp, #108	; 0x6c
 800a620:	bd30      	pop	{r4, r5, pc}
 800a622:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a626:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a62a:	bf14      	ite	ne
 800a62c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a630:	4623      	moveq	r3, r4
 800a632:	9302      	str	r3, [sp, #8]
 800a634:	9305      	str	r3, [sp, #20]
 800a636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a63a:	9100      	str	r1, [sp, #0]
 800a63c:	9104      	str	r1, [sp, #16]
 800a63e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a642:	4669      	mov	r1, sp
 800a644:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a646:	f000 f8b5 	bl	800a7b4 <_svfiprintf_r>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	bfbc      	itt	lt
 800a64e:	238b      	movlt	r3, #139	; 0x8b
 800a650:	602b      	strlt	r3, [r5, #0]
 800a652:	2c00      	cmp	r4, #0
 800a654:	d0e3      	beq.n	800a61e <_vsniprintf_r+0x16>
 800a656:	9b00      	ldr	r3, [sp, #0]
 800a658:	2200      	movs	r2, #0
 800a65a:	701a      	strb	r2, [r3, #0]
 800a65c:	e7df      	b.n	800a61e <_vsniprintf_r+0x16>
	...

0800a660 <vsniprintf>:
 800a660:	b507      	push	{r0, r1, r2, lr}
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	4613      	mov	r3, r2
 800a666:	460a      	mov	r2, r1
 800a668:	4601      	mov	r1, r0
 800a66a:	4803      	ldr	r0, [pc, #12]	; (800a678 <vsniprintf+0x18>)
 800a66c:	6800      	ldr	r0, [r0, #0]
 800a66e:	f7ff ffcb 	bl	800a608 <_vsniprintf_r>
 800a672:	b003      	add	sp, #12
 800a674:	f85d fb04 	ldr.w	pc, [sp], #4
 800a678:	2000005c 	.word	0x2000005c

0800a67c <memset>:
 800a67c:	4402      	add	r2, r0
 800a67e:	4603      	mov	r3, r0
 800a680:	4293      	cmp	r3, r2
 800a682:	d100      	bne.n	800a686 <memset+0xa>
 800a684:	4770      	bx	lr
 800a686:	f803 1b01 	strb.w	r1, [r3], #1
 800a68a:	e7f9      	b.n	800a680 <memset+0x4>

0800a68c <__errno>:
 800a68c:	4b01      	ldr	r3, [pc, #4]	; (800a694 <__errno+0x8>)
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	2000005c 	.word	0x2000005c

0800a698 <__libc_init_array>:
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	4d0d      	ldr	r5, [pc, #52]	; (800a6d0 <__libc_init_array+0x38>)
 800a69c:	4c0d      	ldr	r4, [pc, #52]	; (800a6d4 <__libc_init_array+0x3c>)
 800a69e:	1b64      	subs	r4, r4, r5
 800a6a0:	10a4      	asrs	r4, r4, #2
 800a6a2:	2600      	movs	r6, #0
 800a6a4:	42a6      	cmp	r6, r4
 800a6a6:	d109      	bne.n	800a6bc <__libc_init_array+0x24>
 800a6a8:	4d0b      	ldr	r5, [pc, #44]	; (800a6d8 <__libc_init_array+0x40>)
 800a6aa:	4c0c      	ldr	r4, [pc, #48]	; (800a6dc <__libc_init_array+0x44>)
 800a6ac:	f000 fc68 	bl	800af80 <_init>
 800a6b0:	1b64      	subs	r4, r4, r5
 800a6b2:	10a4      	asrs	r4, r4, #2
 800a6b4:	2600      	movs	r6, #0
 800a6b6:	42a6      	cmp	r6, r4
 800a6b8:	d105      	bne.n	800a6c6 <__libc_init_array+0x2e>
 800a6ba:	bd70      	pop	{r4, r5, r6, pc}
 800a6bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6c0:	4798      	blx	r3
 800a6c2:	3601      	adds	r6, #1
 800a6c4:	e7ee      	b.n	800a6a4 <__libc_init_array+0xc>
 800a6c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ca:	4798      	blx	r3
 800a6cc:	3601      	adds	r6, #1
 800a6ce:	e7f2      	b.n	800a6b6 <__libc_init_array+0x1e>
 800a6d0:	0800b6cc 	.word	0x0800b6cc
 800a6d4:	0800b6cc 	.word	0x0800b6cc
 800a6d8:	0800b6cc 	.word	0x0800b6cc
 800a6dc:	0800b6d0 	.word	0x0800b6d0

0800a6e0 <__retarget_lock_acquire_recursive>:
 800a6e0:	4770      	bx	lr

0800a6e2 <__retarget_lock_release_recursive>:
 800a6e2:	4770      	bx	lr

0800a6e4 <memcpy>:
 800a6e4:	440a      	add	r2, r1
 800a6e6:	4291      	cmp	r1, r2
 800a6e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a6ec:	d100      	bne.n	800a6f0 <memcpy+0xc>
 800a6ee:	4770      	bx	lr
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6fa:	4291      	cmp	r1, r2
 800a6fc:	d1f9      	bne.n	800a6f2 <memcpy+0xe>
 800a6fe:	bd10      	pop	{r4, pc}

0800a700 <__ssputs_r>:
 800a700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a704:	688e      	ldr	r6, [r1, #8]
 800a706:	461f      	mov	r7, r3
 800a708:	42be      	cmp	r6, r7
 800a70a:	680b      	ldr	r3, [r1, #0]
 800a70c:	4682      	mov	sl, r0
 800a70e:	460c      	mov	r4, r1
 800a710:	4690      	mov	r8, r2
 800a712:	d82c      	bhi.n	800a76e <__ssputs_r+0x6e>
 800a714:	898a      	ldrh	r2, [r1, #12]
 800a716:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a71a:	d026      	beq.n	800a76a <__ssputs_r+0x6a>
 800a71c:	6965      	ldr	r5, [r4, #20]
 800a71e:	6909      	ldr	r1, [r1, #16]
 800a720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a724:	eba3 0901 	sub.w	r9, r3, r1
 800a728:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a72c:	1c7b      	adds	r3, r7, #1
 800a72e:	444b      	add	r3, r9
 800a730:	106d      	asrs	r5, r5, #1
 800a732:	429d      	cmp	r5, r3
 800a734:	bf38      	it	cc
 800a736:	461d      	movcc	r5, r3
 800a738:	0553      	lsls	r3, r2, #21
 800a73a:	d527      	bpl.n	800a78c <__ssputs_r+0x8c>
 800a73c:	4629      	mov	r1, r5
 800a73e:	f000 f957 	bl	800a9f0 <_malloc_r>
 800a742:	4606      	mov	r6, r0
 800a744:	b360      	cbz	r0, 800a7a0 <__ssputs_r+0xa0>
 800a746:	6921      	ldr	r1, [r4, #16]
 800a748:	464a      	mov	r2, r9
 800a74a:	f7ff ffcb 	bl	800a6e4 <memcpy>
 800a74e:	89a3      	ldrh	r3, [r4, #12]
 800a750:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a758:	81a3      	strh	r3, [r4, #12]
 800a75a:	6126      	str	r6, [r4, #16]
 800a75c:	6165      	str	r5, [r4, #20]
 800a75e:	444e      	add	r6, r9
 800a760:	eba5 0509 	sub.w	r5, r5, r9
 800a764:	6026      	str	r6, [r4, #0]
 800a766:	60a5      	str	r5, [r4, #8]
 800a768:	463e      	mov	r6, r7
 800a76a:	42be      	cmp	r6, r7
 800a76c:	d900      	bls.n	800a770 <__ssputs_r+0x70>
 800a76e:	463e      	mov	r6, r7
 800a770:	6820      	ldr	r0, [r4, #0]
 800a772:	4632      	mov	r2, r6
 800a774:	4641      	mov	r1, r8
 800a776:	f000 fb86 	bl	800ae86 <memmove>
 800a77a:	68a3      	ldr	r3, [r4, #8]
 800a77c:	1b9b      	subs	r3, r3, r6
 800a77e:	60a3      	str	r3, [r4, #8]
 800a780:	6823      	ldr	r3, [r4, #0]
 800a782:	4433      	add	r3, r6
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	2000      	movs	r0, #0
 800a788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a78c:	462a      	mov	r2, r5
 800a78e:	f000 fb4b 	bl	800ae28 <_realloc_r>
 800a792:	4606      	mov	r6, r0
 800a794:	2800      	cmp	r0, #0
 800a796:	d1e0      	bne.n	800a75a <__ssputs_r+0x5a>
 800a798:	6921      	ldr	r1, [r4, #16]
 800a79a:	4650      	mov	r0, sl
 800a79c:	f000 fb9e 	bl	800aedc <_free_r>
 800a7a0:	230c      	movs	r3, #12
 800a7a2:	f8ca 3000 	str.w	r3, [sl]
 800a7a6:	89a3      	ldrh	r3, [r4, #12]
 800a7a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ac:	81a3      	strh	r3, [r4, #12]
 800a7ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7b2:	e7e9      	b.n	800a788 <__ssputs_r+0x88>

0800a7b4 <_svfiprintf_r>:
 800a7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b8:	4698      	mov	r8, r3
 800a7ba:	898b      	ldrh	r3, [r1, #12]
 800a7bc:	061b      	lsls	r3, r3, #24
 800a7be:	b09d      	sub	sp, #116	; 0x74
 800a7c0:	4607      	mov	r7, r0
 800a7c2:	460d      	mov	r5, r1
 800a7c4:	4614      	mov	r4, r2
 800a7c6:	d50e      	bpl.n	800a7e6 <_svfiprintf_r+0x32>
 800a7c8:	690b      	ldr	r3, [r1, #16]
 800a7ca:	b963      	cbnz	r3, 800a7e6 <_svfiprintf_r+0x32>
 800a7cc:	2140      	movs	r1, #64	; 0x40
 800a7ce:	f000 f90f 	bl	800a9f0 <_malloc_r>
 800a7d2:	6028      	str	r0, [r5, #0]
 800a7d4:	6128      	str	r0, [r5, #16]
 800a7d6:	b920      	cbnz	r0, 800a7e2 <_svfiprintf_r+0x2e>
 800a7d8:	230c      	movs	r3, #12
 800a7da:	603b      	str	r3, [r7, #0]
 800a7dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7e0:	e0d0      	b.n	800a984 <_svfiprintf_r+0x1d0>
 800a7e2:	2340      	movs	r3, #64	; 0x40
 800a7e4:	616b      	str	r3, [r5, #20]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ea:	2320      	movs	r3, #32
 800a7ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7f4:	2330      	movs	r3, #48	; 0x30
 800a7f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a99c <_svfiprintf_r+0x1e8>
 800a7fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7fe:	f04f 0901 	mov.w	r9, #1
 800a802:	4623      	mov	r3, r4
 800a804:	469a      	mov	sl, r3
 800a806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a80a:	b10a      	cbz	r2, 800a810 <_svfiprintf_r+0x5c>
 800a80c:	2a25      	cmp	r2, #37	; 0x25
 800a80e:	d1f9      	bne.n	800a804 <_svfiprintf_r+0x50>
 800a810:	ebba 0b04 	subs.w	fp, sl, r4
 800a814:	d00b      	beq.n	800a82e <_svfiprintf_r+0x7a>
 800a816:	465b      	mov	r3, fp
 800a818:	4622      	mov	r2, r4
 800a81a:	4629      	mov	r1, r5
 800a81c:	4638      	mov	r0, r7
 800a81e:	f7ff ff6f 	bl	800a700 <__ssputs_r>
 800a822:	3001      	adds	r0, #1
 800a824:	f000 80a9 	beq.w	800a97a <_svfiprintf_r+0x1c6>
 800a828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a82a:	445a      	add	r2, fp
 800a82c:	9209      	str	r2, [sp, #36]	; 0x24
 800a82e:	f89a 3000 	ldrb.w	r3, [sl]
 800a832:	2b00      	cmp	r3, #0
 800a834:	f000 80a1 	beq.w	800a97a <_svfiprintf_r+0x1c6>
 800a838:	2300      	movs	r3, #0
 800a83a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a83e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a842:	f10a 0a01 	add.w	sl, sl, #1
 800a846:	9304      	str	r3, [sp, #16]
 800a848:	9307      	str	r3, [sp, #28]
 800a84a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a84e:	931a      	str	r3, [sp, #104]	; 0x68
 800a850:	4654      	mov	r4, sl
 800a852:	2205      	movs	r2, #5
 800a854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a858:	4850      	ldr	r0, [pc, #320]	; (800a99c <_svfiprintf_r+0x1e8>)
 800a85a:	f7f5 fc91 	bl	8000180 <memchr>
 800a85e:	9a04      	ldr	r2, [sp, #16]
 800a860:	b9d8      	cbnz	r0, 800a89a <_svfiprintf_r+0xe6>
 800a862:	06d0      	lsls	r0, r2, #27
 800a864:	bf44      	itt	mi
 800a866:	2320      	movmi	r3, #32
 800a868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a86c:	0711      	lsls	r1, r2, #28
 800a86e:	bf44      	itt	mi
 800a870:	232b      	movmi	r3, #43	; 0x2b
 800a872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a876:	f89a 3000 	ldrb.w	r3, [sl]
 800a87a:	2b2a      	cmp	r3, #42	; 0x2a
 800a87c:	d015      	beq.n	800a8aa <_svfiprintf_r+0xf6>
 800a87e:	9a07      	ldr	r2, [sp, #28]
 800a880:	4654      	mov	r4, sl
 800a882:	2000      	movs	r0, #0
 800a884:	f04f 0c0a 	mov.w	ip, #10
 800a888:	4621      	mov	r1, r4
 800a88a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a88e:	3b30      	subs	r3, #48	; 0x30
 800a890:	2b09      	cmp	r3, #9
 800a892:	d94d      	bls.n	800a930 <_svfiprintf_r+0x17c>
 800a894:	b1b0      	cbz	r0, 800a8c4 <_svfiprintf_r+0x110>
 800a896:	9207      	str	r2, [sp, #28]
 800a898:	e014      	b.n	800a8c4 <_svfiprintf_r+0x110>
 800a89a:	eba0 0308 	sub.w	r3, r0, r8
 800a89e:	fa09 f303 	lsl.w	r3, r9, r3
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	46a2      	mov	sl, r4
 800a8a8:	e7d2      	b.n	800a850 <_svfiprintf_r+0x9c>
 800a8aa:	9b03      	ldr	r3, [sp, #12]
 800a8ac:	1d19      	adds	r1, r3, #4
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	9103      	str	r1, [sp, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	bfbb      	ittet	lt
 800a8b6:	425b      	neglt	r3, r3
 800a8b8:	f042 0202 	orrlt.w	r2, r2, #2
 800a8bc:	9307      	strge	r3, [sp, #28]
 800a8be:	9307      	strlt	r3, [sp, #28]
 800a8c0:	bfb8      	it	lt
 800a8c2:	9204      	strlt	r2, [sp, #16]
 800a8c4:	7823      	ldrb	r3, [r4, #0]
 800a8c6:	2b2e      	cmp	r3, #46	; 0x2e
 800a8c8:	d10c      	bne.n	800a8e4 <_svfiprintf_r+0x130>
 800a8ca:	7863      	ldrb	r3, [r4, #1]
 800a8cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ce:	d134      	bne.n	800a93a <_svfiprintf_r+0x186>
 800a8d0:	9b03      	ldr	r3, [sp, #12]
 800a8d2:	1d1a      	adds	r2, r3, #4
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	9203      	str	r2, [sp, #12]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	bfb8      	it	lt
 800a8dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a8e0:	3402      	adds	r4, #2
 800a8e2:	9305      	str	r3, [sp, #20]
 800a8e4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a9a0 <_svfiprintf_r+0x1ec>
 800a8e8:	7821      	ldrb	r1, [r4, #0]
 800a8ea:	2203      	movs	r2, #3
 800a8ec:	4650      	mov	r0, sl
 800a8ee:	f7f5 fc47 	bl	8000180 <memchr>
 800a8f2:	b138      	cbz	r0, 800a904 <_svfiprintf_r+0x150>
 800a8f4:	9b04      	ldr	r3, [sp, #16]
 800a8f6:	eba0 000a 	sub.w	r0, r0, sl
 800a8fa:	2240      	movs	r2, #64	; 0x40
 800a8fc:	4082      	lsls	r2, r0
 800a8fe:	4313      	orrs	r3, r2
 800a900:	3401      	adds	r4, #1
 800a902:	9304      	str	r3, [sp, #16]
 800a904:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a908:	4826      	ldr	r0, [pc, #152]	; (800a9a4 <_svfiprintf_r+0x1f0>)
 800a90a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a90e:	2206      	movs	r2, #6
 800a910:	f7f5 fc36 	bl	8000180 <memchr>
 800a914:	2800      	cmp	r0, #0
 800a916:	d038      	beq.n	800a98a <_svfiprintf_r+0x1d6>
 800a918:	4b23      	ldr	r3, [pc, #140]	; (800a9a8 <_svfiprintf_r+0x1f4>)
 800a91a:	bb1b      	cbnz	r3, 800a964 <_svfiprintf_r+0x1b0>
 800a91c:	9b03      	ldr	r3, [sp, #12]
 800a91e:	3307      	adds	r3, #7
 800a920:	f023 0307 	bic.w	r3, r3, #7
 800a924:	3308      	adds	r3, #8
 800a926:	9303      	str	r3, [sp, #12]
 800a928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a92a:	4433      	add	r3, r6
 800a92c:	9309      	str	r3, [sp, #36]	; 0x24
 800a92e:	e768      	b.n	800a802 <_svfiprintf_r+0x4e>
 800a930:	fb0c 3202 	mla	r2, ip, r2, r3
 800a934:	460c      	mov	r4, r1
 800a936:	2001      	movs	r0, #1
 800a938:	e7a6      	b.n	800a888 <_svfiprintf_r+0xd4>
 800a93a:	2300      	movs	r3, #0
 800a93c:	3401      	adds	r4, #1
 800a93e:	9305      	str	r3, [sp, #20]
 800a940:	4619      	mov	r1, r3
 800a942:	f04f 0c0a 	mov.w	ip, #10
 800a946:	4620      	mov	r0, r4
 800a948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a94c:	3a30      	subs	r2, #48	; 0x30
 800a94e:	2a09      	cmp	r2, #9
 800a950:	d903      	bls.n	800a95a <_svfiprintf_r+0x1a6>
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0c6      	beq.n	800a8e4 <_svfiprintf_r+0x130>
 800a956:	9105      	str	r1, [sp, #20]
 800a958:	e7c4      	b.n	800a8e4 <_svfiprintf_r+0x130>
 800a95a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a95e:	4604      	mov	r4, r0
 800a960:	2301      	movs	r3, #1
 800a962:	e7f0      	b.n	800a946 <_svfiprintf_r+0x192>
 800a964:	ab03      	add	r3, sp, #12
 800a966:	9300      	str	r3, [sp, #0]
 800a968:	462a      	mov	r2, r5
 800a96a:	4b10      	ldr	r3, [pc, #64]	; (800a9ac <_svfiprintf_r+0x1f8>)
 800a96c:	a904      	add	r1, sp, #16
 800a96e:	4638      	mov	r0, r7
 800a970:	f3af 8000 	nop.w
 800a974:	1c42      	adds	r2, r0, #1
 800a976:	4606      	mov	r6, r0
 800a978:	d1d6      	bne.n	800a928 <_svfiprintf_r+0x174>
 800a97a:	89ab      	ldrh	r3, [r5, #12]
 800a97c:	065b      	lsls	r3, r3, #25
 800a97e:	f53f af2d 	bmi.w	800a7dc <_svfiprintf_r+0x28>
 800a982:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a984:	b01d      	add	sp, #116	; 0x74
 800a986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98a:	ab03      	add	r3, sp, #12
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	462a      	mov	r2, r5
 800a990:	4b06      	ldr	r3, [pc, #24]	; (800a9ac <_svfiprintf_r+0x1f8>)
 800a992:	a904      	add	r1, sp, #16
 800a994:	4638      	mov	r0, r7
 800a996:	f000 f919 	bl	800abcc <_printf_i>
 800a99a:	e7eb      	b.n	800a974 <_svfiprintf_r+0x1c0>
 800a99c:	0800b690 	.word	0x0800b690
 800a9a0:	0800b696 	.word	0x0800b696
 800a9a4:	0800b69a 	.word	0x0800b69a
 800a9a8:	00000000 	.word	0x00000000
 800a9ac:	0800a701 	.word	0x0800a701

0800a9b0 <sbrk_aligned>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	4e0e      	ldr	r6, [pc, #56]	; (800a9ec <sbrk_aligned+0x3c>)
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	6831      	ldr	r1, [r6, #0]
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	b911      	cbnz	r1, 800a9c2 <sbrk_aligned+0x12>
 800a9bc:	f000 fa7e 	bl	800aebc <_sbrk_r>
 800a9c0:	6030      	str	r0, [r6, #0]
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	f000 fa79 	bl	800aebc <_sbrk_r>
 800a9ca:	1c43      	adds	r3, r0, #1
 800a9cc:	d00a      	beq.n	800a9e4 <sbrk_aligned+0x34>
 800a9ce:	1cc4      	adds	r4, r0, #3
 800a9d0:	f024 0403 	bic.w	r4, r4, #3
 800a9d4:	42a0      	cmp	r0, r4
 800a9d6:	d007      	beq.n	800a9e8 <sbrk_aligned+0x38>
 800a9d8:	1a21      	subs	r1, r4, r0
 800a9da:	4628      	mov	r0, r5
 800a9dc:	f000 fa6e 	bl	800aebc <_sbrk_r>
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	d101      	bne.n	800a9e8 <sbrk_aligned+0x38>
 800a9e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}
 800a9ec:	200007e8 	.word	0x200007e8

0800a9f0 <_malloc_r>:
 800a9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9f4:	1ccd      	adds	r5, r1, #3
 800a9f6:	f025 0503 	bic.w	r5, r5, #3
 800a9fa:	3508      	adds	r5, #8
 800a9fc:	2d0c      	cmp	r5, #12
 800a9fe:	bf38      	it	cc
 800aa00:	250c      	movcc	r5, #12
 800aa02:	2d00      	cmp	r5, #0
 800aa04:	4607      	mov	r7, r0
 800aa06:	db01      	blt.n	800aa0c <_malloc_r+0x1c>
 800aa08:	42a9      	cmp	r1, r5
 800aa0a:	d905      	bls.n	800aa18 <_malloc_r+0x28>
 800aa0c:	230c      	movs	r3, #12
 800aa0e:	603b      	str	r3, [r7, #0]
 800aa10:	2600      	movs	r6, #0
 800aa12:	4630      	mov	r0, r6
 800aa14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aaec <_malloc_r+0xfc>
 800aa1c:	f000 f9f8 	bl	800ae10 <__malloc_lock>
 800aa20:	f8d8 3000 	ldr.w	r3, [r8]
 800aa24:	461c      	mov	r4, r3
 800aa26:	bb5c      	cbnz	r4, 800aa80 <_malloc_r+0x90>
 800aa28:	4629      	mov	r1, r5
 800aa2a:	4638      	mov	r0, r7
 800aa2c:	f7ff ffc0 	bl	800a9b0 <sbrk_aligned>
 800aa30:	1c43      	adds	r3, r0, #1
 800aa32:	4604      	mov	r4, r0
 800aa34:	d155      	bne.n	800aae2 <_malloc_r+0xf2>
 800aa36:	f8d8 4000 	ldr.w	r4, [r8]
 800aa3a:	4626      	mov	r6, r4
 800aa3c:	2e00      	cmp	r6, #0
 800aa3e:	d145      	bne.n	800aacc <_malloc_r+0xdc>
 800aa40:	2c00      	cmp	r4, #0
 800aa42:	d048      	beq.n	800aad6 <_malloc_r+0xe6>
 800aa44:	6823      	ldr	r3, [r4, #0]
 800aa46:	4631      	mov	r1, r6
 800aa48:	4638      	mov	r0, r7
 800aa4a:	eb04 0903 	add.w	r9, r4, r3
 800aa4e:	f000 fa35 	bl	800aebc <_sbrk_r>
 800aa52:	4581      	cmp	r9, r0
 800aa54:	d13f      	bne.n	800aad6 <_malloc_r+0xe6>
 800aa56:	6821      	ldr	r1, [r4, #0]
 800aa58:	1a6d      	subs	r5, r5, r1
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	4638      	mov	r0, r7
 800aa5e:	f7ff ffa7 	bl	800a9b0 <sbrk_aligned>
 800aa62:	3001      	adds	r0, #1
 800aa64:	d037      	beq.n	800aad6 <_malloc_r+0xe6>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	442b      	add	r3, r5
 800aa6a:	6023      	str	r3, [r4, #0]
 800aa6c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d038      	beq.n	800aae6 <_malloc_r+0xf6>
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	42a2      	cmp	r2, r4
 800aa78:	d12b      	bne.n	800aad2 <_malloc_r+0xe2>
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	605a      	str	r2, [r3, #4]
 800aa7e:	e00f      	b.n	800aaa0 <_malloc_r+0xb0>
 800aa80:	6822      	ldr	r2, [r4, #0]
 800aa82:	1b52      	subs	r2, r2, r5
 800aa84:	d41f      	bmi.n	800aac6 <_malloc_r+0xd6>
 800aa86:	2a0b      	cmp	r2, #11
 800aa88:	d917      	bls.n	800aaba <_malloc_r+0xca>
 800aa8a:	1961      	adds	r1, r4, r5
 800aa8c:	42a3      	cmp	r3, r4
 800aa8e:	6025      	str	r5, [r4, #0]
 800aa90:	bf18      	it	ne
 800aa92:	6059      	strne	r1, [r3, #4]
 800aa94:	6863      	ldr	r3, [r4, #4]
 800aa96:	bf08      	it	eq
 800aa98:	f8c8 1000 	streq.w	r1, [r8]
 800aa9c:	5162      	str	r2, [r4, r5]
 800aa9e:	604b      	str	r3, [r1, #4]
 800aaa0:	4638      	mov	r0, r7
 800aaa2:	f104 060b 	add.w	r6, r4, #11
 800aaa6:	f000 f9b9 	bl	800ae1c <__malloc_unlock>
 800aaaa:	f026 0607 	bic.w	r6, r6, #7
 800aaae:	1d23      	adds	r3, r4, #4
 800aab0:	1af2      	subs	r2, r6, r3
 800aab2:	d0ae      	beq.n	800aa12 <_malloc_r+0x22>
 800aab4:	1b9b      	subs	r3, r3, r6
 800aab6:	50a3      	str	r3, [r4, r2]
 800aab8:	e7ab      	b.n	800aa12 <_malloc_r+0x22>
 800aaba:	42a3      	cmp	r3, r4
 800aabc:	6862      	ldr	r2, [r4, #4]
 800aabe:	d1dd      	bne.n	800aa7c <_malloc_r+0x8c>
 800aac0:	f8c8 2000 	str.w	r2, [r8]
 800aac4:	e7ec      	b.n	800aaa0 <_malloc_r+0xb0>
 800aac6:	4623      	mov	r3, r4
 800aac8:	6864      	ldr	r4, [r4, #4]
 800aaca:	e7ac      	b.n	800aa26 <_malloc_r+0x36>
 800aacc:	4634      	mov	r4, r6
 800aace:	6876      	ldr	r6, [r6, #4]
 800aad0:	e7b4      	b.n	800aa3c <_malloc_r+0x4c>
 800aad2:	4613      	mov	r3, r2
 800aad4:	e7cc      	b.n	800aa70 <_malloc_r+0x80>
 800aad6:	230c      	movs	r3, #12
 800aad8:	603b      	str	r3, [r7, #0]
 800aada:	4638      	mov	r0, r7
 800aadc:	f000 f99e 	bl	800ae1c <__malloc_unlock>
 800aae0:	e797      	b.n	800aa12 <_malloc_r+0x22>
 800aae2:	6025      	str	r5, [r4, #0]
 800aae4:	e7dc      	b.n	800aaa0 <_malloc_r+0xb0>
 800aae6:	605b      	str	r3, [r3, #4]
 800aae8:	deff      	udf	#255	; 0xff
 800aaea:	bf00      	nop
 800aaec:	200007e4 	.word	0x200007e4

0800aaf0 <_printf_common>:
 800aaf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf4:	4616      	mov	r6, r2
 800aaf6:	4699      	mov	r9, r3
 800aaf8:	688a      	ldr	r2, [r1, #8]
 800aafa:	690b      	ldr	r3, [r1, #16]
 800aafc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab00:	4293      	cmp	r3, r2
 800ab02:	bfb8      	it	lt
 800ab04:	4613      	movlt	r3, r2
 800ab06:	6033      	str	r3, [r6, #0]
 800ab08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab0c:	4607      	mov	r7, r0
 800ab0e:	460c      	mov	r4, r1
 800ab10:	b10a      	cbz	r2, 800ab16 <_printf_common+0x26>
 800ab12:	3301      	adds	r3, #1
 800ab14:	6033      	str	r3, [r6, #0]
 800ab16:	6823      	ldr	r3, [r4, #0]
 800ab18:	0699      	lsls	r1, r3, #26
 800ab1a:	bf42      	ittt	mi
 800ab1c:	6833      	ldrmi	r3, [r6, #0]
 800ab1e:	3302      	addmi	r3, #2
 800ab20:	6033      	strmi	r3, [r6, #0]
 800ab22:	6825      	ldr	r5, [r4, #0]
 800ab24:	f015 0506 	ands.w	r5, r5, #6
 800ab28:	d106      	bne.n	800ab38 <_printf_common+0x48>
 800ab2a:	f104 0a19 	add.w	sl, r4, #25
 800ab2e:	68e3      	ldr	r3, [r4, #12]
 800ab30:	6832      	ldr	r2, [r6, #0]
 800ab32:	1a9b      	subs	r3, r3, r2
 800ab34:	42ab      	cmp	r3, r5
 800ab36:	dc26      	bgt.n	800ab86 <_printf_common+0x96>
 800ab38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab3c:	1e13      	subs	r3, r2, #0
 800ab3e:	6822      	ldr	r2, [r4, #0]
 800ab40:	bf18      	it	ne
 800ab42:	2301      	movne	r3, #1
 800ab44:	0692      	lsls	r2, r2, #26
 800ab46:	d42b      	bmi.n	800aba0 <_printf_common+0xb0>
 800ab48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab4c:	4649      	mov	r1, r9
 800ab4e:	4638      	mov	r0, r7
 800ab50:	47c0      	blx	r8
 800ab52:	3001      	adds	r0, #1
 800ab54:	d01e      	beq.n	800ab94 <_printf_common+0xa4>
 800ab56:	6823      	ldr	r3, [r4, #0]
 800ab58:	6922      	ldr	r2, [r4, #16]
 800ab5a:	f003 0306 	and.w	r3, r3, #6
 800ab5e:	2b04      	cmp	r3, #4
 800ab60:	bf02      	ittt	eq
 800ab62:	68e5      	ldreq	r5, [r4, #12]
 800ab64:	6833      	ldreq	r3, [r6, #0]
 800ab66:	1aed      	subeq	r5, r5, r3
 800ab68:	68a3      	ldr	r3, [r4, #8]
 800ab6a:	bf0c      	ite	eq
 800ab6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab70:	2500      	movne	r5, #0
 800ab72:	4293      	cmp	r3, r2
 800ab74:	bfc4      	itt	gt
 800ab76:	1a9b      	subgt	r3, r3, r2
 800ab78:	18ed      	addgt	r5, r5, r3
 800ab7a:	2600      	movs	r6, #0
 800ab7c:	341a      	adds	r4, #26
 800ab7e:	42b5      	cmp	r5, r6
 800ab80:	d11a      	bne.n	800abb8 <_printf_common+0xc8>
 800ab82:	2000      	movs	r0, #0
 800ab84:	e008      	b.n	800ab98 <_printf_common+0xa8>
 800ab86:	2301      	movs	r3, #1
 800ab88:	4652      	mov	r2, sl
 800ab8a:	4649      	mov	r1, r9
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	47c0      	blx	r8
 800ab90:	3001      	adds	r0, #1
 800ab92:	d103      	bne.n	800ab9c <_printf_common+0xac>
 800ab94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab9c:	3501      	adds	r5, #1
 800ab9e:	e7c6      	b.n	800ab2e <_printf_common+0x3e>
 800aba0:	18e1      	adds	r1, r4, r3
 800aba2:	1c5a      	adds	r2, r3, #1
 800aba4:	2030      	movs	r0, #48	; 0x30
 800aba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abaa:	4422      	add	r2, r4
 800abac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abb4:	3302      	adds	r3, #2
 800abb6:	e7c7      	b.n	800ab48 <_printf_common+0x58>
 800abb8:	2301      	movs	r3, #1
 800abba:	4622      	mov	r2, r4
 800abbc:	4649      	mov	r1, r9
 800abbe:	4638      	mov	r0, r7
 800abc0:	47c0      	blx	r8
 800abc2:	3001      	adds	r0, #1
 800abc4:	d0e6      	beq.n	800ab94 <_printf_common+0xa4>
 800abc6:	3601      	adds	r6, #1
 800abc8:	e7d9      	b.n	800ab7e <_printf_common+0x8e>
	...

0800abcc <_printf_i>:
 800abcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abd0:	7e0f      	ldrb	r7, [r1, #24]
 800abd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abd4:	2f78      	cmp	r7, #120	; 0x78
 800abd6:	4691      	mov	r9, r2
 800abd8:	4680      	mov	r8, r0
 800abda:	460c      	mov	r4, r1
 800abdc:	469a      	mov	sl, r3
 800abde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abe2:	d807      	bhi.n	800abf4 <_printf_i+0x28>
 800abe4:	2f62      	cmp	r7, #98	; 0x62
 800abe6:	d80a      	bhi.n	800abfe <_printf_i+0x32>
 800abe8:	2f00      	cmp	r7, #0
 800abea:	f000 80d4 	beq.w	800ad96 <_printf_i+0x1ca>
 800abee:	2f58      	cmp	r7, #88	; 0x58
 800abf0:	f000 80c0 	beq.w	800ad74 <_printf_i+0x1a8>
 800abf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abfc:	e03a      	b.n	800ac74 <_printf_i+0xa8>
 800abfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac02:	2b15      	cmp	r3, #21
 800ac04:	d8f6      	bhi.n	800abf4 <_printf_i+0x28>
 800ac06:	a101      	add	r1, pc, #4	; (adr r1, 800ac0c <_printf_i+0x40>)
 800ac08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac0c:	0800ac65 	.word	0x0800ac65
 800ac10:	0800ac79 	.word	0x0800ac79
 800ac14:	0800abf5 	.word	0x0800abf5
 800ac18:	0800abf5 	.word	0x0800abf5
 800ac1c:	0800abf5 	.word	0x0800abf5
 800ac20:	0800abf5 	.word	0x0800abf5
 800ac24:	0800ac79 	.word	0x0800ac79
 800ac28:	0800abf5 	.word	0x0800abf5
 800ac2c:	0800abf5 	.word	0x0800abf5
 800ac30:	0800abf5 	.word	0x0800abf5
 800ac34:	0800abf5 	.word	0x0800abf5
 800ac38:	0800ad7d 	.word	0x0800ad7d
 800ac3c:	0800aca5 	.word	0x0800aca5
 800ac40:	0800ad37 	.word	0x0800ad37
 800ac44:	0800abf5 	.word	0x0800abf5
 800ac48:	0800abf5 	.word	0x0800abf5
 800ac4c:	0800ad9f 	.word	0x0800ad9f
 800ac50:	0800abf5 	.word	0x0800abf5
 800ac54:	0800aca5 	.word	0x0800aca5
 800ac58:	0800abf5 	.word	0x0800abf5
 800ac5c:	0800abf5 	.word	0x0800abf5
 800ac60:	0800ad3f 	.word	0x0800ad3f
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	1d1a      	adds	r2, r3, #4
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	602a      	str	r2, [r5, #0]
 800ac6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac74:	2301      	movs	r3, #1
 800ac76:	e09f      	b.n	800adb8 <_printf_i+0x1ec>
 800ac78:	6820      	ldr	r0, [r4, #0]
 800ac7a:	682b      	ldr	r3, [r5, #0]
 800ac7c:	0607      	lsls	r7, r0, #24
 800ac7e:	f103 0104 	add.w	r1, r3, #4
 800ac82:	6029      	str	r1, [r5, #0]
 800ac84:	d501      	bpl.n	800ac8a <_printf_i+0xbe>
 800ac86:	681e      	ldr	r6, [r3, #0]
 800ac88:	e003      	b.n	800ac92 <_printf_i+0xc6>
 800ac8a:	0646      	lsls	r6, r0, #25
 800ac8c:	d5fb      	bpl.n	800ac86 <_printf_i+0xba>
 800ac8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ac92:	2e00      	cmp	r6, #0
 800ac94:	da03      	bge.n	800ac9e <_printf_i+0xd2>
 800ac96:	232d      	movs	r3, #45	; 0x2d
 800ac98:	4276      	negs	r6, r6
 800ac9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac9e:	485a      	ldr	r0, [pc, #360]	; (800ae08 <_printf_i+0x23c>)
 800aca0:	230a      	movs	r3, #10
 800aca2:	e012      	b.n	800acca <_printf_i+0xfe>
 800aca4:	682b      	ldr	r3, [r5, #0]
 800aca6:	6820      	ldr	r0, [r4, #0]
 800aca8:	1d19      	adds	r1, r3, #4
 800acaa:	6029      	str	r1, [r5, #0]
 800acac:	0605      	lsls	r5, r0, #24
 800acae:	d501      	bpl.n	800acb4 <_printf_i+0xe8>
 800acb0:	681e      	ldr	r6, [r3, #0]
 800acb2:	e002      	b.n	800acba <_printf_i+0xee>
 800acb4:	0641      	lsls	r1, r0, #25
 800acb6:	d5fb      	bpl.n	800acb0 <_printf_i+0xe4>
 800acb8:	881e      	ldrh	r6, [r3, #0]
 800acba:	4853      	ldr	r0, [pc, #332]	; (800ae08 <_printf_i+0x23c>)
 800acbc:	2f6f      	cmp	r7, #111	; 0x6f
 800acbe:	bf0c      	ite	eq
 800acc0:	2308      	moveq	r3, #8
 800acc2:	230a      	movne	r3, #10
 800acc4:	2100      	movs	r1, #0
 800acc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acca:	6865      	ldr	r5, [r4, #4]
 800accc:	60a5      	str	r5, [r4, #8]
 800acce:	2d00      	cmp	r5, #0
 800acd0:	bfa2      	ittt	ge
 800acd2:	6821      	ldrge	r1, [r4, #0]
 800acd4:	f021 0104 	bicge.w	r1, r1, #4
 800acd8:	6021      	strge	r1, [r4, #0]
 800acda:	b90e      	cbnz	r6, 800ace0 <_printf_i+0x114>
 800acdc:	2d00      	cmp	r5, #0
 800acde:	d04b      	beq.n	800ad78 <_printf_i+0x1ac>
 800ace0:	4615      	mov	r5, r2
 800ace2:	fbb6 f1f3 	udiv	r1, r6, r3
 800ace6:	fb03 6711 	mls	r7, r3, r1, r6
 800acea:	5dc7      	ldrb	r7, [r0, r7]
 800acec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acf0:	4637      	mov	r7, r6
 800acf2:	42bb      	cmp	r3, r7
 800acf4:	460e      	mov	r6, r1
 800acf6:	d9f4      	bls.n	800ace2 <_printf_i+0x116>
 800acf8:	2b08      	cmp	r3, #8
 800acfa:	d10b      	bne.n	800ad14 <_printf_i+0x148>
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	07de      	lsls	r6, r3, #31
 800ad00:	d508      	bpl.n	800ad14 <_printf_i+0x148>
 800ad02:	6923      	ldr	r3, [r4, #16]
 800ad04:	6861      	ldr	r1, [r4, #4]
 800ad06:	4299      	cmp	r1, r3
 800ad08:	bfde      	ittt	le
 800ad0a:	2330      	movle	r3, #48	; 0x30
 800ad0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ad14:	1b52      	subs	r2, r2, r5
 800ad16:	6122      	str	r2, [r4, #16]
 800ad18:	f8cd a000 	str.w	sl, [sp]
 800ad1c:	464b      	mov	r3, r9
 800ad1e:	aa03      	add	r2, sp, #12
 800ad20:	4621      	mov	r1, r4
 800ad22:	4640      	mov	r0, r8
 800ad24:	f7ff fee4 	bl	800aaf0 <_printf_common>
 800ad28:	3001      	adds	r0, #1
 800ad2a:	d14a      	bne.n	800adc2 <_printf_i+0x1f6>
 800ad2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad30:	b004      	add	sp, #16
 800ad32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad36:	6823      	ldr	r3, [r4, #0]
 800ad38:	f043 0320 	orr.w	r3, r3, #32
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	4833      	ldr	r0, [pc, #204]	; (800ae0c <_printf_i+0x240>)
 800ad40:	2778      	movs	r7, #120	; 0x78
 800ad42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	6829      	ldr	r1, [r5, #0]
 800ad4a:	061f      	lsls	r7, r3, #24
 800ad4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad50:	d402      	bmi.n	800ad58 <_printf_i+0x18c>
 800ad52:	065f      	lsls	r7, r3, #25
 800ad54:	bf48      	it	mi
 800ad56:	b2b6      	uxthmi	r6, r6
 800ad58:	07df      	lsls	r7, r3, #31
 800ad5a:	bf48      	it	mi
 800ad5c:	f043 0320 	orrmi.w	r3, r3, #32
 800ad60:	6029      	str	r1, [r5, #0]
 800ad62:	bf48      	it	mi
 800ad64:	6023      	strmi	r3, [r4, #0]
 800ad66:	b91e      	cbnz	r6, 800ad70 <_printf_i+0x1a4>
 800ad68:	6823      	ldr	r3, [r4, #0]
 800ad6a:	f023 0320 	bic.w	r3, r3, #32
 800ad6e:	6023      	str	r3, [r4, #0]
 800ad70:	2310      	movs	r3, #16
 800ad72:	e7a7      	b.n	800acc4 <_printf_i+0xf8>
 800ad74:	4824      	ldr	r0, [pc, #144]	; (800ae08 <_printf_i+0x23c>)
 800ad76:	e7e4      	b.n	800ad42 <_printf_i+0x176>
 800ad78:	4615      	mov	r5, r2
 800ad7a:	e7bd      	b.n	800acf8 <_printf_i+0x12c>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	6826      	ldr	r6, [r4, #0]
 800ad80:	6961      	ldr	r1, [r4, #20]
 800ad82:	1d18      	adds	r0, r3, #4
 800ad84:	6028      	str	r0, [r5, #0]
 800ad86:	0635      	lsls	r5, r6, #24
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	d501      	bpl.n	800ad90 <_printf_i+0x1c4>
 800ad8c:	6019      	str	r1, [r3, #0]
 800ad8e:	e002      	b.n	800ad96 <_printf_i+0x1ca>
 800ad90:	0670      	lsls	r0, r6, #25
 800ad92:	d5fb      	bpl.n	800ad8c <_printf_i+0x1c0>
 800ad94:	8019      	strh	r1, [r3, #0]
 800ad96:	2300      	movs	r3, #0
 800ad98:	6123      	str	r3, [r4, #16]
 800ad9a:	4615      	mov	r5, r2
 800ad9c:	e7bc      	b.n	800ad18 <_printf_i+0x14c>
 800ad9e:	682b      	ldr	r3, [r5, #0]
 800ada0:	1d1a      	adds	r2, r3, #4
 800ada2:	602a      	str	r2, [r5, #0]
 800ada4:	681d      	ldr	r5, [r3, #0]
 800ada6:	6862      	ldr	r2, [r4, #4]
 800ada8:	2100      	movs	r1, #0
 800adaa:	4628      	mov	r0, r5
 800adac:	f7f5 f9e8 	bl	8000180 <memchr>
 800adb0:	b108      	cbz	r0, 800adb6 <_printf_i+0x1ea>
 800adb2:	1b40      	subs	r0, r0, r5
 800adb4:	6060      	str	r0, [r4, #4]
 800adb6:	6863      	ldr	r3, [r4, #4]
 800adb8:	6123      	str	r3, [r4, #16]
 800adba:	2300      	movs	r3, #0
 800adbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adc0:	e7aa      	b.n	800ad18 <_printf_i+0x14c>
 800adc2:	6923      	ldr	r3, [r4, #16]
 800adc4:	462a      	mov	r2, r5
 800adc6:	4649      	mov	r1, r9
 800adc8:	4640      	mov	r0, r8
 800adca:	47d0      	blx	sl
 800adcc:	3001      	adds	r0, #1
 800adce:	d0ad      	beq.n	800ad2c <_printf_i+0x160>
 800add0:	6823      	ldr	r3, [r4, #0]
 800add2:	079b      	lsls	r3, r3, #30
 800add4:	d413      	bmi.n	800adfe <_printf_i+0x232>
 800add6:	68e0      	ldr	r0, [r4, #12]
 800add8:	9b03      	ldr	r3, [sp, #12]
 800adda:	4298      	cmp	r0, r3
 800addc:	bfb8      	it	lt
 800adde:	4618      	movlt	r0, r3
 800ade0:	e7a6      	b.n	800ad30 <_printf_i+0x164>
 800ade2:	2301      	movs	r3, #1
 800ade4:	4632      	mov	r2, r6
 800ade6:	4649      	mov	r1, r9
 800ade8:	4640      	mov	r0, r8
 800adea:	47d0      	blx	sl
 800adec:	3001      	adds	r0, #1
 800adee:	d09d      	beq.n	800ad2c <_printf_i+0x160>
 800adf0:	3501      	adds	r5, #1
 800adf2:	68e3      	ldr	r3, [r4, #12]
 800adf4:	9903      	ldr	r1, [sp, #12]
 800adf6:	1a5b      	subs	r3, r3, r1
 800adf8:	42ab      	cmp	r3, r5
 800adfa:	dcf2      	bgt.n	800ade2 <_printf_i+0x216>
 800adfc:	e7eb      	b.n	800add6 <_printf_i+0x20a>
 800adfe:	2500      	movs	r5, #0
 800ae00:	f104 0619 	add.w	r6, r4, #25
 800ae04:	e7f5      	b.n	800adf2 <_printf_i+0x226>
 800ae06:	bf00      	nop
 800ae08:	0800b6a1 	.word	0x0800b6a1
 800ae0c:	0800b6b2 	.word	0x0800b6b2

0800ae10 <__malloc_lock>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__malloc_lock+0x8>)
 800ae12:	f7ff bc65 	b.w	800a6e0 <__retarget_lock_acquire_recursive>
 800ae16:	bf00      	nop
 800ae18:	200007e0 	.word	0x200007e0

0800ae1c <__malloc_unlock>:
 800ae1c:	4801      	ldr	r0, [pc, #4]	; (800ae24 <__malloc_unlock+0x8>)
 800ae1e:	f7ff bc60 	b.w	800a6e2 <__retarget_lock_release_recursive>
 800ae22:	bf00      	nop
 800ae24:	200007e0 	.word	0x200007e0

0800ae28 <_realloc_r>:
 800ae28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae2c:	4680      	mov	r8, r0
 800ae2e:	4614      	mov	r4, r2
 800ae30:	460e      	mov	r6, r1
 800ae32:	b921      	cbnz	r1, 800ae3e <_realloc_r+0x16>
 800ae34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae38:	4611      	mov	r1, r2
 800ae3a:	f7ff bdd9 	b.w	800a9f0 <_malloc_r>
 800ae3e:	b92a      	cbnz	r2, 800ae4c <_realloc_r+0x24>
 800ae40:	f000 f84c 	bl	800aedc <_free_r>
 800ae44:	4625      	mov	r5, r4
 800ae46:	4628      	mov	r0, r5
 800ae48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae4c:	f000 f890 	bl	800af70 <_malloc_usable_size_r>
 800ae50:	4284      	cmp	r4, r0
 800ae52:	4607      	mov	r7, r0
 800ae54:	d802      	bhi.n	800ae5c <_realloc_r+0x34>
 800ae56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae5a:	d812      	bhi.n	800ae82 <_realloc_r+0x5a>
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	4640      	mov	r0, r8
 800ae60:	f7ff fdc6 	bl	800a9f0 <_malloc_r>
 800ae64:	4605      	mov	r5, r0
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d0ed      	beq.n	800ae46 <_realloc_r+0x1e>
 800ae6a:	42bc      	cmp	r4, r7
 800ae6c:	4622      	mov	r2, r4
 800ae6e:	4631      	mov	r1, r6
 800ae70:	bf28      	it	cs
 800ae72:	463a      	movcs	r2, r7
 800ae74:	f7ff fc36 	bl	800a6e4 <memcpy>
 800ae78:	4631      	mov	r1, r6
 800ae7a:	4640      	mov	r0, r8
 800ae7c:	f000 f82e 	bl	800aedc <_free_r>
 800ae80:	e7e1      	b.n	800ae46 <_realloc_r+0x1e>
 800ae82:	4635      	mov	r5, r6
 800ae84:	e7df      	b.n	800ae46 <_realloc_r+0x1e>

0800ae86 <memmove>:
 800ae86:	4288      	cmp	r0, r1
 800ae88:	b510      	push	{r4, lr}
 800ae8a:	eb01 0402 	add.w	r4, r1, r2
 800ae8e:	d902      	bls.n	800ae96 <memmove+0x10>
 800ae90:	4284      	cmp	r4, r0
 800ae92:	4623      	mov	r3, r4
 800ae94:	d807      	bhi.n	800aea6 <memmove+0x20>
 800ae96:	1e43      	subs	r3, r0, #1
 800ae98:	42a1      	cmp	r1, r4
 800ae9a:	d008      	beq.n	800aeae <memmove+0x28>
 800ae9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aea0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aea4:	e7f8      	b.n	800ae98 <memmove+0x12>
 800aea6:	4402      	add	r2, r0
 800aea8:	4601      	mov	r1, r0
 800aeaa:	428a      	cmp	r2, r1
 800aeac:	d100      	bne.n	800aeb0 <memmove+0x2a>
 800aeae:	bd10      	pop	{r4, pc}
 800aeb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aeb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aeb8:	e7f7      	b.n	800aeaa <memmove+0x24>
	...

0800aebc <_sbrk_r>:
 800aebc:	b538      	push	{r3, r4, r5, lr}
 800aebe:	4d06      	ldr	r5, [pc, #24]	; (800aed8 <_sbrk_r+0x1c>)
 800aec0:	2300      	movs	r3, #0
 800aec2:	4604      	mov	r4, r0
 800aec4:	4608      	mov	r0, r1
 800aec6:	602b      	str	r3, [r5, #0]
 800aec8:	f7f6 fcca 	bl	8001860 <_sbrk>
 800aecc:	1c43      	adds	r3, r0, #1
 800aece:	d102      	bne.n	800aed6 <_sbrk_r+0x1a>
 800aed0:	682b      	ldr	r3, [r5, #0]
 800aed2:	b103      	cbz	r3, 800aed6 <_sbrk_r+0x1a>
 800aed4:	6023      	str	r3, [r4, #0]
 800aed6:	bd38      	pop	{r3, r4, r5, pc}
 800aed8:	200007ec 	.word	0x200007ec

0800aedc <_free_r>:
 800aedc:	b538      	push	{r3, r4, r5, lr}
 800aede:	4605      	mov	r5, r0
 800aee0:	2900      	cmp	r1, #0
 800aee2:	d041      	beq.n	800af68 <_free_r+0x8c>
 800aee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aee8:	1f0c      	subs	r4, r1, #4
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	bfb8      	it	lt
 800aeee:	18e4      	addlt	r4, r4, r3
 800aef0:	f7ff ff8e 	bl	800ae10 <__malloc_lock>
 800aef4:	4a1d      	ldr	r2, [pc, #116]	; (800af6c <_free_r+0x90>)
 800aef6:	6813      	ldr	r3, [r2, #0]
 800aef8:	b933      	cbnz	r3, 800af08 <_free_r+0x2c>
 800aefa:	6063      	str	r3, [r4, #4]
 800aefc:	6014      	str	r4, [r2, #0]
 800aefe:	4628      	mov	r0, r5
 800af00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af04:	f7ff bf8a 	b.w	800ae1c <__malloc_unlock>
 800af08:	42a3      	cmp	r3, r4
 800af0a:	d908      	bls.n	800af1e <_free_r+0x42>
 800af0c:	6820      	ldr	r0, [r4, #0]
 800af0e:	1821      	adds	r1, r4, r0
 800af10:	428b      	cmp	r3, r1
 800af12:	bf01      	itttt	eq
 800af14:	6819      	ldreq	r1, [r3, #0]
 800af16:	685b      	ldreq	r3, [r3, #4]
 800af18:	1809      	addeq	r1, r1, r0
 800af1a:	6021      	streq	r1, [r4, #0]
 800af1c:	e7ed      	b.n	800aefa <_free_r+0x1e>
 800af1e:	461a      	mov	r2, r3
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	b10b      	cbz	r3, 800af28 <_free_r+0x4c>
 800af24:	42a3      	cmp	r3, r4
 800af26:	d9fa      	bls.n	800af1e <_free_r+0x42>
 800af28:	6811      	ldr	r1, [r2, #0]
 800af2a:	1850      	adds	r0, r2, r1
 800af2c:	42a0      	cmp	r0, r4
 800af2e:	d10b      	bne.n	800af48 <_free_r+0x6c>
 800af30:	6820      	ldr	r0, [r4, #0]
 800af32:	4401      	add	r1, r0
 800af34:	1850      	adds	r0, r2, r1
 800af36:	4283      	cmp	r3, r0
 800af38:	6011      	str	r1, [r2, #0]
 800af3a:	d1e0      	bne.n	800aefe <_free_r+0x22>
 800af3c:	6818      	ldr	r0, [r3, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	6053      	str	r3, [r2, #4]
 800af42:	4408      	add	r0, r1
 800af44:	6010      	str	r0, [r2, #0]
 800af46:	e7da      	b.n	800aefe <_free_r+0x22>
 800af48:	d902      	bls.n	800af50 <_free_r+0x74>
 800af4a:	230c      	movs	r3, #12
 800af4c:	602b      	str	r3, [r5, #0]
 800af4e:	e7d6      	b.n	800aefe <_free_r+0x22>
 800af50:	6820      	ldr	r0, [r4, #0]
 800af52:	1821      	adds	r1, r4, r0
 800af54:	428b      	cmp	r3, r1
 800af56:	bf04      	itt	eq
 800af58:	6819      	ldreq	r1, [r3, #0]
 800af5a:	685b      	ldreq	r3, [r3, #4]
 800af5c:	6063      	str	r3, [r4, #4]
 800af5e:	bf04      	itt	eq
 800af60:	1809      	addeq	r1, r1, r0
 800af62:	6021      	streq	r1, [r4, #0]
 800af64:	6054      	str	r4, [r2, #4]
 800af66:	e7ca      	b.n	800aefe <_free_r+0x22>
 800af68:	bd38      	pop	{r3, r4, r5, pc}
 800af6a:	bf00      	nop
 800af6c:	200007e4 	.word	0x200007e4

0800af70 <_malloc_usable_size_r>:
 800af70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af74:	1f18      	subs	r0, r3, #4
 800af76:	2b00      	cmp	r3, #0
 800af78:	bfbc      	itt	lt
 800af7a:	580b      	ldrlt	r3, [r1, r0]
 800af7c:	18c0      	addlt	r0, r0, r3
 800af7e:	4770      	bx	lr

0800af80 <_init>:
 800af80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af82:	bf00      	nop
 800af84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af86:	bc08      	pop	{r3}
 800af88:	469e      	mov	lr, r3
 800af8a:	4770      	bx	lr

0800af8c <_fini>:
 800af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8e:	bf00      	nop
 800af90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af92:	bc08      	pop	{r3}
 800af94:	469e      	mov	lr, r3
 800af96:	4770      	bx	lr
